
littlefs-redefined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f14  08012680  08012680  00022680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013594  08013594  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013594  08013594  00023594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801359c  0801359c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801359c  0801359c  0002359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135a0  080135a0  000235a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080135a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          000020f4  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200022dc  200022dc  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cbdd  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000544e  00000000  00000000  0005cdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  00062240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  000641b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007fc4  00000000  00000000  000661d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277e0  00000000  00000000  0006e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc69  00000000  00000000  0009597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001855e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000091dc  00000000  00000000  00185638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012668 	.word	0x08012668

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	08012668 	.word	0x08012668

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b982 	b.w	80005dc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f81a 	bl	8000318 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__popcountsi2>:
 80002f0:	0843      	lsrs	r3, r0, #1
 80002f2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002fe:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000302:	4418      	add	r0, r3
 8000304:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000308:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800030c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000310:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000314:	0e00      	lsrs	r0, r0, #24
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468c      	mov	ip, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8083 	bne.w	800042e <__udivmoddi4+0x116>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d947      	bls.n	80003be <__udivmoddi4+0xa6>
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	b142      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000334:	f1c2 0020 	rsb	r0, r2, #32
 8000338:	fa24 f000 	lsr.w	r0, r4, r0
 800033c:	4091      	lsls	r1, r2
 800033e:	4097      	lsls	r7, r2
 8000340:	ea40 0c01 	orr.w	ip, r0, r1
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbbc f6f8 	udiv	r6, ip, r8
 8000350:	fa1f fe87 	uxth.w	lr, r7
 8000354:	fb08 c116 	mls	r1, r8, r6, ip
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb06 f10e 	mul.w	r1, r6, lr
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f106 30ff 	add.w	r0, r6, #4294967295
 800036a:	f080 8119 	bcs.w	80005a0 <__udivmoddi4+0x288>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8116 	bls.w	80005a0 <__udivmoddi4+0x288>
 8000374:	3e02      	subs	r6, #2
 8000376:	443b      	add	r3, r7
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	45a6      	cmp	lr, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8105 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8102 	bls.w	80005a4 <__udivmoddi4+0x28c>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	2600      	movs	r6, #0
 80003ae:	b11d      	cbz	r5, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c5 4300 	strd	r4, r3, [r5]
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xaa>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d150      	bne.n	800046c <__udivmoddi4+0x154>
 80003ca:	1bcb      	subs	r3, r1, r7
 80003cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	2601      	movs	r6, #1
 80003d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003da:	0c21      	lsrs	r1, r4, #16
 80003dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb08 f30c 	mul.w	r3, r8, ip
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0xe4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0xe2>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	f200 80e9 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 80003fa:	4684      	mov	ip, r0
 80003fc:	1ac9      	subs	r1, r1, r3
 80003fe:	b2a3      	uxth	r3, r4
 8000400:	fbb1 f0fe 	udiv	r0, r1, lr
 8000404:	fb0e 1110 	mls	r1, lr, r0, r1
 8000408:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800040c:	fb08 f800 	mul.w	r8, r8, r0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x10c>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f100 33ff 	add.w	r3, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x10a>
 800041c:	45a0      	cmp	r8, r4
 800041e:	f200 80d9 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 8000422:	4618      	mov	r0, r3
 8000424:	eba4 0408 	sub.w	r4, r4, r8
 8000428:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800042c:	e7bf      	b.n	80003ae <__udivmoddi4+0x96>
 800042e:	428b      	cmp	r3, r1
 8000430:	d909      	bls.n	8000446 <__udivmoddi4+0x12e>
 8000432:	2d00      	cmp	r5, #0
 8000434:	f000 80b1 	beq.w	800059a <__udivmoddi4+0x282>
 8000438:	2600      	movs	r6, #0
 800043a:	e9c5 0100 	strd	r0, r1, [r5]
 800043e:	4630      	mov	r0, r6
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	fab3 f683 	clz	r6, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d14a      	bne.n	80004e4 <__udivmoddi4+0x1cc>
 800044e:	428b      	cmp	r3, r1
 8000450:	d302      	bcc.n	8000458 <__udivmoddi4+0x140>
 8000452:	4282      	cmp	r2, r0
 8000454:	f200 80b8 	bhi.w	80005c8 <__udivmoddi4+0x2b0>
 8000458:	1a84      	subs	r4, r0, r2
 800045a:	eb61 0103 	sbc.w	r1, r1, r3
 800045e:	2001      	movs	r0, #1
 8000460:	468c      	mov	ip, r1
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0a8      	beq.n	80003b8 <__udivmoddi4+0xa0>
 8000466:	e9c5 4c00 	strd	r4, ip, [r5]
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f603 	lsr.w	r6, r0, r3
 8000474:	4097      	lsls	r7, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047e:	40d9      	lsrs	r1, r3
 8000480:	4330      	orrs	r0, r6
 8000482:	0c03      	lsrs	r3, r0, #16
 8000484:	fbb1 f6fe 	udiv	r6, r1, lr
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000494:	fb06 f108 	mul.w	r1, r6, r8
 8000498:	4299      	cmp	r1, r3
 800049a:	fa04 f402 	lsl.w	r4, r4, r2
 800049e:	d909      	bls.n	80004b4 <__udivmoddi4+0x19c>
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80004a6:	f080 808d 	bcs.w	80005c4 <__udivmoddi4+0x2ac>
 80004aa:	4299      	cmp	r1, r3
 80004ac:	f240 808a 	bls.w	80005c4 <__udivmoddi4+0x2ac>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	443b      	add	r3, r7
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b281      	uxth	r1, r0
 80004b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c4:	fb00 f308 	mul.w	r3, r0, r8
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x1c4>
 80004cc:	1879      	adds	r1, r7, r1
 80004ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d2:	d273      	bcs.n	80005bc <__udivmoddi4+0x2a4>
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d971      	bls.n	80005bc <__udivmoddi4+0x2a4>
 80004d8:	3802      	subs	r0, #2
 80004da:	4439      	add	r1, r7
 80004dc:	1acb      	subs	r3, r1, r3
 80004de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e2:	e778      	b.n	80003d6 <__udivmoddi4+0xbe>
 80004e4:	f1c6 0c20 	rsb	ip, r6, #32
 80004e8:	fa03 f406 	lsl.w	r4, r3, r6
 80004ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f0:	431c      	orrs	r4, r3
 80004f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004f6:	fa01 f306 	lsl.w	r3, r1, r6
 80004fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000502:	431f      	orrs	r7, r3
 8000504:	0c3b      	lsrs	r3, r7, #16
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fa1f f884 	uxth.w	r8, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000516:	fb09 fa08 	mul.w	sl, r9, r8
 800051a:	458a      	cmp	sl, r1
 800051c:	fa02 f206 	lsl.w	r2, r2, r6
 8000520:	fa00 f306 	lsl.w	r3, r0, r6
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x220>
 8000526:	1861      	adds	r1, r4, r1
 8000528:	f109 30ff 	add.w	r0, r9, #4294967295
 800052c:	d248      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 800052e:	458a      	cmp	sl, r1
 8000530:	d946      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000532:	f1a9 0902 	sub.w	r9, r9, #2
 8000536:	4421      	add	r1, r4
 8000538:	eba1 010a 	sub.w	r1, r1, sl
 800053c:	b2bf      	uxth	r7, r7
 800053e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000542:	fb0e 1110 	mls	r1, lr, r0, r1
 8000546:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054a:	fb00 f808 	mul.w	r8, r0, r8
 800054e:	45b8      	cmp	r8, r7
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x24a>
 8000552:	19e7      	adds	r7, r4, r7
 8000554:	f100 31ff 	add.w	r1, r0, #4294967295
 8000558:	d22e      	bcs.n	80005b8 <__udivmoddi4+0x2a0>
 800055a:	45b8      	cmp	r8, r7
 800055c:	d92c      	bls.n	80005b8 <__udivmoddi4+0x2a0>
 800055e:	3802      	subs	r0, #2
 8000560:	4427      	add	r7, r4
 8000562:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000566:	eba7 0708 	sub.w	r7, r7, r8
 800056a:	fba0 8902 	umull	r8, r9, r0, r2
 800056e:	454f      	cmp	r7, r9
 8000570:	46c6      	mov	lr, r8
 8000572:	4649      	mov	r1, r9
 8000574:	d31a      	bcc.n	80005ac <__udivmoddi4+0x294>
 8000576:	d017      	beq.n	80005a8 <__udivmoddi4+0x290>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x27a>
 800057a:	ebb3 020e 	subs.w	r2, r3, lr
 800057e:	eb67 0701 	sbc.w	r7, r7, r1
 8000582:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000586:	40f2      	lsrs	r2, r6
 8000588:	ea4c 0202 	orr.w	r2, ip, r2
 800058c:	40f7      	lsrs	r7, r6
 800058e:	e9c5 2700 	strd	r2, r7, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e70b      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e9      	b.n	8000378 <__udivmoddi4+0x60>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6fd      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005a8:	4543      	cmp	r3, r8
 80005aa:	d2e5      	bcs.n	8000578 <__udivmoddi4+0x260>
 80005ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b0:	eb69 0104 	sbc.w	r1, r9, r4
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7df      	b.n	8000578 <__udivmoddi4+0x260>
 80005b8:	4608      	mov	r0, r1
 80005ba:	e7d2      	b.n	8000562 <__udivmoddi4+0x24a>
 80005bc:	4660      	mov	r0, ip
 80005be:	e78d      	b.n	80004dc <__udivmoddi4+0x1c4>
 80005c0:	4681      	mov	r9, r0
 80005c2:	e7b9      	b.n	8000538 <__udivmoddi4+0x220>
 80005c4:	4666      	mov	r6, ip
 80005c6:	e775      	b.n	80004b4 <__udivmoddi4+0x19c>
 80005c8:	4630      	mov	r0, r6
 80005ca:	e74a      	b.n	8000462 <__udivmoddi4+0x14a>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	4439      	add	r1, r7
 80005d2:	e713      	b.n	80003fc <__udivmoddi4+0xe4>
 80005d4:	3802      	subs	r0, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e724      	b.n	8000424 <__udivmoddi4+0x10c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC1_Init+0x98>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <MX_ADC1_Init+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ADC1_Init+0x98>)
 80005fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_ADC1_Init+0x98>)
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_ADC1_Init+0xa0>)
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_ADC1_Init+0x98>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_ADC1_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_ADC1_Init+0x98>)
 8000642:	f008 f9b7 	bl	80089b4 <HAL_ADC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800064c:	f007 f842 	bl	80076d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC1_Init+0x98>)
 8000662:	f008 f9eb 	bl	8008a3c <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800066c:	f007 f832 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000488 	.word	0x20000488
 800067c:	40012000 	.word	0x40012000
 8000680:	0f000001 	.word	0x0f000001

08000684 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_ADC3_Init+0x98>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_ADC3_Init+0x9c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_ADC3_Init+0x98>)
 800069e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_ADC3_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_ADC3_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_ADC3_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC3_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_ADC3_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_ADC3_Init+0x98>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <MX_ADC3_Init+0xa0>)
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_ADC3_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_ADC3_Init+0x98>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_ADC3_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC3_Init+0x98>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC3_Init+0x98>)
 80006e6:	f008 f965 	bl	80089b4 <HAL_ADC_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f0:	f006 fff0 	bl	80076d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006f4:	230e      	movs	r3, #14
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC3_Init+0x98>)
 8000706:	f008 f999 	bl	8008a3c <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000710:	f006 ffe0 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200004d0 	.word	0x200004d0
 8000720:	40012200 	.word	0x40012200
 8000724:	0f000001 	.word	0x0f000001

08000728 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a48      	ldr	r2, [pc, #288]	; (8000868 <HAL_ADC_MspInit+0x140>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d15c      	bne.n	8000804 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
 800074e:	4b47      	ldr	r3, [pc, #284]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a46      	ldr	r2, [pc, #280]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b44      	ldr	r3, [pc, #272]	; (800086c <HAL_ADC_MspInit+0x144>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	4b40      	ldr	r3, [pc, #256]	; (800086c <HAL_ADC_MspInit+0x144>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a3f      	ldr	r2, [pc, #252]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b3d      	ldr	r3, [pc, #244]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	61fb      	str	r3, [r7, #28]
 8000780:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a38      	ldr	r2, [pc, #224]	; (800086c <HAL_ADC_MspInit+0x144>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <HAL_ADC_MspInit+0x144>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a31      	ldr	r2, [pc, #196]	; (800086c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b2f      	ldr	r3, [pc, #188]	; (800086c <HAL_ADC_MspInit+0x144>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
    PC5     ------> ADC1_IN15
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80007ba:	2337      	movs	r3, #55	; 0x37
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	4619      	mov	r1, r3
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <HAL_ADC_MspInit+0x148>)
 80007ce:	f008 fff1 	bl	80097b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 80007d2:	23fd      	movs	r3, #253	; 0xfd
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4823      	ldr	r0, [pc, #140]	; (8000874 <HAL_ADC_MspInit+0x14c>)
 80007e6:	f008 ffe5 	bl	80097b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80007ea:	2303      	movs	r3, #3
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <HAL_ADC_MspInit+0x150>)
 80007fe:	f008 ffd9 	bl	80097b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000802:	e02c      	b.n	800085e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a1c      	ldr	r2, [pc, #112]	; (800087c <HAL_ADC_MspInit+0x154>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d127      	bne.n	800085e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_ADC_MspInit+0x144>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_ADC_MspInit+0x144>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000846:	2310      	movs	r3, #16
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084a:	2303      	movs	r3, #3
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <HAL_ADC_MspInit+0x158>)
 800085a:	f008 ffab 	bl	80097b4 <HAL_GPIO_Init>
}
 800085e:	bf00      	nop
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40012000 	.word	0x40012000
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400
 800087c:	40012200 	.word	0x40012200
 8000880:	40021400 	.word	0x40021400

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DMA_Init+0x4c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200c      	movs	r0, #12
 80008ac:	f008 fbcf 	bl	800904e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b0:	200c      	movs	r0, #12
 80008b2:	f008 fbe8 	bl	8009086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200d      	movs	r0, #13
 80008bc:	f008 fbc7 	bl	800904e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008c0:	200d      	movs	r0, #13
 80008c2:	f008 fbe0 	bl	8009086 <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
 80008ee:	4b71      	ldr	r3, [pc, #452]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a70      	ldr	r2, [pc, #448]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80008f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b6e      	ldr	r3, [pc, #440]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000902:	623b      	str	r3, [r7, #32]
 8000904:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
 800090a:	4b6a      	ldr	r3, [pc, #424]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a69      	ldr	r2, [pc, #420]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a62      	ldr	r2, [pc, #392]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5b      	ldr	r2, [pc, #364]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a54      	ldr	r2, [pc, #336]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a46      	ldr	r2, [pc, #280]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3f      	ldr	r2, [pc, #252]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0320 	and.w	r3, r3, #32
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	21d0      	movs	r1, #208	; 0xd0
 80009ea:	4833      	ldr	r0, [pc, #204]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 80009ec:	f009 f88e 	bl	8009b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAIN_FM_CS_GPIO_Port, MAIN_FM_CS_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	4831      	ldr	r0, [pc, #196]	; (8000abc <MX_GPIO_Init+0x1e8>)
 80009f6:	f009 f889 	bl	8009b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_EN_Pin|MPU_INT_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2141      	movs	r1, #65	; 0x41
 80009fe:	4830      	ldr	r0, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0x1ec>)
 8000a00:	f009 f884 	bl	8009b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000a0a:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x1f0>)
 8000a0c:	f009 f87e 	bl	8009b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MAG_INT_Pin|CS_MAG_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000a16:	482c      	ldr	r0, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0x1f4>)
 8000a18:	f009 f878 	bl	8009b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin;
 8000a1c:	23d0      	movs	r3, #208	; 0xd0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000a34:	f008 febe 	bl	80097b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAIN_FM_CS_Pin;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MAIN_FM_CS_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481b      	ldr	r0, [pc, #108]	; (8000abc <MX_GPIO_Init+0x1e8>)
 8000a50:	f008 feb0 	bl	80097b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = MUX_EN_Pin|MPU_INT_Pin;
 8000a54:	2341      	movs	r3, #65	; 0x41
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <MX_GPIO_Init+0x1ec>)
 8000a6c:	f008 fea2 	bl	80097b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin;
 8000a70:	f641 4308 	movw	r3, #7176	; 0x1c08
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <MX_GPIO_Init+0x1f0>)
 8000a8a:	f008 fe93 	bl	80097b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|CS_MAG_Pin;
 8000a8e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_GPIO_Init+0x1f4>)
 8000aa8:	f008 fe84 	bl	80097b4 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3738      	adds	r7, #56	; 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40021c00 	.word	0x40021c00
 8000ac8:	40021400 	.word	0x40021400

08000acc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4293      	cmp	r3, r2
 8000adc:	bf38      	it	cc
 8000ade:	4613      	movcc	r3, r2
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	bf28      	it	cs
 8000afe:	4613      	movcs	r3, r2
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b1e:	6839      	ldr	r1, [r7, #0]
 8000b20:	fb01 f202 	mul.w	r2, r1, r2
 8000b24:	1a9b      	subs	r3, r3, r2
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	1ad3      	subs	r3, r2, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ffde 	bl	8000b0c <lfs_aligndown>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	fab3 f383 	clz	r3, r3
 8000b6a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	fa93 f3a3 	rbit	r3, r3
 8000b88:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fba5 	bl	80002f0 <__popcountsi2>
 8000ba6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	1ad3      	subs	r3, r2, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000bd4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffee 	bl	8000bcc <lfs_fromle32>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffed 	bl	8000bfa <lfs_frombe32>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f010 faa6 	bl	8011184 <malloc>
 8000c38:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f010 faa2 	bl	8011194 <free>
#else
    (void)p;
#endif
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68d8      	ldr	r0, [r3, #12]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	21ff      	movs	r1, #255	; 0xff
 8000c8e:	f010 faa5 	bl	80111dc <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb4:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cba:	441a      	add	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d80a      	bhi.n	8000cdc <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8124 	beq.w	8000f18 <lfs_bd_read+0x274>
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f0c0 811e 	bcc.w	8000f18 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000cdc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000ce0:	e11f      	b.n	8000f22 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d03f      	beq.n	8000d6c <lfs_bd_read+0xc8>
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d13a      	bne.n	8000d6c <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d232      	bcs.n	8000d6c <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d324      	bcc.n	8000d5a <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	69b8      	ldr	r0, [r7, #24]
 8000d22:	f7ff fee3 	bl	8000aec <lfs_min>
 8000d26:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	69f8      	ldr	r0, [r7, #28]
 8000d3c:	f010 fa40 	bl	80111c0 <memcpy>

                data += diff;
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4413      	add	r3, r2
 8000d46:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000d58:	e0de      	b.n	8000f18 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	69b8      	ldr	r0, [r7, #24]
 8000d66:	f7ff fec1 	bl	8000aec <lfs_min>
 8000d6a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d13a      	bne.n	8000dec <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d232      	bcs.n	8000dec <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d324      	bcc.n	8000dda <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6859      	ldr	r1, [r3, #4]
 8000d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	69b8      	ldr	r0, [r7, #24]
 8000da2:	f7ff fea3 	bl	8000aec <lfs_min>
 8000da6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4619      	mov	r1, r3
 8000dba:	69f8      	ldr	r0, [r7, #28]
 8000dbc:	f010 fa00 	bl	80111c0 <memcpy>

                data += diff;
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4413      	add	r3, r2
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000dd8:	e09e      	b.n	8000f18 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	69b8      	ldr	r0, [r7, #24]
 8000de6:	f7ff fe81 	bl	8000aec <lfs_min>
 8000dea:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d336      	bcc.n	8000e62 <lfs_bd_read+0x1be>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e00:	fb02 f201 	mul.w	r2, r2, r1
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d12b      	bne.n	8000e62 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e0e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d325      	bcc.n	8000e62 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	69b8      	ldr	r0, [r7, #24]
 8000e20:	f7ff fe74 	bl	8000b0c <lfs_aligndown>
 8000e24:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e2a:	685c      	ldr	r4, [r3, #4]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e3a:	47a0      	blx	r4
 8000e3c:	6178      	str	r0, [r7, #20]
            if (err) {
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <lfs_bd_read+0x1a4>
                return err;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	e06c      	b.n	8000f22 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4413      	add	r3, r2
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000e60:	e05a      	b.n	8000f18 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00a      	beq.n	8000e80 <lfs_bd_read+0x1dc>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d305      	bcc.n	8000e80 <lfs_bd_read+0x1dc>
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <lfs_bd_read+0x288>)
 8000e76:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <lfs_bd_read+0x28c>)
 8000e78:	216b      	movs	r1, #107	; 0x6b
 8000e7a:	482e      	ldr	r0, [pc, #184]	; (8000f34 <lfs_bd_read+0x290>)
 8000e7c:	f010 f928 	bl	80110d0 <__assert_func>
        rcache->block = block;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e84:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e90:	f7ff fe3c 	bl	8000b0c <lfs_aligndown>
 8000e94:	4602      	mov	r2, r0
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	f7ff fe44 	bl	8000b36 <lfs_alignup>
 8000eae:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4610      	mov	r0, r2
 8000eba:	f7ff fe17 	bl	8000aec <lfs_min>
 8000ebe:	4602      	mov	r2, r0
                - rcache->off,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000ec4:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f7ff fe0c 	bl	8000aec <lfs_min>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ede:	685c      	ldr	r4, [r3, #4]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	462b      	mov	r3, r5
 8000ef8:	47a0      	blx	r4
 8000efa:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dd05      	ble.n	8000f0e <lfs_bd_read+0x26a>
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <lfs_bd_read+0x294>)
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <lfs_bd_read+0x28c>)
 8000f06:	2176      	movs	r1, #118	; 0x76
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <lfs_bd_read+0x290>)
 8000f0a:	f010 f8e1 	bl	80110d0 <__assert_func>
        if (err) {
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <lfs_bd_read+0x274>
            return err;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	e004      	b.n	8000f22 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f47f aee1 	bne.w	8000ce2 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	08012680 	.word	0x08012680
 8000f30:	08013384 	.word	0x08013384
 8000f34:	080126b0 	.word	0x080126b0
 8000f38:	080126c4 	.word	0x080126c4

08000f3c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f56:	e039      	b.n	8000fcc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fdc3 	bl	8000aec <lfs_min>
 8000f66:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	1ad1      	subs	r1, r2, r3
 8000f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	4413      	add	r3, r2
 8000f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f76:	9203      	str	r2, [sp, #12]
 8000f78:	f107 0214 	add.w	r2, r7, #20
 8000f7c:	9202      	str	r2, [sp, #8]
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fe8a 	bl	8000ca4 <lfs_bd_read>
 8000f90:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <lfs_bd_cmp+0x60>
            return err;
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	e01c      	b.n	8000fd6 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	18d1      	adds	r1, r2, r3
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f010 f8fb 	bl	80111a4 <memcmp>
 8000fae:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da01      	bge.n	8000fc0 <lfs_bd_cmp+0x84>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e00a      	b.n	8000fd6 <lfs_bd_cmp+0x9a>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e008      	b.n	8000fd6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	4413      	add	r3, r2
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3c1      	bcc.n	8000f58 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b08e      	sub	sp, #56	; 0x38
 8000fe2:	af04      	add	r7, sp, #16
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff4:	e030      	b.n	8001058 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fd74 	bl	8000aec <lfs_min>
 8001004:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	1ad1      	subs	r1, r2, r3
 800100c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	4413      	add	r3, r2
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	9203      	str	r2, [sp, #12]
 8001016:	f107 0214 	add.w	r2, r7, #20
 800101a:	9202      	str	r2, [sp, #8]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	460b      	mov	r3, r1
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fe3b 	bl	8000ca4 <lfs_bd_read>
 800102e:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <lfs_bd_crc+0x5c>
            return err;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	e013      	b.n	8001062 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800103a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f107 0114 	add.w	r1, r7, #20
 8001042:	6a3a      	ldr	r2, [r7, #32]
 8001044:	4618      	mov	r0, r3
 8001046:	f005 ff95 	bl	8006f74 <lfs_crc>
 800104a:	4602      	mov	r2, r0
 800104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800104e:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	4413      	add	r3, r2
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800105c:	429a      	cmp	r2, r3
 800105e:	d3ca      	bcc.n	8000ff6 <lfs_bd_crc+0x18>
    }

    return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001082:	d060      	beq.n	8001146 <lfs_bd_flush+0xda>
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f113 0f02 	cmn.w	r3, #2
 800108c:	d05b      	beq.n	8001146 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001096:	429a      	cmp	r2, r3
 8001098:	d305      	bcc.n	80010a6 <lfs_bd_flush+0x3a>
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <lfs_bd_flush+0xe4>)
 800109c:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <lfs_bd_flush+0xe8>)
 800109e:	21b3      	movs	r1, #179	; 0xb3
 80010a0:	482d      	ldr	r0, [pc, #180]	; (8001158 <lfs_bd_flush+0xec>)
 80010a2:	f010 f815 	bl	80110d0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fd3f 	bl	8000b36 <lfs_alignup>
 80010b8:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010be:	689c      	ldr	r4, [r3, #8]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	462b      	mov	r3, r5
 80010d6:	47a0      	blx	r4
 80010d8:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd05      	ble.n	80010ec <lfs_bd_flush+0x80>
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <lfs_bd_flush+0xf0>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <lfs_bd_flush+0xe8>)
 80010e4:	21b7      	movs	r1, #183	; 0xb7
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <lfs_bd_flush+0xec>)
 80010e8:	f00f fff2 	bl	80110d0 <__assert_func>
        if (err) {
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <lfs_bd_flush+0x8a>
            return err;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	e028      	b.n	8001148 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f7ff fdaa 	bl	8000c58 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8001110:	69f8      	ldr	r0, [r7, #28]
 8001112:	9003      	str	r0, [sp, #12]
 8001114:	9102      	str	r1, [sp, #8]
 8001116:	9201      	str	r2, [sp, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	2100      	movs	r1, #0
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff0b 	bl	8000f3c <lfs_bd_cmp>
 8001126:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	da01      	bge.n	8001132 <lfs_bd_flush+0xc6>
                return res;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8001138:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800113c:	e004      	b.n	8001148 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff fd98 	bl	8000c76 <lfs_cache_zero>
    }

    return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	080126d0 	.word	0x080126d0
 8001154:	08013390 	.word	0x08013390
 8001158:	080126b0 	.word	0x080126b0
 800115c:	080126c4 	.word	0x080126c4

08001160 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff fd71 	bl	8000c58 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ff75 	bl	800106c <lfs_bd_flush>
 8001182:	6178      	str	r0, [r7, #20]
    if (err) {
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <lfs_bd_sync+0x2e>
        return err;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	e011      	b.n	80011b2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001198:	4610      	mov	r0, r2
 800119a:	4798      	blx	r3
 800119c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dd05      	ble.n	80011b0 <lfs_bd_sync+0x50>
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <lfs_bd_sync+0x5c>)
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <lfs_bd_sync+0x60>)
 80011a8:	21dd      	movs	r1, #221	; 0xdd
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <lfs_bd_sync+0x64>)
 80011ac:	f00f ff90 	bl	80110d0 <__assert_func>
    return err;
 80011b0:	697b      	ldr	r3, [r7, #20]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	080126c4 	.word	0x080126c4
 80011c0:	080133a0 	.word	0x080133a0
 80011c4:	080126b0 	.word	0x080126b0

080011c8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	f113 0f02 	cmn.w	r3, #2
 80011e0:	d00a      	beq.n	80011f8 <lfs_bd_prog+0x30>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d305      	bcc.n	80011f8 <lfs_bd_prog+0x30>
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <lfs_bd_prog+0x144>)
 80011ee:	4a48      	ldr	r2, [pc, #288]	; (8001310 <lfs_bd_prog+0x148>)
 80011f0:	21e8      	movs	r1, #232	; 0xe8
 80011f2:	4848      	ldr	r0, [pc, #288]	; (8001314 <lfs_bd_prog+0x14c>)
 80011f4:	f00f ff6c 	bl	80110d0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80011f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	441a      	add	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	d978      	bls.n	80012fa <lfs_bd_prog+0x132>
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <lfs_bd_prog+0x150>)
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <lfs_bd_prog+0x148>)
 800120c:	21e9      	movs	r1, #233	; 0xe9
 800120e:	4841      	ldr	r0, [pc, #260]	; (8001314 <lfs_bd_prog+0x14c>)
 8001210:	f00f ff5e 	bl	80110d0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121a:	429a      	cmp	r2, r3
 800121c:	d151      	bne.n	80012c2 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001224:	429a      	cmp	r2, r3
 8001226:	d34c      	bcc.n	80012c2 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	4413      	add	r3, r2
                off >= pcache->off &&
 8001234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001236:	429a      	cmp	r2, r3
 8001238:	d243      	bcs.n	80012c2 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800123e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001248:	4413      	add	r3, r2
 800124a:	4619      	mov	r1, r3
 800124c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800124e:	f7ff fc4d 	bl	8000aec <lfs_min>
 8001252:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800125e:	1acb      	subs	r3, r1, r3
 8001260:	4413      	add	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	69f9      	ldr	r1, [r7, #28]
 8001266:	4618      	mov	r0, r3
 8001268:	f00f ffaa 	bl	80111c0 <memcpy>

            data += diff;
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4413      	add	r3, r2
 8001272:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4413      	add	r3, r2
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800127c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	6898      	ldr	r0, [r3, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc1b 	bl	8000acc <lfs_max>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d127      	bne.n	80012fa <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff fedb 	bl	800106c <lfs_bd_flush>
 80012b6:	6178      	str	r0, [r7, #20]
                if (err) {
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01d      	beq.n	80012fa <lfs_bd_prog+0x132>
                    return err;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	e01f      	b.n	8001302 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ca:	d006      	beq.n	80012da <lfs_bd_prog+0x112>
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <lfs_bd_prog+0x154>)
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <lfs_bd_prog+0x148>)
 80012d0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <lfs_bd_prog+0x14c>)
 80012d6:	f00f fefb 	bl	80110d0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012de:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ea:	f7ff fc0f 	bl	8000b0c <lfs_aligndown>
 80012ee:	4602      	mov	r2, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d189      	bne.n	8001214 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	080126f4 	.word	0x080126f4
 8001310:	080133ac 	.word	0x080133ac
 8001314:	080126b0 	.word	0x080126b0
 8001318:	0801272c 	.word	0x0801272c
 800131c:	08012750 	.word	0x08012750

08001320 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d306      	bcc.n	8001342 <lfs_bd_erase+0x22>
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <lfs_bd_erase+0x54>)
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <lfs_bd_erase+0x58>)
 8001338:	f44f 718a 	mov.w	r1, #276	; 0x114
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <lfs_bd_erase+0x5c>)
 800133e:	f00f fec7 	bl	80110d0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	4610      	mov	r0, r2
 8001350:	4798      	blx	r3
 8001352:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	dd06      	ble.n	8001368 <lfs_bd_erase+0x48>
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <lfs_bd_erase+0x60>)
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <lfs_bd_erase+0x58>)
 800135e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <lfs_bd_erase+0x5c>)
 8001364:	f00f feb4 	bl	80110d0 <__assert_func>
    return err;
 8001368:	68fb      	ldr	r3, [r7, #12]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	08012774 	.word	0x08012774
 8001378:	080133b8 	.word	0x080133b8
 800137c:	080126b0 	.word	0x080126b0
 8001380:	080126c4 	.word	0x080126c4

08001384 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3304      	adds	r3, #4
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d005      	beq.n	80013cc <lfs_pair_isnull+0x1e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3304      	adds	r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ca:	d101      	bne.n	80013d0 <lfs_pair_isnull+0x22>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <lfs_pair_isnull+0x24>
 80013d0:	2300      	movs	r3, #0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d017      	beq.n	800142a <lfs_pair_cmp+0x46>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d00f      	beq.n	800142a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	3304      	adds	r3, #4
 8001412:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d008      	beq.n	800142a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <lfs_pair_cmp+0x46>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <lfs_pair_cmp+0x48>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d107      	bne.n	800145e <lfs_pair_issync+0x26>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3304      	adds	r3, #4
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d00d      	beq.n	800147a <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3304      	adds	r3, #4
 8001466:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001468:	429a      	cmp	r2, r3
 800146a:	d108      	bne.n	800147e <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3304      	adds	r3, #4
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d101      	bne.n	800147e <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <lfs_pair_issync+0x48>
 800147e:	2300      	movs	r3, #0
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb94 	bl	8000bcc <lfs_fromle32>
 80014a4:	4602      	mov	r2, r0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1d1c      	adds	r4, r3, #4
 80014b4:	4610      	mov	r0, r2
 80014b6:	f7ff fb89 	bl	8000bcc <lfs_fromle32>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6023      	str	r3, [r4, #0]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}

080014c6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80014c6:	b590      	push	{r4, r7, lr}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb85 	bl	8000be2 <lfs_tole32>
 80014d8:	4602      	mov	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1d1c      	adds	r4, r3, #4
 80014e8:	4610      	mov	r0, r2
 80014ea:	f7ff fb7a 	bl	8000be2 <lfs_tole32>
 80014ee:	4603      	mov	r3, r0
 80014f0:	6023      	str	r3, [r4, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}

080014fa <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	43db      	mvns	r3, r3
 8001506:	0fdb      	lsrs	r3, r3, #31
 8001508:	b2db      	uxtb	r3, r3
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	059b      	lsls	r3, r3, #22
 8001522:	159b      	asrs	r3, r3, #22
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0d1b      	lsrs	r3, r3, #20
 8001548:	b29b      	uxth	r3, r3
 800154a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800154e:	b29b      	uxth	r3, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0d1b      	lsrs	r3, r3, #20
 8001568:	b29b      	uxth	r3, r3
 800156a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800156e:	b29b      	uxth	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0d1b      	lsrs	r3, r3, #20
 8001588:	b29b      	uxth	r3, r3
 800158a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158e:	b29b      	uxth	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0d1b      	lsrs	r3, r3, #20
 80015a8:	b2db      	uxtb	r3, r3
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffec 	bl	800159c <lfs_tag_chunk>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b25b      	sxtb	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e2:	b29b      	uxth	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff7f 	bl	8001516 <lfs_tag_isdelete>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffe5 	bl	80015f0 <lfs_tag_size>
 8001626:	4603      	mov	r3, r0
 8001628:	3304      	adds	r3, #4
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e012      	b.n	8001668 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	6819      	ldr	r1, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4403      	add	r3, r0
 800165e:	404a      	eors	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b02      	cmp	r3, #2
 800166c:	dde9      	ble.n	8001642 <lfs_gstate_xor+0x10>
    }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e00b      	b.n	80016a2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <lfs_gstate_iszero+0x20>
            return false;
 8001698:	2300      	movs	r3, #0
 800169a:	e006      	b.n	80016aa <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	ddf0      	ble.n	800168a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff94 	bl	80015f0 <lfs_tag_size>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff81 	bl	80015f0 <lfs_tag_size>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <lfs_gstate_hasmovehere>:
static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff17 	bl	800153c <lfs_tag_type1>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00a      	beq.n	800172a <lfs_gstate_hasmovehere+0x30>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe62 	bl	80013e4 <lfs_pair_cmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <lfs_gstate_hasmovehere+0x30>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <lfs_gstate_hasmovehere+0x32>
 800172a:	2300      	movs	r3, #0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fa40 	bl	8000bcc <lfs_fromle32>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa38 	bl	8000bcc <lfs_fromle32>
 800175c:	4602      	mov	r2, r0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa30 	bl	8000bcc <lfs_fromle32>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa2b 	bl	8000be2 <lfs_tole32>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fa23 	bl	8000be2 <lfs_tole32>
 800179c:	4602      	mov	r2, r0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa1b 	bl	8000be2 <lfs_tole32>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	609a      	str	r2, [r3, #8]
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa00 	bl	8000bcc <lfs_fromle32>
 80017cc:	4602      	mov	r2, r0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f9f8 	bl	8000bcc <lfs_fromle32>
 80017dc:	4602      	mov	r2, r0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f9f3 	bl	8000be2 <lfs_tole32>
 80017fc:	4602      	mov	r2, r0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f9eb 	bl	8000be2 <lfs_tole32>
 800180c:	4602      	mov	r2, r0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	605a      	str	r2, [r3, #4]
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f9d0 	bl	8000bcc <lfs_fromle32>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f9c8 	bl	8000bcc <lfs_fromle32>
 800183c:	4602      	mov	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	605a      	str	r2, [r3, #4]
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <lfs_superblock_fromle32>:
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f9b8 	bl	8000bcc <lfs_fromle32>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f9b0 	bl	8000bcc <lfs_fromle32>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f9a8 	bl	8000bcc <lfs_fromle32>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9a0 	bl	8000bcc <lfs_fromle32>
 800188c:	4602      	mov	r2, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f998 	bl	8000bcc <lfs_fromle32>
 800189c:	4602      	mov	r2, r0
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f990 	bl	8000bcc <lfs_fromle32>
 80018ac:	4602      	mov	r2, r0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	615a      	str	r2, [r3, #20]
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f98b 	bl	8000be2 <lfs_tole32>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f983 	bl	8000be2 <lfs_tole32>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f97b 	bl	8000be2 <lfs_tole32>
 80018ec:	4602      	mov	r2, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f973 	bl	8000be2 <lfs_tole32>
 80018fc:	4602      	mov	r2, r0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f96b 	bl	8000be2 <lfs_tole32>
 800190c:	4602      	mov	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f963 	bl	8000be2 <lfs_tole32>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	615a      	str	r2, [r3, #20]
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e009      	b.n	800194e <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d101      	bne.n	8001948 <lfs_mlist_isopen+0x1e>
            return true;
 8001944:	2301      	movs	r3, #1
 8001946:	e007      	b.n	8001958 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f1      	bne.n	800193a <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3328      	adds	r3, #40	; 0x28
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e00d      	b.n	8001992 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d105      	bne.n	800198c <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	601a      	str	r2, [r3, #0]
            break;
 800198a:	e007      	b.n	800199c <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ed      	bne.n	8001976 <lfs_mlist_remove+0x12>
        }
    }
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <lfs_fs_disk_version+0x18>)
    }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	00020001 	.word	0x00020001

080019e8 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffeb 	bl	80019cc <lfs_fs_disk_version>
 80019f6:	4603      	mov	r3, r0
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	b29b      	uxth	r3, r3

}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffdd 	bl	80019cc <lfs_fs_disk_version>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29b      	uxth	r3, r3
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a38:	4413      	add	r3, r2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 8001a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a42:	fb02 f201 	mul.w	r2, r2, r1
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d212      	bcs.n	8001a7a <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	009a      	lsls	r2, r3, #2
 8001a5e:	440a      	add	r2, r1
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f002 021f 	and.w	r2, r2, #31
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4403      	add	r3, r0
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe5 	bl	8001a88 <lfs_alloc_ack>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	4413      	add	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae2:	fb02 f201 	mul.w	r2, r2, r1
 8001ae6:	1a9a      	subs	r2, r3, r2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	00da      	lsls	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f7fe fff6 	bl	8000aec <lfs_min>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	461a      	mov	r2, r3
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f00f fb5f 	bl	80111dc <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4909      	ldr	r1, [pc, #36]	; (8001b48 <lfs_fs_rawgc+0x80>)
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f004 fc95 	bl	8006454 <lfs_fs_rawtraverse>
 8001b2a:	60f8      	str	r0, [r7, #12]
    if (err) {
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb6 	bl	8001aa4 <lfs_alloc_drop>
        return err;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	e000      	b.n	8001b3e <lfs_fs_rawgc+0x76>
    }

    return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08001a1f 	.word	0x08001a1f

08001b4c <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8001b56:	e04e      	b.n	8001bf6 <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d131      	bne.n	8001bf6 <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ba2:	fb02 f201 	mul.w	r2, r2, r1
 8001ba6:	1a9a      	subs	r2, r3, r2
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001bac:	e009      	b.n	8001bc2 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d011      	beq.n	8001bf2 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1dd      	bne.n	8001bae <lfs_alloc+0x62>
                }

                return 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e021      	b.n	8001c3a <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d1aa      	bne.n	8001b58 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	4413      	add	r3, r2
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <lfs_alloc+0xf8>)
 8001c16:	9200      	str	r2, [sp, #0]
 8001c18:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8001c1c:	490a      	ldr	r1, [pc, #40]	; (8001c48 <lfs_alloc+0xfc>)
 8001c1e:	480b      	ldr	r0, [pc, #44]	; (8001c4c <lfs_alloc+0x100>)
 8001c20:	f00f fe7c 	bl	801191c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001c24:	f06f 031b 	mvn.w	r3, #27
 8001c28:	e007      	b.n	8001c3a <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff4c 	bl	8001ac8 <lfs_fs_rawgc>
 8001c30:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d08e      	beq.n	8001b56 <lfs_alloc+0xa>
            return err;
 8001c38:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	080127b8 	.word	0x080127b8
 8001c48:	080126b0 	.word	0x080126b0
 8001c4c:	08012790 	.word	0x08012790

08001c50 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08f      	sub	sp, #60	; 0x3c
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	333c      	adds	r3, #60	; 0x3c
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fd3f 	bl	80016fa <lfs_gstate_hasmovehere>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80b9 	beq.w	8001df6 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fca3 	bl	80015d0 <lfs_tag_id>
 8001c8a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80b2 	beq.w	8001df6 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc9a 	bl	80015d0 <lfs_tag_id>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461c      	mov	r4, r3
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f7ff fc95 	bl	80015d0 <lfs_tag_id>
 8001ca6:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001ca8:	429c      	cmp	r4, r3
 8001caa:	f200 80a4 	bhi.w	8001df6 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001cb4:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001cb6:	e09e      	b.n	8001df6 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fca5 	bl	800160a <lfs_tag_dsize>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	9203      	str	r2, [sp, #12]
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	9202      	str	r2, [sp, #8]
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7fe ffdb 	bl	8000ca4 <lfs_bd_read>
 8001cee:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <lfs_dir_getslice+0xaa>
            return err;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	e089      	b.n	8001e0e <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe ff7c 	bl	8000bfa <lfs_frombe32>
 8001d02:	4602      	mov	r2, r0
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4053      	eors	r3, r2
 8001d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d0c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fc5e 	bl	80015d0 <lfs_tag_id>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d02b      	beq.n	8001d72 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001d1a:	69f8      	ldr	r0, [r7, #28]
 8001d1c:	f7ff fc0e 	bl	800153c <lfs_tag_type1>
 8001d20:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d124      	bne.n	8001d72 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001d28:	69f8      	ldr	r0, [r7, #28]
 8001d2a:	f7ff fc51 	bl	80015d0 <lfs_tag_id>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fc49 	bl	80015d0 <lfs_tag_id>
 8001d3e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001d40:	429c      	cmp	r4, r3
 8001d42:	d816      	bhi.n	8001d72 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	1ad2      	subs	r2, r2, r3
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <lfs_dir_getslice+0x1c8>)
 8001d4c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d102      	bne.n	8001d62 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001d5c:	f06f 0301 	mvn.w	r3, #1
 8001d60:	e055      	b.n	8001e0e <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001d62:	69f8      	ldr	r0, [r7, #28]
 8001d64:	f7ff fc27 	bl	80015b6 <lfs_tag_splice>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	029a      	lsls	r2, r3, #10
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	4413      	add	r3, r2
 8001d70:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	405a      	eors	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d138      	bne.n	8001df6 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f7ff fbc6 	bl	8001516 <lfs_tag_isdelete>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001d90:	f06f 0301 	mvn.w	r3, #1
 8001d94:	e03b      	b.n	8001e0e <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001d96:	69f8      	ldr	r0, [r7, #28]
 8001d98:	f7ff fc2a 	bl	80015f0 <lfs_tag_size>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fea3 	bl	8000aec <lfs_min>
 8001da6:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db2:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001db4:	3204      	adds	r2, #4
 8001db6:	6979      	ldr	r1, [r7, #20]
 8001db8:	9103      	str	r1, [sp, #12]
 8001dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dbc:	9102      	str	r1, [sp, #8]
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7fe ff6b 	bl	8000ca4 <lfs_bd_read>
 8001dce:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <lfs_dir_getslice+0x18a>
                return err;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	e019      	b.n	8001e0e <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001dda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	18d0      	adds	r0, r2, r3
 8001de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f00f f9f7 	bl	80111dc <memset>

            return tag + gdiff;
 8001dee:	6a3a      	ldr	r2, [r7, #32]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	e00b      	b.n	8001e0e <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fc06 	bl	800160a <lfs_tag_dsize>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	3304      	adds	r3, #4
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	429a      	cmp	r2, r3
 8001e06:	f4bf af57 	bcs.w	8001cb8 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001e0a:	f06f 0301 	mvn.w	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	372c      	adds	r7, #44	; 0x2c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	000ffc00 	.word	0x000ffc00

08001e1c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001e2a:	6838      	ldr	r0, [r7, #0]
 8001e2c:	f7ff fbe0 	bl	80015f0 <lfs_tag_size>
 8001e30:	4603      	mov	r3, r0
 8001e32:	9302      	str	r3, [sp, #8]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff ff04 	bl	8001c50 <lfs_dir_getslice>
 8001e48:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08c      	sub	sp, #48	; 0x30
 8001e56:	af04      	add	r7, sp, #16
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e68:	441a      	add	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f240 80c0 	bls.w	8001ff6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001e76:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001e7a:	e0c1      	b.n	8002000 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03f      	beq.n	8001f06 <lfs_dir_getread+0xb4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f113 0f02 	cmn.w	r3, #2
 8001e8e:	d13a      	bne.n	8001f06 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d232      	bcs.n	8001f06 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d324      	bcc.n	8001ef4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	1acb      	subs	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	69b8      	ldr	r0, [r7, #24]
 8001ebc:	f7fe fe16 	bl	8000aec <lfs_min>
 8001ec0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ecc:	1acb      	subs	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	69f8      	ldr	r0, [r7, #28]
 8001ed6:	f00f f973 	bl	80111c0 <memcpy>

                data += diff;
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	4413      	add	r3, r2
 8001ee0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001ef2:	e080      	b.n	8001ff6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	69b8      	ldr	r0, [r7, #24]
 8001f00:	f7fe fdf4 	bl	8000aec <lfs_min>
 8001f04:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f113 0f02 	cmn.w	r3, #2
 8001f0e:	d13a      	bne.n	8001f86 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d232      	bcs.n	8001f86 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d324      	bcc.n	8001f74 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	1acb      	subs	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	69b8      	ldr	r0, [r7, #24]
 8001f3c:	f7fe fdd6 	bl	8000aec <lfs_min>
 8001f40:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f4c:	1acb      	subs	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4619      	mov	r1, r3
 8001f54:	69f8      	ldr	r0, [r7, #28]
 8001f56:	f00f f933 	bl	80111c0 <memcpy>

                data += diff;
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4413      	add	r3, r2
 8001f60:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	4413      	add	r3, r2
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001f72:	e040      	b.n	8001ff6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	69b8      	ldr	r0, [r7, #24]
 8001f80:	f7fe fdb4 	bl	8000aec <lfs_min>
 8001f84:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f06f 0201 	mvn.w	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	4619      	mov	r1, r3
 8001f96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f98:	f7fe fdb8 	bl	8000b0c <lfs_aligndown>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	441a      	add	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7fe fdc0 	bl	8000b36 <lfs_alignup>
 8001fb6:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f7fe fd93 	bl	8000aec <lfs_min>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	6889      	ldr	r1, [r1, #8]
 8001fd8:	9102      	str	r1, [sp, #8]
 8001fda:	9201      	str	r2, [sp, #4]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff fe33 	bl	8001c50 <lfs_dir_getslice>
 8001fea:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da01      	bge.n	8001ff6 <lfs_dir_getread+0x1a4>
            return err;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	e004      	b.n	8002000 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f af3f 	bne.w	8001e7c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <lfs_dir_traverse_filter+0x1e>
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <lfs_dir_traverse_filter+0xac>)
 8002024:	e000      	b.n	8002028 <lfs_dir_traverse_filter+0x20>
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002028:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	405a      	eors	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d014      	beq.n	8002064 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fa69 	bl	8001516 <lfs_tag_isdelete>
 8002044:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <lfs_dir_traverse_filter+0xac>)
 800204e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <lfs_dir_traverse_filter+0xb4>)
 8002056:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002058:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800205c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d104      	bne.n	800206e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
        return true;
 800206a:	2301      	movs	r3, #1
 800206c:	e01e      	b.n	80020ac <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800206e:	68b8      	ldr	r0, [r7, #8]
 8002070:	f7ff fa64 	bl	800153c <lfs_tag_type1>
 8002074:	4603      	mov	r3, r0
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d116      	bne.n	80020aa <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800207c:	68b8      	ldr	r0, [r7, #8]
 800207e:	f7ff faa7 	bl	80015d0 <lfs_tag_id>
 8002082:	4603      	mov	r3, r0
 8002084:	461c      	mov	r4, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff faa0 	bl	80015d0 <lfs_tag_id>
 8002090:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002092:	429c      	cmp	r4, r3
 8002094:	d809      	bhi.n	80020aa <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f7ff fa8d 	bl	80015b6 <lfs_tag_splice>
 800209c:	4603      	mov	r3, r0
 800209e:	029a      	lsls	r2, r3, #10
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	441a      	add	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	601a      	str	r2, [r3, #0]
    }

    return false;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	7ffffc00 	.word	0x7ffffc00
 80020b8:	700ffc00 	.word	0x700ffc00
 80020bc:	000ffc00 	.word	0x000ffc00

080020c0 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b0c1      	sub	sp, #260	; 0x104
 80020c4:	af04      	add	r7, sp, #16
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80020d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7ff fa93 	bl	800160a <lfs_tag_dsize>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	441a      	add	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d237      	bcs.n	8002162 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f7ff fa89 	bl	800160a <lfs_tag_dsize>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	9203      	str	r2, [sp, #12]
 800210a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800210e:	9202      	str	r2, [sp, #8]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2304      	movs	r3, #4
 8002118:	460a      	mov	r2, r1
 800211a:	2100      	movs	r1, #0
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7fe fdc1 	bl	8000ca4 <lfs_bd_read>
 8002122:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8002126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <lfs_dir_traverse+0x74>
                    return err;
 800212e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002132:	e3d0      	b.n	80028d6 <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fd5f 	bl	8000bfa <lfs_frombe32>
 800213c:	4602      	mov	r2, r0
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4053      	eors	r3, r2
 8002142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002146:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8002154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 800215c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	e01b      	b.n	800219a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8002162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002166:	2b00      	cmp	r3, #0
 8002168:	dd13      	ble.n	8002192 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800216a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8002172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 800217c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002180:	3308      	adds	r3, #8
 8002182:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8002186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800218a:	3b01      	subs	r3, #1
 800218c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002190:	e003      	b.n	800219a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8002198:	e2bd      	b.n	8002716 <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800219a:	4b86      	ldr	r3, [pc, #536]	; (80023b4 <lfs_dir_traverse+0x2f4>)
 800219c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80021a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021a6:	405a      	eors	r2, r3
 80021a8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80021ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021b0:	400b      	ands	r3, r1
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 82a1 	bne.w	80026fc <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80021ba:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80021be:	f7ff fa07 	bl	80015d0 <lfs_tag_id>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ff 	beq.w	80023c8 <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80021ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d906      	bls.n	80021e0 <lfs_dir_traverse+0x120>
 80021d2:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <lfs_dir_traverse+0x2f8>)
 80021d4:	4a79      	ldr	r2, [pc, #484]	; (80023bc <lfs_dir_traverse+0x2fc>)
 80021d6:	f240 319f 	movw	r1, #927	; 0x39f
 80021da:	4879      	ldr	r0, [pc, #484]	; (80023c0 <lfs_dir_traverse+0x300>)
 80021dc:	f00e ff78 	bl	80110d0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80021e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80021f2:	4413      	add	r3, r2
 80021f4:	3b98      	subs	r3, #152	; 0x98
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800220a:	4413      	add	r3, r2
 800220c:	3b94      	subs	r3, #148	; 0x94
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002222:	4413      	add	r3, r2
 8002224:	3b90      	subs	r3, #144	; 0x90
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800223a:	4413      	add	r3, r2
 800223c:	3b8c      	subs	r3, #140	; 0x8c
 800223e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002254:	4413      	add	r3, r2
 8002256:	3b88      	subs	r3, #136	; 0x88
 8002258:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800226e:	4413      	add	r3, r2
 8002270:	3b84      	subs	r3, #132	; 0x84
 8002272:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002288:	4413      	add	r3, r2
 800228a:	3b80      	subs	r3, #128	; 0x80
 800228c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022a2:	4413      	add	r3, r2
 80022a4:	3b7c      	subs	r3, #124	; 0x7c
 80022a6:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022bc:	4413      	add	r3, r2
 80022be:	3b7a      	subs	r3, #122	; 0x7a
 80022c0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022d6:	4413      	add	r3, r2
 80022d8:	3b78      	subs	r3, #120	; 0x78
 80022da:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022f0:	4413      	add	r3, r2
 80022f2:	3b74      	subs	r3, #116	; 0x74
 80022f4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800230a:	4413      	add	r3, r2
 800230c:	3b70      	subs	r3, #112	; 0x70
 800230e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002324:	4413      	add	r3, r2
 8002326:	3b6c      	subs	r3, #108	; 0x6c
 8002328:	6019      	str	r1, [r3, #0]
 800232a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800233a:	4413      	add	r3, r2
 800233c:	3b68      	subs	r3, #104	; 0x68
 800233e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002354:	4413      	add	r3, r2
 8002356:	3b68      	subs	r3, #104	; 0x68
 8002358:	3304      	adds	r3, #4
 800235a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800235e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002362:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8002366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800236a:	3301      	adds	r3, #1
 800236c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <lfs_dir_traverse+0x304>)
 8002390:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8002394:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	3328      	adds	r3, #40	; 0x28
 80023a8:	440b      	add	r3, r1
 80023aa:	3304      	adds	r3, #4
 80023ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023b0:	e695      	b.n	80020de <lfs_dir_traverse+0x1e>
 80023b2:	bf00      	nop
 80023b4:	7ff00000 	.word	0x7ff00000
 80023b8:	080127bc 	.word	0x080127bc
 80023bc:	080133c8 	.word	0x080133c8
 80023c0:	080126b0 	.word	0x080126b0
 80023c4:	08002009 	.word	0x08002009
                continue;
            }
        }

popped:
 80023c8:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80023ca:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80023ce:	f7ff f8ff 	bl	80015d0 <lfs_tag_id>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80023d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f8f8 	bl	80015d0 <lfs_tag_id>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80023e4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f200 8189 	bhi.w	8002700 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f8ed 	bl	80015d0 <lfs_tag_id>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80023fe:	4293      	cmp	r3, r2
 8002400:	f240 817e 	bls.w	8002700 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f8b8 	bl	800157c <lfs_tag_type3>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f43f ae65 	beq.w	80020de <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f8b0 	bl	800157c <lfs_tag_type3>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	f240 1301 	movw	r3, #257	; 0x101
 8002424:	429a      	cmp	r2, r3
 8002426:	f040 80ed 	bne.w	8002604 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800242a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800242e:	4ab7      	ldr	r2, [pc, #732]	; (800270c <lfs_dir_traverse+0x64c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	f000 8167 	beq.w	8002704 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8002436:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002446:	4413      	add	r3, r2
 8002448:	3b98      	subs	r3, #152	; 0x98
 800244a:	4618      	mov	r0, r3
 800244c:	233c      	movs	r3, #60	; 0x3c
 800244e:	461a      	mov	r2, r3
 8002450:	2100      	movs	r1, #0
 8002452:	f00e fec3 	bl	80111dc <memset>
 8002456:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002466:	4413      	add	r3, r2
 8002468:	3b98      	subs	r3, #152	; 0x98
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800247e:	4413      	add	r3, r2
 8002480:	3b94      	subs	r3, #148	; 0x94
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002496:	4413      	add	r3, r2
 8002498:	3b90      	subs	r3, #144	; 0x90
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024ae:	4413      	add	r3, r2
 80024b0:	3b8c      	subs	r3, #140	; 0x8c
 80024b2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024c8:	4413      	add	r3, r2
 80024ca:	3b88      	subs	r3, #136	; 0x88
 80024cc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024e2:	4413      	add	r3, r2
 80024e4:	3b84      	subs	r3, #132	; 0x84
 80024e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024fc:	4413      	add	r3, r2
 80024fe:	3b80      	subs	r3, #128	; 0x80
 8002500:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002516:	4413      	add	r3, r2
 8002518:	3b7c      	subs	r3, #124	; 0x7c
 800251a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002530:	4413      	add	r3, r2
 8002532:	3b7a      	subs	r3, #122	; 0x7a
 8002534:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800254a:	4413      	add	r3, r2
 800254c:	3b78      	subs	r3, #120	; 0x78
 800254e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002564:	4413      	add	r3, r2
 8002566:	3b74      	subs	r3, #116	; 0x74
 8002568:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800257e:	4413      	add	r3, r2
 8002580:	3b70      	subs	r3, #112	; 0x70
 8002582:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002586:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8002588:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800258c:	3301      	adds	r3, #1
 800258e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f82b 	bl	80015f0 <lfs_tag_size>
 800259a:	4603      	mov	r3, r0
 800259c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f814 	bl	80015d0 <lfs_tag_id>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b2:	60bb      	str	r3, [r7, #8]
            off = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80025ca:	4b51      	ldr	r3, [pc, #324]	; (8002710 <lfs_dir_traverse+0x650>)
 80025cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80025d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80025d8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80025dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80025e0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80025ea:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80025ee:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80025fa:	4413      	add	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002602:	e56c      	b.n	80020de <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ffb8 	bl	800157c <lfs_tag_type3>
 800260c:	4603      	mov	r3, r0
 800260e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002612:	d159      	bne.n	80026c8 <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800261a:	e04b      	b.n	80026b4 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 800261c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002624:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800263e:	051c      	lsls	r4, r3, #20
 8002640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe ffc4 	bl	80015d0 <lfs_tag_id>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002650:	4413      	add	r3, r2
 8002652:	029b      	lsls	r3, r3, #10
 8002654:	ea44 0103 	orr.w	r1, r4, r3
 8002658:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800266a:	4413      	add	r3, r2
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002670:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	461a      	mov	r2, r3
 800267e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002682:	4413      	add	r3, r2
 8002684:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002686:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800268a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800268e:	4798      	blx	r3
 8002690:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002698:	2b00      	cmp	r3, #0
 800269a:	da02      	bge.n	80026a2 <lfs_dir_traverse+0x5e2>
                    return res;
 800269c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026a0:	e119      	b.n	80028d6 <lfs_dir_traverse+0x816>
                }

                if (res) {
 80026a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d12e      	bne.n	8002708 <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80026aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ae:	3301      	adds	r3, #1
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe ff9a 	bl	80015f0 <lfs_tag_size>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d3aa      	bcc.n	800261c <lfs_dir_traverse+0x55c>
 80026c6:	e50a      	b.n	80020de <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80026c8:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80026cc:	029a      	lsls	r2, r3, #10
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	18d1      	adds	r1, r2, r3
 80026d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026da:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80026de:	4798      	blx	r3
 80026e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80026e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da02      	bge.n	80026f2 <lfs_dir_traverse+0x632>
                return res;
 80026ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026f0:	e0f1      	b.n	80028d6 <lfs_dir_traverse+0x816>
            }

            if (res) {
 80026f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <lfs_dir_traverse+0x654>
 80026fa:	e4f0      	b.n	80020de <lfs_dir_traverse+0x1e>
                continue;
 80026fc:	bf00      	nop
 80026fe:	e4ee      	b.n	80020de <lfs_dir_traverse+0x1e>
            continue;
 8002700:	bf00      	nop
 8002702:	e4ec      	b.n	80020de <lfs_dir_traverse+0x1e>
                continue;
 8002704:	bf00      	nop
 8002706:	e4ea      	b.n	80020de <lfs_dir_traverse+0x1e>
                    break;
 8002708:	bf00      	nop
        {
 800270a:	e4e8      	b.n	80020de <lfs_dir_traverse+0x1e>
 800270c:	08002009 	.word	0x08002009
 8002710:	600ffc00 	.word	0x600ffc00
                break;
 8002714:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80d9 	beq.w	80028d2 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002732:	4413      	add	r3, r2
 8002734:	3b98      	subs	r3, #152	; 0x98
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800273a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800273e:	1e5a      	subs	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800274c:	4413      	add	r3, r2
 800274e:	3b94      	subs	r3, #148	; 0x94
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002754:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002766:	4413      	add	r3, r2
 8002768:	3b90      	subs	r3, #144	; 0x90
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800276e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002780:	4413      	add	r3, r2
 8002782:	3b8c      	subs	r3, #140	; 0x8c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800278a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800279c:	4413      	add	r3, r2
 800279e:	3b88      	subs	r3, #136	; 0x88
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80027a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027aa:	1e5a      	subs	r2, r3, #1
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027b8:	4413      	add	r3, r2
 80027ba:	3b84      	subs	r3, #132	; 0x84
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80027c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027c6:	1e5a      	subs	r2, r3, #1
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027d4:	4413      	add	r3, r2
 80027d6:	3b80      	subs	r3, #128	; 0x80
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80027de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027f0:	4413      	add	r3, r2
 80027f2:	3b7c      	subs	r3, #124	; 0x7c
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80027fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800280c:	4413      	add	r3, r2
 800280e:	3b7a      	subs	r3, #122	; 0x7a
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800281a:	1e5a      	subs	r2, r3, #1
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002828:	4413      	add	r3, r2
 800282a:	3b78      	subs	r3, #120	; 0x78
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002832:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002844:	4413      	add	r3, r2
 8002846:	3b74      	subs	r3, #116	; 0x74
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800284e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002860:	4413      	add	r3, r2
 8002862:	3b70      	subs	r3, #112	; 0x70
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800286a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800286e:	1e5a      	subs	r2, r3, #1
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800287c:	4413      	add	r3, r2
 800287e:	3b6c      	subs	r3, #108	; 0x6c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002884:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002896:	4413      	add	r3, r2
 8002898:	3b68      	subs	r3, #104	; 0x68
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80028a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028b2:	4413      	add	r3, r2
 80028b4:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80028b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028bc:	3204      	adds	r2, #4
 80028be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028c2:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80028c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80028d0:	e57b      	b.n	80023ca <lfs_dir_traverse+0x30a>
    } else {
        return res;
 80028d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	37f4      	adds	r7, #244	; 0xf4
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	bf00      	nop

080028e0 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	b0a5      	sub	sp, #148	; 0x94
 80028e4:	af04      	add	r7, sp, #16
 80028e6:	6178      	str	r0, [r7, #20]
 80028e8:	6139      	str	r1, [r7, #16]
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	429a      	cmp	r2, r3
 8002906:	d206      	bcs.n	8002916 <lfs_dir_fetchmatch+0x36>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3304      	adds	r3, #4
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8002916:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800291a:	e39d      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800291c:	2300      	movs	r3, #0
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
 8002920:	2300      	movs	r3, #0
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002928:	2300      	movs	r3, #0
 800292a:	677b      	str	r3, [r7, #116]	; 0x74
 800292c:	e056      	b.n	80029dc <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 800292e:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002938:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800293a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800293e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002944:	2104      	movs	r1, #4
 8002946:	9103      	str	r1, [sp, #12]
 8002948:	9202      	str	r2, [sp, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	9201      	str	r2, [sp, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2304      	movs	r3, #4
 8002952:	4602      	mov	r2, r0
 8002954:	2100      	movs	r1, #0
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7fe f9a4 	bl	8000ca4 <lfs_bd_read>
 800295c:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002966:	4413      	add	r3, r2
 8002968:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f92d 	bl	8000bcc <lfs_fromle32>
 8002972:	4602      	mov	r2, r0
 8002974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800297c:	440b      	add	r3, r1
 800297e:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <lfs_dir_fetchmatch+0xb4>
 8002988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800298e:	d001      	beq.n	8002994 <lfs_dir_fetchmatch+0xb4>
            return err;
 8002990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002992:	e361      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002996:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800299a:	d01c      	beq.n	80029d6 <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800299c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029a4:	4413      	add	r3, r2
 80029a6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	3301      	adds	r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	bfb8      	it	lt
 80029b6:	425b      	neglt	r3, r3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029be:	440b      	add	r3, r1
 80029c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f7fe f8f2 	bl	8000bb0 <lfs_scmp>
 80029cc:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dd01      	ble.n	80029d6 <lfs_dir_fetchmatch+0xf6>
            r = i;
 80029d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d4:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	3301      	adds	r3, #1
 80029da:	677b      	str	r3, [r7, #116]	; 0x74
 80029dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029de:	2b01      	cmp	r3, #1
 80029e0:	dda5      	ble.n	800292e <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80029e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	bfb8      	it	lt
 80029ec:	425b      	neglt	r3, r3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fc:	3301      	adds	r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	bfb8      	it	lt
 8002a06:	425b      	neglt	r3, r3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	bfb8      	it	lt
 8002a1e:	425b      	neglt	r3, r3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a26:	4413      	add	r3, r2
 8002a28:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	673b      	str	r3, [r7, #112]	; 0x70
 8002a3a:	e2f9      	b.n	8003030 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002a4c:	4aa8      	ldr	r2, [pc, #672]	; (8002cf0 <lfs_dir_fetchmatch+0x410>)
 8002a4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a56:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8002a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe f8b4 	bl	8000be2 <lfs_tole32>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	3308      	adds	r3, #8
 8002a84:	2204      	movs	r2, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f004 fa72 	bl	8006f74 <lfs_crc>
 8002a90:	4603      	mov	r3, r0
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f897 	bl	8000bcc <lfs_fromle32>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002aa4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002aa6:	f7fe fdb0 	bl	800160a <lfs_tag_dsize>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aae:	4413      	add	r3, r2
 8002ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002ab2:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002ab8:	69d8      	ldr	r0, [r3, #28]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	9203      	str	r2, [sp, #12]
 8002ac2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002ac6:	9202      	str	r2, [sp, #8]
 8002ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aca:	9201      	str	r2, [sp, #4]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7fe f8e5 	bl	8000ca4 <lfs_bd_read>
 8002ada:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ae8:	f000 81d5 	beq.w	8002e96 <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8002aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aee:	e2b3      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002af6:	2204      	movs	r2, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fa3b 	bl	8006f74 <lfs_crc>
 8002afe:	4603      	mov	r3, r0
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f878 	bl	8000bfa <lfs_frombe32>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0e:	4053      	eors	r3, r2
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fcf0 	bl	80014fa <lfs_tag_isvalid>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002b26:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b28:	f7fe fd18 	bl	800155c <lfs_tag_type2>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8002b3c:	e1ba      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fd62 	bl	800160a <lfs_tag_dsize>
 8002b46:	4602      	mov	r2, r0
 8002b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4a:	441a      	add	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f200 81a1 	bhi.w	8002e9a <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fcfc 	bl	800155c <lfs_tag_type2>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b6a:	d15e      	bne.n	8002c2a <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002b6c:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002b72:	69dc      	ldr	r4, [r3, #28]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b7a:	3204      	adds	r2, #4
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	9103      	str	r1, [sp, #12]
 8002b80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b84:	9102      	str	r1, [sp, #8]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	6978      	ldr	r0, [r7, #20]
 8002b92:	f7fe f887 	bl	8000ca4 <lfs_bd_read>
 8002b96:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8002b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ba4:	f000 817b 	beq.w	8002e9e <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 8002ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8002baa:	e255      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f80c 	bl	8000bcc <lfs_fromle32>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	f040 8170 	bne.w	8002ea2 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fce9 	bl	800159c <lfs_tag_chunk>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	07db      	lsls	r3, r3, #31
 8002bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002bd0:	4053      	eors	r3, r2
 8002bd2:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 f9c8 	bl	8006f74 <lfs_crc>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bec:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fd0a 	bl	800160a <lfs_tag_dsize>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfa:	441a      	add	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c04:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c0c:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002c20:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
 8002c28:	e73c      	b.n	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002c2a:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681c      	ldr	r4, [r3, #0]
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fce3 	bl	800160a <lfs_tag_dsize>
 8002c44:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002c46:	3b04      	subs	r3, #4
 8002c48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c4c:	9203      	str	r2, [sp, #12]
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	9501      	str	r5, [sp, #4]
 8002c52:	9400      	str	r4, [sp, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4632      	mov	r2, r6
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7fe f9bf 	bl	8000fde <lfs_bd_crc>
 8002c60:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8002c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c6e:	f000 811a 	beq.w	8002ea6 <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c74:	e1f0      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fc5f 	bl	800153c <lfs_tag_type1>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fca2 	bl	80015d0 <lfs_tag_id>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f200 80b5 	bhi.w	8002e04 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fc97 	bl	80015d0 <lfs_tag_id>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002caa:	e0ab      	b.n	8002e04 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fc44 	bl	800153c <lfs_tag_type1>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cba:	d139      	bne.n	8002d30 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fc79 	bl	80015b6 <lfs_tag_splice>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ccc:	4413      	add	r3, r2
 8002cce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <lfs_dir_fetchmatch+0x414>)
 8002cd6:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002cd8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002cdc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 8002ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cec:	663b      	str	r3, [r7, #96]	; 0x60
 8002cee:	e089      	b.n	8002e04 <lfs_dir_fetchmatch+0x524>
 8002cf0:	080127fc 	.word	0x080127fc
 8002cf4:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	f000 8081 	beq.w	8002e04 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fc63 	bl	80015d0 <lfs_tag_id>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fc5d 	bl	80015d0 <lfs_tag_id>
 8002d16:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	d873      	bhi.n	8002e04 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc49 	bl	80015b6 <lfs_tag_splice>
 8002d24:	4603      	mov	r3, r0
 8002d26:	029a      	lsls	r2, r3, #10
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	4413      	add	r3, r2
 8002d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2e:	e069      	b.n	8002e04 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fc02 	bl	800153c <lfs_tag_type1>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d3e:	d132      	bne.n	8002da6 <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fc2a 	bl	800159c <lfs_tag_chunk>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8002d5a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002d60:	69dc      	ldr	r4, [r3, #28]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d68:	3204      	adds	r2, #4
 8002d6a:	2108      	movs	r1, #8
 8002d6c:	9103      	str	r1, [sp, #12]
 8002d6e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002d72:	9102      	str	r1, [sp, #8]
 8002d74:	9201      	str	r2, [sp, #4]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4623      	mov	r3, r4
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7fd ff90 	bl	8000ca4 <lfs_bd_read>
 8002d84:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002d92:	f000 808a 	beq.w	8002eaa <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	e15e      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 8002d9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fb77 	bl	8001492 <lfs_pair_fromle32>
 8002da4:	e02e      	b.n	8002e04 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fbe7 	bl	800157c <lfs_tag_type3>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d124      	bne.n	8002e04 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 8002dba:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002dc0:	69dc      	ldr	r4, [r3, #28]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc8:	3204      	adds	r2, #4
 8002dca:	2108      	movs	r1, #8
 8002dcc:	9103      	str	r1, [sp, #12]
 8002dce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002dd2:	9102      	str	r1, [sp, #8]
 8002dd4:	9201      	str	r2, [sp, #4]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4623      	mov	r3, r4
 8002dda:	4602      	mov	r2, r0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7fd ff60 	bl	8000ca4 <lfs_bd_read>
 8002de4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8002dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002df2:	d05c      	beq.n	8002eae <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fcde 	bl	80017ba <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0a:	405a      	eors	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f47f ae47 	bne.w	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e1c:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e20:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	f107 0220 	add.w	r2, r7, #32
 8002e28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e2c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002e30:	4798      	blx	r3
 8002e32:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da05      	bge.n	8002e46 <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 8002e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e40:	d037      	beq.n	8002eb2 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8002e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002e44:	e108      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e50:	e628      	b.n	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e56:	405a      	eors	r2, r3
 8002e58:	4b81      	ldr	r3, [pc, #516]	; (8003060 <lfs_dir_fetchmatch+0x780>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	663b      	str	r3, [r7, #96]	; 0x60
 8002e66:	e61d      	b.n	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 8002e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	f47f ae1a 	bne.w	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fbac 	bl	80015d0 <lfs_tag_id>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fba6 	bl	80015d0 <lfs_tag_id>
 8002e84:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002e86:	429c      	cmp	r4, r3
 8002e88:	f63f ae0c 	bhi.w	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e92:	663b      	str	r3, [r7, #96]	; 0x60
 8002e94:	e606      	b.n	8002aa4 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8002e96:	bf00      	nop
 8002e98:	e00c      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                break;
 8002e9a:	bf00      	nop
 8002e9c:	e00a      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002e9e:	bf00      	nop
 8002ea0:	e008      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002ea2:	bf00      	nop
 8002ea4:	e006      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002ea6:	bf00      	nop
 8002ea8:	e004      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002eb2:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d000      	beq.n	8002ebe <lfs_dir_fetchmatch+0x5de>
 8002ebc:	e016      	b.n	8002eec <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fa5f 	bl	8001384 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec8:	3301      	adds	r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	bfb8      	it	lt
 8002ed2:	425b      	neglt	r3, r3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002eda:	4413      	add	r3, r2
 8002edc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	673b      	str	r3, [r7, #112]	; 0x70
 8002eea:	e0a1      	b.n	8003030 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002ef2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <lfs_dir_fetchmatch+0x690>
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f02:	6992      	ldr	r2, [r2, #24]
 8002f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f08:	fb02 f201 	mul.w	r2, r2, r1
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d12e      	bne.n	8002f70 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002f12:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02a      	beq.n	8002f70 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1e:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002f20:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8002f26:	69dd      	ldr	r5, [r3, #28]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	68d2      	ldr	r2, [r2, #12]
 8002f30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f32:	f107 001c 	add.w	r0, r7, #28
 8002f36:	9003      	str	r0, [sp, #12]
 8002f38:	9102      	str	r1, [sp, #8]
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	4622      	mov	r2, r4
 8002f42:	2100      	movs	r1, #0
 8002f44:	6978      	ldr	r0, [r7, #20]
 8002f46:	f7fe f84a 	bl	8000fde <lfs_bd_crc>
 8002f4a:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <lfs_dir_fetchmatch+0x67e>
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002f58:	d001      	beq.n	8002f5e <lfs_dir_fetchmatch+0x67e>
                    return err;
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	e07c      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	333c      	adds	r3, #60	; 0x3c
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fbbe 	bl	80016fa <lfs_gstate_hasmovehere>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d028      	beq.n	8002fd6 <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fb21 	bl	80015d0 <lfs_tag_id>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461c      	mov	r4, r3
 8002f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fb1b 	bl	80015d0 <lfs_tag_id>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d104      	bne.n	8002faa <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8002fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa8:	e015      	b.n	8002fd6 <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8002faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d011      	beq.n	8002fd6 <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb0a 	bl	80015d0 <lfs_tag_id>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fb04 	bl	80015d0 <lfs_tag_id>
 8002fc8:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d203      	bcs.n	8002fd6 <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe faf5 	bl	80015d0 <lfs_tag_id>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	8a9b      	ldrh	r3, [r3, #20]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7fd fd7b 	bl	8000aec <lfs_min>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ffe:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8003000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fa79 	bl	80014fa <lfs_tag_isvalid>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <lfs_dir_fetchmatch+0x732>
            return besttag;
 800300e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003010:	e022      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8003012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fadb 	bl	80015d0 <lfs_tag_id>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	8a9b      	ldrh	r3, [r3, #20]
 8003022:	429a      	cmp	r2, r3
 8003024:	d202      	bcs.n	800302c <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8003026:	f06f 0301 	mvn.w	r3, #1
 800302a:	e015      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 800302c:	2300      	movs	r3, #0
 800302e:	e013      	b.n	8003058 <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8003030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003032:	2b01      	cmp	r3, #1
 8003034:	f77f ad02 	ble.w	8002a3c <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4908      	ldr	r1, [pc, #32]	; (8003064 <lfs_dir_fetchmatch+0x784>)
 8003042:	9101      	str	r1, [sp, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	f240 5242 	movw	r2, #1346	; 0x542
 800304c:	4906      	ldr	r1, [pc, #24]	; (8003068 <lfs_dir_fetchmatch+0x788>)
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <lfs_dir_fetchmatch+0x78c>)
 8003050:	f00e fc64 	bl	801191c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8003054:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8003058:	4618      	mov	r0, r3
 800305a:	3784      	adds	r7, #132	; 0x84
 800305c:	46bd      	mov	sp, r7
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003060:	7ffffc00 	.word	0x7ffffc00
 8003064:	080127b8 	.word	0x080127b8
 8003068:	080126b0 	.word	0x080126b0
 800306c:	080127c4 	.word	0x080127c4

08003070 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af04      	add	r7, sp, #16
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800307c:	2300      	movs	r3, #0
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	2300      	movs	r3, #0
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	2300      	movs	r3, #0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	f04f 33ff 	mov.w	r3, #4294967295
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff fc22 	bl	80028e0 <lfs_dir_fetchmatch>
 800309c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <lfs_dir_getgstate+0x5c>)
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <lfs_dir_getgstate+0x60>)
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fe feab 	bl	8001e1c <lfs_dir_get>
 80030c6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da05      	bge.n	80030da <lfs_dir_getgstate+0x32>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f113 0f02 	cmn.w	r3, #2
 80030d4:	d001      	beq.n	80030da <lfs_dir_getgstate+0x32>
        return res;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	e00f      	b.n	80030fa <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f113 0f02 	cmn.w	r3, #2
 80030e0:	d00a      	beq.n	80030f8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fb27 	bl	800173a <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fa9d 	bl	8001632 <lfs_gstate_xor>
    }

    return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	7ff0000c 	.word	0x7ff0000c
 8003108:	7ff00000 	.word	0x7ff00000

0800310c <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003122:	4293      	cmp	r3, r2
 8003124:	d10b      	bne.n	800313e <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3308      	adds	r3, #8
 800312a:	4932      	ldr	r1, [pc, #200]	; (80031f4 <lfs_dir_getinfo+0xe8>)
 800312c:	461a      	mov	r2, r3
 800312e:	460b      	mov	r3, r1
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	701a      	strb	r2, [r3, #0]
        return 0;
 800313a:	2300      	movs	r3, #0
 800313c:	e055      	b.n	80031ea <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	029a      	lsls	r2, r3, #10
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8003148:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <lfs_dir_getinfo+0xec>)
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7fe fe60 	bl	8001e1c <lfs_dir_get>
 800315c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da01      	bge.n	8003168 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	e040      	b.n	80031ea <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fa06 	bl	800157c <lfs_tag_type3>
 8003170:	4603      	mov	r3, r0
 8003172:	b2da      	uxtb	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800317c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	f107 0214 	add.w	r2, r7, #20
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <lfs_dir_getinfo+0xf0>)
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7fe fe44 	bl	8001e1c <lfs_dir_get>
 8003194:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da01      	bge.n	80031a0 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	e024      	b.n	80031ea <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fb38 	bl	800181a <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe f9e5 	bl	800157c <lfs_tag_type3>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	f240 2302 	movw	r3, #514	; 0x202
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d103      	bne.n	80031c6 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	e010      	b.n	80031e8 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe f9d7 	bl	800157c <lfs_tag_type3>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	f240 2301 	movw	r3, #513	; 0x201
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d106      	bne.n	80031e8 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fa07 	bl	80015f0 <lfs_tag_size>
 80031e2:	4602      	mov	r2, r0
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	605a      	str	r2, [r3, #4]
    }

    return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	08012804 	.word	0x08012804
 80031f8:	780ffc00 	.word	0x780ffc00
 80031fc:	700ffc00 	.word	0x700ffc00

08003200 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b08f      	sub	sp, #60	; 0x3c
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	689c      	ldr	r4, [r3, #8]
 800321e:	68b8      	ldr	r0, [r7, #8]
 8003220:	f7fe f9e6 	bl	80015f0 <lfs_tag_size>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f7fd fc5f 	bl	8000aec <lfs_min>
 800322e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8003230:	6a3c      	ldr	r4, [r7, #32]
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	6852      	ldr	r2, [r2, #4]
 800323a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323c:	6849      	ldr	r1, [r1, #4]
 800323e:	69b8      	ldr	r0, [r7, #24]
 8003240:	9003      	str	r0, [sp, #12]
 8003242:	9102      	str	r1, [sp, #8]
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4622      	mov	r2, r4
 800324c:	2100      	movs	r1, #0
 800324e:	6a38      	ldr	r0, [r7, #32]
 8003250:	f7fd fe74 	bl	8000f3c <lfs_bd_cmp>
 8003254:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <lfs_dir_find_match+0x60>
        return res;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	e014      	b.n	800328a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	689c      	ldr	r4, [r3, #8]
 8003264:	68b8      	ldr	r0, [r7, #8]
 8003266:	f7fe f9c3 	bl	80015f0 <lfs_tag_size>
 800326a:	4603      	mov	r3, r0
 800326c:	429c      	cmp	r4, r3
 800326e:	d00b      	beq.n	8003288 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	689c      	ldr	r4, [r3, #8]
 8003274:	68b8      	ldr	r0, [r7, #8]
 8003276:	f7fe f9bb 	bl	80015f0 <lfs_tag_size>
 800327a:	4603      	mov	r3, r0
 800327c:	429c      	cmp	r4, r3
 800327e:	d201      	bcs.n	8003284 <lfs_dir_find_match+0x84>
 8003280:	2301      	movs	r3, #1
 8003282:	e002      	b.n	800328a <lfs_dir_find_match+0x8a>
 8003284:	2302      	movs	r3, #2
 8003286:	e000      	b.n	800328a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	372c      	adds	r7, #44	; 0x2c
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
	...

08003294 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b093      	sub	sp, #76	; 0x4c
 8003298:	af04      	add	r7, sp, #16
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80032b4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80032b6:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <lfs_dir_find+0x1dc>)
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80032ca:	496a      	ldr	r1, [pc, #424]	; (8003474 <lfs_dir_find+0x1e0>)
 80032cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ce:	f00e fc35 	bl	8011b3c <strspn>
 80032d2:	4602      	mov	r2, r0
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	4413      	add	r3, r2
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80032da:	4966      	ldr	r1, [pc, #408]	; (8003474 <lfs_dir_find+0x1e0>)
 80032dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032de:	f00e fc1c 	bl	8011b1a <strcspn>
 80032e2:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d105      	bne.n	80032f6 <lfs_dir_find+0x62>
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <lfs_dir_find+0x1e4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d00a      	beq.n	800330c <lfs_dir_find+0x78>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d10c      	bne.n	8003316 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80032fc:	2202      	movs	r2, #2
 80032fe:	495f      	ldr	r1, [pc, #380]	; (800347c <lfs_dir_find+0x1e8>)
 8003300:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003302:	f00d ff4f 	bl	80111a4 <memcmp>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <lfs_dir_find+0x82>
            name += namelen;
 800330c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	4413      	add	r3, r2
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8003314:	e7d9      	b.n	80032ca <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8003316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	4413      	add	r3, r2
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003322:	4954      	ldr	r1, [pc, #336]	; (8003474 <lfs_dir_find+0x1e0>)
 8003324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003326:	f00e fc09 	bl	8011b3c <strspn>
 800332a:	4602      	mov	r2, r0
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	4413      	add	r3, r2
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8003332:	4950      	ldr	r1, [pc, #320]	; (8003474 <lfs_dir_find+0x1e0>)
 8003334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003336:	f00e fbf0 	bl	8011b1a <strcspn>
 800333a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d01d      	beq.n	800337e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d112      	bne.n	800336e <lfs_dir_find+0xda>
 8003348:	2202      	movs	r2, #2
 800334a:	494c      	ldr	r1, [pc, #304]	; (800347c <lfs_dir_find+0x1e8>)
 800334c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800334e:	f00d ff29 	bl	80111a4 <memcmp>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <lfs_dir_find+0xda>
                depth -= 1;
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	4413      	add	r3, r2
 800336a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800336c:	e7ad      	b.n	80032ca <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	3301      	adds	r3, #1
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	4413      	add	r3, r2
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800337c:	e7d1      	b.n	8003322 <lfs_dir_find+0x8e>
                break;
 800337e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <lfs_dir_find+0xf8>
            return tag;
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	e06c      	b.n	8003466 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003390:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe f8f1 	bl	800157c <lfs_tag_type3>
 800339a:	4603      	mov	r3, r0
 800339c:	2b02      	cmp	r3, #2
 800339e:	d002      	beq.n	80033a6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80033a0:	f06f 0313 	mvn.w	r3, #19
 80033a4:	e05f      	b.n	8003466 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe f911 	bl	80015d0 <lfs_tag_id>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d01c      	beq.n	80033f4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe f907 	bl	80015d0 <lfs_tag_id>
 80033c2:	4603      	mov	r3, r0
 80033c4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80033c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ca:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80033d2:	9200      	str	r2, [sp, #0]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	; (8003480 <lfs_dir_find+0x1ec>)
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7fe fd1f 	bl	8001e1c <lfs_dir_get>
 80033de:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da01      	bge.n	80033ea <lfs_dir_find+0x156>
                return res;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	e03d      	b.n	8003466 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3318      	adds	r3, #24
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f84f 	bl	8001492 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80033fa:	212f      	movs	r1, #47	; 0x2f
 80033fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033fe:	f00e fb7f 	bl	8011b00 <strchr>
 8003402:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <lfs_dir_find+0x178>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	e000      	b.n	800340e <lfs_dir_find+0x17a>
 800340c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	613a      	str	r2, [r7, #16]
 8003412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003414:	617a      	str	r2, [r7, #20]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800341a:	f107 0210 	add.w	r2, r7, #16
 800341e:	9203      	str	r2, [sp, #12]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <lfs_dir_find+0x1f0>)
 8003422:	9202      	str	r2, [sp, #8]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800342e:	4622      	mov	r2, r4
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff fa54 	bl	80028e0 <lfs_dir_fetchmatch>
 8003438:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2b00      	cmp	r3, #0
 800343e:	da01      	bge.n	8003444 <lfs_dir_find+0x1b0>
                return tag;
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	e010      	b.n	8003466 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800344a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	4413      	add	r3, r2
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8003452:	e73a      	b.n	80032ca <lfs_dir_find+0x36>
            if (!dir->split) {
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	7ddb      	ldrb	r3, [r3, #23]
 8003458:	f083 0301 	eor.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0c8      	beq.n	80033f4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8003462:	f06f 0301 	mvn.w	r3, #1
    }
}
 8003466:	4618      	mov	r0, r3
 8003468:	373c      	adds	r7, #60	; 0x3c
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	002ffc00 	.word	0x002ffc00
 8003474:	08012804 	.word	0x08012804
 8003478:	08012808 	.word	0x08012808
 800347c:	0801280c 	.word	0x0801280c
 8003480:	700ffc00 	.word	0x700ffc00
 8003484:	08003201 	.word	0x08003201

08003488 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b08b      	sub	sp, #44	; 0x2c
 800348c:	af04      	add	r7, sp, #16
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f103 0010 	add.w	r0, r3, #16
 800349c:	68fc      	ldr	r4, [r7, #12]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	6852      	ldr	r2, [r2, #4]
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	9103      	str	r1, [sp, #12]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	9102      	str	r1, [sp, #8]
 80034ae:	9201      	str	r2, [sp, #4]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	4622      	mov	r2, r4
 80034b6:	4601      	mov	r1, r0
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7fd fe85 	bl	80011c8 <lfs_bd_prog>
 80034be:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <lfs_dir_commitprog+0x42>
        return err;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	e010      	b.n	80034ec <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fd4e 	bl	8006f74 <lfs_crc>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	441a      	add	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	605a      	str	r2, [r3, #4]
    return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b08f      	sub	sp, #60	; 0x3c
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe f881 	bl	800160a <lfs_tag_dsize>
 8003508:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	441a      	add	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	429a      	cmp	r2, r3
 8003518:	d902      	bls.n	8003520 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800351a:	f06f 031b 	mvn.w	r3, #27
 800351e:	e065      	b.n	80035ec <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4053      	eors	r3, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fb70 	bl	8000c12 <lfs_tobe32>
 8003532:	4603      	mov	r3, r0
 8003534:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8003536:	f107 0214 	add.w	r2, r7, #20
 800353a:	2304      	movs	r3, #4
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff ffa2 	bl	8003488 <lfs_dir_commitprog>
 8003544:	61f8      	str	r0, [r7, #28]
    if (err) {
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <lfs_dir_commitattr+0x5c>
        return err;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	e04d      	b.n	80035ec <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0c      	blt.n	8003570 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	3b04      	subs	r3, #4
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff92 	bl	8003488 <lfs_dir_commitprog>
 8003564:	61f8      	str	r0, [r7, #28]
        if (err) {
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d039      	beq.n	80035e0 <lfs_dir_commitattr+0xec>
            return err;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	e03d      	b.n	80035ec <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e02d      	b.n	80035d6 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800357a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800357c:	6a3a      	ldr	r2, [r7, #32]
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003582:	1f1c      	subs	r4, r3, #4
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	440a      	add	r2, r1
 8003590:	2101      	movs	r1, #1
 8003592:	9103      	str	r1, [sp, #12]
 8003594:	f107 0113 	add.w	r1, r7, #19
 8003598:	9102      	str	r1, [sp, #8]
 800359a:	9201      	str	r2, [sp, #4]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4623      	mov	r3, r4
 80035a0:	4602      	mov	r2, r0
 80035a2:	2100      	movs	r1, #0
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7fd fb7d 	bl	8000ca4 <lfs_bd_read>
 80035aa:	61f8      	str	r0, [r7, #28]
            if (err) {
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <lfs_dir_commitattr+0xc2>
                return err;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	e01a      	b.n	80035ec <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80035b6:	f107 0213 	add.w	r2, r7, #19
 80035ba:	2301      	movs	r3, #1
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff62 	bl	8003488 <lfs_dir_commitprog>
 80035c4:	61f8      	str	r0, [r7, #28]
            if (err) {
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <lfs_dir_commitattr+0xdc>
                return err;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	e00d      	b.n	80035ec <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	3301      	adds	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	3b04      	subs	r3, #4
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3cc      	bcc.n	800357a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
    return 0;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	372c      	adds	r7, #44	; 0x2c
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd90      	pop	{r4, r7, pc}

080035f4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b097      	sub	sp, #92	; 0x5c
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003602:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7fd fa6c 	bl	8000aec <lfs_min>
 8003614:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f7fd fa89 	bl	8000b36 <lfs_alignup>
 8003624:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800362e:	e0fe      	b.n	800382e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	3b04      	subs	r3, #4
 800363a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fa54 	bl	8000aec <lfs_min>
 8003644:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800364c:	3304      	adds	r3, #4
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8003650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	429a      	cmp	r2, r3
 8003656:	d206      	bcs.n	8003666 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	3b14      	subs	r3, #20
 800365c:	4619      	mov	r1, r3
 800365e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003660:	f7fd fa44 	bl	8000aec <lfs_min>
 8003664:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8003666:	23ff      	movs	r3, #255	; 0xff
 8003668:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800366a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	429a      	cmp	r2, r3
 8003670:	d35f      	bcc.n	8003732 <lfs_dir_commitcrc+0x13e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003682:	429a      	cmp	r2, r3
 8003684:	d855      	bhi.n	8003732 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8003686:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800368c:	6998      	ldr	r0, [r3, #24]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	9203      	str	r2, [sp, #12]
 8003696:	f107 021b 	add.w	r2, r7, #27
 800369a:	9202      	str	r2, [sp, #8]
 800369c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800369e:	9201      	str	r2, [sp, #4]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fd fafb 	bl	8000ca4 <lfs_bd_read>
 80036ae:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <lfs_dir_commitcrc+0xce>
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80036bc:	d001      	beq.n	80036c2 <lfs_dir_commitcrc+0xce>
                return err;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	e101      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c6:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80036d0:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 80036d6:	699c      	ldr	r4, [r3, #24]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	f107 0108 	add.w	r1, r7, #8
 80036e2:	3104      	adds	r1, #4
 80036e4:	9103      	str	r1, [sp, #12]
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ea:	9201      	str	r2, [sp, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4623      	mov	r3, r4
 80036f0:	4602      	mov	r2, r0
 80036f2:	2100      	movs	r1, #0
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fd fc72 	bl	8000fde <lfs_bd_crc>
 80036fa:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <lfs_dir_commitcrc+0x11a>
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003708:	d001      	beq.n	800370e <lfs_dir_commitcrc+0x11a>
                    return err;
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	e0db      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800370e:	f107 0308 	add.w	r3, r7, #8
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f869 	bl	80017ea <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <lfs_dir_commitcrc+0x2dc>)
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fee7 	bl	80034f4 <lfs_dir_commitattr>
 8003726:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <lfs_dir_commitcrc+0x13e>
                    return err;
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	e0c9      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8003732:	7efb      	ldrb	r3, [r7, #27]
 8003734:	43db      	mvns	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	09db      	lsrs	r3, r3, #7
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	051a      	lsls	r2, r3, #20
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003748:	1acb      	subs	r3, r1, r3
 800374a:	3b04      	subs	r3, #4
 800374c:	4313      	orrs	r3, r2
 800374e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8003752:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	4053      	eors	r3, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fa56 	bl	8000c12 <lfs_tobe32>
 8003766:	4603      	mov	r3, r0
 8003768:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f107 0110 	add.w	r1, r7, #16
 8003772:	2204      	movs	r2, #4
 8003774:	4618      	mov	r0, r3
 8003776:	f003 fbfd 	bl	8006f74 <lfs_crc>
 800377a:	4602      	mov	r2, r0
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fa2c 	bl	8000be2 <lfs_tole32>
 800378a:	4603      	mov	r3, r0
 800378c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 0010 	add.w	r0, r3, #16
 8003794:	687c      	ldr	r4, [r7, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	6852      	ldr	r2, [r2, #4]
 800379e:	2108      	movs	r1, #8
 80037a0:	9103      	str	r1, [sp, #12]
 80037a2:	f107 0110 	add.w	r1, r7, #16
 80037a6:	9102      	str	r1, [sp, #8]
 80037a8:	9201      	str	r2, [sp, #4]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	4622      	mov	r2, r4
 80037b0:	4601      	mov	r1, r0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fd08 	bl	80011c8 <lfs_bd_prog>
 80037b8:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <lfs_dir_commitcrc+0x1d0>
            return err;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	e080      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80037c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037dc:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80037de:	7efb      	ldrb	r3, [r7, #27]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	061b      	lsls	r3, r3, #24
 80037e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	405a      	eors	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f04f 32ff 	mov.w	r2, #4294967295
 80037f6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80037f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d208      	bcs.n	8003812 <lfs_dir_commitcrc+0x21e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	4413      	add	r3, r2
 800380c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800380e:	429a      	cmp	r2, r3
 8003810:	d30d      	bcc.n	800382e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f103 0110 	add.w	r1, r3, #16
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	2300      	movs	r3, #0
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fc9f 	bl	8001160 <lfs_bd_sync>
 8003822:	6238      	str	r0, [r7, #32]
            if (err) {
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <lfs_dir_commitcrc+0x23a>
                return err;
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	e04b      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003834:	429a      	cmp	r2, r3
 8003836:	f63f aefb 	bhi.w	8003630 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
 8003844:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	1d1c      	adds	r4, r3, #4
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003854:	1a8a      	subs	r2, r1, r2
 8003856:	f107 011c 	add.w	r1, r7, #28
 800385a:	9103      	str	r1, [sp, #12]
 800385c:	9202      	str	r2, [sp, #8]
 800385e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003860:	9201      	str	r2, [sp, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4623      	mov	r3, r4
 8003866:	4602      	mov	r2, r0
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fbb7 	bl	8000fde <lfs_bd_crc>
 8003870:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <lfs_dir_commitcrc+0x288>
        return err;
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	e024      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003880:	429a      	cmp	r2, r3
 8003882:	d002      	beq.n	800388a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003884:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003888:	e01d      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f107 021c 	add.w	r2, r7, #28
 8003894:	9203      	str	r2, [sp, #12]
 8003896:	2204      	movs	r2, #4
 8003898:	9202      	str	r2, [sp, #8]
 800389a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389c:	9201      	str	r2, [sp, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2304      	movs	r3, #4
 80038a2:	460a      	mov	r2, r1
 80038a4:	2100      	movs	r1, #0
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fb99 	bl	8000fde <lfs_bd_crc>
 80038ac:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <lfs_dir_commitcrc+0x2c4>
        return err;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	e006      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80038be:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80038c2:	e000      	b.n	80038c6 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	374c      	adds	r7, #76	; 0x4c
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd90      	pop	{r4, r7, pc}
 80038ce:	bf00      	nop
 80038d0:	5ffffc08 	.word	0x5ffffc08

080038d4 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af04      	add	r7, sp, #16
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e016      	b.n	8003912 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	bfb8      	it	lt
 80038f0:	425b      	neglt	r3, r3
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe f926 	bl	8001b4c <lfs_alloc>
 8003900:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <lfs_dir_alloc+0x38>
            return err;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	e058      	b.n	80039be <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3301      	adds	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	dde5      	ble.n	80038e4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003928:	2004      	movs	r0, #4
 800392a:	9003      	str	r0, [sp, #12]
 800392c:	9202      	str	r2, [sp, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	9201      	str	r2, [sp, #4]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	2304      	movs	r3, #4
 8003936:	460a      	mov	r2, r1
 8003938:	2100      	movs	r1, #0
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd f9b2 	bl	8000ca4 <lfs_bd_read>
 8003940:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd f940 	bl	8000bcc <lfs_fromle32>
 800394c:	4602      	mov	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <lfs_dir_alloc+0x90>
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800395e:	d001      	beq.n	8003964 <lfs_dir_alloc+0x90>
        return err;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	e02c      	b.n	80039be <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2b00      	cmp	r3, #0
 800396c:	dd0e      	ble.n	800398c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7fd f8d8 	bl	8000b36 <lfs_alignup>
 8003986:	4602      	mov	r2, r0
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2204      	movs	r2, #4
 8003990:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b092      	sub	sp, #72	; 0x48
 80039ca:	af04      	add	r7, sp, #16
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	4619      	mov	r1, r3
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ff7a 	bl	80038d4 <lfs_dir_alloc>
 80039e0:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <lfs_dir_split+0x26>
        return err;
 80039e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ea:	e03c      	b.n	8003a66 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	7ddb      	ldrb	r3, [r3, #23]
 80039f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003a00:	f107 0110 	add.w	r1, r7, #16
 8003a04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a08:	9302      	str	r3, [sp, #8]
 8003a0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f879 	bl	8003b10 <lfs_dir_compact>
 8003a1e:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da01      	bge.n	8003a2a <lfs_dir_split+0x64>
        return res;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	e01d      	b.n	8003a66 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3320      	adds	r3, #32
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7fd fccd 	bl	80013e4 <lfs_pair_cmp>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <lfs_dir_split+0x9e>
 8003a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3738      	adds	r7, #56	; 0x38
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f7fd fdc3 	bl	800160a <lfs_tag_dsize>
 8003a84:	4602      	mov	r2, r0
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	441a      	add	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	601a      	str	r2, [r3, #0]
    return 0;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	f7ff fd1d 	bl	80034f4 <lfs_dir_commitattr>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dd11      	ble.n	8003afc <lfs_dir_needsrelocation+0x38>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	3301      	adds	r3, #1
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae4:	3201      	adds	r2, #1
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aee:	fb02 f201 	mul.w	r2, r2, r1
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <lfs_dir_needsrelocation+0x38>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <lfs_dir_needsrelocation+0x3a>
 8003afc:	2300      	movs	r3, #0
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0a4      	sub	sp, #144	; 0x90
 8003b14:	af0a      	add	r7, sp, #40	; 0x28
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f7ff ffcc 	bl	8003ac4 <lfs_dir_needsrelocation>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003b3c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <lfs_dir_compact+0x52>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	657a      	str	r2, [r7, #84]	; 0x54
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b4e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd fc45 	bl	80013e4 <lfs_pair_cmp>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f040 8155 	bne.w	8003e0c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b68:	2300      	movs	r3, #0
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b78:	2300      	movs	r3, #0
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <lfs_dir_compact+0x80>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	3b08      	subs	r3, #8
 8003b8e:	e003      	b.n	8003b98 <lfs_dir_compact+0x88>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003b98:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7fd fbbd 	bl	8001320 <lfs_bd_erase>
 8003ba6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003bb4:	f000 812c 	beq.w	8003e10 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bba:	e187      	b.n	8003ecc <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fd f80e 	bl	8000be2 <lfs_tole32>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003bd2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003bd6:	2304      	movs	r3, #4
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fc55 	bl	8003488 <lfs_dir_commitprog>
 8003bde:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fc fff1 	bl	8000bcc <lfs_fromle32>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
            if (err) {
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003bfc:	f000 810a 	beq.w	8003e14 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c02:	e163      	b.n	8003ecc <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003c04:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003c08:	425b      	negs	r3, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	637a      	str	r2, [r7, #52]	; 0x34
 8003c12:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003c16:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003c18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c1c:	9208      	str	r2, [sp, #32]
 8003c1e:	4aad      	ldr	r2, [pc, #692]	; (8003ed4 <lfs_dir_compact+0x3c4>)
 8003c20:	9207      	str	r2, [sp, #28]
 8003c22:	9306      	str	r3, [sp, #24]
 8003c24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	9303      	str	r3, [sp, #12]
 8003c34:	4ba8      	ldr	r3, [pc, #672]	; (8003ed8 <lfs_dir_compact+0x3c8>)
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	2200      	movs	r2, #0
 8003c46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7fe fa39 	bl	80020c0 <lfs_dir_traverse>
 8003c4e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003c5c:	f000 80dc 	beq.w	8003e18 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c62:	e133      	b.n	8003ecc <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3318      	adds	r3, #24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd fba0 	bl	80013ae <lfs_pair_isnull>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d022      	beq.n	8003cc0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd fc21 	bl	80014c6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	7ddb      	ldrb	r3, [r3, #23]
 8003c88:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003c8c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003c8e:	4a93      	ldr	r2, [pc, #588]	; (8003edc <lfs_dir_compact+0x3cc>)
 8003c90:	431a      	orrs	r2, r3
                        dir->tail);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003c96:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fc2a 	bl	80034f4 <lfs_dir_commitattr>
 8003ca0:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd fbf3 	bl	8001492 <lfs_pair_fromle32>
                if (err) {
 8003cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003cb8:	f000 80b0 	beq.w	8003e1c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbe:	e105      	b.n	8003ecc <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003ccc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003cd0:	f083 0301 	eor.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fca3 	bl	8001632 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd fc9a 	bl	8001632 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fc91 	bl	8001632 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003d1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d20:	461a      	mov	r2, r3
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff f9bf 	bl	80030a8 <lfs_dir_getgstate>
 8003d2a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <lfs_dir_compact+0x226>
                return err;
 8003d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d34:	e0ca      	b.n	8003ecc <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fc9e 	bl	800167c <lfs_gstate_iszero>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f083 0301 	eor.w	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd fd12 	bl	800177a <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003d5e:	4a60      	ldr	r2, [pc, #384]	; (8003ee0 <lfs_dir_compact+0x3d0>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fbc7 	bl	80034f4 <lfs_dir_commitattr>
 8003d66:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d70:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003d74:	d054      	beq.n	8003e20 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	e0a8      	b.n	8003ecc <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003d7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fc37 	bl	80035f4 <lfs_dir_commitcrc>
 8003d86:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003d94:	d046      	beq.n	8003e24 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	e098      	b.n	8003ecc <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003da0:	6992      	ldr	r2, [r2, #24]
 8003da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003da6:	fb02 f201 	mul.w	r2, r2, r1
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <lfs_dir_compact+0x2ae>
 8003db0:	4b4c      	ldr	r3, [pc, #304]	; (8003ee4 <lfs_dir_compact+0x3d4>)
 8003db2:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <lfs_dir_compact+0x3d8>)
 8003db4:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8003db8:	484c      	ldr	r0, [pc, #304]	; (8003eec <lfs_dir_compact+0x3dc>)
 8003dba:	f00d f989 	bl	80110d0 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fadf 	bl	8001384 <lfs_pair_swap>
            dir->count = end - begin;
 8003dc6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003dca:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3348      	adds	r3, #72	; 0x48
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003dee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003df2:	f083 0301 	eor.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d064      	beq.n	8003ec6 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	333c      	adds	r3, #60	; 0x3c
 8003e02:	3230      	adds	r2, #48	; 0x30
 8003e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003e0a:	e05c      	b.n	8003ec6 <lfs_dir_compact+0x3b6>
        goto relocate;
 8003e0c:	bf00      	nop
 8003e0e:	e00a      	b.n	8003e26 <lfs_dir_compact+0x316>
                    goto relocate;
 8003e10:	bf00      	nop
 8003e12:	e008      	b.n	8003e26 <lfs_dir_compact+0x316>
                    goto relocate;
 8003e14:	bf00      	nop
 8003e16:	e006      	b.n	8003e26 <lfs_dir_compact+0x316>
                    goto relocate;
 8003e18:	bf00      	nop
 8003e1a:	e004      	b.n	8003e26 <lfs_dir_compact+0x316>
                        goto relocate;
 8003e1c:	bf00      	nop
 8003e1e:	e002      	b.n	8003e26 <lfs_dir_compact+0x316>
                        goto relocate;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <lfs_dir_compact+0x316>
                    goto relocate;
 8003e24:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3310      	adds	r3, #16
 8003e30:	4619      	mov	r1, r3
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7fc ff10 	bl	8000c58 <lfs_cache_drop>
        if (!tired) {
 8003e38:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <lfs_dir_compact+0x3e0>)
 8003e4c:	9200      	str	r2, [sp, #0]
 8003e4e:	f640 0201 	movw	r2, #2049	; 0x801
 8003e52:	4926      	ldr	r1, [pc, #152]	; (8003eec <lfs_dir_compact+0x3dc>)
 8003e54:	4827      	ldr	r0, [pc, #156]	; (8003ef4 <lfs_dir_compact+0x3e4>)
 8003e56:	f00d fd61 	bl	801191c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	617a      	str	r2, [r7, #20]
 8003e60:	2201      	movs	r2, #1
 8003e62:	61ba      	str	r2, [r7, #24]
 8003e64:	f107 0214 	add.w	r2, r7, #20
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd faba 	bl	80013e4 <lfs_pair_cmp>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10c      	bne.n	8003e90 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <lfs_dir_compact+0x3e0>)
 8003e7c:	9200      	str	r2, [sp, #0]
 8003e7e:	f640 0206 	movw	r2, #2054	; 0x806
 8003e82:	491a      	ldr	r1, [pc, #104]	; (8003eec <lfs_dir_compact+0x3dc>)
 8003e84:	481c      	ldr	r0, [pc, #112]	; (8003ef8 <lfs_dir_compact+0x3e8>)
 8003e86:	f00d fd49 	bl	801191c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003e8a:	f06f 031b 	mvn.w	r3, #27
 8003e8e:	e01d      	b.n	8003ecc <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fd fe58 	bl	8001b4c <lfs_alloc>
 8003e9c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <lfs_dir_compact+0x3ae>
 8003ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea6:	f113 0f1c 	cmn.w	r3, #28
 8003eaa:	d106      	bne.n	8003eba <lfs_dir_compact+0x3aa>
 8003eac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003eb0:	f083 0301 	eor.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <lfs_dir_compact+0x3ae>
            return err;
 8003eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ebc:	e006      	b.n	8003ecc <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003ec4:	e64d      	b.n	8003b62 <lfs_dir_compact+0x52>
        break;
 8003ec6:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003ec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3768      	adds	r7, #104	; 0x68
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	08003a9b 	.word	0x08003a9b
 8003ed8:	400ffc00 	.word	0x400ffc00
 8003edc:	000ffc08 	.word	0x000ffc08
 8003ee0:	7ffffc0c 	.word	0x7ffffc0c
 8003ee4:	08012810 	.word	0x08012810
 8003ee8:	080133dc 	.word	0x080133dc
 8003eec:	080126b0 	.word	0x080126b0
 8003ef0:	080127b8 	.word	0x080127b8
 8003ef4:	08012838 	.word	0x08012838
 8003ef8:	0801285c 	.word	0x0801285c

08003efc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b097      	sub	sp, #92	; 0x5c
 8003f00:	af0a      	add	r7, sp, #40	; 0x28
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003f0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003f10:	e058      	b.n	8003fc4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	4252      	negs	r2, r2
 8003f20:	b292      	uxth	r2, r2
 8003f22:	b212      	sxth	r2, r2
 8003f24:	f107 0118 	add.w	r1, r7, #24
 8003f28:	9108      	str	r1, [sp, #32]
 8003f2a:	4978      	ldr	r1, [pc, #480]	; (800410c <lfs_dir_splittingcompact+0x210>)
 8003f2c:	9107      	str	r1, [sp, #28]
 8003f2e:	9206      	str	r2, [sp, #24]
 8003f30:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f34:	9205      	str	r2, [sp, #20]
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	4b74      	ldr	r3, [pc, #464]	; (8004110 <lfs_dir_splittingcompact+0x214>)
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7fe f8b5 	bl	80020c0 <lfs_dir_traverse>
 8003f56:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <lfs_dir_splittingcompact+0x66>
                return err;
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	e0d0      	b.n	8004104 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003f62:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2bfe      	cmp	r3, #254	; 0xfe
 8003f6c:	d822      	bhi.n	8003fb4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f72:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003f74:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	e003      	b.n	8003f94 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f90:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003f92:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003f98:	6992      	ldr	r2, [r2, #24]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fdca 	bl	8000b36 <lfs_alignup>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7fc fda0 	bl	8000aec <lfs_min>
 8003fac:	4602      	mov	r2, r0
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d20e      	bcs.n	8003fd2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003fb4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc0:	4413      	add	r3, r2
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003fc4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d8a0      	bhi.n	8003f12 <lfs_dir_splittingcompact+0x16>
 8003fd0:	e000      	b.n	8003fd4 <lfs_dir_splittingcompact+0xd8>
                break;
 8003fd2:	bf00      	nop
        }

        if (split == begin) {
 8003fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d02d      	beq.n	800403a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fe6:	9202      	str	r2, [sp, #8]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fce6 	bl	80039c6 <lfs_dir_split>
 8003ffa:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <lfs_dir_splittingcompact+0x112>
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f113 0f1c 	cmn.w	r3, #28
 8004008:	d001      	beq.n	800400e <lfs_dir_splittingcompact+0x112>
            return err;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	e07a      	b.n	8004104 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00e      	beq.n	8004032 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	493d      	ldr	r1, [pc, #244]	; (8004114 <lfs_dir_splittingcompact+0x218>)
 800401e:	9101      	str	r1, [sp, #4]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	f640 0259 	movw	r2, #2137	; 0x859
 8004028:	493b      	ldr	r1, [pc, #236]	; (8004118 <lfs_dir_splittingcompact+0x21c>)
 800402a:	483c      	ldr	r0, [pc, #240]	; (800411c <lfs_dir_splittingcompact+0x220>)
 800402c:	f00d fc76 	bl	801191c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8004030:	e004      	b.n	800403c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8004038:	e767      	b.n	8003f0a <lfs_dir_splittingcompact+0xe>
            break;
 800403a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fd40 	bl	8003ac4 <lfs_dir_needsrelocation>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04d      	beq.n	80040e6 <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	613a      	str	r2, [r7, #16]
 8004050:	2201      	movs	r2, #1
 8004052:	617a      	str	r2, [r7, #20]
 8004054:	f107 0210 	add.w	r2, r7, #16
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7fd f9c2 	bl	80013e4 <lfs_pair_cmp>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d13f      	bne.n	80040e6 <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f002 fede 	bl	8006e28 <lfs_fs_rawsize>
 800406c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2b00      	cmp	r3, #0
 8004072:	da01      	bge.n	8004078 <lfs_dir_splittingcompact+0x17c>
            return size;
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	e045      	b.n	8004104 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	085a      	lsrs	r2, r3, #1
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d930      	bls.n	80040e6 <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a22      	ldr	r2, [pc, #136]	; (8004114 <lfs_dir_splittingcompact+0x218>)
 800408a:	9200      	str	r2, [sp, #0]
 800408c:	f640 026d 	movw	r2, #2157	; 0x86d
 8004090:	4921      	ldr	r1, [pc, #132]	; (8004118 <lfs_dir_splittingcompact+0x21c>)
 8004092:	4823      	ldr	r0, [pc, #140]	; (8004120 <lfs_dir_splittingcompact+0x224>)
 8004094:	f00d fc42 	bl	801191c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004098:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800409c:	9302      	str	r3, [sp, #8]
 800409e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff fc89 	bl	80039c6 <lfs_dir_split>
 80040b4:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <lfs_dir_splittingcompact+0x1cc>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f113 0f1c 	cmn.w	r3, #28
 80040c2:	d001      	beq.n	80040c8 <lfs_dir_splittingcompact+0x1cc>
                return err;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	e01d      	b.n	8004104 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <lfs_dir_splittingcompact+0x218>)
 80040d0:	f640 0277 	movw	r2, #2167	; 0x877
 80040d4:	4910      	ldr	r1, [pc, #64]	; (8004118 <lfs_dir_splittingcompact+0x21c>)
 80040d6:	4813      	ldr	r0, [pc, #76]	; (8004124 <lfs_dir_splittingcompact+0x228>)
 80040d8:	f00d fc20 	bl	801191c <iprintf>
 80040dc:	e003      	b.n	80040e6 <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 80040de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80040e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fd07 	bl	8003b10 <lfs_dir_compact>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3734      	adds	r7, #52	; 0x34
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	08003a6f 	.word	0x08003a6f
 8004110:	400ffc00 	.word	0x400ffc00
 8004114:	080127b8 	.word	0x080127b8
 8004118:	080126b0 	.word	0x080126b0
 800411c:	08012894 	.word	0x08012894
 8004120:	080128c4 	.word	0x080128c4
 8004124:	080128f4 	.word	0x080128f4

08004128 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b0a6      	sub	sp, #152	; 0x98
 800412c:	af0a      	add	r7, sp, #40	; 0x28
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
    int state = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8004140:	2300      	movs	r3, #0
 8004142:	667b      	str	r3, [r7, #100]	; 0x64
 8004144:	e06d      	b.n	8004222 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8004146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd fa13 	bl	800157c <lfs_tag_type3>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	f240 4301 	movw	r3, #1025	; 0x401
 800415e:	429a      	cmp	r2, r3
 8004160:	d106      	bne.n	8004170 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	8a9b      	ldrh	r3, [r3, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	829a      	strh	r2, [r3, #20]
 800416e:	e055      	b.n	800421c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	4413      	add	r3, r2
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd f9fe 	bl	800157c <lfs_tag_type3>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004188:	429a      	cmp	r2, r3
 800418a:	d114      	bne.n	80041b6 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	8a9b      	ldrh	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <lfs_dir_relocatingcommit+0x7a>
 8004194:	4ba4      	ldr	r3, [pc, #656]	; (8004428 <lfs_dir_relocatingcommit+0x300>)
 8004196:	4aa5      	ldr	r2, [pc, #660]	; (800442c <lfs_dir_relocatingcommit+0x304>)
 8004198:	f640 018f 	movw	r1, #2191	; 0x88f
 800419c:	48a4      	ldr	r0, [pc, #656]	; (8004430 <lfs_dir_relocatingcommit+0x308>)
 800419e:	f00c ff97 	bl	80110d0 <__assert_func>
            dir->count -= 1;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	8a9b      	ldrh	r3, [r3, #20]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80041b4:	e032      	b.n	800421c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80041b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd f9bb 	bl	800153c <lfs_tag_type1>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041cc:	d126      	bne.n	800421c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80041ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80041de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4413      	add	r3, r2
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80041ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fd f9cf 	bl	800159c <lfs_tag_chunk>
 80041fe:	4603      	mov	r3, r0
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3318      	adds	r3, #24
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd f93b 	bl	8001492 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800421c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421e:	3301      	adds	r3, #1
 8004220:	667b      	str	r3, [r7, #100]	; 0x64
 8004222:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004228:	429a      	cmp	r2, r3
 800422a:	db8c      	blt.n	8004146 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800422c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02b      	beq.n	800428c <lfs_dir_relocatingcommit+0x164>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	8a9b      	ldrh	r3, [r3, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d127      	bne.n	800428c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800423c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <lfs_dir_relocatingcommit+0x12a>
 8004244:	4b7b      	ldr	r3, [pc, #492]	; (8004434 <lfs_dir_relocatingcommit+0x30c>)
 8004246:	4a79      	ldr	r2, [pc, #484]	; (800442c <lfs_dir_relocatingcommit+0x304>)
 8004248:	f640 019c 	movw	r1, #2204	; 0x89c
 800424c:	4878      	ldr	r0, [pc, #480]	; (8004430 <lfs_dir_relocatingcommit+0x308>)
 800424e:	f00c ff3f 	bl	80110d0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004258:	4619      	mov	r1, r3
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f002 fa4c 	bl	80066f8 <lfs_fs_pred>
 8004260:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8004262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <lfs_dir_relocatingcommit+0x14c>
 8004268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426a:	f113 0f02 	cmn.w	r3, #2
 800426e:	d001      	beq.n	8004274 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004272:	e203      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004276:	f113 0f02 	cmn.w	r3, #2
 800427a:	d007      	beq.n	800428c <lfs_dir_relocatingcommit+0x164>
 800427c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004280:	7ddb      	ldrb	r3, [r3, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004286:	2302      	movs	r3, #2
 8004288:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800428a:	e121      	b.n	80044d0 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	7d9b      	ldrb	r3, [r3, #22]
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80fb 	beq.w	800448c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800429a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <lfs_dir_relocatingcommit+0x1a0>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	3b08      	subs	r3, #8
 80042c6:	e003      	b.n	80042d0 <lfs_dir_relocatingcommit+0x1a8>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	3318      	adds	r3, #24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd f8f5 	bl	80014c6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 80042ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f2:	9308      	str	r3, [sp, #32]
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <lfs_dir_relocatingcommit+0x310>)
 80042f6:	9307      	str	r3, [sp, #28]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9306      	str	r3, [sp, #24]
 80042fc:	2300      	movs	r3, #0
 80042fe:	9305      	str	r3, [sp, #20]
 8004300:	2300      	movs	r3, #0
 8004302:	9304      	str	r3, [sp, #16]
 8004304:	2300      	movs	r3, #0
 8004306:	9303      	str	r3, [sp, #12]
 8004308:	2300      	movs	r3, #0
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	460b      	mov	r3, r1
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7fd fed0 	bl	80020c0 <lfs_dir_traverse>
 8004320:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3318      	adds	r3, #24
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd f8b3 	bl	8001492 <lfs_pair_fromle32>
        if (err) {
 800432c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004334:	f113 0f1c 	cmn.w	r3, #28
 8004338:	f000 80aa 	beq.w	8004490 <lfs_dir_relocatingcommit+0x368>
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004342:	f000 80a5 	beq.w	8004490 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8004346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004348:	e198      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800434a:	f107 031c 	add.w	r3, r7, #28
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd f965 	bl	8001632 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7fd f95c 	bl	8001632 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd f953 	bl	8001632 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004398:	f107 031c 	add.w	r3, r7, #28
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd f96d 	bl	800167c <lfs_gstate_iszero>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d027      	beq.n	80043fe <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	461a      	mov	r2, r3
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7fe fe76 	bl	80030a8 <lfs_dir_getgstate>
 80043bc:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c6:	e159      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fd f9d4 	bl	800177a <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80043d2:	f107 031c 	add.w	r3, r7, #28
 80043d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80043da:	4a18      	ldr	r2, [pc, #96]	; (800443c <lfs_dir_relocatingcommit+0x314>)
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff f889 	bl	80034f4 <lfs_dir_commitattr>
 80043e2:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80043e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80043ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ec:	f113 0f1c 	cmn.w	r3, #28
 80043f0:	d050      	beq.n	8004494 <lfs_dir_relocatingcommit+0x36c>
 80043f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80043f8:	d04c      	beq.n	8004494 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80043fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fc:	e13e      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80043fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004402:	4619      	mov	r1, r3
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff f8f5 	bl	80035f4 <lfs_dir_commitcrc>
 800440a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 800440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004414:	f113 0f1c 	cmn.w	r3, #28
 8004418:	d03e      	beq.n	8004498 <lfs_dir_relocatingcommit+0x370>
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004420:	d03a      	beq.n	8004498 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	e12a      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
 8004426:	bf00      	nop
 8004428:	08012920 	.word	0x08012920
 800442c:	080133ec 	.word	0x080133ec
 8004430:	080126b0 	.word	0x080126b0
 8004434:	08012930 	.word	0x08012930
 8004438:	08003a9b 	.word	0x08003a9b
 800443c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004446:	6992      	ldr	r2, [r2, #24]
 8004448:	fbb3 f1f2 	udiv	r1, r3, r2
 800444c:	fb02 f201 	mul.w	r2, r2, r1
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d006      	beq.n	8004464 <lfs_dir_relocatingcommit+0x33c>
 8004456:	4b8b      	ldr	r3, [pc, #556]	; (8004684 <lfs_dir_relocatingcommit+0x55c>)
 8004458:	4a8b      	ldr	r2, [pc, #556]	; (8004688 <lfs_dir_relocatingcommit+0x560>)
 800445a:	f640 01e6 	movw	r1, #2278	; 0x8e6
 800445e:	488b      	ldr	r0, [pc, #556]	; (800468c <lfs_dir_relocatingcommit+0x564>)
 8004460:	f00c fe36 	bl	80110d0 <__assert_func>
        dir->off = commit.off;
 8004464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800446a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	333c      	adds	r3, #60	; 0x3c
 8004476:	3230      	adds	r2, #48	; 0x30
 8004478:	ca07      	ldmia	r2, {r0, r1, r2}
 800447a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3348      	adds	r3, #72	; 0x48
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	e021      	b.n	80044d0 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800448c:	bf00      	nop
 800448e:	e004      	b.n	800449a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004498:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3310      	adds	r3, #16
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7fc fbd9 	bl	8000c58 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	8a9b      	ldrh	r3, [r3, #20]
 80044aa:	9302      	str	r3, [sp, #8]
 80044ac:	2300      	movs	r3, #0
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff fd1d 	bl	8003efc <lfs_dir_splittingcompact>
 80044c2:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80044c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da01      	bge.n	80044ce <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	e0d6      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 80044ce:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	663b      	str	r3, [r7, #96]	; 0x60
 80044e2:	e0c6      	b.n	8004672 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80044e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e6:	3308      	adds	r3, #8
 80044e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc ff78 	bl	80013e4 <lfs_pair_cmp>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 80b8 	bne.w	800466c <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 80044fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	f103 0408 	add.w	r4, r3, #8
 8004504:	4615      	mov	r5, r2
 8004506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800450a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800450e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	3308      	adds	r3, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	f000 809d 	beq.w	8004658 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 800451e:	2300      	movs	r3, #0
 8004520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004522:	e07b      	b.n	800461c <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd f824 	bl	800157c <lfs_tag_type3>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800453c:	429a      	cmp	r2, r3
 800453e:	d115      	bne.n	800456c <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8004540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004542:	889c      	ldrh	r4, [r3, #4]
 8004544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4413      	add	r3, r2
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd f83e 	bl	80015d0 <lfs_tag_id>
 8004554:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004556:	429c      	cmp	r4, r3
 8004558:	d108      	bne.n	800456c <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e054      	b.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	4413      	add	r3, r2
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd f800 	bl	800157c <lfs_tag_type3>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004584:	429a      	cmp	r2, r3
 8004586:	d11c      	bne.n	80045c2 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800458a:	889c      	ldrh	r4, [r3, #4]
 800458c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4413      	add	r3, r2
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd f81a 	bl	80015d0 <lfs_tag_id>
 800459c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800459e:	429c      	cmp	r4, r3
 80045a0:	d90f      	bls.n	80045c2 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 80045a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a4:	889b      	ldrh	r3, [r3, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ac:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80045ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b0:	799b      	ldrb	r3, [r3, #6]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d12f      	bne.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 80045b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	1e5a      	subs	r2, r3, #1
 80045bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80045c0:	e029      	b.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fc ffd5 	bl	800157c <lfs_tag_type3>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	f240 4301 	movw	r3, #1025	; 0x401
 80045da:	429a      	cmp	r2, r3
 80045dc:	d11b      	bne.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80045de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e0:	889c      	ldrh	r4, [r3, #4]
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fc ffef 	bl	80015d0 <lfs_tag_id>
 80045f2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d30e      	bcc.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 80045f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fa:	889b      	ldrh	r3, [r3, #4]
 80045fc:	3301      	adds	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004602:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004606:	799b      	ldrb	r3, [r3, #6]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d104      	bne.n	8004616 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 800460c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8004616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004618:	3301      	adds	r3, #1
 800461a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800461e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004622:	429a      	cmp	r2, r3
 8004624:	f6ff af7e 	blt.w	8004524 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004628:	e016      	b.n	8004658 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	889a      	ldrh	r2, [r3, #4]
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	8b9b      	ldrh	r3, [r3, #28]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	b29a      	uxth	r2, r3
 8004636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004638:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800463a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800463c:	f103 0108 	add.w	r1, r3, #8
 8004640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004642:	3320      	adds	r3, #32
 8004644:	461a      	mov	r2, r3
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7fe fd12 	bl	8003070 <lfs_dir_fetch>
 800464c:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 800464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8004654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004656:	e011      	b.n	800467c <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8004658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465a:	889a      	ldrh	r2, [r3, #4]
 800465c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465e:	8b9b      	ldrh	r3, [r3, #28]
 8004660:	429a      	cmp	r2, r3
 8004662:	d303      	bcc.n	800466c <lfs_dir_relocatingcommit+0x544>
 8004664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004666:	7fdb      	ldrb	r3, [r3, #31]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1de      	bne.n	800462a <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800466c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	663b      	str	r3, [r7, #96]	; 0x60
 8004672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f af35 	bne.w	80044e4 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800467c:	4618      	mov	r0, r3
 800467e:	3770      	adds	r7, #112	; 0x70
 8004680:	46bd      	mov	sp, r7
 8004682:	bdb0      	pop	{r4, r5, r7, pc}
 8004684:	08012810 	.word	0x08012810
 8004688:	080133ec 	.word	0x080133ec
 800468c:	080126b0 	.word	0x080126b0

08004690 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b0bc      	sub	sp, #240	; 0xf0
 8004694:	af04      	add	r7, sp, #16
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80046a6:	e045      	b.n	8004734 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80046a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ac:	3308      	adds	r3, #8
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d03a      	beq.n	800472a <lfs_dir_orphaningcommit+0x9a>
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b8:	3308      	adds	r3, #8
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fc fe90 	bl	80013e4 <lfs_pair_cmp>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d12f      	bne.n	800472a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80046ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ce:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d12a      	bne.n	800472a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d023      	beq.n	800472a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d91b      	bls.n	800472a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80046f2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fefa 	bl	80054f0 <lfs_file_outline>
 80046fc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800470c:	e2ad      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 800470e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 ff0e 	bl	8005534 <lfs_file_flush>
 8004718:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800471c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004728:	e29f      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1b5      	bne.n	80046a8 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004752:	461d      	mov	r5, r3
 8004754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004758:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800475c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004766:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff fcd8 	bl	8004128 <lfs_dir_relocatingcommit>
 8004778:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800477c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004780:	2b00      	cmp	r3, #0
 8004782:	da02      	bge.n	800478a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004788:	e26f      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fe26 	bl	80013e4 <lfs_pair_cmp>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	461d      	mov	r5, r3
 80047a2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80047a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80047b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d14a      	bne.n	8004850 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3348      	adds	r3, #72	; 0x48
 80047be:	461a      	mov	r2, r3
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fe fc70 	bl	80030a8 <lfs_dir_getgstate>
 80047c8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80047cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <lfs_dir_orphaningcommit+0x14a>
            return err;
 80047d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047d8:	e247      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80047e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3318      	adds	r3, #24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fe6b 	bl	80014c6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	7ddb      	ldrb	r3, [r3, #23]
 80047f4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80047f8:	051a      	lsls	r2, r3, #20
 80047fa:	4bc2      	ldr	r3, [pc, #776]	; (8004b04 <lfs_dir_orphaningcommit+0x474>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	3318      	adds	r3, #24
 8004804:	66bb      	str	r3, [r7, #104]	; 0x68
 8004806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800480a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800480e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004812:	2000      	movs	r0, #0
 8004814:	9001      	str	r0, [sp, #4]
 8004816:	2001      	movs	r0, #1
 8004818:	9000      	str	r0, [sp, #0]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fc84 	bl	8004128 <lfs_dir_relocatingcommit>
 8004820:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	3318      	adds	r3, #24
 8004828:	4618      	mov	r0, r3
 800482a:	f7fc fe32 	bl	8001492 <lfs_pair_fromle32>
        if (state < 0) {
 800482e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004832:	2b00      	cmp	r3, #0
 8004834:	da02      	bge.n	800483c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800483a:	e216      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800483c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004840:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004848:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800484c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004850:	2300      	movs	r3, #0
 8004852:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004856:	e1fc      	b.n	8004c52 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004858:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800485c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004860:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004864:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004868:	4ca7      	ldr	r4, [pc, #668]	; (8004b08 <lfs_dir_orphaningcommit+0x478>)
 800486a:	9403      	str	r4, [sp, #12]
 800486c:	9102      	str	r1, [sp, #8]
 800486e:	9201      	str	r2, [sp, #4]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	f44f 6217 	mov.w	r2, #2416	; 0x970
 8004878:	49a4      	ldr	r1, [pc, #656]	; (8004b0c <lfs_dir_orphaningcommit+0x47c>)
 800487a:	48a5      	ldr	r0, [pc, #660]	; (8004b10 <lfs_dir_orphaningcommit+0x480>)
 800487c:	f00d f84e 	bl	801191c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f103 0220 	add.w	r2, r3, #32
 800488c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fda6 	bl	80013e4 <lfs_pair_cmp>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d107      	bne.n	80048ae <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800489e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80048a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b6:	e037      	b.n	8004928 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80048b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048bc:	f103 0208 	add.w	r2, r3, #8
 80048c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc fd8c 	bl	80013e4 <lfs_pair_cmp>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80048d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80048d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048da:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80048dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80048e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048e4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80048e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048ea:	799b      	ldrb	r3, [r3, #6]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d116      	bne.n	800491e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80048f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048f4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80048f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fd70 	bl	80013e4 <lfs_pair_cmp>
 8004904:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800490a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800490e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004914:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004918:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800491e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004928:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1c3      	bne.n	80048b8 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004930:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004934:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004938:	4619      	mov	r1, r3
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f001 ff8e 	bl	800685c <lfs_fs_parent>
 8004940:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004948:	2b00      	cmp	r3, #0
 800494a:	da07      	bge.n	800495c <lfs_dir_orphaningcommit+0x2cc>
 800494c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004950:	f113 0f02 	cmn.w	r3, #2
 8004954:	d002      	beq.n	800495c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800495a:	e186      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800495c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004960:	f113 0f02 	cmn.w	r3, #2
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800496e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004972:	f113 0f02 	cmn.w	r3, #2
 8004976:	f000 809e 	beq.w	8004ab6 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800497a:	2101      	movs	r1, #1
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f002 f805 	bl	800698c <lfs_fs_preporphans>
 8004982:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <lfs_dir_orphaningcommit+0x304>
                return err;
 800498e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004992:	e16a      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004994:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004998:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3330      	adds	r3, #48	; 0x30
 80049a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fea7 	bl	80016fa <lfs_gstate_hasmovehere>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02d      	beq.n	8004a0e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc fe0a 	bl	80015d0 <lfs_tag_id>
 80049bc:	4603      	mov	r3, r0
 80049be:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80049c2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80049c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80049ca:	484f      	ldr	r0, [pc, #316]	; (8004b08 <lfs_dir_orphaningcommit+0x478>)
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9201      	str	r2, [sp, #4]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	460b      	mov	r3, r1
 80049d4:	f640 129d 	movw	r2, #2461	; 0x99d
 80049d8:	494c      	ldr	r1, [pc, #304]	; (8004b0c <lfs_dir_orphaningcommit+0x47c>)
 80049da:	484e      	ldr	r0, [pc, #312]	; (8004b14 <lfs_dir_orphaningcommit+0x484>)
 80049dc:	f00c ff9e 	bl	801191c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80049e0:	2200      	movs	r2, #0
 80049e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f002 f820 	bl	8006a2c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80049ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc fded 	bl	80015d0 <lfs_tag_id>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d205      	bcs.n	8004a0e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a06:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004a0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a10:	657b      	str	r3, [r7, #84]	; 0x54
 8004a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a14:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004a16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fd53 	bl	80014c6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004a20:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004a24:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <lfs_dir_orphaningcommit+0x3ac>
 8004a2c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004a30:	029b      	lsls	r3, r3, #10
 8004a32:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004a36:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004a3a:	e000      	b.n	8004a3e <lfs_dir_orphaningcommit+0x3ae>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a40:	2300      	movs	r3, #0
 8004a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a54:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004a58:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	9001      	str	r0, [sp, #4]
 8004a60:	2002      	movs	r0, #2
 8004a62:	9000      	str	r0, [sp, #0]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fb5f 	bl	8004128 <lfs_dir_relocatingcommit>
 8004a6a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004a6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc fd0d 	bl	8001492 <lfs_pair_fromle32>
            if (state < 0) {
 8004a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da02      	bge.n	8004a86 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a84:	e0f1      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d113      	bne.n	8004ab6 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004a9a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a9e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aa6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004ab4:	e0cd      	b.n	8004c52 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004ab6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004aba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f001 fe19 	bl	80066f8 <lfs_fs_pred>
 8004ac6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <lfs_dir_orphaningcommit+0x452>
 8004ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ad6:	f113 0f02 	cmn.w	r3, #2
 8004ada:	d002      	beq.n	8004ae2 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ae0:	e0c3      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004ae2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01a      	beq.n	8004b20 <lfs_dir_orphaningcommit+0x490>
 8004aea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aee:	f113 0f02 	cmn.w	r3, #2
 8004af2:	d115      	bne.n	8004b20 <lfs_dir_orphaningcommit+0x490>
 8004af4:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <lfs_dir_orphaningcommit+0x488>)
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <lfs_dir_orphaningcommit+0x48c>)
 8004af8:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 8004afc:	4803      	ldr	r0, [pc, #12]	; (8004b0c <lfs_dir_orphaningcommit+0x47c>)
 8004afe:	f00c fae7 	bl	80110d0 <__assert_func>
 8004b02:	bf00      	nop
 8004b04:	000ffc08 	.word	0x000ffc08
 8004b08:	080127b8 	.word	0x080127b8
 8004b0c:	080126b0 	.word	0x080126b0
 8004b10:	08012938 	.word	0x08012938
 8004b14:	08012974 	.word	0x08012974
 8004b18:	080129b8 	.word	0x080129b8
 8004b1c:	08013408 	.word	0x08013408

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b24:	f113 0f02 	cmn.w	r3, #2
 8004b28:	f000 8093 	beq.w	8004c52 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3330      	adds	r3, #48	; 0x30
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc fdc0 	bl	80016b6 <lfs_gstate_hasorphans>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d011      	beq.n	8004b60 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004b3c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004b40:	425b      	negs	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f001 ff1f 	bl	800698c <lfs_fs_preporphans>
 8004b4e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8004b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b5e:	e084      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004b60:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004b64:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3330      	adds	r3, #48	; 0x30
 8004b6c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc fdc1 	bl	80016fa <lfs_gstate_hasmovehere>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01c      	beq.n	8004bb8 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fd24 	bl	80015d0 <lfs_tag_id>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004b8e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b92:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004b96:	4837      	ldr	r0, [pc, #220]	; (8004c74 <lfs_dir_orphaningcommit+0x5e4>)
 8004b98:	9002      	str	r0, [sp, #8]
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8004ba4:	4934      	ldr	r1, [pc, #208]	; (8004c78 <lfs_dir_orphaningcommit+0x5e8>)
 8004ba6:	4835      	ldr	r0, [pc, #212]	; (8004c7c <lfs_dir_orphaningcommit+0x5ec>)
 8004ba8:	f00c feb8 	bl	801191c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004bac:	2200      	movs	r2, #0
 8004bae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f001 ff3a 	bl	8006a2c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004bc4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fc fc7c 	bl	80014c6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004bce:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004bd2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <lfs_dir_orphaningcommit+0x55a>
 8004bda:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004bde:	029b      	lsls	r3, r3, #10
 8004be0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004be4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004be8:	e000      	b.n	8004bec <lfs_dir_orphaningcommit+0x55c>
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004bf6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004bfa:	051a      	lsls	r2, r3, #20
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <lfs_dir_orphaningcommit+0x5f0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
 8004c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004c10:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004c14:	2000      	movs	r0, #0
 8004c16:	9001      	str	r0, [sp, #4]
 8004c18:	2002      	movs	r0, #2
 8004c1a:	9000      	str	r0, [sp, #0]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fa83 	bl	8004128 <lfs_dir_relocatingcommit>
 8004c22:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004c26:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fc fc31 	bl	8001492 <lfs_pair_fromle32>
            if (state < 0) {
 8004c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	da02      	bge.n	8004c3e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c3c:	e015      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004c3e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004c42:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	f43f adfe 	beq.w	8004858 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004c5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <lfs_dir_orphaningcommit+0x5d8>
 8004c64:	2303      	movs	r3, #3
 8004c66:	e000      	b.n	8004c6a <lfs_dir_orphaningcommit+0x5da>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	37e0      	adds	r7, #224	; 0xe0
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bdb0      	pop	{r4, r5, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	080127b8 	.word	0x080127b8
 8004c78:	080126b0 	.word	0x080126b0
 8004c7c:	08012974 	.word	0x08012974
 8004c80:	000ffc08 	.word	0x000ffc08

08004c84 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fcf9 	bl	8004690 <lfs_dir_orphaningcommit>
 8004c9e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	da01      	bge.n	8004caa <lfs_dir_commit+0x26>
        return orphans;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	e00d      	b.n	8004cc6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f001 fef4 	bl	8006aa0 <lfs_fs_deorphan>
 8004cb8:	6138      	str	r0, [r7, #16]
        if (err) {
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <lfs_dir_commit+0x40>
            return err;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e000      	b.n	8004cc6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b08d      	sub	sp, #52	; 0x34
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f103 0108 	add.w	r1, r3, #8
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7fe fad4 	bl	8003294 <lfs_dir_find>
 8004cec:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da01      	bge.n	8004cf8 <lfs_dir_rawopen+0x28>
        return tag;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	e05e      	b.n	8004db6 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fc3e 	bl	800157c <lfs_tag_type3>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d002      	beq.n	8004d0c <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8004d06:	f06f 0313 	mvn.w	r3, #19
 8004d0a:	e054      	b.n	8004db6 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fc fc5e 	bl	80015d0 <lfs_tag_id>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d106      	bne.n	8004d2e <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e01f      	b.n	8004d6e <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fc4a 	bl	80015d0 <lfs_tag_id>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	f107 0214 	add.w	r2, r7, #20
 8004d4c:	9200      	str	r2, [sp, #0]
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <lfs_dir_rawopen+0xf0>)
 8004d50:	4621      	mov	r1, r4
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7fd f862 	bl	8001e1c <lfs_dir_get>
 8004d58:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da01      	bge.n	8004d64 <lfs_dir_rawopen+0x94>
            return res;
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	e028      	b.n	8004db6 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fc fb92 	bl	8001492 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	3308      	adds	r3, #8
 8004d72:	f107 0214 	add.w	r2, r7, #20
 8004d76:	4619      	mov	r1, r3
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fe f979 	bl	8003070 <lfs_dir_fetch>
 8004d7e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <lfs_dir_rawopen+0xba>
        return err;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	e015      	b.n	8004db6 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2202      	movs	r2, #2
 8004daa:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7fc fdfa 	bl	80019a8 <lfs_mlist_append>

    return 0;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	372c      	adds	r7, #44	; 0x2c
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd90      	pop	{r4, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	700ffc00 	.word	0x700ffc00

08004dc4 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fc fdc7 	bl	8001964 <lfs_mlist_remove>

    return 0;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8004dec:	f44f 7284 	mov.w	r2, #264	; 0x108
 8004df0:	2100      	movs	r1, #0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f00c f9f2 	bl	80111dc <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d110      	bne.n	8004e22 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	4935      	ldr	r1, [pc, #212]	; (8004ee0 <lfs_dir_rawread+0x100>)
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	460b      	mov	r3, r1
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e05a      	b.n	8004ed8 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d110      	bne.n	8004e4c <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3308      	adds	r3, #8
 8004e34:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <lfs_dir_rawread+0x104>)
 8004e36:	8811      	ldrh	r1, [r2, #0]
 8004e38:	7892      	ldrb	r2, [r2, #2]
 8004e3a:	8019      	strh	r1, [r3, #0]
 8004e3c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e045      	b.n	8004ed8 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	889a      	ldrh	r2, [r3, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	8b9b      	ldrh	r3, [r3, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d11a      	bne.n	8004e8e <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	7fdb      	ldrb	r3, [r3, #31]
 8004e5c:	f083 0301 	eor.w	r3, r3, #1
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <lfs_dir_rawread+0x8a>
                return false;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e036      	b.n	8004ed8 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f103 0108 	add.w	r1, r3, #8
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	3320      	adds	r3, #32
 8004e74:	461a      	mov	r2, r3
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7fe f8fa 	bl	8003070 <lfs_dir_fetch>
 8004e7c:	6178      	str	r0, [r7, #20]
            if (err) {
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <lfs_dir_rawread+0xa8>
                return err;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	e027      	b.n	8004ed8 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f103 0108 	add.w	r1, r3, #8
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	889a      	ldrh	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7fe f936 	bl	800310c <lfs_dir_getinfo>
 8004ea0:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <lfs_dir_rawread+0xd4>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f113 0f02 	cmn.w	r3, #2
 8004eae:	d001      	beq.n	8004eb4 <lfs_dir_rawread+0xd4>
            return err;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	e011      	b.n	8004ed8 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	889b      	ldrh	r3, [r3, #4]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f113 0f02 	cmn.w	r3, #2
 8004ec6:	d100      	bne.n	8004eca <lfs_dir_rawread+0xea>
    while (true) {
 8004ec8:	e7c0      	b.n	8004e4c <lfs_dir_rawread+0x6c>
            break;
 8004eca:	bf00      	nop
        }
    }

    dir->pos += 1;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8004ed6:	2301      	movs	r3, #1
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	08012808 	.word	0x08012808
 8004ee4:	0801280c 	.word	0x0801280c

08004ee8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	3b08      	subs	r3, #8
 8004f00:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <lfs_ctz_index+0x2e>
        return 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e01c      	b.n	8004f50 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb fe3c 	bl	8000b98 <lfs_popc>
 8004f20:	4603      	mov	r3, r0
 8004f22:	3302      	adds	r3, #2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	1ad4      	subs	r4, r2, r3
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7fb fe2a 	bl	8000b98 <lfs_popc>
 8004f44:	4603      	mov	r3, r0
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	1ae2      	subs	r2, r4, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	601a      	str	r2, [r3, #0]
    return i;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}

08004f58 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b08f      	sub	sp, #60	; 0x3c
 8004f5c:	af04      	add	r7, sp, #16
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d108      	bne.n	8004f7e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        return 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e053      	b.n	8005026 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	3b01      	subs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7ff ffac 	bl	8004ee8 <lfs_ctz_index>
 8004f90:	4603      	mov	r3, r0
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004f94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f98:	4619      	mov	r1, r3
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff ffa4 	bl	8004ee8 <lfs_ctz_index>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004fa4:	e034      	b.n	8005010 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fdd3 	bl	8000b5a <lfs_npw2>
 8004fb4:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004fb6:	1e5c      	subs	r4, r3, #1
 8004fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fba:	f7fb fdde 	bl	8000b7a <lfs_ctz>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7fb fd92 	bl	8000aec <lfs_min>
 8004fc8:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	9103      	str	r1, [sp, #12]
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	9102      	str	r1, [sp, #8]
 8004fd8:	9201      	str	r2, [sp, #4]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2304      	movs	r3, #4
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fb fe5e 	bl	8000ca4 <lfs_bd_read>
 8004fe8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fded 	bl	8000bcc <lfs_fromle32>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	603b      	str	r3, [r7, #0]
        if (err) {
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <lfs_ctz_find+0xa8>
            return err;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	e012      	b.n	8005026 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8005000:	2201      	movs	r2, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	429a      	cmp	r2, r3
 8005016:	d8c6      	bhi.n	8004fa6 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501c:	601a      	str	r2, [r3, #0]
    *off = pos;
 800501e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005022:	601a      	str	r2, [r3, #0]
    return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	372c      	adds	r7, #44	; 0x2c
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
	...

08005030 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b092      	sub	sp, #72	; 0x48
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800503e:	f107 0320 	add.w	r3, r7, #32
 8005042:	4619      	mov	r1, r3
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7fc fd81 	bl	8001b4c <lfs_alloc>
 800504a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <lfs_ctz_extend+0x26>
            return err;
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	e0e9      	b.n	800522a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	4619      	mov	r1, r3
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7fc f960 	bl	8001320 <lfs_bd_erase>
 8005060:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800506e:	f000 80cb 	beq.w	8005208 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	e0d9      	b.n	800522a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8005076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d107      	bne.n	800508c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005080:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
                return 0;
 8005088:	2300      	movs	r3, #0
 800508a:	e0ce      	b.n	800522a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800508c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508e:	3b01      	subs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005092:	f107 031c 	add.w	r3, r7, #28
 8005096:	4619      	mov	r1, r3
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ff25 	bl	8004ee8 <lfs_ctz_index>
 800509e:	4603      	mov	r3, r0
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d044      	beq.n	800513e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
 80050b8:	e035      	b.n	8005126 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	2301      	movs	r3, #1
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	f107 0317 	add.w	r3, r7, #23
 80050c8:	9302      	str	r3, [sp, #8]
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	2100      	movs	r1, #0
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7fb fde3 	bl	8000ca4 <lfs_bd_read>
 80050de:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <lfs_ctz_extend+0xba>
                        return err;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	e09f      	b.n	800522a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2201      	movs	r2, #1
 80050ee:	9203      	str	r2, [sp, #12]
 80050f0:	f107 0217 	add.w	r2, r7, #23
 80050f4:	9202      	str	r2, [sp, #8]
 80050f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2301      	movs	r3, #1
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7fc f860 	bl	80011c8 <lfs_bd_prog>
 8005108:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005116:	d101      	bne.n	800511c <lfs_ctz_extend+0xec>
                            goto relocate;
 8005118:	bf00      	nop
                    goto relocate;
 800511a:	e075      	b.n	8005208 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800511e:	e084      	b.n	800522a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	3301      	adds	r3, #1
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800512a:	429a      	cmp	r2, r3
 800512c:	d3c5      	bcc.n	80050ba <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800512e:	6a3a      	ldr	r2, [r7, #32]
 8005130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005132:	601a      	str	r2, [r3, #0]
                *off = noff;
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	601a      	str	r2, [r3, #0]
                return 0;
 800513a:	2300      	movs	r3, #0
 800513c:	e075      	b.n	800522a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	3301      	adds	r3, #1
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005146:	f7fb fd18 	bl	8000b7a <lfs_ctz>
 800514a:	4603      	mov	r3, r0
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8005154:	2300      	movs	r3, #0
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
 8005158:	e049      	b.n	80051ee <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fb fd40 	bl	8000be2 <lfs_tole32>
 8005162:	4603      	mov	r3, r0
 8005164:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	2104      	movs	r1, #4
 800516e:	9103      	str	r1, [sp, #12]
 8005170:	f107 0118 	add.w	r1, r7, #24
 8005174:	9102      	str	r1, [sp, #8]
 8005176:	9201      	str	r2, [sp, #4]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2301      	movs	r3, #1
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7fc f821 	bl	80011c8 <lfs_bd_prog>
 8005186:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fd1e 	bl	8000bcc <lfs_fromle32>
 8005190:	4603      	mov	r3, r0
 8005192:	61bb      	str	r3, [r7, #24]
                if (err) {
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80051a0:	d034      	beq.n	800520c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	e041      	b.n	800522a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	3b01      	subs	r3, #1
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d01b      	beq.n	80051e8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	2104      	movs	r1, #4
 80051b8:	9103      	str	r1, [sp, #12]
 80051ba:	f107 0118 	add.w	r1, r7, #24
 80051be:	9102      	str	r1, [sp, #8]
 80051c0:	9201      	str	r2, [sp, #4]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2304      	movs	r3, #4
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	2100      	movs	r1, #0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7fb fd6a 	bl	8000ca4 <lfs_bd_read>
 80051d0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fb fcf9 	bl	8000bcc <lfs_fromle32>
 80051da:	4603      	mov	r3, r0
 80051dc:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <lfs_ctz_extend+0x1b8>
                        return err;
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	e020      	b.n	800522a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	3301      	adds	r3, #1
 80051ec:	633b      	str	r3, [r7, #48]	; 0x30
 80051ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3b1      	bcc.n	800515a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fa:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	009a      	lsls	r2, r3, #2
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005202:	601a      	str	r2, [r3, #0]
            return 0;
 8005204:	2300      	movs	r3, #0
 8005206:	e010      	b.n	800522a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <lfs_ctz_extend+0x1de>
                        goto relocate;
 800520c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <lfs_ctz_extend+0x204>)
 8005212:	9200      	str	r2, [sp, #0]
 8005214:	f640 328a 	movw	r2, #2954	; 0xb8a
 8005218:	4907      	ldr	r1, [pc, #28]	; (8005238 <lfs_ctz_extend+0x208>)
 800521a:	4808      	ldr	r0, [pc, #32]	; (800523c <lfs_ctz_extend+0x20c>)
 800521c:	f00c fb7e 	bl	801191c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7fb fd18 	bl	8000c58 <lfs_cache_drop>
    while (true) {
 8005228:	e709      	b.n	800503e <lfs_ctz_extend+0xe>
    }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3738      	adds	r7, #56	; 0x38
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	080127b8 	.word	0x080127b8
 8005238:	080126b0 	.word	0x080126b0
 800523c:	08012838 	.word	0x08012838

08005240 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b090      	sub	sp, #64	; 0x40
 8005244:	af04      	add	r7, sp, #16
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <lfs_ctz_traverse+0x18>
        return 0;
 8005254:	2300      	movs	r3, #0
 8005256:	e06d      	b.n	8005334 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	3b01      	subs	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	f107 031c 	add.w	r3, r7, #28
 8005262:	4619      	mov	r1, r3
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fe3f 	bl	8004ee8 <lfs_ctz_index>
 800526a:	4603      	mov	r3, r0
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005274:	4798      	blx	r3
 8005276:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <lfs_ctz_traverse+0x42>
            return err;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	e058      	b.n	8005334 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <lfs_ctz_traverse+0x4c>
            return 0;
 8005288:	2300      	movs	r3, #0
 800528a:	e053      	b.n	8005334 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	f1c3 0302 	rsb	r3, r3, #2
 8005296:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8005298:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800529a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800529c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800529e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	9302      	str	r3, [sp, #8]
 80052a8:	2300      	movs	r3, #0
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7fb fcf4 	bl	8000ca4 <lfs_bd_read>
 80052bc:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb fc83 	bl	8000bcc <lfs_fromle32>
 80052c6:	4603      	mov	r3, r0
 80052c8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb fc7d 	bl	8000bcc <lfs_fromle32>
 80052d2:	4603      	mov	r3, r0
 80052d4:	61bb      	str	r3, [r7, #24]
        if (err) {
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <lfs_ctz_traverse+0xa0>
            return err;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	e029      	b.n	8005334 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 80052e0:	2300      	movs	r3, #0
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	e013      	b.n	800530e <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052ee:	4413      	add	r3, r2
 80052f0:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	4611      	mov	r1, r2
 80052f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80052fa:	4798      	blx	r3
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <lfs_ctz_traverse+0xc8>
                return err;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	e015      	b.n	8005334 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	3301      	adds	r3, #1
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	3b01      	subs	r3, #1
 8005312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005314:	429a      	cmp	r2, r3
 8005316:	dbe6      	blt.n	80052e6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	3b01      	subs	r3, #1
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005322:	4413      	add	r3, r2
 8005324:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005328:	603b      	str	r3, [r7, #0]
        index -= count;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8005332:	e79c      	b.n	800526e <lfs_ctz_traverse+0x2e>
    }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3730      	adds	r7, #48	; 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <lfs_file_relocate>:
    return err;
}


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b08d      	sub	sp, #52	; 0x34
 8005340:	af06      	add	r7, sp, #24
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fc fbfd 	bl	8001b4c <lfs_alloc>
 8005352:	6138      	str	r0, [r7, #16]
        if (err) {
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <lfs_file_relocate+0x22>
            return err;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	e0bb      	b.n	80054d6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fb ffdc 	bl	8001320 <lfs_bd_erase>
 8005368:	6138      	str	r0, [r7, #16]
        if (err) {
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d006      	beq.n	800537e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005376:	f000 809b 	beq.w	80054b0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	e0ab      	b.n	80054d6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e069      	b.n	8005458 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d027      	beq.n	80053e0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f103 0008 	add.w	r0, r3, #8
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	889b      	ldrh	r3, [r3, #4]
 80053a8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80053aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b2:	2101      	movs	r1, #1
 80053b4:	9105      	str	r1, [sp, #20]
 80053b6:	f107 010b 	add.w	r1, r7, #11
 80053ba:	9104      	str	r1, [sp, #16]
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	9103      	str	r1, [sp, #12]
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <lfs_file_relocate+0x1a4>)
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	9200      	str	r2, [sp, #0]
 80053c8:	4623      	mov	r3, r4
 80053ca:	2200      	movs	r2, #0
 80053cc:	4601      	mov	r1, r0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fc fd3f 	bl	8001e52 <lfs_dir_getread>
 80053d4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01e      	beq.n	800541a <lfs_file_relocate+0xde>
                    return err;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	e07a      	b.n	80054d6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80053e6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	1ad4      	subs	r4, r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	2201      	movs	r2, #1
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	f107 020b 	add.w	r2, r7, #11
 80053fc:	9202      	str	r2, [sp, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	9201      	str	r2, [sp, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4623      	mov	r3, r4
 8005406:	4602      	mov	r2, r0
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb fc4b 	bl	8000ca4 <lfs_bd_read>
 800540e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <lfs_file_relocate+0xde>
                    return err;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	e05d      	b.n	80054d6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f103 0110 	add.w	r1, r3, #16
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	9203      	str	r2, [sp, #12]
 8005428:	f107 020b 	add.w	r2, r7, #11
 800542c:	9202      	str	r2, [sp, #8]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	9201      	str	r2, [sp, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2301      	movs	r3, #1
 8005436:	4602      	mov	r2, r0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fb fec5 	bl	80011c8 <lfs_bd_prog>
 800543e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800544c:	d032      	beq.n	80054b4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	e041      	b.n	80054d6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	3301      	adds	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	429a      	cmp	r2, r3
 8005460:	d390      	bcc.n	8005384 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69d9      	ldr	r1, [r3, #28]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	461a      	mov	r2, r3
 8005472:	f00b fea5 	bl	80111c0 <memcpy>
        file->cache.block = lfs->pcache.block;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3310      	adds	r3, #16
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fb fbee 	bl	8000c76 <lfs_cache_zero>

        file->block = nblock;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e012      	b.n	80054d6 <lfs_file_relocate+0x19a>
                goto relocate;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <lfs_file_relocate+0x17a>
                    goto relocate;
 80054b4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <lfs_file_relocate+0x1a8>)
 80054ba:	9200      	str	r2, [sp, #0]
 80054bc:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80054c0:	4909      	ldr	r1, [pc, #36]	; (80054e8 <lfs_file_relocate+0x1ac>)
 80054c2:	480a      	ldr	r0, [pc, #40]	; (80054ec <lfs_file_relocate+0x1b0>)
 80054c4:	f00c fa2a 	bl	801191c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3310      	adds	r3, #16
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fbc2 	bl	8000c58 <lfs_cache_drop>
    while (true) {
 80054d4:	e737      	b.n	8005346 <lfs_file_relocate+0xa>
    }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd90      	pop	{r4, r7, pc}
 80054de:	bf00      	nop
 80054e0:	fff7fc00 	.word	0xfff7fc00
 80054e4:	080127b8 	.word	0x080127b8
 80054e8:	080126b0 	.word	0x080126b0
 80054ec:	08012838 	.word	0x08012838

080054f0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc fac0 	bl	8001a88 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff ff16 	bl	800533c <lfs_file_relocate>
 8005510:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <lfs_file_outline+0x2c>
        return err;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e006      	b.n	800552a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b09f      	sub	sp, #124	; 0x7c
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d011      	beq.n	800556e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	3340      	adds	r3, #64	; 0x40
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fb fb7b 	bl	8000c58 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80a4 	beq.w	80056c4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d176      	bne.n	800567c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	2254      	movs	r2, #84	; 0x54
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f00b fe20 	bl	80111dc <memset>
                .ctz.head = file->ctz.head,
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a8:	2301      	movs	r3, #1
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80055b0:	643b      	str	r3, [r7, #64]	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80055b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fb fb48 	bl	8000c58 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80055c8:	e02b      	b.n	8005622 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80055ca:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80055ce:	f107 010c 	add.w	r1, r7, #12
 80055d2:	2301      	movs	r3, #1
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f881 	bl	80056dc <lfs_file_flushedread>
 80055da:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da01      	bge.n	80055e6 <lfs_file_flush+0xb2>
                    return res;
 80055e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e4:	e06f      	b.n	80056c6 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80055e6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80055ea:	2301      	movs	r3, #1
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f946 	bl	8005880 <lfs_file_flushedwrite>
 80055f4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da01      	bge.n	8005600 <lfs_file_flush+0xcc>
                    return res;
 80055fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fe:	e062      	b.n	80056c6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d00b      	beq.n	8005622 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	3340      	adds	r3, #64	; 0x40
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fb fb20 	bl	8000c58 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fb fb1b 	bl	8000c58 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	429a      	cmp	r2, r3
 800562c:	d3cd      	bcc.n	80055ca <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	2301      	movs	r3, #1
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fb fd17 	bl	800106c <lfs_bd_flush>
 800563e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005642:	2b00      	cmp	r3, #0
 8005644:	d026      	beq.n	8005694 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005648:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800564c:	d001      	beq.n	8005652 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800564e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005650:	e039      	b.n	80056c6 <lfs_file_flush+0x192>
                        goto relocate;
 8005652:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <lfs_file_flush+0x19c>)
 800565a:	9200      	str	r2, [sp, #0]
 800565c:	f640 520f 	movw	r2, #3343	; 0xd0f
 8005660:	491c      	ldr	r1, [pc, #112]	; (80056d4 <lfs_file_flush+0x1a0>)
 8005662:	481d      	ldr	r0, [pc, #116]	; (80056d8 <lfs_file_flush+0x1a4>)
 8005664:	f00c f95a 	bl	801191c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe66 	bl	800533c <lfs_file_relocate>
 8005670:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0da      	beq.n	800562e <lfs_file_flush+0xfa>
                    return err;
 8005678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567a:	e024      	b.n	80056c6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7fb fa20 	bl	8000acc <lfs_max>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	635a      	str	r2, [r3, #52]	; 0x34
 8005692:	e000      	b.n	8005696 <lfs_file_flush+0x162>
                break;
 8005694:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c2:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3774      	adds	r7, #116	; 0x74
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}
 80056ce:	bf00      	nop
 80056d0:	080127b8 	.word	0x080127b8
 80056d4:	080126b0 	.word	0x080126b0
 80056d8:	08012838 	.word	0x08012838

080056dc <lfs_file_flushedread>:
    return 0;
}
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b090      	sub	sp, #64	; 0x40
 80056e0:	af06      	add	r7, sp, #24
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d301      	bcc.n	8005702 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	e0b7      	b.n	8005872 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6838      	ldr	r0, [r7, #0]
 8005710:	f7fb f9ec 	bl	8000aec <lfs_min>
 8005714:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800571a:	e0a5      	b.n	8005868 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005730:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d130      	bne.n	8005798 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11c      	bne.n	800577c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	3138      	adds	r1, #56	; 0x38
 8005758:	68b8      	ldr	r0, [r7, #8]
 800575a:	303c      	adds	r0, #60	; 0x3c
 800575c:	9003      	str	r0, [sp, #12]
 800575e:	9102      	str	r1, [sp, #8]
 8005760:	9201      	str	r2, [sp, #4]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462b      	mov	r3, r5
 8005766:	4622      	mov	r2, r4
 8005768:	2100      	movs	r1, #0
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fbf4 	bl	8004f58 <lfs_ctz_find>
 8005770:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <lfs_file_flushedread+0xb0>
                    return err;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	e07a      	b.n	8005872 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f06f 0201 	mvn.w	r2, #1
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	6a38      	ldr	r0, [r7, #32]
 80057a8:	f7fb f9a0 	bl	8000aec <lfs_min>
 80057ac:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d026      	beq.n	8005808 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f103 0408 	add.w	r4, r3, #8
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80057ca:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	889b      	ldrh	r3, [r3, #4]
 80057d0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80057d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80057de:	69b8      	ldr	r0, [r7, #24]
 80057e0:	9005      	str	r0, [sp, #20]
 80057e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e4:	9004      	str	r0, [sp, #16]
 80057e6:	9103      	str	r1, [sp, #12]
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	4b24      	ldr	r3, [pc, #144]	; (800587c <lfs_file_flushedread+0x1a0>)
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	9200      	str	r2, [sp, #0]
 80057f0:	462b      	mov	r3, r5
 80057f2:	2200      	movs	r2, #0
 80057f4:	4621      	mov	r1, r4
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7fc fb2b 	bl	8001e52 <lfs_dir_getread>
 80057fc:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01d      	beq.n	8005840 <lfs_file_flushedread+0x164>
                return err;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	e034      	b.n	8005872 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005812:	69dc      	ldr	r4, [r3, #28]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800581c:	69b9      	ldr	r1, [r7, #24]
 800581e:	9103      	str	r1, [sp, #12]
 8005820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005822:	9102      	str	r1, [sp, #8]
 8005824:	9201      	str	r2, [sp, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	4623      	mov	r3, r4
 800582a:	4602      	mov	r2, r0
 800582c:	2100      	movs	r1, #0
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7fb fa38 	bl	8000ca4 <lfs_bd_read>
 8005834:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <lfs_file_flushedread+0x164>
                return err;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	e018      	b.n	8005872 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	441a      	add	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	441a      	add	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	4413      	add	r3, r2
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f47f af56 	bne.w	800571c <lfs_file_flushedread+0x40>
    }

    return size;
 8005870:	683b      	ldr	r3, [r7, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bdb0      	pop	{r4, r5, r7, pc}
 800587a:	bf00      	nop
 800587c:	fff7fc00 	.word	0xfff7fc00

08005880 <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005880:	b5b0      	push	{r4, r5, r7, lr}
 8005882:	b090      	sub	sp, #64	; 0x40
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 810e 	beq.w	8005ac0 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	441a      	add	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fb f90a 	bl	8000acc <lfs_max>
 80058b8:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80058be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	e003      	b.n	80058dc <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fb f904 	bl	8000aec <lfs_min>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4619      	mov	r1, r3
 80058e8:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80058ec:	f7fb f8fe 	bl	8000aec <lfs_min>
 80058f0:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80058f2:	429c      	cmp	r4, r3
 80058f4:	f240 80e4 	bls.w	8005ac0 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fdf8 	bl	80054f0 <lfs_file_outline>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80db 	beq.w	8005ac0 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	e0d7      	b.n	8005aca <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d16d      	bne.n	8005a10 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d159      	bne.n	80059f4 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d12f      	bne.n	80059ac <lfs_file_flushedwrite+0x12c>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d02b      	beq.n	80059ac <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005966:	3a01      	subs	r2, #1
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800596c:	2000      	movs	r0, #0
 800596e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005970:	f107 0010 	add.w	r0, r7, #16
 8005974:	9003      	str	r0, [sp, #12]
 8005976:	9102      	str	r1, [sp, #8]
 8005978:	9201      	str	r2, [sp, #4]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	462b      	mov	r3, r5
 800597e:	4622      	mov	r2, r4
 8005980:	2100      	movs	r1, #0
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f7ff fae8 	bl	8004f58 <lfs_ctz_find>
 8005988:	6238      	str	r0, [r7, #32]
                    if (err) {
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e094      	b.n	8005aca <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	3340      	adds	r3, #64	; 0x40
 80059a4:	4619      	mov	r1, r3
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7fb f965 	bl	8000c76 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7fc f86b 	bl	8001a88 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80059b8:	68fc      	ldr	r4, [r7, #12]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	3238      	adds	r2, #56	; 0x38
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	313c      	adds	r1, #60	; 0x3c
 80059ca:	9102      	str	r1, [sp, #8]
 80059cc:	9201      	str	r2, [sp, #4]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	462b      	mov	r3, r5
 80059d2:	4622      	mov	r2, r4
 80059d4:	4601      	mov	r1, r0
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fb2a 	bl	8005030 <lfs_ctz_extend>
 80059dc:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	e06a      	b.n	8005aca <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f06f 0201 	mvn.w	r2, #1
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a20:	f7fb f864 	bl	8000aec <lfs_min>
 8005a24:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005a2c:	68fc      	ldr	r4, [r7, #12]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a36:	69b9      	ldr	r1, [r7, #24]
 8005a38:	9103      	str	r1, [sp, #12]
 8005a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3c:	9102      	str	r1, [sp, #8]
 8005a3e:	9201      	str	r2, [sp, #4]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	2301      	movs	r3, #1
 8005a44:	4622      	mov	r2, r4
 8005a46:	4601      	mov	r1, r0
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7fb fbbd 	bl	80011c8 <lfs_bd_prog>
 8005a4e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01c      	beq.n	8005a90 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005a5c:	d007      	beq.n	8005a6e <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	e02d      	b.n	8005aca <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8005a6e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fc62 	bl	800533c <lfs_file_relocate>
 8005a78:	6178      	str	r0, [r7, #20]
            if (err) {
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0d2      	beq.n	8005a26 <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	e01c      	b.n	8005aca <lfs_file_flushedwrite+0x24a>
            break;
 8005a90:	bf00      	nop
            }
        }

        file->pos += diff;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	441a      	add	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	4413      	add	r3, r2
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7fb ffe4 	bl	8001a88 <lfs_alloc_ack>
    while (nsize > 0) {
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f af29 	bne.w	800591a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005ac8:	683b      	ldr	r3, [r7, #0]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3730      	adds	r7, #48	; 0x30
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ad4 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	; 0x30
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <lfs_init+0x34>
 8005afa:	4b98      	ldr	r3, [pc, #608]	; (8005d5c <lfs_init+0x288>)
 8005afc:	4a98      	ldr	r2, [pc, #608]	; (8005d60 <lfs_init+0x28c>)
 8005afe:	f241 0123 	movw	r1, #4131	; 0x1023
 8005b02:	4898      	ldr	r0, [pc, #608]	; (8005d64 <lfs_init+0x290>)
 8005b04:	f00b fae4 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <lfs_init+0x4c>
 8005b12:	4b95      	ldr	r3, [pc, #596]	; (8005d68 <lfs_init+0x294>)
 8005b14:	4a92      	ldr	r2, [pc, #584]	; (8005d60 <lfs_init+0x28c>)
 8005b16:	f241 0124 	movw	r1, #4132	; 0x1024
 8005b1a:	4892      	ldr	r0, [pc, #584]	; (8005d64 <lfs_init+0x290>)
 8005b1c:	f00b fad8 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <lfs_init+0x64>
 8005b2a:	4b90      	ldr	r3, [pc, #576]	; (8005d6c <lfs_init+0x298>)
 8005b2c:	4a8c      	ldr	r2, [pc, #560]	; (8005d60 <lfs_init+0x28c>)
 8005b2e:	f241 0125 	movw	r1, #4133	; 0x1025
 8005b32:	488c      	ldr	r0, [pc, #560]	; (8005d64 <lfs_init+0x290>)
 8005b34:	f00b facc 	bl	80110d0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b42:	6952      	ldr	r2, [r2, #20]
 8005b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b48:	fb02 f201 	mul.w	r2, r2, r1
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d006      	beq.n	8005b60 <lfs_init+0x8c>
 8005b52:	4b87      	ldr	r3, [pc, #540]	; (8005d70 <lfs_init+0x29c>)
 8005b54:	4a82      	ldr	r2, [pc, #520]	; (8005d60 <lfs_init+0x28c>)
 8005b56:	f241 0129 	movw	r1, #4137	; 0x1029
 8005b5a:	4882      	ldr	r0, [pc, #520]	; (8005d64 <lfs_init+0x290>)
 8005b5c:	f00b fab8 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b6a:	6992      	ldr	r2, [r2, #24]
 8005b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b70:	fb02 f201 	mul.w	r2, r2, r1
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <lfs_init+0xb4>
 8005b7a:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <lfs_init+0x2a0>)
 8005b7c:	4a78      	ldr	r2, [pc, #480]	; (8005d60 <lfs_init+0x28c>)
 8005b7e:	f241 012a 	movw	r1, #4138	; 0x102a
 8005b82:	4878      	ldr	r0, [pc, #480]	; (8005d64 <lfs_init+0x290>)
 8005b84:	f00b faa4 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b92:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b98:	fb02 f201 	mul.w	r2, r2, r1
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <lfs_init+0xdc>
 8005ba2:	4b75      	ldr	r3, [pc, #468]	; (8005d78 <lfs_init+0x2a4>)
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	; (8005d60 <lfs_init+0x28c>)
 8005ba6:	f241 012b 	movw	r1, #4139	; 0x102b
 8005baa:	486e      	ldr	r0, [pc, #440]	; (8005d64 <lfs_init+0x290>)
 8005bac:	f00b fa90 	bl	80110d0 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb8:	d806      	bhi.n	8005bc8 <lfs_init+0xf4>
 8005bba:	4b70      	ldr	r3, [pc, #448]	; (8005d7c <lfs_init+0x2a8>)
 8005bbc:	4a68      	ldr	r2, [pc, #416]	; (8005d60 <lfs_init+0x28c>)
 8005bbe:	f241 012e 	movw	r1, #4142	; 0x102e
 8005bc2:	4868      	ldr	r0, [pc, #416]	; (8005d64 <lfs_init+0x290>)
 8005bc4:	f00b fa84 	bl	80110d0 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	3b08      	subs	r3, #8
 8005bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fa ffbe 	bl	8000b5a <lfs_npw2>
 8005bde:	4603      	mov	r3, r0
 8005be0:	009a      	lsls	r2, r3, #2
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d906      	bls.n	8005bfa <lfs_init+0x126>
 8005bec:	4b64      	ldr	r3, [pc, #400]	; (8005d80 <lfs_init+0x2ac>)
 8005bee:	4a5c      	ldr	r2, [pc, #368]	; (8005d60 <lfs_init+0x28c>)
 8005bf0:	f241 0131 	movw	r1, #4145	; 0x1031
 8005bf4:	485b      	ldr	r0, [pc, #364]	; (8005d64 <lfs_init+0x290>)
 8005bf6:	f00b fa6b 	bl	80110d0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <lfs_init+0x13e>
 8005c04:	4b5f      	ldr	r3, [pc, #380]	; (8005d84 <lfs_init+0x2b0>)
 8005c06:	4a56      	ldr	r2, [pc, #344]	; (8005d60 <lfs_init+0x28c>)
 8005c08:	f241 013a 	movw	r1, #4154	; 0x103a
 8005c0c:	4855      	ldr	r0, [pc, #340]	; (8005d64 <lfs_init+0x290>)
 8005c0e:	f00b fa5f 	bl	80110d0 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <lfs_init+0x154>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	e010      	b.n	8005c4a <lfs_init+0x176>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fa fffb 	bl	8000c2a <lfs_malloc>
 8005c34:	4602      	mov	r2, r0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <lfs_init+0x176>
            err = LFS_ERR_NOMEM;
 8005c42:	f06f 030b 	mvn.w	r3, #11
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c48:	e0ff      	b.n	8005e4a <lfs_init+0x376>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <lfs_init+0x18c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	61da      	str	r2, [r3, #28]
 8005c5e:	e010      	b.n	8005c82 <lfs_init+0x1ae>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fa ffdf 	bl	8000c2a <lfs_malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <lfs_init+0x1ae>
            err = LFS_ERR_NOMEM;
 8005c7a:	f06f 030b 	mvn.w	r3, #11
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c80:	e0e3      	b.n	8005e4a <lfs_init+0x376>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fa fff5 	bl	8000c76 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3310      	adds	r3, #16
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fa ffef 	bl	8000c76 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <lfs_init+0x1dc>
 8005ca2:	4b39      	ldr	r3, [pc, #228]	; (8005d88 <lfs_init+0x2b4>)
 8005ca4:	4a2e      	ldr	r2, [pc, #184]	; (8005d60 <lfs_init+0x28c>)
 8005ca6:	f241 0158 	movw	r1, #4184	; 0x1058
 8005caa:	482e      	ldr	r0, [pc, #184]	; (8005d64 <lfs_init+0x290>)
 8005cac:	f00b fa10 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <lfs_init+0x1f8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d006      	beq.n	8005cda <lfs_init+0x206>
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <lfs_init+0x2b8>)
 8005cce:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <lfs_init+0x28c>)
 8005cd0:	f241 0159 	movw	r1, #4185	; 0x1059
 8005cd4:	4823      	ldr	r0, [pc, #140]	; (8005d64 <lfs_init+0x290>)
 8005cd6:	f00b f9fb 	bl	80110d0 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <lfs_init+0x21c>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	665a      	str	r2, [r3, #100]	; 0x64
 8005cee:	e010      	b.n	8005d12 <lfs_init+0x23e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa ff97 	bl	8000c2a <lfs_malloc>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <lfs_init+0x23e>
            err = LFS_ERR_NOMEM;
 8005d0a:	f06f 030b 	mvn.w	r3, #11
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005d10:	e09b      	b.n	8005e4a <lfs_init+0x376>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d18:	2bff      	cmp	r3, #255	; 0xff
 8005d1a:	d906      	bls.n	8005d2a <lfs_init+0x256>
 8005d1c:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <lfs_init+0x2bc>)
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <lfs_init+0x28c>)
 8005d20:	f241 0166 	movw	r1, #4198	; 0x1066
 8005d24:	480f      	ldr	r0, [pc, #60]	; (8005d64 <lfs_init+0x290>)
 8005d26:	f00b f9d3 	bl	80110d0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <lfs_init+0x26e>
        lfs->name_max = LFS_NAME_MAX;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da25      	bge.n	8005d98 <lfs_init+0x2c4>
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <lfs_init+0x2c0>)
 8005d4e:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <lfs_init+0x28c>)
 8005d50:	f241 016c 	movw	r1, #4204	; 0x106c
 8005d54:	4803      	ldr	r0, [pc, #12]	; (8005d64 <lfs_init+0x290>)
 8005d56:	f00b f9bb 	bl	80110d0 <__assert_func>
 8005d5a:	bf00      	nop
 8005d5c:	08012a40 	.word	0x08012a40
 8005d60:	08013420 	.word	0x08013420
 8005d64:	080126b0 	.word	0x080126b0
 8005d68:	08012a5c 	.word	0x08012a5c
 8005d6c:	08012a78 	.word	0x08012a78
 8005d70:	08012a94 	.word	0x08012a94
 8005d74:	08012ac4 	.word	0x08012ac4
 8005d78:	08012af4 	.word	0x08012af4
 8005d7c:	08012b28 	.word	0x08012b28
 8005d80:	08012b44 	.word	0x08012b44
 8005d84:	08012b90 	.word	0x08012b90
 8005d88:	08012bac 	.word	0x08012bac
 8005d8c:	08012bcc 	.word	0x08012bcc
 8005d90:	08012c20 	.word	0x08012c20
 8005d94:	08012c3c 	.word	0x08012c3c
    lfs->file_max = lfs->cfg->file_max;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <lfs_init+0x2de>
        lfs->file_max = LFS_FILE_MAX;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005db0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d906      	bls.n	8005dce <lfs_init+0x2fa>
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <lfs_init+0x388>)
 8005dc2:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <lfs_init+0x38c>)
 8005dc4:	f241 0172 	movw	r1, #4210	; 0x1072
 8005dc8:	4826      	ldr	r0, [pc, #152]	; (8005e64 <lfs_init+0x390>)
 8005dca:	f00b f981 	bl	80110d0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <lfs_init+0x314>
        lfs->attr_max = LFS_ATTR_MAX;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005de6:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d906      	bls.n	8005e06 <lfs_init+0x332>
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <lfs_init+0x394>)
 8005dfa:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <lfs_init+0x38c>)
 8005dfc:	f241 0178 	movw	r1, #4216	; 0x1078
 8005e00:	4818      	ldr	r0, [pc, #96]	; (8005e64 <lfs_init+0x390>)
 8005e02:	f00b f965 	bl	80110d0 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	333c      	adds	r3, #60	; 0x3c
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3330      	adds	r3, #48	; 0x30
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3348      	adds	r3, #72	; 0x48
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e003      	b.n	8005e52 <lfs_init+0x37e>

cleanup:
    lfs_deinit(lfs);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f80e 	bl	8005e6c <lfs_deinit>
    return err;
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3730      	adds	r7, #48	; 0x30
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08012c60 	.word	0x08012c60
 8005e60:	08013420 	.word	0x08013420
 8005e64:	080126b0 	.word	0x080126b0
 8005e68:	08012c7c 	.word	0x08012c7c

08005e6c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fa fedd 	bl	8000c42 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa fed3 	bl	8000c42 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fa fec9 	bl	8000c42 <lfs_free>
    }

    return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0a0      	sub	sp, #128	; 0x80
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fe01 	bl	8005ad4 <lfs_init>
 8005ed2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <lfs_rawformat+0x22>
            return err;
 8005eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005edc:	e08d      	b.n	8005ffa <lfs_rawformat+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <lfs_rawformat+0x38>
 8005ee6:	4b47      	ldr	r3, [pc, #284]	; (8006004 <lfs_rawformat+0x148>)
 8005ee8:	4a47      	ldr	r2, [pc, #284]	; (8006008 <lfs_rawformat+0x14c>)
 8005eea:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8005eee:	4847      	ldr	r0, [pc, #284]	; (800600c <lfs_rawformat+0x150>)
 8005ef0:	f00b f8ee 	bl	80110d0 <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	461a      	mov	r2, r3
 8005f00:	2100      	movs	r1, #0
 8005f02:	f00b f96b 	bl	80111dc <memset>
        lfs->free.off = 0;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f7fa fde6 	bl	8000aec <lfs_min>
 8005f20:	4602      	mov	r2, r0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb fdab 	bl	8001a88 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fd fccb 	bl	80038d4 <lfs_dir_alloc>
 8005f3e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d150      	bne.n	8005fe8 <lfs_rawformat+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb fd40 	bl	80019cc <lfs_fs_disk_version>
 8005f4c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8005f4e:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f54:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8005f56:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8005f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8005f62:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8005f68:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8005f6e:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8005f70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fb fca0 	bl	80018ba <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005f7a:	4b25      	ldr	r3, [pc, #148]	; (8006010 <lfs_rawformat+0x154>)
 8005f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f7e:	2300      	movs	r3, #0
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <lfs_rawformat+0x158>)
 8005f84:	657b      	str	r3, [r7, #84]	; 0x54
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <lfs_rawformat+0x15c>)
 8005f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <lfs_rawformat+0x160>)
 8005f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f92:	663b      	str	r3, [r7, #96]	; 0x60
 8005f94:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005f98:	f107 010c 	add.w	r1, r7, #12
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe fe70 	bl	8004c84 <lfs_dir_commit>
 8005fa4:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8005fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11f      	bne.n	8005fec <lfs_rawformat+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005fb2:	f107 010c 	add.w	r1, r7, #12
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2200      	movs	r2, #0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fe fe62 	bl	8004c84 <lfs_dir_commit>
 8005fc0:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d113      	bne.n	8005ff0 <lfs_rawformat+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	2301      	movs	r3, #1
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005fd4:	f107 030c 	add.w	r3, r7, #12
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fd f848 	bl	8003070 <lfs_dir_fetch>
 8005fe0:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	e004      	b.n	8005ff2 <lfs_rawformat+0x136>
            goto cleanup;
 8005fe8:	bf00      	nop
 8005fea:	e002      	b.n	8005ff2 <lfs_rawformat+0x136>
            goto cleanup;
 8005fec:	bf00      	nop
 8005fee:	e000      	b.n	8005ff2 <lfs_rawformat+0x136>
            goto cleanup;
 8005ff0:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ff3a 	bl	8005e6c <lfs_deinit>
    return err;
 8005ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3780      	adds	r7, #128	; 0x80
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	08012cac 	.word	0x08012cac
 8006008:	0801342c 	.word	0x0801342c
 800600c:	080126b0 	.word	0x080126b0
 8006010:	40100000 	.word	0x40100000
 8006014:	0ff00008 	.word	0x0ff00008
 8006018:	08012cc4 	.word	0x08012cc4
 800601c:	20100018 	.word	0x20100018

08006020 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006022:	b09f      	sub	sp, #124	; 0x7c
 8006024:	af04      	add	r7, sp, #16
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fd51 	bl	8005ad4 <lfs_init>
 8006032:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8006034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <lfs_rawmount+0x1e>
        return err;
 800603a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603c:	e1f1      	b.n	8006422 <lfs_rawmount+0x402>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800603e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006042:	2220      	movs	r2, #32
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f00b f8c8 	bl	80111dc <memset>
 800604c:	2301      	movs	r3, #1
 800604e:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006050:	4aa6      	ldr	r2, [pc, #664]	; (80062ec <lfs_rawmount+0x2cc>)
 8006052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800605a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8006062:	2301      	movs	r3, #1
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006066:	e188      	b.n	800637a <lfs_rawmount+0x35a>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006068:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800606c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006070:	3318      	adds	r3, #24
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7fb f9df 	bl	8001438 <lfs_pair_issync>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8006080:	4b9b      	ldr	r3, [pc, #620]	; (80062f0 <lfs_rawmount+0x2d0>)
 8006082:	f241 02f2 	movw	r2, #4338	; 0x10f2
 8006086:	499b      	ldr	r1, [pc, #620]	; (80062f4 <lfs_rawmount+0x2d4>)
 8006088:	489b      	ldr	r0, [pc, #620]	; (80062f8 <lfs_rawmount+0x2d8>)
 800608a:	f00b fc47 	bl	801191c <iprintf>
            err = LFS_ERR_CORRUPT;
 800608e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006092:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006094:	e1c1      	b.n	800641a <lfs_rawmount+0x3fa>
        }
        if (tortoise_i == tortoise_period) {
 8006096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800609a:	429a      	cmp	r2, r3
 800609c:	d108      	bne.n	80060b0 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 800609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 80060a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 80060aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 80060b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b2:	3301      	adds	r3, #1
 80060b4:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	4b90      	ldr	r3, [pc, #576]	; (80062fc <lfs_rawmount+0x2dc>)
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	2308      	movs	r3, #8
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80060c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060c6:	f103 0218 	add.w	r2, r3, #24
 80060ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80060ce:	f107 0320 	add.w	r3, r7, #32
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	4b8a      	ldr	r3, [pc, #552]	; (8006300 <lfs_rawmount+0x2e0>)
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	2300      	movs	r3, #0
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	4b89      	ldr	r3, [pc, #548]	; (8006304 <lfs_rawmount+0x2e4>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4b89      	ldr	r3, [pc, #548]	; (8006308 <lfs_rawmount+0x2e8>)
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fbfc 	bl	80028e0 <lfs_dir_fetchmatch>
 80060e8:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80060ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	da02      	bge.n	80060f6 <lfs_rawmount+0xd6>
            err = tag;
 80060f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060f2:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80060f4:	e191      	b.n	800641a <lfs_rawmount+0x3fa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80060f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8131 	beq.w	8006360 <lfs_rawmount+0x340>
 80060fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006100:	4618      	mov	r0, r3
 8006102:	f7fb fa08 	bl	8001516 <lfs_tag_isdelete>
 8006106:	4603      	mov	r3, r0
 8006108:	f083 0301 	eor.w	r3, r3, #1
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8126 	beq.w	8006360 <lfs_rawmount+0x340>
            // update root
            lfs->root[0] = dir.pair[0];
 8006114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800611a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006120:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4b78      	ldr	r3, [pc, #480]	; (800630c <lfs_rawmount+0x2ec>)
 800612c:	4a76      	ldr	r2, [pc, #472]	; (8006308 <lfs_rawmount+0x2e8>)
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fe74 	bl	8001e1c <lfs_dir_get>
 8006134:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006138:	2b00      	cmp	r3, #0
 800613a:	da02      	bge.n	8006142 <lfs_rawmount+0x122>
                err = tag;
 800613c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800613e:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006140:	e16b      	b.n	800641a <lfs_rawmount+0x3fa>
            }
            lfs_superblock_fromle32(&superblock);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4618      	mov	r0, r3
 8006148:	f7fb fb7f 	bl	800184a <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fb fc44 	bl	80019e8 <lfs_fs_disk_version_major>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fb fc49 	bl	8001a04 <lfs_fs_disk_version_minor>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800617a:	4293      	cmp	r3, r2
 800617c:	d91d      	bls.n	80061ba <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 800617e:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006182:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb fc2e 	bl	80019e8 <lfs_fs_disk_version_major>
 800618c:	4603      	mov	r3, r0
 800618e:	461e      	mov	r6, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb fc37 	bl	8001a04 <lfs_fs_disk_version_minor>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	4b55      	ldr	r3, [pc, #340]	; (80062f0 <lfs_rawmount+0x2d0>)
 800619c:	9303      	str	r3, [sp, #12]
 800619e:	9202      	str	r2, [sp, #8]
 80061a0:	9601      	str	r6, [sp, #4]
 80061a2:	9400      	str	r4, [sp, #0]
 80061a4:	462b      	mov	r3, r5
 80061a6:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 80061aa:	4952      	ldr	r1, [pc, #328]	; (80062f4 <lfs_rawmount+0x2d4>)
 80061ac:	4858      	ldr	r0, [pc, #352]	; (8006310 <lfs_rawmount+0x2f0>)
 80061ae:	f00b fbb5 	bl	801191c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80061b2:	f06f 0315 	mvn.w	r3, #21
 80061b6:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80061b8:	e0d1      	b.n	800635e <lfs_rawmount+0x33e>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fb fc22 	bl	8001a04 <lfs_fs_disk_version_minor>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d21d      	bcs.n	8006208 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 80061cc:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80061d0:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fb fc07 	bl	80019e8 <lfs_fs_disk_version_major>
 80061da:	4603      	mov	r3, r0
 80061dc:	461e      	mov	r6, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fb fc10 	bl	8001a04 <lfs_fs_disk_version_minor>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <lfs_rawmount+0x2d0>)
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	9202      	str	r2, [sp, #8]
 80061ee:	9601      	str	r6, [sp, #4]
 80061f0:	9400      	str	r4, [sp, #0]
 80061f2:	462b      	mov	r3, r5
 80061f4:	f241 122e 	movw	r2, #4398	; 0x112e
 80061f8:	493e      	ldr	r1, [pc, #248]	; (80062f4 <lfs_rawmount+0x2d4>)
 80061fa:	4846      	ldr	r0, [pc, #280]	; (8006314 <lfs_rawmount+0x2f4>)
 80061fc:	f00b fb8e 	bl	801191c <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8006200:	2101      	movs	r1, #1
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fbac 	bl	8006960 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	429a      	cmp	r2, r3
 8006216:	d910      	bls.n	800623a <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4934      	ldr	r1, [pc, #208]	; (80062f0 <lfs_rawmount+0x2d0>)
 8006220:	9101      	str	r1, [sp, #4]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	f241 123c 	movw	r2, #4412	; 0x113c
 800622a:	4932      	ldr	r1, [pc, #200]	; (80062f4 <lfs_rawmount+0x2d4>)
 800622c:	483a      	ldr	r0, [pc, #232]	; (8006318 <lfs_rawmount+0x2f8>)
 800622e:	f00b fb75 	bl	801191c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006232:	f06f 0315 	mvn.w	r3, #21
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006238:	e091      	b.n	800635e <lfs_rawmount+0x33e>
                }

                lfs->name_max = superblock.name_max;
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624c:	429a      	cmp	r2, r3
 800624e:	d910      	bls.n	8006272 <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006256:	4926      	ldr	r1, [pc, #152]	; (80062f0 <lfs_rawmount+0x2d0>)
 8006258:	9101      	str	r1, [sp, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	f241 1247 	movw	r2, #4423	; 0x1147
 8006262:	4924      	ldr	r1, [pc, #144]	; (80062f4 <lfs_rawmount+0x2d4>)
 8006264:	482d      	ldr	r0, [pc, #180]	; (800631c <lfs_rawmount+0x2fc>)
 8006266:	f00b fb59 	bl	801191c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800626a:	f06f 0315 	mvn.w	r3, #21
 800626e:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006270:	e075      	b.n	800635e <lfs_rawmount+0x33e>
                }

                lfs->file_max = superblock.file_max;
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006284:	429a      	cmp	r2, r3
 8006286:	d910      	bls.n	80062aa <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628e:	4918      	ldr	r1, [pc, #96]	; (80062f0 <lfs_rawmount+0x2d0>)
 8006290:	9101      	str	r1, [sp, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	f241 1252 	movw	r2, #4434	; 0x1152
 800629a:	4916      	ldr	r1, [pc, #88]	; (80062f4 <lfs_rawmount+0x2d4>)
 800629c:	4820      	ldr	r0, [pc, #128]	; (8006320 <lfs_rawmount+0x300>)
 800629e:	f00b fb3d 	bl	801191c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80062a2:	f06f 0315 	mvn.w	r3, #21
 80062a6:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80062a8:	e059      	b.n	800635e <lfs_rawmount+0x33e>
                }

                lfs->attr_max = superblock.attr_max;
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d036      	beq.n	8006328 <lfs_rawmount+0x308>
                    && superblock.block_count != lfs->cfg->block_count) {
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d030      	beq.n	8006328 <lfs_rawmount+0x308>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	4908      	ldr	r1, [pc, #32]	; (80062f0 <lfs_rawmount+0x2d0>)
 80062d0:	9101      	str	r1, [sp, #4]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	f241 125e 	movw	r2, #4446	; 0x115e
 80062da:	4906      	ldr	r1, [pc, #24]	; (80062f4 <lfs_rawmount+0x2d4>)
 80062dc:	4811      	ldr	r0, [pc, #68]	; (8006324 <lfs_rawmount+0x304>)
 80062de:	f00b fb1d 	bl	801191c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80062e2:	f06f 0315 	mvn.w	r3, #21
 80062e6:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80062e8:	e039      	b.n	800635e <lfs_rawmount+0x33e>
 80062ea:	bf00      	nop
 80062ec:	080127fc 	.word	0x080127fc
 80062f0:	080127b8 	.word	0x080127b8
 80062f4:	080126b0 	.word	0x080126b0
 80062f8:	08012cd0 	.word	0x08012cd0
 80062fc:	08012cc4 	.word	0x08012cc4
 8006300:	08003201 	.word	0x08003201
 8006304:	0ff00008 	.word	0x0ff00008
 8006308:	7ffffc00 	.word	0x7ffffc00
 800630c:	20100018 	.word	0x20100018
 8006310:	08012cfc 	.word	0x08012cfc
 8006314:	08012d34 	.word	0x08012d34
 8006318:	08012d74 	.word	0x08012d74
 800631c:	08012da8 	.word	0x08012da8
 8006320:	08012ddc 	.word	0x08012ddc
 8006324:	08012e10 	.word	0x08012e10
            }

            lfs->block_count = superblock.block_count;
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	429a      	cmp	r2, r3
 8006338:	d012      	beq.n	8006360 <lfs_rawmount+0x340>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	493a      	ldr	r1, [pc, #232]	; (800642c <lfs_rawmount+0x40c>)
 8006344:	9101      	str	r1, [sp, #4]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	f241 1267 	movw	r2, #4455	; 0x1167
 800634e:	4938      	ldr	r1, [pc, #224]	; (8006430 <lfs_rawmount+0x410>)
 8006350:	4838      	ldr	r0, [pc, #224]	; (8006434 <lfs_rawmount+0x414>)
 8006352:	f00b fae3 	bl	801191c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006356:	f06f 0315 	mvn.w	r3, #21
 800635a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800635c:	bf00      	nop
            goto cleanup;
 800635e:	e05c      	b.n	800641a <lfs_rawmount+0x3fa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fc fe9b 	bl	80030a8 <lfs_dir_getgstate>
 8006372:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8006374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006376:	2b00      	cmp	r3, #0
 8006378:	d14e      	bne.n	8006418 <lfs_rawmount+0x3f8>
    while (!lfs_pair_isnull(dir.tail)) {
 800637a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7fb f814 	bl	80013ae <lfs_pair_isnull>
 8006386:	4603      	mov	r3, r0
 8006388:	f083 0301 	eor.w	r3, r3, #1
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	f47f ae6a 	bne.w	8006068 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3330      	adds	r3, #48	; 0x30
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb f96f 	bl	800167c <lfs_gstate_iszero>
 800639e:	4603      	mov	r3, r0
 80063a0:	f083 0301 	eor.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <lfs_rawmount+0x3ac>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b6:	481d      	ldr	r0, [pc, #116]	; (800642c <lfs_rawmount+0x40c>)
 80063b8:	9002      	str	r0, [sp, #8]
 80063ba:	9201      	str	r2, [sp, #4]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	460b      	mov	r3, r1
 80063c0:	f241 1277 	movw	r2, #4471	; 0x1177
 80063c4:	491a      	ldr	r1, [pc, #104]	; (8006430 <lfs_rawmount+0x410>)
 80063c6:	481c      	ldr	r0, [pc, #112]	; (8006438 <lfs_rawmount+0x418>)
 80063c8:	f00b faa8 	bl	801191c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fb f892 	bl	80014fa <lfs_tag_isvalid>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	333c      	adds	r3, #60	; 0x3c
 80063f0:	3230      	adds	r2, #48	; 0x30
 80063f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80063f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006400:	fbb3 f1f2 	udiv	r1, r3, r2
 8006404:	fb02 f201 	mul.w	r2, r2, r1
 8006408:	1a9a      	subs	r2, r3, r2
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb fb48 	bl	8001aa4 <lfs_alloc_drop>

    return 0;
 8006414:	2300      	movs	r3, #0
 8006416:	e004      	b.n	8006422 <lfs_rawmount+0x402>
            goto cleanup;
 8006418:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f80e 	bl	800643c <lfs_rawunmount>
    return err;
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006422:	4618      	mov	r0, r3
 8006424:	376c      	adds	r7, #108	; 0x6c
 8006426:	46bd      	mov	sp, r7
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642a:	bf00      	nop
 800642c:	080127b8 	.word	0x080127b8
 8006430:	080126b0 	.word	0x080126b0
 8006434:	08012e44 	.word	0x08012e44
 8006438:	08012e74 	.word	0x08012e74

0800643c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fd11 	bl	8005e6c <lfs_deinit>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b0a1      	sub	sp, #132	; 0x84
 8006458:	af04      	add	r7, sp, #16
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006466:	2220      	movs	r2, #32
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f00a feb6 	bl	80111dc <memset>
 8006470:	2301      	movs	r3, #1
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006474:	4a9b      	ldr	r2, [pc, #620]	; (80066e4 <lfs_fs_rawtraverse+0x290>)
 8006476:	f107 031c 	add.w	r3, r7, #28
 800647a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 800648a:	e0c1      	b.n	8006610 <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800648c:	f107 021c 	add.w	r2, r7, #28
 8006490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006494:	3318      	adds	r3, #24
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7fa ffcd 	bl	8001438 <lfs_pair_issync>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 80064a4:	4b90      	ldr	r3, [pc, #576]	; (80066e8 <lfs_fs_rawtraverse+0x294>)
 80064a6:	f241 12d2 	movw	r2, #4562	; 0x11d2
 80064aa:	4990      	ldr	r1, [pc, #576]	; (80066ec <lfs_fs_rawtraverse+0x298>)
 80064ac:	4890      	ldr	r0, [pc, #576]	; (80066f0 <lfs_fs_rawtraverse+0x29c>)
 80064ae:	f00b fa35 	bl	801191c <iprintf>
            return LFS_ERR_CORRUPT;
 80064b2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80064b6:	e110      	b.n	80066da <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 80064b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064bc:	429a      	cmp	r2, r3
 80064be:	d108      	bne.n	80064d2 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 80064c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80064cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	3301      	adds	r3, #1
 80064d6:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 80064d8:	2300      	movs	r3, #0
 80064da:	667b      	str	r3, [r7, #100]	; 0x64
 80064dc:	e014      	b.n	8006508 <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 80064de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e0:	3306      	adds	r3, #6
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80064e8:	4413      	add	r3, r2
 80064ea:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4611      	mov	r1, r2
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
 80064f6:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 80064f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <lfs_fs_rawtraverse+0xae>
                return err;
 80064fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006500:	e0eb      	b.n	80066da <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 8006502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006504:	3301      	adds	r3, #1
 8006506:	667b      	str	r3, [r7, #100]	; 0x64
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	2b01      	cmp	r3, #1
 800650c:	dde7      	ble.n	80064de <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800650e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006512:	f103 0218 	add.w	r2, r3, #24
 8006516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7fc fda7 	bl	8003070 <lfs_dir_fetch>
 8006522:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <lfs_fs_rawtraverse+0xda>
            return err;
 800652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652c:	e0d5      	b.n	80066da <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800652e:	2300      	movs	r3, #0
 8006530:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006534:	e067      	b.n	8006606 <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006536:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800653a:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800653c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006540:	f043 0308 	orr.w	r3, r3, #8
 8006544:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006548:	f107 0214 	add.w	r2, r7, #20
 800654c:	9200      	str	r2, [sp, #0]
 800654e:	4a69      	ldr	r2, [pc, #420]	; (80066f4 <lfs_fs_rawtraverse+0x2a0>)
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7fb fc63 	bl	8001e1c <lfs_dir_get>
 8006556:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655a:	2b00      	cmp	r3, #0
 800655c:	da05      	bge.n	800656a <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 800655e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006560:	f113 0f02 	cmn.w	r3, #2
 8006564:	d049      	beq.n	80065fa <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 8006566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006568:	e0b7      	b.n	80066da <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 800656a:	f107 0314 	add.w	r3, r7, #20
 800656e:	4618      	mov	r0, r3
 8006570:	f7fb f953 	bl	800181a <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb f800 	bl	800157c <lfs_tag_type3>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	f240 2302 	movw	r3, #514	; 0x202
 8006584:	429a      	cmp	r2, r3
 8006586:	d113      	bne.n	80065b0 <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006588:	68f9      	ldr	r1, [r7, #12]
 800658a:	6978      	ldr	r0, [r7, #20]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	9202      	str	r2, [sp, #8]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	9201      	str	r2, [sp, #4]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4603      	mov	r3, r0
 800659a:	460a      	mov	r2, r1
 800659c:	2100      	movs	r1, #0
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7fe fe4e 	bl	8005240 <lfs_ctz_traverse>
 80065a4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80065a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d027      	beq.n	80065fc <lfs_fs_rawtraverse+0x1a8>
                    return err;
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	e094      	b.n	80066da <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d022      	beq.n	80065fc <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fa ffdf 	bl	800157c <lfs_tag_type3>
 80065be:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c4:	d11a      	bne.n	80065fc <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 80065c6:	2300      	movs	r3, #0
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ca:	e012      	b.n	80065f2 <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 80065cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	f107 0214 	add.w	r2, r7, #20
 80065d4:	4413      	add	r3, r2
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4611      	mov	r1, r2
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
 80065e0:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 80065e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <lfs_fs_rawtraverse+0x198>
                        return err;
 80065e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ea:	e076      	b.n	80066da <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 80065ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ee:	3301      	adds	r3, #1
 80065f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	dde9      	ble.n	80065cc <lfs_fs_rawtraverse+0x178>
 80065f8:	e000      	b.n	80065fc <lfs_fs_rawtraverse+0x1a8>
                    continue;
 80065fa:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80065fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006600:	3301      	adds	r3, #1
 8006602:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006608:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800660c:	429a      	cmp	r2, r3
 800660e:	d392      	bcc.n	8006536 <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 8006610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006614:	3318      	adds	r3, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fa fec9 	bl	80013ae <lfs_pair_isnull>
 800661c:	4603      	mov	r3, r0
 800661e:	f083 0301 	eor.w	r3, r3, #1
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f af31 	bne.w	800648c <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006630:	e04f      	b.n	80066d2 <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 8006632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006634:	799b      	ldrb	r3, [r3, #6]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d147      	bne.n	80066ca <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800663a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01d      	beq.n	8006682 <lfs_fs_rawtraverse+0x22e>
 8006646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d117      	bne.n	8006682 <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006654:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800665c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	9202      	str	r2, [sp, #8]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	9201      	str	r2, [sp, #4]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4623      	mov	r3, r4
 800666e:	4602      	mov	r2, r0
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7fe fde5 	bl	8005240 <lfs_ctz_traverse>
 8006676:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <lfs_fs_rawtraverse+0x22e>
                return err;
 800667e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006680:	e02b      	b.n	80066da <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01e      	beq.n	80066cc <lfs_fs_rawtraverse+0x278>
 800668e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d118      	bne.n	80066cc <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800669a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80066a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	9202      	str	r2, [sp, #8]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	9201      	str	r2, [sp, #4]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4623      	mov	r3, r4
 80066b6:	4602      	mov	r2, r0
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7fe fdc1 	bl	8005240 <lfs_ctz_traverse>
 80066be:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 80066c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <lfs_fs_rawtraverse+0x278>
                return err;
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	e007      	b.n	80066da <lfs_fs_rawtraverse+0x286>
            continue;
 80066ca:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80066cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ac      	bne.n	8006632 <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3774      	adds	r7, #116	; 0x74
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}
 80066e2:	bf00      	nop
 80066e4:	080127fc 	.word	0x080127fc
 80066e8:	080127b8 	.word	0x080127b8
 80066ec:	080126b0 	.word	0x080126b0
 80066f0:	08012cd0 	.word	0x08012cd0
 80066f4:	700ffc00 	.word	0x700ffc00

080066f8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006710:	4a2d      	ldr	r2, [pc, #180]	; (80067c8 <lfs_fs_pred+0xd0>)
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800671a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800671e:	2301      	movs	r3, #1
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8006722:	2301      	movs	r3, #1
 8006724:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006726:	e03e      	b.n	80067a6 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3318      	adds	r3, #24
 800672c:	f107 0214 	add.w	r2, r7, #20
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f7fa fe80 	bl	8001438 <lfs_pair_issync>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800673e:	4b23      	ldr	r3, [pc, #140]	; (80067cc <lfs_fs_pred+0xd4>)
 8006740:	f241 2230 	movw	r2, #4656	; 0x1230
 8006744:	4922      	ldr	r1, [pc, #136]	; (80067d0 <lfs_fs_pred+0xd8>)
 8006746:	4823      	ldr	r0, [pc, #140]	; (80067d4 <lfs_fs_pred+0xdc>)
 8006748:	f00b f8e8 	bl	801191c <iprintf>
            return LFS_ERR_CORRUPT;
 800674c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006750:	e036      	b.n	80067c0 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	429a      	cmp	r2, r3
 8006758:	d10a      	bne.n	8006770 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	3301      	adds	r3, #1
 8006774:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3318      	adds	r3, #24
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fa fe31 	bl	80013e4 <lfs_pair_cmp>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <lfs_fs_pred+0x94>
            return 0;
 8006788:	2300      	movs	r3, #0
 800678a:	e019      	b.n	80067c0 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3318      	adds	r3, #24
 8006790:	461a      	mov	r2, r3
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7fc fc6b 	bl	8003070 <lfs_dir_fetch>
 800679a:	61f8      	str	r0, [r7, #28]
        if (err) {
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <lfs_fs_pred+0xae>
            return err;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	e00c      	b.n	80067c0 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3318      	adds	r3, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fa fdff 	bl	80013ae <lfs_pair_isnull>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f083 0301 	eor.w	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1b5      	bne.n	8006728 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80067bc:	f06f 0301 	mvn.w	r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	; 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080127fc 	.word	0x080127fc
 80067cc:	080127b8 	.word	0x080127b8
 80067d0:	080126b0 	.word	0x080126b0
 80067d4:	08012cd0 	.word	0x08012cd0

080067d8 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80067d8:	b5b0      	push	{r4, r5, r7, lr}
 80067da:	b08e      	sub	sp, #56	; 0x38
 80067dc:	af04      	add	r7, sp, #16
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80067f8:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80067fe:	69dd      	ldr	r5, [r3, #28]
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	2108      	movs	r1, #8
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	f107 0110 	add.w	r1, r7, #16
 8006810:	9102      	str	r1, [sp, #8]
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	462b      	mov	r3, r5
 8006818:	4622      	mov	r2, r4
 800681a:	4601      	mov	r1, r0
 800681c:	6a38      	ldr	r0, [r7, #32]
 800681e:	f7fa fa41 	bl	8000ca4 <lfs_bd_read>
 8006822:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <lfs_fs_parent_match+0x56>
        return err;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	e012      	b.n	8006854 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	4618      	mov	r0, r3
 8006834:	f7fa fe2d 	bl	8001492 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	f107 0310 	add.w	r3, r7, #16
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7fa fdce 	bl	80013e4 <lfs_pair_cmp>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2db      	uxtb	r3, r3
}
 8006854:	4618      	mov	r0, r3
 8006856:	3728      	adds	r7, #40	; 0x28
 8006858:	46bd      	mov	sp, r7
 800685a:	bdb0      	pop	{r4, r5, r7, pc}

0800685c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b090      	sub	sp, #64	; 0x40
 8006860:	af04      	add	r7, sp, #16
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006874:	4a33      	ldr	r2, [pc, #204]	; (8006944 <lfs_fs_parent+0xe8>)
 8006876:	f107 031c 	add.w	r3, r7, #28
 800687a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800687e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006886:	2301      	movs	r3, #1
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800688a:	e049      	b.n	8006920 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3318      	adds	r3, #24
 8006890:	f107 021c 	add.w	r2, r7, #28
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7fa fdce 	bl	8001438 <lfs_pair_issync>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <lfs_fs_parent+0xec>)
 80068a4:	f241 2271 	movw	r2, #4721	; 0x1271
 80068a8:	4928      	ldr	r1, [pc, #160]	; (800694c <lfs_fs_parent+0xf0>)
 80068aa:	4829      	ldr	r0, [pc, #164]	; (8006950 <lfs_fs_parent+0xf4>)
 80068ac:	f00b f836 	bl	801191c <iprintf>
            return LFS_ERR_CORRUPT;
 80068b0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80068b4:	e041      	b.n	800693a <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d10a      	bne.n	80068d4 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	3301      	adds	r3, #1
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80068f0:	f107 0310 	add.w	r3, r7, #16
 80068f4:	9303      	str	r3, [sp, #12]
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <lfs_fs_parent+0xf8>)
 80068f8:	9302      	str	r3, [sp, #8]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	4b16      	ldr	r3, [pc, #88]	; (8006958 <lfs_fs_parent+0xfc>)
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4b16      	ldr	r3, [pc, #88]	; (800695c <lfs_fs_parent+0x100>)
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fb ffea 	bl	80028e0 <lfs_dir_fetchmatch>
 800690c:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <lfs_fs_parent+0xc4>
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	f113 0f02 	cmn.w	r3, #2
 800691a:	d001      	beq.n	8006920 <lfs_fs_parent+0xc4>
            return tag;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	e00c      	b.n	800693a <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3318      	adds	r3, #24
 8006924:	4618      	mov	r0, r3
 8006926:	f7fa fd42 	bl	80013ae <lfs_pair_isnull>
 800692a:	4603      	mov	r3, r0
 800692c:	f083 0301 	eor.w	r3, r3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1aa      	bne.n	800688c <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006936:	f06f 0301 	mvn.w	r3, #1
}
 800693a:	4618      	mov	r0, r3
 800693c:	3730      	adds	r7, #48	; 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	080127fc 	.word	0x080127fc
 8006948:	080127b8 	.word	0x080127b8
 800694c:	080126b0 	.word	0x080126b0
 8006950:	08012cd0 	.word	0x08012cd0
 8006954:	080067d9 	.word	0x080067d9
 8006958:	20000008 	.word	0x20000008
 800695c:	7ff003ff 	.word	0x7ff003ff

08006960 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	025b      	lsls	r3, r3, #9
 8006978:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800698c:	b590      	push	{r4, r7, lr}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	4618      	mov	r0, r3
 800699e:	f7fa fe27 	bl	80015f0 <lfs_tag_size>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <lfs_fs_preporphans+0x32>
 80069a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da06      	bge.n	80069be <lfs_fs_preporphans+0x32>
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <lfs_fs_preporphans+0x90>)
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <lfs_fs_preporphans+0x94>)
 80069b4:	f241 2192 	movw	r1, #4754	; 0x1292
 80069b8:	481a      	ldr	r0, [pc, #104]	; (8006a24 <lfs_fs_preporphans+0x98>)
 80069ba:	f00a fb89 	bl	80110d0 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fa fe14 	bl	80015f0 <lfs_tag_size>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80069ce:	d90a      	bls.n	80069e6 <lfs_fs_preporphans+0x5a>
 80069d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dd06      	ble.n	80069e6 <lfs_fs_preporphans+0x5a>
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <lfs_fs_preporphans+0x9c>)
 80069da:	4a11      	ldr	r2, [pc, #68]	; (8006a20 <lfs_fs_preporphans+0x94>)
 80069dc:	f241 2193 	movw	r1, #4755	; 0x1293
 80069e0:	4810      	ldr	r0, [pc, #64]	; (8006a24 <lfs_fs_preporphans+0x98>)
 80069e2:	f00a fb75 	bl	80110d0 <__assert_func>
    lfs->gstate.tag += orphans;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3330      	adds	r3, #48	; 0x30
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fa fe58 	bl	80016b6 <lfs_gstate_hasorphans>
 8006a06:	4603      	mov	r3, r0
 8006a08:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006a0a:	ea44 0203 	orr.w	r2, r4, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	08012eac 	.word	0x08012eac
 8006a20:	0801343c 	.word	0x0801343c
 8006a24:	080126b0 	.word	0x080126b0
 8006a28:	08012ee4 	.word	0x08012ee4

08006a2c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	460b      	mov	r3, r1
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <lfs_fs_prepmove+0x70>)
 8006a40:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006a42:	897b      	ldrh	r3, [r7, #10]
 8006a44:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	d006      	beq.n	8006a5a <lfs_fs_prepmove+0x2e>
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006a54:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006a58:	e000      	b.n	8006a5c <lfs_fs_prepmove+0x30>
 8006a5a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006a62:	897b      	ldrh	r3, [r7, #10]
 8006a64:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d002      	beq.n	8006a72 <lfs_fs_prepmove+0x46>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	e000      	b.n	8006a74 <lfs_fs_prepmove+0x48>
 8006a72:	2300      	movs	r3, #0
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <lfs_fs_prepmove+0x5e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	e000      	b.n	8006a8c <lfs_fs_prepmove+0x60>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	800003ff 	.word	0x800003ff

08006aa0 <lfs_fs_deorphan>:
    return 0;
}
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006aa0:	b5b0      	push	{r4, r5, r7, lr}
 8006aa2:	b0b2      	sub	sp, #200	; 0xc8
 8006aa4:	af04      	add	r7, sp, #16
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3330      	adds	r3, #48	; 0x30
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fa fe00 	bl	80016b6 <lfs_gstate_hasorphans>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f083 0301 	eor.w	r3, r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <lfs_fs_deorphan+0x26>
        return 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e187      	b.n	8006dd6 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006acc:	e170      	b.n	8006db0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f00a fb80 	bl	80111dc <memset>
 8006adc:	2301      	movs	r3, #1
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006aea:	e149      	b.n	8006d80 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	f103 0218 	add.w	r2, r3, #24
 8006af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fc fab8 	bl	8003070 <lfs_dir_fetch>
 8006b00:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8006b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <lfs_fs_deorphan+0x72>
                return err;
 8006b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b10:	e161      	b.n	8006dd6 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006b12:	7ffb      	ldrb	r3, [r7, #31]
 8006b14:	f083 0301 	eor.w	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8126 	beq.w	8006d6c <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006b20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b24:	f107 0308 	add.w	r3, r7, #8
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fe95 	bl	800685c <lfs_fs_parent>
 8006b32:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da07      	bge.n	8006b4e <lfs_fs_deorphan+0xae>
 8006b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b42:	f113 0f02 	cmn.w	r3, #2
 8006b46:	d002      	beq.n	8006b4e <lfs_fs_deorphan+0xae>
                    return tag;
 8006b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b4c:	e143      	b.n	8006dd6 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 80ac 	bne.w	8006cb0 <lfs_fs_deorphan+0x210>
 8006b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b5c:	f113 0f02 	cmn.w	r3, #2
 8006b60:	f000 80a6 	beq.w	8006cb0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006b64:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006b6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4613      	mov	r3, r2
 8006b74:	4a9a      	ldr	r2, [pc, #616]	; (8006de0 <lfs_fs_deorphan+0x340>)
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb f950 	bl	8001e1c <lfs_dir_get>
 8006b7c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006b80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da02      	bge.n	8006b8e <lfs_fs_deorphan+0xee>
                        return state;
 8006b88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b8c:	e0eb      	b.n	8006d66 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006b8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fa fc7d 	bl	8001492 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	f103 0218 	add.w	r2, r3, #24
 8006ba0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fa fc46 	bl	8001438 <lfs_pair_issync>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f083 0301 	eor.w	r3, r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d07b      	beq.n	8006cb0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006bb8:	6a38      	ldr	r0, [r7, #32]
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006bc0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006bc4:	4c87      	ldr	r4, [pc, #540]	; (8006de4 <lfs_fs_deorphan+0x344>)
 8006bc6:	9403      	str	r4, [sp, #12]
 8006bc8:	9102      	str	r1, [sp, #8]
 8006bca:	9201      	str	r2, [sp, #4]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f241 3221 	movw	r2, #4897	; 0x1321
 8006bd4:	4984      	ldr	r1, [pc, #528]	; (8006de8 <lfs_fs_deorphan+0x348>)
 8006bd6:	4885      	ldr	r0, [pc, #532]	; (8006dec <lfs_fs_deorphan+0x34c>)
 8006bd8:	f00a fea0 	bl	801191c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006bdc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006be0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3330      	adds	r3, #48	; 0x30
 8006be8:	f107 0208 	add.w	r2, r7, #8
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fa fd83 	bl	80016fa <lfs_gstate_hasmovehere>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01c      	beq.n	8006c34 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fa fce6 	bl	80015d0 <lfs_tag_id>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006c12:	4874      	ldr	r0, [pc, #464]	; (8006de4 <lfs_fs_deorphan+0x344>)
 8006c14:	9002      	str	r0, [sp, #8]
 8006c16:	9201      	str	r2, [sp, #4]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	f241 322c 	movw	r2, #4908	; 0x132c
 8006c20:	4971      	ldr	r1, [pc, #452]	; (8006de8 <lfs_fs_deorphan+0x348>)
 8006c22:	4873      	ldr	r0, [pc, #460]	; (8006df0 <lfs_fs_deorphan+0x350>)
 8006c24:	f00a fe7a 	bl	801191c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fefc 	bl	8006a2c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006c34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa fc44 	bl	80014c6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006c3e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006c42:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d007      	beq.n	8006c5a <lfs_fs_deorphan+0x1ba>
 8006c4a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006c54:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006c58:	e000      	b.n	8006c5c <lfs_fs_deorphan+0x1bc>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c66:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <lfs_fs_deorphan+0x354>)
 8006c68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c74:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fd fd06 	bl	8004690 <lfs_dir_orphaningcommit>
 8006c84:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006c88:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fa fc00 	bl	8001492 <lfs_pair_fromle32>
                        if (state < 0) {
 8006c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da02      	bge.n	8006ca0 <lfs_fs_deorphan+0x200>
                            return state;
 8006c9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006c9e:	e062      	b.n	8006d66 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006ca0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d16b      	bne.n	8006d80 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006cae:	e067      	b.n	8006d80 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8006cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d159      	bne.n	8006d6c <lfs_fs_deorphan+0x2cc>
 8006cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cbc:	f113 0f02 	cmn.w	r3, #2
 8006cc0:	d154      	bne.n	8006d6c <lfs_fs_deorphan+0x2cc>
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d051      	beq.n	8006d6c <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	4945      	ldr	r1, [pc, #276]	; (8006de4 <lfs_fs_deorphan+0x344>)
 8006cce:	9101      	str	r1, [sp, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	f241 324c 	movw	r2, #4940	; 0x134c
 8006cd8:	4943      	ldr	r1, [pc, #268]	; (8006de8 <lfs_fs_deorphan+0x348>)
 8006cda:	4847      	ldr	r0, [pc, #284]	; (8006df8 <lfs_fs_deorphan+0x358>)
 8006cdc:	f00a fe1e 	bl	801191c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fc f9db 	bl	80030a8 <lfs_dir_getgstate>
 8006cf2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8006cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <lfs_fs_deorphan+0x264>
                        return err;
 8006cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d02:	e030      	b.n	8006d66 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d08:	3318      	adds	r3, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fa fbdb 	bl	80014c6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006d10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d14:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006d18:	051a      	lsls	r2, r3, #20
 8006d1a:	4b38      	ldr	r3, [pc, #224]	; (8006dfc <lfs_fs_deorphan+0x35c>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d24:	3318      	adds	r3, #24
 8006d26:	677b      	str	r3, [r7, #116]	; 0x74
 8006d28:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006d2c:	f107 0108 	add.w	r1, r7, #8
 8006d30:	2301      	movs	r3, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fd fcac 	bl	8004690 <lfs_dir_orphaningcommit>
 8006d38:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d40:	3318      	adds	r3, #24
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa fba5 	bl	8001492 <lfs_pair_fromle32>
                    if (state < 0) {
 8006d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	da02      	bge.n	8006d56 <lfs_fs_deorphan+0x2b6>
                        return state;
 8006d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8006d54:	e03f      	b.n	8006dd6 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d104      	bne.n	8006d68 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006d64:	e00c      	b.n	8006d80 <lfs_fs_deorphan+0x2e0>
                return err;
 8006d66:	e036      	b.n	8006dd6 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8006d68:	bf00      	nop
 8006d6a:	e009      	b.n	8006d80 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8006d6c:	f107 0408 	add.w	r4, r7, #8
 8006d70:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8006d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	3318      	adds	r3, #24
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fa fb11 	bl	80013ae <lfs_pair_isnull>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f083 0301 	eor.w	r3, r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f47f aea9 	bne.w	8006aec <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8006d9a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <lfs_fs_deorphan+0x306>
 8006da2:	2300      	movs	r3, #0
 8006da4:	e002      	b.n	8006dac <lfs_fs_deorphan+0x30c>
 8006da6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006daa:	3301      	adds	r3, #1
 8006dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006db0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	f77f ae8a 	ble.w	8006ace <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3330      	adds	r3, #48	; 0x30
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fa fc8c 	bl	80016dc <lfs_gstate_getorphans>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	425b      	negs	r3, r3
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	b25b      	sxtb	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fddc 	bl	800698c <lfs_fs_preporphans>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	37b8      	adds	r7, #184	; 0xb8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dde:	bf00      	nop
 8006de0:	7ffffc00 	.word	0x7ffffc00
 8006de4:	080127b8 	.word	0x080127b8
 8006de8:	080126b0 	.word	0x080126b0
 8006dec:	08012fb8 	.word	0x08012fb8
 8006df0:	08012ffc 	.word	0x08012ffc
 8006df4:	600ffc08 	.word	0x600ffc08
 8006df8:	08013044 	.word	0x08013044
 8006dfc:	000ffc08 	.word	0x000ffc08

08006e00 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	601a      	str	r2, [r3, #0]
    return 0;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006e34:	f107 0208 	add.w	r2, r7, #8
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4907      	ldr	r1, [pc, #28]	; (8006e58 <lfs_fs_rawsize+0x30>)
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fb09 	bl	8006454 <lfs_fs_rawtraverse>
 8006e42:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <lfs_fs_rawsize+0x26>
        return err;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e000      	b.n	8006e50 <lfs_fs_rawsize+0x28>
    }

    return size;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	08006e01 	.word	0x08006e01

08006e5c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <lfs_format+0x18>
        return err;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	e005      	b.n	8006e80 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff f820 	bl	8005ebc <lfs_rawformat>
 8006e7c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <lfs_mount+0x18>
        return err;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	e005      	b.n	8006eac <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff f8bc 	bl	8006020 <lfs_rawmount>
 8006ea8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
    if (err) {
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <lfs_dir_open+0x1a>
        return err;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	e019      	b.n	8006f02 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fa fd28 	bl	800192a <lfs_mlist_isopen>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f083 0301 	eor.w	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <lfs_dir_open+0x40>
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <lfs_dir_open+0x58>)
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <lfs_dir_open+0x5c>)
 8006eea:	f241 71f3 	movw	r1, #6131	; 0x17f3
 8006eee:	4809      	ldr	r0, [pc, #36]	; (8006f14 <lfs_dir_open+0x60>)
 8006ef0:	f00a f8ee 	bl	80110d0 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7fd fee9 	bl	8004cd0 <lfs_dir_rawopen>
 8006efe:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f00:	697b      	ldr	r3, [r7, #20]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08013104 	.word	0x08013104
 8006f10:	08013450 	.word	0x08013450
 8006f14:	080126b0 	.word	0x080126b0

08006f18 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <lfs_dir_close+0x18>
        return err;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	e005      	b.n	8006f3c <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fd ff46 	bl	8004dc4 <lfs_dir_rawclose>
 8006f38:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
    if (err) {
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <lfs_dir_read+0x1a>
        return err;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	e006      	b.n	8006f6c <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7fd ff3c 	bl	8004de0 <lfs_dir_rawread>
 8006f68:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e024      	b.n	8006fd4 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	091a      	lsrs	r2, r3, #4
 8006f8e:	6939      	ldr	r1, [r7, #16]
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	440b      	add	r3, r1
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	4619      	mov	r1, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	404b      	eors	r3, r1
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	4912      	ldr	r1, [pc, #72]	; (8006fec <lfs_crc+0x78>)
 8006fa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006fa6:	4053      	eors	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	091a      	lsrs	r2, r3, #4
 8006fae:	6939      	ldr	r1, [r7, #16]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	091b      	lsrs	r3, r3, #4
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	404b      	eors	r3, r1
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	4909      	ldr	r1, [pc, #36]	; (8006fec <lfs_crc+0x78>)
 8006fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006fca:	4053      	eors	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d3d6      	bcc.n	8006f8a <lfs_crc+0x16>
    }

    return crc;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	08013460 	.word	0x08013460

08006ff0 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
//	}
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	HAL_TIM_Base_Start(&htim2);
//	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
//	HAL_TIM_Base_Stop(&htim2);
	HAL_Delay(1000);
 8006ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ffc:	f001 fcb6 	bl	800896c <HAL_Delay>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <nor_cs_assert>:

void nor_cs_assert(){
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800700c:	2200      	movs	r2, #0
 800700e:	2108      	movs	r1, #8
 8007010:	4802      	ldr	r0, [pc, #8]	; (800701c <nor_cs_assert+0x14>)
 8007012:	f002 fd7b 	bl	8009b0c <HAL_GPIO_WritePin>
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	40020c00 	.word	0x40020c00

08007020 <nor_cs_deassert>:

void nor_cs_deassert(){
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8007024:	2201      	movs	r2, #1
 8007026:	2108      	movs	r1, #8
 8007028:	4802      	ldr	r0, [pc, #8]	; (8007034 <nor_cs_deassert+0x14>)
 800702a:	f002 fd6f 	bl	8009b0c <HAL_GPIO_WritePin>
}
 800702e:	bf00      	nop
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40020c00 	.word	0x40020c00

08007038 <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <nor_spi_tx+0x28>)
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, pData, Size, 1000);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	b29a      	uxth	r2, r3
 800704c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4804      	ldr	r0, [pc, #16]	; (8007064 <nor_spi_tx+0x2c>)
 8007054:	f004 fbc7 	bl	800b7e6 <HAL_SPI_Transmit>
//	while (DmaEnd == 0);
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20000208 	.word	0x20000208
 8007064:	200005b0 	.word	0x200005b0

08007068 <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Receive(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <nor_spi_rx+0x28>)
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, pData, Size, 1000);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	b29a      	uxth	r2, r3
 800707c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4804      	ldr	r0, [pc, #16]	; (8007094 <nor_spi_rx+0x2c>)
 8007084:	f004 fceb 	bl	800ba5e <HAL_SPI_Receive>
//	DmaEnd =0;
//	while (DmaEnd == 0);
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000208 	.word	0x20000208
 8007094:	200005b0 	.word	0x200005b0

08007098 <__init_nor>:

void __init_nor(){
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <__init_nor+0x38>)
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <__init_nor+0x3c>)
 80070a0:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <__init_nor+0x38>)
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <__init_nor+0x40>)
 80070a6:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 80070a8:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <__init_nor+0x38>)
 80070aa:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <__init_nor+0x44>)
 80070ac:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <__init_nor+0x38>)
 80070b0:	4a0b      	ldr	r2, [pc, #44]	; (80070e0 <__init_nor+0x48>)
 80070b2:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <__init_nor+0x38>)
 80070b6:	4a0b      	ldr	r2, [pc, #44]	; (80070e4 <__init_nor+0x4c>)
 80070b8:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 80070ba:	4805      	ldr	r0, [pc, #20]	; (80070d0 <__init_nor+0x38>)
 80070bc:	f000 fc37 	bl	800792e <NOR_Init>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <__init_nor+0x32>
		Error_Handler();
 80070c6:	f000 fb05 	bl	80076d4 <Error_Handler>
	}
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	200007c0 	.word	0x200007c0
 80070d4:	08007009 	.word	0x08007009
 80070d8:	08007021 	.word	0x08007021
 80070dc:	08006ff1 	.word	0x08006ff1
 80070e0:	08007069 	.word	0x08007069
 80070e4:	08007039 	.word	0x08007039

080070e8 <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	4806      	ldr	r0, [pc, #24]	; (800711c <_fs_read+0x34>)
 8007102:	f000 fe67 	bl	8007dd4 <NOR_ReadSector>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <_fs_read+0x28>
		return 0;
 800710c:	2300      	movs	r3, #0
 800710e:	e001      	b.n	8007114 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8007110:	f06f 0304 	mvn.w	r3, #4
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	200007c0 	.word	0x200007c0

08007120 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	4806      	ldr	r0, [pc, #24]	; (8007154 <_fs_write+0x34>)
 800713a:	f000 fda5 	bl	8007c88 <NOR_WriteSector>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <_fs_write+0x28>
		return 0;
 8007144:	2300      	movs	r3, #0
 8007146:	e001      	b.n	800714c <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 8007148:	f06f 0304 	mvn.w	r3, #4
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	200007c0 	.word	0x200007c0

08007158 <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	4806      	ldr	r0, [pc, #24]	; (8007180 <_fs_erase+0x28>)
 8007166:	f000 fcfb 	bl	8007b60 <NOR_EraseSector>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <_fs_erase+0x1c>
		return 0;
 8007170:	2300      	movs	r3, #0
 8007172:	e001      	b.n	8007178 <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 8007174:	f06f 0304 	mvn.w	r3, #4
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	200007c0 	.word	0x200007c0

08007184 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
	return 0;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <list_files>:

// Function to list all files and directories in the filesystem
void list_files(lfs_t *lfs) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b0ec      	sub	sp, #432	; 0x1b0
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	6018      	str	r0, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the root directory
    int err = lfs_dir_open(lfs, &dir, "/");
 80071a6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	4a35      	ldr	r2, [pc, #212]	; (8007284 <list_files+0xe8>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f7ff fe80 	bl	8006eb4 <lfs_dir_open>
 80071b4:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if (err) {
 80071b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <list_files+0x2c>
        printf("Failed to open directory\n");
 80071c0:	4831      	ldr	r0, [pc, #196]	; (8007288 <list_files+0xec>)
 80071c2:	f00a fc31 	bl	8011a28 <puts>
 80071c6:	e059      	b.n	800727c <list_files+0xe0>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 80071c8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80071cc:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	f7ff feb6 	bl	8006f44 <lfs_dir_read>
 80071d8:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
        if (err < 0) {
 80071dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da03      	bge.n	80071ec <list_files+0x50>
            printf("Failed to read directory\n");
 80071e4:	4829      	ldr	r0, [pc, #164]	; (800728c <list_files+0xf0>)
 80071e6:	f00a fc1f 	bl	8011a28 <puts>
            break;
 80071ea:	e040      	b.n	800726e <list_files+0xd2>
        }

        // If no more files, break
        if (err == 0) {
 80071ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d03b      	beq.n	800726c <list_files+0xd0>
            break;
        }
        uint8_t dir[100];
        // Print the type and name of the file
        if (info.type == LFS_TYPE_REG) {
 80071f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d118      	bne.n	8007230 <list_files+0x94>
            sprintf(dir,"File: %s\n\0", info.name);
 80071fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007202:	f103 0208 	add.w	r2, r3, #8
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4921      	ldr	r1, [pc, #132]	; (8007290 <list_files+0xf4>)
 800720c:	4618      	mov	r0, r3
 800720e:	f00a fc57 	bl	8011ac0 <siprintf>
            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4618      	mov	r0, r3
 8007218:	f7f8 fff4 	bl	8000204 <strlen>
 800721c:	4603      	mov	r3, r0
 800721e:	b29a      	uxth	r2, r3
 8007220:	f107 010c 	add.w	r1, r7, #12
 8007224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007228:	481a      	ldr	r0, [pc, #104]	; (8007294 <list_files+0xf8>)
 800722a:	f005 fb68 	bl	800c8fe <HAL_UART_Transmit>
 800722e:	e7cb      	b.n	80071c8 <list_files+0x2c>
        } else if (info.type == LFS_TYPE_DIR) {
 8007230:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d1c6      	bne.n	80071c8 <list_files+0x2c>
        	sprintf(dir,"Directory: %s\n\0", info.name);
 800723a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800723e:	f103 0208 	add.w	r2, r3, #8
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4914      	ldr	r1, [pc, #80]	; (8007298 <list_files+0xfc>)
 8007248:	4618      	mov	r0, r3
 800724a:	f00a fc39 	bl	8011ac0 <siprintf>

            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	4618      	mov	r0, r3
 8007254:	f7f8 ffd6 	bl	8000204 <strlen>
 8007258:	4603      	mov	r3, r0
 800725a:	b29a      	uxth	r2, r3
 800725c:	f107 010c 	add.w	r1, r7, #12
 8007260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007264:	480b      	ldr	r0, [pc, #44]	; (8007294 <list_files+0xf8>)
 8007266:	f005 fb4a 	bl	800c8fe <HAL_UART_Transmit>
    while (true) {
 800726a:	e7ad      	b.n	80071c8 <list_files+0x2c>
            break;
 800726c:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 800726e:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8007272:	1d3b      	adds	r3, r7, #4
 8007274:	4611      	mov	r1, r2
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	f7ff fe4e 	bl	8006f18 <lfs_dir_close>
}
 800727c:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	080131e4 	.word	0x080131e4
 8007288:	080131e8 	.word	0x080131e8
 800728c:	08013204 	.word	0x08013204
 8007290:	08013220 	.word	0x08013220
 8007294:	20000518 	.word	0x20000518
 8007298:	0801322c 	.word	0x0801322c

0800729c <__init_littefs>:

void __init_littefs(){
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
	static struct lfs_config LfsConfig = {0};
		int Error;

		LfsConfig.read_size = 256;
 80072a2:	4b22      	ldr	r3, [pc, #136]	; (800732c <__init_littefs+0x90>)
 80072a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072a8:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <__init_littefs+0x90>)
 80072ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b0:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 80072b2:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <__init_littefs+0x94>)
 80072b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80072b6:	461a      	mov	r2, r3
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <__init_littefs+0x90>)
 80072ba:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 80072bc:	4b1b      	ldr	r3, [pc, #108]	; (800732c <__init_littefs+0x90>)
 80072be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072c2:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 80072c4:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <__init_littefs+0x94>)
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c8:	461a      	mov	r2, r3
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <__init_littefs+0x90>)
 80072cc:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 256;//Nor.info.u32SectorCount/8;
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <__init_littefs+0x90>)
 80072d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 15000;
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <__init_littefs+0x90>)
 80072d8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig.read = _fs_read;
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <__init_littefs+0x90>)
 80072e0:	4a14      	ldr	r2, [pc, #80]	; (8007334 <__init_littefs+0x98>)
 80072e2:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <__init_littefs+0x90>)
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <__init_littefs+0x9c>)
 80072e8:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <__init_littefs+0x90>)
 80072ec:	4a13      	ldr	r2, [pc, #76]	; (800733c <__init_littefs+0xa0>)
 80072ee:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <__init_littefs+0x90>)
 80072f2:	4a13      	ldr	r2, [pc, #76]	; (8007340 <__init_littefs+0xa4>)
 80072f4:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 80072f6:	490d      	ldr	r1, [pc, #52]	; (800732c <__init_littefs+0x90>)
 80072f8:	4812      	ldr	r0, [pc, #72]	; (8007344 <__init_littefs+0xa8>)
 80072fa:	f7ff fdc5 	bl	8006e88 <lfs_mount>
 80072fe:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <__init_littefs+0x86>
			lfs_format(&Lfs, &LfsConfig);
 8007306:	4909      	ldr	r1, [pc, #36]	; (800732c <__init_littefs+0x90>)
 8007308:	480e      	ldr	r0, [pc, #56]	; (8007344 <__init_littefs+0xa8>)
 800730a:	f7ff fda7 	bl	8006e5c <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 800730e:	4907      	ldr	r1, [pc, #28]	; (800732c <__init_littefs+0x90>)
 8007310:	480c      	ldr	r0, [pc, #48]	; (8007344 <__init_littefs+0xa8>)
 8007312:	f7ff fdb9 	bl	8006e88 <lfs_mount>
 8007316:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <__init_littefs+0x86>
				Error_Handler();
 800731e:	f000 f9d9 	bl	80076d4 <Error_Handler>
			}
		}

}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	2000020c 	.word	0x2000020c
 8007330:	200007c0 	.word	0x200007c0
 8007334:	080070e9 	.word	0x080070e9
 8007338:	08007121 	.word	0x08007121
 800733c:	08007159 	.word	0x08007159
 8007340:	08007185 	.word	0x08007185
 8007344:	20000810 	.word	0x20000810

08007348 <list_files_with_size>:


#define PATH_MAX_LEN 256

// Recursive function to list files and directories with full paths
void list_files_with_size(lfs_t *lfs, const char *path) {
 8007348:	b580      	push	{r7, lr}
 800734a:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800734e:	af02      	add	r7, sp, #8
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	6018      	str	r0, [r3, #0]
 8007354:	463b      	mov	r3, r7
 8007356:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 8007358:	463a      	mov	r2, r7
 800735a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	f7ff fda6 	bl	8006eb4 <lfs_dir_open>
 8007368:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
    if (err) {
 800736c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <list_files_with_size+0x38>
        printf("Failed to open directory: %s\n", path);
 8007374:	463b      	mov	r3, r7
 8007376:	6819      	ldr	r1, [r3, #0]
 8007378:	4844      	ldr	r0, [pc, #272]	; (800748c <list_files_with_size+0x144>)
 800737a:	f00a facf 	bl	801191c <iprintf>
 800737e:	e081      	b.n	8007484 <list_files_with_size+0x13c>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 8007380:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8007384:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	f7ff fdda 	bl	8006f44 <lfs_dir_read>
 8007390:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
        if (err < 0) {
 8007394:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007398:	2b00      	cmp	r3, #0
 800739a:	da05      	bge.n	80073a8 <list_files_with_size+0x60>
            printf("Failed to read directory: %s\n", path);
 800739c:	463b      	mov	r3, r7
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	483b      	ldr	r0, [pc, #236]	; (8007490 <list_files_with_size+0x148>)
 80073a2:	f00a fabb 	bl	801191c <iprintf>
            break;
 80073a6:	e066      	b.n	8007476 <list_files_with_size+0x12e>
        }

        // If no more files, break
        if (err == 0) {
 80073a8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d061      	beq.n	8007474 <list_files_with_size+0x12c>
            break;
        }

        // Build the full path for the current file/directory
        char full_path[PATH_MAX_LEN];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, info.name);
 80073b0:	463b      	mov	r3, r7
 80073b2:	f107 000c 	add.w	r0, r7, #12
 80073b6:	f507 7240 	add.w	r2, r7, #768	; 0x300
 80073ba:	3208      	adds	r2, #8
 80073bc:	9200      	str	r2, [sp, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a34      	ldr	r2, [pc, #208]	; (8007494 <list_files_with_size+0x14c>)
 80073c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073c6:	f00a fb47 	bl	8011a58 <sniprintf>
        char pa[500];
        // Check if the entry is a file or directory
        if (info.type == LFS_TYPE_REG) {
 80073ca:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d118      	bne.n	8007406 <list_files_with_size+0xbe>
            sprintf(pa,"File: %s, Size: %ld bytes\n", full_path, info.size);
 80073d4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f107 020c 	add.w	r2, r7, #12
 80073de:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80073e2:	492d      	ldr	r1, [pc, #180]	; (8007498 <list_files_with_size+0x150>)
 80073e4:	f00a fb6c 	bl	8011ac0 <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 80073e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7f8 ff09 	bl	8000204 <strlen>
 80073f2:	4603      	mov	r3, r0
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80073fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073fe:	4827      	ldr	r0, [pc, #156]	; (800749c <list_files_with_size+0x154>)
 8007400:	f005 fa7d 	bl	800c8fe <HAL_UART_Transmit>
 8007404:	e7bc      	b.n	8007380 <list_files_with_size+0x38>
        } else if (info.type == LFS_TYPE_DIR && strcmp(info.name, ".") != 0 && strcmp(info.name, "..") != 0) {
 8007406:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d1b7      	bne.n	8007380 <list_files_with_size+0x38>
 8007410:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007414:	3308      	adds	r3, #8
 8007416:	4922      	ldr	r1, [pc, #136]	; (80074a0 <list_files_with_size+0x158>)
 8007418:	4618      	mov	r0, r3
 800741a:	f7f8 fee9 	bl	80001f0 <strcmp>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ad      	beq.n	8007380 <list_files_with_size+0x38>
 8007424:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8007428:	3308      	adds	r3, #8
 800742a:	491e      	ldr	r1, [pc, #120]	; (80074a4 <list_files_with_size+0x15c>)
 800742c:	4618      	mov	r0, r3
 800742e:	f7f8 fedf 	bl	80001f0 <strcmp>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0a3      	beq.n	8007380 <list_files_with_size+0x38>
            sprintf(pa,"Directory: %s\n", full_path);
 8007438:	f107 020c 	add.w	r2, r7, #12
 800743c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007440:	4919      	ldr	r1, [pc, #100]	; (80074a8 <list_files_with_size+0x160>)
 8007442:	4618      	mov	r0, r3
 8007444:	f00a fb3c 	bl	8011ac0 <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 8007448:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800744c:	4618      	mov	r0, r3
 800744e:	f7f8 fed9 	bl	8000204 <strlen>
 8007452:	4603      	mov	r3, r0
 8007454:	b29a      	uxth	r2, r3
 8007456:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800745a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800745e:	480f      	ldr	r0, [pc, #60]	; (800749c <list_files_with_size+0x154>)
 8007460:	f005 fa4d 	bl	800c8fe <HAL_UART_Transmit>
            // Recursively list the contents of the directory
            list_files_with_size(lfs, full_path);
 8007464:	f107 020c 	add.w	r2, r7, #12
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	4611      	mov	r1, r2
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	f7ff ff6b 	bl	8007348 <list_files_with_size>
    while (true) {
 8007472:	e785      	b.n	8007380 <list_files_with_size+0x38>
            break;
 8007474:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 8007476:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	4611      	mov	r1, r2
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	f7ff fd4a 	bl	8006f18 <lfs_dir_close>
}
 8007484:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	0801323c 	.word	0x0801323c
 8007490:	0801325c 	.word	0x0801325c
 8007494:	0801327c 	.word	0x0801327c
 8007498:	08013284 	.word	0x08013284
 800749c:	20000518 	.word	0x20000518
 80074a0:	080132a0 	.word	0x080132a0
 80074a4:	080132a4 	.word	0x080132a4
 80074a8:	080132a8 	.word	0x080132a8

080074ac <__init_storage>:
void __init_storage(){
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
	__init_nor();
 80074b0:	f7ff fdf2 	bl	8007098 <__init_nor>
	__init_littefs();
 80074b4:	f7ff fef2 	bl	800729c <__init_littefs>
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a20      	ldr	r2, [pc, #128]	; (8007548 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d105      	bne.n	80074d8 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
//    HAL_UART_Transmit(&huart7, "\nCounter is : ", sizeof("\nCounter is : "), 100);
    tim_val++;
 80074cc:	4b1f      	ldr	r3, [pc, #124]	; (800754c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80074d6:	801a      	strh	r2, [r3, #0]
//    char uart_buf[20] ;
//    sprintf(uart_buf, "%u us\0\r\n", tim_val);
//    HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);

  }
  if(htim == &htim7){
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d12f      	bne.n	8007540 <HAL_TIM_PeriodElapsedCallback+0x84>
	  hk_counter++;
 80074e0:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80074ea:	701a      	strb	r2, [r3, #0]
	  if(hk_counter%30 == 0){ char uart_buf[20] ;
 80074ec:	4b19      	ldr	r3, [pc, #100]	; (8007554 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80074f2:	fba3 1302 	umull	r1, r3, r3, r2
 80074f6:	0919      	lsrs	r1, r3, #4
 80074f8:	460b      	mov	r3, r1
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	1a5b      	subs	r3, r3, r1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11b      	bne.n	8007540 <HAL_TIM_PeriodElapsedCallback+0x84>
		  sprintf(uart_buf, "%u us\0\r\n", tim_val);
 8007508:	4b10      	ldr	r3, [pc, #64]	; (800754c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	f107 030c 	add.w	r3, r7, #12
 8007512:	4912      	ldr	r1, [pc, #72]	; (800755c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8007514:	4618      	mov	r0, r3
 8007516:	f00a fad3 	bl	8011ac0 <siprintf>

		      HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);
 800751a:	f107 010c 	add.w	r1, r7, #12
 800751e:	2364      	movs	r3, #100	; 0x64
 8007520:	2214      	movs	r2, #20
 8007522:	480f      	ldr	r0, [pc, #60]	; (8007560 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8007524:	f005 f9eb 	bl	800c8fe <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart7,"\n-----------------------------Got this triggered-\----------n", sizeof("\n-----------------------------Got this triggered-\----------n"), 100);
 8007528:	2364      	movs	r3, #100	; 0x64
 800752a:	223d      	movs	r2, #61	; 0x3d
 800752c:	490d      	ldr	r1, [pc, #52]	; (8007564 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800752e:	480c      	ldr	r0, [pc, #48]	; (8007560 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8007530:	f005 f9e5 	bl	800c8fe <HAL_UART_Transmit>
		  hk_counter=0;
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
		  tim_val = 0 ;
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800753c:	2200      	movs	r2, #0
 800753e:	801a      	strh	r2, [r3, #0]
	  }

  }
}
 8007540:	bf00      	nop
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000960 	.word	0x20000960
 800754c:	20000206 	.word	0x20000206
 8007550:	200009a8 	.word	0x200009a8
 8007554:	20000204 	.word	0x20000204
 8007558:	88888889 	.word	0x88888889
 800755c:	080132b8 	.word	0x080132b8
 8007560:	20000518 	.word	0x20000518
 8007564:	080132c4 	.word	0x080132c4

08007568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08e      	sub	sp, #56	; 0x38
 800756c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800756e:	f001 f98b 	bl	8008888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007572:	f000 f845 	bl	8007600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007576:	f7f9 f9ad 	bl	80008d4 <MX_GPIO_Init>
  MX_SPI3_Init();
 800757a:	f000 fce5 	bl	8007f48 <MX_SPI3_Init>
  MX_UART7_Init();
 800757e:	f001 f877 	bl	8008670 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8007582:	f009 f8b1 	bl	80106e8 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8007586:	f000 fd15 	bl	8007fb4 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 800758a:	f001 f89b 	bl	80086c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800758e:	f7f9 f827 	bl	80005e0 <MX_ADC1_Init>
  MX_DMA_Init();
 8007592:	f7f9 f977 	bl	8000884 <MX_DMA_Init>
  MX_TIM6_Init();
 8007596:	f000 ff51 	bl	800843c <MX_TIM6_Init>
  MX_ADC3_Init();
 800759a:	f7f9 f873 	bl	8000684 <MX_ADC3_Init>
  MX_TIM7_Init();
 800759e:	f000 ff83 	bl	80084a8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80075a2:	4811      	ldr	r0, [pc, #68]	; (80075e8 <main+0x80>)
 80075a4:	f004 fe8e 	bl	800c2c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80075a8:	4810      	ldr	r0, [pc, #64]	; (80075ec <main+0x84>)
 80075aa:	f004 fe8b 	bl	800c2c4 <HAL_TIM_Base_Start_IT>

  HAL_Delay(500);
 80075ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075b2:	f001 f9db 	bl	800896c <HAL_Delay>

 HAL_UART_Transmit(&huart7,"********************S2S OBC is starting ************\n", sizeof("********************S2S OBC is starting ************\n"),1000);
 80075b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075ba:	2236      	movs	r2, #54	; 0x36
 80075bc:	490c      	ldr	r1, [pc, #48]	; (80075f0 <main+0x88>)
 80075be:	480d      	ldr	r0, [pc, #52]	; (80075f4 <main+0x8c>)
 80075c0:	f005 f99d 	bl	800c8fe <HAL_UART_Transmit>

 __init_storage();
 80075c4:	f7ff ff72 	bl	80074ac <__init_storage>
 list_files(&Lfs);
 80075c8:	480b      	ldr	r0, [pc, #44]	; (80075f8 <main+0x90>)
 80075ca:	f7ff fde7 	bl	800719c <list_files>
//  char path[200];
// char txt[]="sangam is writing it manually";
//
//	__init_littefs();
 list_files_with_size(&Lfs, "/");
 80075ce:	490b      	ldr	r1, [pc, #44]	; (80075fc <main+0x94>)
 80075d0:	4809      	ldr	r0, [pc, #36]	; (80075f8 <main+0x90>)
 80075d2:	f7ff feb9 	bl	8007348 <list_files_with_size>
// 		  lfs_file_close(&Lfs, &File);
// read_file_from_littlefs(&Lfs, "satHealth.txt");
////  read_file_from_littlefs(&Lfs, "sat_health.txt");
// read_file_from_littlefs(&Lfs, "flags.txt");

 list_files_with_size(&Lfs, "/");
 80075d6:	4909      	ldr	r1, [pc, #36]	; (80075fc <main+0x94>)
 80075d8:	4807      	ldr	r0, [pc, #28]	; (80075f8 <main+0x90>)
 80075da:	f7ff feb5 	bl	8007348 <list_files_with_size>
 uint8_t count=0;uint16_t timer_val;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075e4:	e7fe      	b.n	80075e4 <main+0x7c>
 80075e6:	bf00      	nop
 80075e8:	20000960 	.word	0x20000960
 80075ec:	200009a8 	.word	0x200009a8
 80075f0:	08013304 	.word	0x08013304
 80075f4:	20000518 	.word	0x20000518
 80075f8:	20000810 	.word	0x20000810
 80075fc:	080131e4 	.word	0x080131e4

08007600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b094      	sub	sp, #80	; 0x50
 8007604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007606:	f107 0320 	add.w	r3, r7, #32
 800760a:	2230      	movs	r2, #48	; 0x30
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f009 fde4 	bl	80111dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007624:	2300      	movs	r3, #0
 8007626:	60bb      	str	r3, [r7, #8]
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <SystemClock_Config+0xcc>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	4a27      	ldr	r2, [pc, #156]	; (80076cc <SystemClock_Config+0xcc>)
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007632:	6413      	str	r3, [r2, #64]	; 0x40
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <SystemClock_Config+0xcc>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007640:	2300      	movs	r3, #0
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	4b22      	ldr	r3, [pc, #136]	; (80076d0 <SystemClock_Config+0xd0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <SystemClock_Config+0xd0>)
 800764a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <SystemClock_Config+0xd0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800765c:	2301      	movs	r3, #1
 800765e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007666:	2302      	movs	r3, #2
 8007668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800766a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8007670:	230c      	movs	r3, #12
 8007672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007674:	23a8      	movs	r3, #168	; 0xa8
 8007676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007678:	2302      	movs	r3, #2
 800767a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800767c:	2307      	movs	r3, #7
 800767e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007680:	f107 0320 	add.w	r3, r7, #32
 8007684:	4618      	mov	r0, r3
 8007686:	f003 fbdd 	bl	800ae44 <HAL_RCC_OscConfig>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007690:	f000 f820 	bl	80076d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007694:	230f      	movs	r3, #15
 8007696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007698:	2302      	movs	r3, #2
 800769a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80076a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80076a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80076a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	2105      	movs	r1, #5
 80076b2:	4618      	mov	r0, r3
 80076b4:	f003 fe3e 	bl	800b334 <HAL_RCC_ClockConfig>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80076be:	f000 f809 	bl	80076d4 <Error_Handler>
  }
}
 80076c2:	bf00      	nop
 80076c4:	3750      	adds	r7, #80	; 0x50
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000

080076d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076d8:	b672      	cpsid	i
}
 80076da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076dc:	e7fe      	b.n	80076dc <Error_Handler+0x8>

080076de <_nor_cs_assert>:
	_SELECT_SR3,
};

/* Functions */

static void _nor_cs_assert(nor_t *nor){
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	68b8      	ldr	r0, [r7, #8]
 800771e:	4798      	blx	r3
}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	68b8      	ldr	r0, [r7, #8]
 800773c:	4798      	blx	r3
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	6838      	ldr	r0, [r7, #0]
 8007756:	4798      	blx	r3
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8007768:	239e      	movs	r3, #158	; 0x9e
 800776a:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ffb4 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8007776:	f107 030f 	add.w	r3, r7, #15
 800777a:	2201      	movs	r2, #1
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ffc3 	bl	800770a <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	2203      	movs	r2, #3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ffcb 	bl	8007728 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ffae 	bl	80076f4 <_nor_cs_deassert>

	return ID;
 8007798:	68bb      	ldr	r3, [r7, #8]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b088      	sub	sp, #32
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 80077aa:	234b      	movs	r3, #75	; 0x4b
 80077ac:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ff8c 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 80077c6:	f107 031f 	add.w	r3, r7, #31
 80077ca:	2201      	movs	r2, #1
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ff9b 	bl	800770a <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 80077d4:	f107 030c 	add.w	r3, r7, #12
 80077d8:	2204      	movs	r2, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff94 	bl	800770a <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 80077e2:	f107 0310 	add.w	r3, r7, #16
 80077e6:	2208      	movs	r2, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff ff9c 	bl	8007728 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff ff7f 	bl	80076f4 <_nor_cs_deassert>

	return UniqueId;
 80077f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80077fa:	4610      	mov	r0, r2
 80077fc:	4619      	mov	r1, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 800780c:	2306      	movs	r3, #6
 800780e:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ff64 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8007816:	f107 030f 	add.w	r3, r7, #15
 800781a:	2201      	movs	r2, #1
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff ff73 	bl	800770a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff65 	bl	80076f4 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 800783e:	2300      	movs	r3, #0
 8007840:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d012      	beq.n	800786e <_nor_ReadStatusRegister+0x3c>
 8007848:	2b02      	cmp	r3, #2
 800784a:	dc16      	bgt.n	800787a <_nor_ReadStatusRegister+0x48>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <_nor_ReadStatusRegister+0x24>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d006      	beq.n	8007862 <_nor_ReadStatusRegister+0x30>
 8007854:	e011      	b.n	800787a <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8007856:	2305      	movs	r3, #5
 8007858:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3342      	adds	r3, #66	; 0x42
 800785e:	60fb      	str	r3, [r7, #12]
		break;
 8007860:	e00d      	b.n	800787e <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 8007862:	2370      	movs	r3, #112	; 0x70
 8007864:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3342      	adds	r3, #66	; 0x42
 800786a:	60fb      	str	r3, [r7, #12]
		break;
 800786c:	e007      	b.n	800787e <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 800786e:	2315      	movs	r3, #21
 8007870:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3342      	adds	r3, #66	; 0x42
 8007876:	60fb      	str	r3, [r7, #12]
		break;
 8007878:	e001      	b.n	800787e <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 800787a:	23ff      	movs	r3, #255	; 0xff
 800787c:	e017      	b.n	80078ae <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff ff2d 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 8007884:	f107 030a 	add.w	r3, r7, #10
 8007888:	2201      	movs	r2, #1
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ff3c 	bl	800770a <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 8007892:	f107 030b 	add.w	r3, r7, #11
 8007896:	2201      	movs	r2, #1
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ff44 	bl	8007728 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ff27 	bl	80076f4 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 80078a6:	7afa      	ldrb	r2, [r7, #11]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	701a      	strb	r2, [r3, #0]

	return status;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 80078c0:	2305      	movs	r3, #5
 80078c2:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff04 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 80078d6:	f107 030f 	add.w	r3, r7, #15
 80078da:	2201      	movs	r2, #1
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff ff13 	bl	800770a <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3342      	adds	r3, #66	; 0x42
 80078e8:	2201      	movs	r2, #1
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ff1b 	bl	8007728 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 80078f2:	2164      	movs	r1, #100	; 0x64
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff ff26 	bl	8007746 <_nor_delay_us>
		msTimeout -= 100;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3b64      	subs	r3, #100	; 0x64
 80078fe:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <_nor_WaitForWriteEnd+0x5e>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e7      	bne.n	80078e4 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff feed 	bl	80076f4 <_nor_cs_deassert>

	if (msTimeout == 0){
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8007936:	23ab      	movs	r3, #171	; 0xab
 8007938:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <NOR_Init+0x3a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8007968:	2302      	movs	r3, #2
 800796a:	e09a      	b.n	8007aa2 <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007972:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007976:	4293      	cmp	r3, r2
 8007978:	d101      	bne.n	800797e <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e091      	b.n	8007aa2 <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff feb8 	bl	80076f4 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8007984:	2164      	movs	r1, #100	; 0x64
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fedd 	bl	8007746 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fe9e 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 80079a2:	f107 030f 	add.w	r3, r7, #15
 80079a6:	2201      	movs	r2, #1
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fead 	bl	800770a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fe9f 	bl	80076f4 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fed2 	bl	8007760 <_nor_ReadID>
 80079bc:	4602      	mov	r2, r0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <NOR_Init+0xa8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e063      	b.n	8007aa2 <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fa30 	bl	8007e44 <NOR_IDS_Interpret_Manufacturer>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fa32 	bl	8007e5c <NOR_IDS_Interpret_Model>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8007a10:	2304      	movs	r3, #4
 8007a12:	e046      	b.n	8007aa2 <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fec4 	bl	80077a2 <_nor_ReadUniqID>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
//	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
//	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
//	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);

		nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fa3b 	bl	8007ea4 <NOR_IDS_GetQtdBlocks>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	63da      	str	r2, [r3, #60]	; 0x3c

		nor->info.u16PageSize = NOR_PAGE_SIZE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a3a:	851a      	strh	r2, [r3, #40]	; 0x28
		nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a42:	861a      	strh	r2, [r3, #48]	; 0x30
		nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
		nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a50:	011a      	lsls	r2, r3, #4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	635a      	str	r2, [r3, #52]	; 0x34
		nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007a66:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	62da      	str	r2, [r3, #44]	; 0x2c
		nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007a76:	fb02 f203 	mul.w	r2, r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fed6 	bl	8007832 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007a86:	2100      	movs	r1, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fed2 	bl	8007832 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007a8e:	2100      	movs	r1, #0
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff fece 	bl	8007832 <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d KB\n", (uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <NOR_EraseAddress+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e043      	b.n	8007b4c <NOR_EraseAddress+0xa0>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007aca:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d001      	beq.n	8007ad6 <NOR_EraseAddress+0x2a>
 8007ad2:	2306      	movs	r3, #6
 8007ad4:	e03a      	b.n	8007b4c <NOR_EraseAddress+0xa0>

	switch (method){
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d010      	beq.n	8007afe <NOR_EraseAddress+0x52>
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	dc13      	bgt.n	8007b08 <NOR_EraseAddress+0x5c>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <NOR_EraseAddress+0x3e>
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d005      	beq.n	8007af4 <NOR_EraseAddress+0x48>
 8007ae8:	e00e      	b.n	8007b08 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8007aea:	2320      	movs	r3, #32
 8007aec:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 8007aee:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <NOR_EraseAddress+0xa8>)
 8007af0:	61fb      	str	r3, [r7, #28]
		break;
 8007af2:	e009      	b.n	8007b08 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8007af4:	2352      	movs	r3, #82	; 0x52
 8007af6:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8007af8:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <NOR_EraseAddress+0xac>)
 8007afa:	61fb      	str	r3, [r7, #28]
		break;
 8007afc:	e004      	b.n	8007b08 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 8007afe:	23d8      	movs	r3, #216	; 0xd8
 8007b00:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8007b02:	4b16      	ldr	r3, [pc, #88]	; (8007b5c <NOR_EraseAddress+0xb0>)
 8007b04:	61fb      	str	r3, [r7, #28]
		break;
 8007b06:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f7ff fe70 	bl	8007804 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fdda 	bl	80076de <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	2204      	movs	r2, #4
 8007b30:	4619      	mov	r1, r3
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7ff fde9 	bl	800770a <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fddb 	bl	80076f4 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 8007b3e:	69f9      	ldr	r1, [r7, #28]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff feb8 	bl	80078b6 <_nor_WaitForWriteEnd>
 8007b46:	4603      	mov	r3, r0
 8007b48:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8007b4a:	7efb      	ldrb	r3, [r7, #27]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	00061a80 	.word	0x00061a80
 8007b58:	00186a00 	.word	0x00186a00
 8007b5c:	001e8480 	.word	0x001e8480

08007b60 <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <NOR_EraseSector+0x14>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e015      	b.n	8007ba0 <NOR_EraseSector+0x40>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007b7a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d001      	beq.n	8007b86 <NOR_EraseSector+0x26>
 8007b82:	2306      	movs	r3, #6
 8007b84:	e00c      	b.n	8007ba0 <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 8007b94:	2200      	movs	r2, #0
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff ff87 	bl	8007aac <NOR_EraseAddress>
 8007b9e:	4603      	mov	r3, r0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <NOR_WriteBytes+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e05f      	b.n	8007c80 <NOR_WriteBytes+0xd8>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007bc6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d001      	beq.n	8007bd2 <NOR_WriteBytes+0x2a>
 8007bce:	2306      	movs	r3, #6
 8007bd0:	e056      	b.n	8007c80 <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e051      	b.n	8007c80 <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	e002      	b.n	8007be8 <NOR_WriteBytes+0x40>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	3301      	adds	r3, #1
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d3f8      	bcc.n	8007be2 <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bfc:	fb02 f201 	mul.w	r2, r2, r1
 8007c00:	1a9a      	subs	r2, r3, r2
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d903      	bls.n	8007c16 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	e001      	b.n	8007c1a <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff fdf2 	bl	8007804 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 8007c20:	2302      	movs	r3, #2
 8007c22:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fd4f 	bl	80076de <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	2204      	movs	r2, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fd5e 	bl	800770a <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fd59 	bl	800770a <_nor_spi_tx>
		_nor_cs_deassert(nor);
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fd4b 	bl	80076f4 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 8007c5e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fe27 	bl	80078b6 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1b8      	bne.n	8007bf0 <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <NOR_WriteSector+0x18>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e027      	b.n	8007cf0 <NOR_WriteSector+0x68>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ca6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00a      	beq.n	8007cc4 <NOR_WriteSector+0x3c>
 8007cae:	2306      	movs	r3, #6
 8007cb0:	e01e      	b.n	8007cf0 <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	1a9b      	subs	r3, r3, r2
 8007cc2:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007cc8:	461a      	mov	r2, r3
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d2f0      	bcs.n	8007cb2 <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	fb03 f302 	mul.w	r3, r3, r2
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	4413      	add	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff ff5d 	bl	8007ba8 <NOR_WriteBytes>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	; 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <NOR_ReadBytes+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e05d      	b.n	8007dcc <NOR_ReadBytes+0xd4>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d16:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d001      	beq.n	8007d22 <NOR_ReadBytes+0x2a>
 8007d1e:	2306      	movs	r3, #6
 8007d20:	e054      	b.n	8007dcc <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e04f      	b.n	8007dcc <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d38:	461a      	mov	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d40:	fb02 f201 	mul.w	r2, r2, r1
 8007d44:	1a9a      	subs	r2, r3, r2
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	4413      	add	r3, r2
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d903      	bls.n	8007d5a <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
 8007d58:	e001      	b.n	8007d5e <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 8007d5e:	230b      	movs	r3, #11
 8007d60:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fcae 	bl	80076de <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8007d82:	f107 0310 	add.w	r3, r7, #16
 8007d86:	2205      	movs	r2, #5
 8007d88:	4619      	mov	r1, r3
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff fcbd 	bl	800770a <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff fcc7 	bl	8007728 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fcaa 	bl	80076f4 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	4413      	add	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1be      	bne.n	8007d34 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8007db6:	2300      	movs	r3, #0
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	e002      	b.n	8007dc2 <NOR_ReadBytes+0xca>
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	6a3a      	ldr	r2, [r7, #32]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3f8      	bcc.n	8007dbc <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("w25qxx ReadBytes done.\n");

	return NOR_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3728      	adds	r7, #40	; 0x28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <NOR_ReadSector+0x18>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e027      	b.n	8007e3c <NOR_ReadSector+0x68>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007df2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00a      	beq.n	8007e10 <NOR_ReadSector+0x3c>
 8007dfa:	2306      	movs	r3, #6
 8007dfc:	e01e      	b.n	8007e3c <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3301      	adds	r3, #1
 8007e02:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007e08:	461a      	mov	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	1a9b      	subs	r3, r3, r2
 8007e0e:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007e14:	461a      	mov	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d2f0      	bcs.n	8007dfe <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007e20:	461a      	mov	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	fb03 f302 	mul.w	r3, r3, r2
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff ff5f 	bl	8007cf8 <NOR_ReadBytes>
 8007e3a:	4603      	mov	r3, r0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: pablo-jean
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	b2db      	uxtb	r3, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff ffed 	bl	8007e44 <NOR_IDS_Interpret_Manufacturer>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2bef      	cmp	r3, #239	; 0xef
 8007e72:	d00e      	beq.n	8007e92 <NOR_IDS_Interpret_Model+0x36>
 8007e74:	2bef      	cmp	r3, #239	; 0xef
 8007e76:	dc03      	bgt.n	8007e80 <NOR_IDS_Interpret_Model+0x24>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d00e      	beq.n	8007e9a <NOR_IDS_Interpret_Model+0x3e>
 8007e7c:	2bc2      	cmp	r3, #194	; 0xc2
 8007e7e:	d002      	beq.n	8007e86 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 8007e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e84:	e00a      	b.n	8007e9c <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	e004      	b.n	8007e9c <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	e000      	b.n	8007e9c <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL:
		return ((0x9E >> 8) & 0xFFFF);
 8007e9a:	2300      	movs	r3, #0
		break;
	}
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ffc9 	bl	8007e44 <NOR_IDS_Interpret_Manufacturer>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2bef      	cmp	r3, #239	; 0xef
 8007eba:	d029      	beq.n	8007f10 <NOR_IDS_GetQtdBlocks+0x6c>
 8007ebc:	2bef      	cmp	r3, #239	; 0xef
 8007ebe:	dc24      	bgt.n	8007f0a <NOR_IDS_GetQtdBlocks+0x66>
 8007ec0:	2bc2      	cmp	r3, #194	; 0xc2
 8007ec2:	d025      	beq.n	8007f10 <NOR_IDS_GetQtdBlocks+0x6c>
 8007ec4:	2bc2      	cmp	r3, #194	; 0xc2
 8007ec6:	dc20      	bgt.n	8007f0a <NOR_IDS_GetQtdBlocks+0x66>
 8007ec8:	2bbf      	cmp	r3, #191	; 0xbf
 8007eca:	d009      	beq.n	8007ee0 <NOR_IDS_GetQtdBlocks+0x3c>
 8007ecc:	2bbf      	cmp	r3, #191	; 0xbf
 8007ece:	dc1c      	bgt.n	8007f0a <NOR_IDS_GetQtdBlocks+0x66>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	dc02      	bgt.n	8007eda <NOR_IDS_GetQtdBlocks+0x36>
 8007ed4:	2b1f      	cmp	r3, #31
 8007ed6:	da03      	bge.n	8007ee0 <NOR_IDS_GetQtdBlocks+0x3c>
 8007ed8:	e017      	b.n	8007f0a <NOR_IDS_GetQtdBlocks+0x66>
 8007eda:	2b85      	cmp	r3, #133	; 0x85
 8007edc:	d018      	beq.n	8007f10 <NOR_IDS_GetQtdBlocks+0x6c>
 8007ede:	e014      	b.n	8007f0a <NOR_IDS_GetQtdBlocks+0x66>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	case    MANUF_MT25QL:
		density = ((0x9E >> 16) & 0xFF);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	3b11      	subs	r3, #17
 8007ee8:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8007eea:	2302      	movs	r3, #2
 8007eec:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8007eee:	2300      	movs	r3, #0
 8007ef0:	75fb      	strb	r3, [r7, #23]
 8007ef2:	e005      	b.n	8007f00 <NOR_IDS_GetQtdBlocks+0x5c>
			blocks *= 2;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	3301      	adds	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
 8007f00:	7dfa      	ldrb	r2, [r7, #23]
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d3f5      	bcc.n	8007ef4 <NOR_IDS_GetQtdBlocks+0x50>
		}
	break;
 8007f08:	e018      	b.n	8007f3c <NOR_IDS_GetQtdBlocks+0x98>
	default:
		blocks = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
		break;
 8007f0e:	e015      	b.n	8007f3c <NOR_IDS_GetQtdBlocks+0x98>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
 8007f18:	3b11      	subs	r3, #17
 8007f1a:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]
 8007f24:	e005      	b.n	8007f32 <NOR_IDS_GetQtdBlocks+0x8e>
			blocks *= 2;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
 8007f32:	7dfa      	ldrb	r2, [r7, #23]
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d3f5      	bcc.n	8007f26 <NOR_IDS_GetQtdBlocks+0x82>
		}
		break;
 8007f3a:	bf00      	nop
	}

	return blocks;
 8007f3c:	693b      	ldr	r3, [r7, #16]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8007f4c:	4b17      	ldr	r3, [pc, #92]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f4e:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <MX_SPI3_Init+0x68>)
 8007f50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f52:	4b16      	ldr	r3, [pc, #88]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f5a:	4b14      	ldr	r3, [pc, #80]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f60:	4b12      	ldr	r3, [pc, #72]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f66:	4b11      	ldr	r3, [pc, #68]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f72:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f78:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f8c:	4b07      	ldr	r3, [pc, #28]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007f92:	4b06      	ldr	r3, [pc, #24]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f94:	220a      	movs	r2, #10
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007f98:	4804      	ldr	r0, [pc, #16]	; (8007fac <MX_SPI3_Init+0x64>)
 8007f9a:	f003 fb9b 	bl	800b6d4 <HAL_SPI_Init>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007fa4:	f7ff fb96 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007fa8:	bf00      	nop
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	200005b0 	.word	0x200005b0
 8007fb0:	40003c00 	.word	0x40003c00

08007fb4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8007fb8:	4b17      	ldr	r3, [pc, #92]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fba:	4a18      	ldr	r2, [pc, #96]	; (800801c <MX_SPI4_Init+0x68>)
 8007fbc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8007fbe:	4b16      	ldr	r3, [pc, #88]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007fc4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fe8:	2208      	movs	r2, #8
 8007fea:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <MX_SPI4_Init+0x64>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <MX_SPI4_Init+0x64>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <MX_SPI4_Init+0x64>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <MX_SPI4_Init+0x64>)
 8008000:	220a      	movs	r2, #10
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8008004:	4804      	ldr	r0, [pc, #16]	; (8008018 <MX_SPI4_Init+0x64>)
 8008006:	f003 fb65 	bl	800b6d4 <HAL_SPI_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8008010:	f7ff fb60 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8008014:	bf00      	nop
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000764 	.word	0x20000764
 800801c:	40013400 	.word	0x40013400

08008020 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08c      	sub	sp, #48	; 0x30
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008028:	f107 031c 	add.w	r3, r7, #28
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	609a      	str	r2, [r3, #8]
 8008034:	60da      	str	r2, [r3, #12]
 8008036:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a41      	ldr	r2, [pc, #260]	; (8008144 <HAL_SPI_MspInit+0x124>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d14b      	bne.n	80080da <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008042:	2300      	movs	r3, #0
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	4b40      	ldr	r3, [pc, #256]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <HAL_SPI_MspInit+0x128>)
 800804c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008050:	6413      	str	r3, [r2, #64]	; 0x40
 8008052:	4b3d      	ldr	r3, [pc, #244]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	4b39      	ldr	r3, [pc, #228]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	4a38      	ldr	r2, [pc, #224]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008068:	f043 0302 	orr.w	r3, r3, #2
 800806c:	6313      	str	r3, [r2, #48]	; 0x30
 800806e:	4b36      	ldr	r3, [pc, #216]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	4b32      	ldr	r3, [pc, #200]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008082:	4a31      	ldr	r2, [pc, #196]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008084:	f043 0304 	orr.w	r3, r3, #4
 8008088:	6313      	str	r3, [r2, #48]	; 0x30
 800808a:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <HAL_SPI_MspInit+0x128>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PB4     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = MAIN_FM_MISO_Pin|MAIN_FM_SCK_Pin;
 8008096:	2318      	movs	r3, #24
 8008098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800809a:	2302      	movs	r3, #2
 800809c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080a2:	2303      	movs	r3, #3
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080a6:	2306      	movs	r3, #6
 80080a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080aa:	f107 031c 	add.w	r3, r7, #28
 80080ae:	4619      	mov	r1, r3
 80080b0:	4826      	ldr	r0, [pc, #152]	; (800814c <HAL_SPI_MspInit+0x12c>)
 80080b2:	f001 fb7f 	bl	80097b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_FM_MOSI_Pin;
 80080b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c4:	2303      	movs	r3, #3
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080c8:	2306      	movs	r3, #6
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MAIN_FM_MOSI_GPIO_Port, &GPIO_InitStruct);
 80080cc:	f107 031c 	add.w	r3, r7, #28
 80080d0:	4619      	mov	r1, r3
 80080d2:	481f      	ldr	r0, [pc, #124]	; (8008150 <HAL_SPI_MspInit+0x130>)
 80080d4:	f001 fb6e 	bl	80097b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80080d8:	e030      	b.n	800813c <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI4)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <HAL_SPI_MspInit+0x134>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d12b      	bne.n	800813c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	4b17      	ldr	r3, [pc, #92]	; (8008148 <HAL_SPI_MspInit+0x128>)
 80080ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ec:	4a16      	ldr	r2, [pc, #88]	; (8008148 <HAL_SPI_MspInit+0x128>)
 80080ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080f2:	6453      	str	r3, [r2, #68]	; 0x44
 80080f4:	4b14      	ldr	r3, [pc, #80]	; (8008148 <HAL_SPI_MspInit+0x128>)
 80080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008100:	2300      	movs	r3, #0
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	4a0f      	ldr	r2, [pc, #60]	; (8008148 <HAL_SPI_MspInit+0x128>)
 800810a:	f043 0310 	orr.w	r3, r3, #16
 800810e:	6313      	str	r3, [r2, #48]	; 0x30
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_SPI_MspInit+0x128>)
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	60bb      	str	r3, [r7, #8]
 800811a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|SMSN_FM_MISO_OBC_Pin|SMSN_FM_MOSI_OBC_Pin;
 800811c:	2364      	movs	r3, #100	; 0x64
 800811e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008120:	2302      	movs	r3, #2
 8008122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008128:	2303      	movs	r3, #3
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800812c:	2305      	movs	r3, #5
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008130:	f107 031c 	add.w	r3, r7, #28
 8008134:	4619      	mov	r1, r3
 8008136:	4808      	ldr	r0, [pc, #32]	; (8008158 <HAL_SPI_MspInit+0x138>)
 8008138:	f001 fb3c 	bl	80097b4 <HAL_GPIO_Init>
}
 800813c:	bf00      	nop
 800813e:	3730      	adds	r7, #48	; 0x30
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40003c00 	.word	0x40003c00
 8008148:	40023800 	.word	0x40023800
 800814c:	40020400 	.word	0x40020400
 8008150:	40020800 	.word	0x40020800
 8008154:	40013400 	.word	0x40013400
 8008158:	40021000 	.word	0x40021000

0800815c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <HAL_MspInit+0x4c>)
 8008168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800816a:	4a0f      	ldr	r2, [pc, #60]	; (80081a8 <HAL_MspInit+0x4c>)
 800816c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008170:	6453      	str	r3, [r2, #68]	; 0x44
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <HAL_MspInit+0x4c>)
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800817a:	607b      	str	r3, [r7, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800817e:	2300      	movs	r3, #0
 8008180:	603b      	str	r3, [r7, #0]
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_MspInit+0x4c>)
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <HAL_MspInit+0x4c>)
 8008188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800818c:	6413      	str	r3, [r2, #64]	; 0x40
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <HAL_MspInit+0x4c>)
 8008190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40023800 	.word	0x40023800

080081ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80081b0:	e7fe      	b.n	80081b0 <NMI_Handler+0x4>

080081b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081b6:	e7fe      	b.n	80081b6 <HardFault_Handler+0x4>

080081b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081bc:	e7fe      	b.n	80081bc <MemManage_Handler+0x4>

080081be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081be:	b480      	push	{r7}
 80081c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081c2:	e7fe      	b.n	80081c2 <BusFault_Handler+0x4>

080081c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081c8:	e7fe      	b.n	80081c8 <UsageFault_Handler+0x4>

080081ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081ca:	b480      	push	{r7}
 80081cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081ce:	bf00      	nop
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081dc:	bf00      	nop
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081e6:	b480      	push	{r7}
 80081e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081f8:	f000 fb98 	bl	800892c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081fc:	bf00      	nop
 80081fe:	bd80      	pop	{r7, pc}

08008200 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8008204:	4802      	ldr	r0, [pc, #8]	; (8008210 <DMA1_Stream1_IRQHandler+0x10>)
 8008206:	f001 f899 	bl	800933c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800820a:	bf00      	nop
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000900 	.word	0x20000900

08008214 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8008218:	4802      	ldr	r0, [pc, #8]	; (8008224 <DMA1_Stream2_IRQHandler+0x10>)
 800821a:	f001 f88f 	bl	800933c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800821e:	bf00      	nop
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200008a0 	.word	0x200008a0

08008228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800822c:	4802      	ldr	r0, [pc, #8]	; (8008238 <USART1_IRQHandler+0x10>)
 800822e:	f004 fbf9 	bl	800ca24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000608 	.word	0x20000608

0800823c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008240:	4802      	ldr	r0, [pc, #8]	; (800824c <TIM6_DAC_IRQHandler+0x10>)
 8008242:	f004 f8af 	bl	800c3a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000960 	.word	0x20000960

08008250 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008254:	4802      	ldr	r0, [pc, #8]	; (8008260 <TIM7_IRQHandler+0x10>)
 8008256:	f004 f8a5 	bl	800c3a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	200009a8 	.word	0x200009a8

08008264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008268:	4802      	ldr	r0, [pc, #8]	; (8008274 <OTG_FS_IRQHandler+0x10>)
 800826a:	f001 fdb8 	bl	8009dde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20001ec4 	.word	0x20001ec4

08008278 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800827c:	4802      	ldr	r0, [pc, #8]	; (8008288 <UART7_IRQHandler+0x10>)
 800827e:	f004 fbd1 	bl	800ca24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000518 	.word	0x20000518

0800828c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
	return 1;
 8008290:	2301      	movs	r3, #1
}
 8008292:	4618      	mov	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <_kill>:

int _kill(int pid, int sig)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80082a6:	f008 ff31 	bl	801110c <__errno>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2216      	movs	r2, #22
 80082ae:	601a      	str	r2, [r3, #0]
	return -1;
 80082b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_exit>:

void _exit (int status)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80082c4:	f04f 31ff 	mov.w	r1, #4294967295
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff ffe7 	bl	800829c <_kill>
	while (1) {}		/* Make sure we hang here */
 80082ce:	e7fe      	b.n	80082ce <_exit+0x12>

080082d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082dc:	2300      	movs	r3, #0
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e00a      	b.n	80082f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80082e2:	f3af 8000 	nop.w
 80082e6:	4601      	mov	r1, r0
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	60ba      	str	r2, [r7, #8]
 80082ee:	b2ca      	uxtb	r2, r1
 80082f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	3301      	adds	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	dbf0      	blt.n	80082e2 <_read+0x12>
	}

return len;
 8008300:	687b      	ldr	r3, [r7, #4]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e009      	b.n	8008330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	60ba      	str	r2, [r7, #8]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3301      	adds	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	dbf1      	blt.n	800831c <_write+0x12>
	}
	return len;
 8008338:	687b      	ldr	r3, [r7, #4]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <_close>:

int _close(int file)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
	return -1;
 800834a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800836a:	605a      	str	r2, [r3, #4]
	return 0;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <_isatty>:

int _isatty(int file)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
	return 1;
 8008382:	2301      	movs	r3, #1
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
	return 0;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
	...

080083ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b4:	4a14      	ldr	r2, [pc, #80]	; (8008408 <_sbrk+0x5c>)
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <_sbrk+0x60>)
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083c0:	4b13      	ldr	r3, [pc, #76]	; (8008410 <_sbrk+0x64>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_sbrk+0x64>)
 80083ca:	4a12      	ldr	r2, [pc, #72]	; (8008414 <_sbrk+0x68>)
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ce:	4b10      	ldr	r3, [pc, #64]	; (8008410 <_sbrk+0x64>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d207      	bcs.n	80083ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083dc:	f008 fe96 	bl	801110c <__errno>
 80083e0:	4603      	mov	r3, r0
 80083e2:	220c      	movs	r2, #12
 80083e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ea:	e009      	b.n	8008400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <_sbrk+0x64>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_sbrk+0x64>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	4a05      	ldr	r2, [pc, #20]	; (8008410 <_sbrk+0x64>)
 80083fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20030000 	.word	0x20030000
 800840c:	00000400 	.word	0x00000400
 8008410:	20000258 	.word	0x20000258
 8008414:	200022e0 	.word	0x200022e0

08008418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <SystemInit+0x20>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <SystemInit+0x20>)
 8008424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <MX_TIM6_Init>:
DMA_HandleTypeDef hdma_tim6_up;
DMA_HandleTypeDef hdma_tim7_up;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008442:	463b      	mov	r3, r7
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800844a:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <MX_TIM6_Init+0x64>)
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <MX_TIM6_Init+0x68>)
 800844e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8008450:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <MX_TIM6_Init+0x64>)
 8008452:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8008456:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008458:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <MX_TIM6_Init+0x64>)
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <MX_TIM6_Init+0x64>)
 8008460:	f242 720f 	movw	r2, #9999	; 0x270f
 8008464:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <MX_TIM6_Init+0x64>)
 8008468:	2200      	movs	r2, #0
 800846a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800846c:	480c      	ldr	r0, [pc, #48]	; (80084a0 <MX_TIM6_Init+0x64>)
 800846e:	f003 fed9 	bl	800c224 <HAL_TIM_Base_Init>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8008478:	f7ff f92c 	bl	80076d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800847c:	2300      	movs	r3, #0
 800847e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008480:	2300      	movs	r3, #0
 8008482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008484:	463b      	mov	r3, r7
 8008486:	4619      	mov	r1, r3
 8008488:	4805      	ldr	r0, [pc, #20]	; (80084a0 <MX_TIM6_Init+0x64>)
 800848a:	f004 f95b 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8008494:	f7ff f91e 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000960 	.word	0x20000960
 80084a4:	40001000 	.word	0x40001000

080084a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084ae:	463b      	mov	r3, r7
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80084b6:	4b15      	ldr	r3, [pc, #84]	; (800850c <MX_TIM7_Init+0x64>)
 80084b8:	4a15      	ldr	r2, [pc, #84]	; (8008510 <MX_TIM7_Init+0x68>)
 80084ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80084bc:	4b13      	ldr	r3, [pc, #76]	; (800850c <MX_TIM7_Init+0x64>)
 80084be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80084c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084c4:	4b11      	ldr	r3, [pc, #68]	; (800850c <MX_TIM7_Init+0x64>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 80084ca:	4b10      	ldr	r3, [pc, #64]	; (800850c <MX_TIM7_Init+0x64>)
 80084cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80084d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084d2:	4b0e      	ldr	r3, [pc, #56]	; (800850c <MX_TIM7_Init+0x64>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80084d8:	480c      	ldr	r0, [pc, #48]	; (800850c <MX_TIM7_Init+0x64>)
 80084da:	f003 fea3 	bl	800c224 <HAL_TIM_Base_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80084e4:	f7ff f8f6 	bl	80076d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084e8:	2300      	movs	r3, #0
 80084ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084ec:	2300      	movs	r3, #0
 80084ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80084f0:	463b      	mov	r3, r7
 80084f2:	4619      	mov	r1, r3
 80084f4:	4805      	ldr	r0, [pc, #20]	; (800850c <MX_TIM7_Init+0x64>)
 80084f6:	f004 f925 	bl	800c744 <HAL_TIMEx_MasterConfigSynchronization>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8008500:	f7ff f8e8 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	200009a8 	.word	0x200009a8
 8008510:	40001400 	.word	0x40001400

08008514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a4c      	ldr	r2, [pc, #304]	; (8008654 <HAL_TIM_Base_MspInit+0x140>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d146      	bne.n	80085b4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	4b4b      	ldr	r3, [pc, #300]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	4a4a      	ldr	r2, [pc, #296]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 8008530:	f043 0310 	orr.w	r3, r3, #16
 8008534:	6413      	str	r3, [r2, #64]	; 0x40
 8008536:	4b48      	ldr	r3, [pc, #288]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Stream1;
 8008542:	4b46      	ldr	r3, [pc, #280]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008544:	4a46      	ldr	r2, [pc, #280]	; (8008660 <HAL_TIM_Base_MspInit+0x14c>)
 8008546:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8008548:	4b44      	ldr	r3, [pc, #272]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800854a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800854e:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008550:	4b42      	ldr	r3, [pc, #264]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008552:	2200      	movs	r2, #0
 8008554:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8008556:	4b41      	ldr	r3, [pc, #260]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008558:	2200      	movs	r2, #0
 800855a:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800855c:	4b3f      	ldr	r3, [pc, #252]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800855e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008562:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008564:	4b3d      	ldr	r3, [pc, #244]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856a:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800856c:	4b3b      	ldr	r3, [pc, #236]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800856e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008572:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8008574:	4b39      	ldr	r3, [pc, #228]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008576:	2200      	movs	r2, #0
 8008578:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800857a:	4b38      	ldr	r3, [pc, #224]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800857c:	2200      	movs	r2, #0
 800857e:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008580:	4b36      	ldr	r3, [pc, #216]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008582:	2200      	movs	r2, #0
 8008584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8008586:	4835      	ldr	r0, [pc, #212]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 8008588:	f000 fd98 	bl	80090bc <HAL_DMA_Init>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8008592:	f7ff f89f 	bl	80076d4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a30      	ldr	r2, [pc, #192]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800859a:	621a      	str	r2, [r3, #32]
 800859c:	4a2f      	ldr	r2, [pc, #188]	; (800865c <HAL_TIM_Base_MspInit+0x148>)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80085a2:	2200      	movs	r2, #0
 80085a4:	2100      	movs	r1, #0
 80085a6:	2036      	movs	r0, #54	; 0x36
 80085a8:	f000 fd51 	bl	800904e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80085ac:	2036      	movs	r0, #54	; 0x36
 80085ae:	f000 fd6a 	bl	8009086 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80085b2:	e04a      	b.n	800864a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2a      	ldr	r2, [pc, #168]	; (8008664 <HAL_TIM_Base_MspInit+0x150>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d145      	bne.n	800864a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80085be:	2300      	movs	r3, #0
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	4b25      	ldr	r3, [pc, #148]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	4a24      	ldr	r2, [pc, #144]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 80085c8:	f043 0320 	orr.w	r3, r3, #32
 80085cc:	6413      	str	r3, [r2, #64]	; 0x40
 80085ce:	4b22      	ldr	r3, [pc, #136]	; (8008658 <HAL_TIM_Base_MspInit+0x144>)
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	60bb      	str	r3, [r7, #8]
 80085d8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 80085da:	4b23      	ldr	r3, [pc, #140]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085dc:	4a23      	ldr	r2, [pc, #140]	; (800866c <HAL_TIM_Base_MspInit+0x158>)
 80085de:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 80085e0:	4b21      	ldr	r3, [pc, #132]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085e6:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085e8:	4b1f      	ldr	r3, [pc, #124]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80085ee:	4b1e      	ldr	r3, [pc, #120]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 80085f4:	4b1c      	ldr	r3, [pc, #112]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085fa:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 80085fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008602:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008604:	4b18      	ldr	r3, [pc, #96]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 8008606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800860a:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 8008614:	2200      	movs	r2, #0
 8008616:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008618:	4b13      	ldr	r3, [pc, #76]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 800861a:	2200      	movs	r2, #0
 800861c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 800861e:	4812      	ldr	r0, [pc, #72]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 8008620:	f000 fd4c 	bl	80090bc <HAL_DMA_Init>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 800862a:	f7ff f853 	bl	80076d4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 8008632:	621a      	str	r2, [r3, #32]
 8008634:	4a0c      	ldr	r2, [pc, #48]	; (8008668 <HAL_TIM_Base_MspInit+0x154>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	2037      	movs	r0, #55	; 0x37
 8008640:	f000 fd05 	bl	800904e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008644:	2037      	movs	r0, #55	; 0x37
 8008646:	f000 fd1e 	bl	8009086 <HAL_NVIC_EnableIRQ>
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40001000 	.word	0x40001000
 8008658:	40023800 	.word	0x40023800
 800865c:	20000900 	.word	0x20000900
 8008660:	40026028 	.word	0x40026028
 8008664:	40001400 	.word	0x40001400
 8008668:	200008a0 	.word	0x200008a0
 800866c:	40026040 	.word	0x40026040

08008670 <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart1;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <MX_UART7_Init+0x4c>)
 8008676:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <MX_UART7_Init+0x50>)
 8008678:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <MX_UART7_Init+0x4c>)
 800867c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008680:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <MX_UART7_Init+0x4c>)
 8008684:	2200      	movs	r2, #0
 8008686:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <MX_UART7_Init+0x4c>)
 800868a:	2200      	movs	r2, #0
 800868c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <MX_UART7_Init+0x4c>)
 8008690:	2200      	movs	r2, #0
 8008692:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8008694:	4b09      	ldr	r3, [pc, #36]	; (80086bc <MX_UART7_Init+0x4c>)
 8008696:	220c      	movs	r2, #12
 8008698:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800869a:	4b08      	ldr	r3, [pc, #32]	; (80086bc <MX_UART7_Init+0x4c>)
 800869c:	2200      	movs	r2, #0
 800869e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <MX_UART7_Init+0x4c>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80086a6:	4805      	ldr	r0, [pc, #20]	; (80086bc <MX_UART7_Init+0x4c>)
 80086a8:	f004 f8dc 	bl	800c864 <HAL_UART_Init>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80086b2:	f7ff f80f 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80086b6:	bf00      	nop
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000518 	.word	0x20000518
 80086c0:	40007800 	.word	0x40007800

080086c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086ca:	4a12      	ldr	r2, [pc, #72]	; (8008714 <MX_USART1_UART_Init+0x50>)
 80086cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086ce:	4b10      	ldr	r3, [pc, #64]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086de:	2200      	movs	r2, #0
 80086e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086ea:	220c      	movs	r2, #12
 80086ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086ee:	4b08      	ldr	r3, [pc, #32]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086fa:	4805      	ldr	r0, [pc, #20]	; (8008710 <MX_USART1_UART_Init+0x4c>)
 80086fc:	f004 f8b2 	bl	800c864 <HAL_UART_Init>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008706:	f7fe ffe5 	bl	80076d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000608 	.word	0x20000608
 8008714:	40011000 	.word	0x40011000

08008718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	; 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008720:	f107 031c 	add.w	r3, r7, #28
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a3a      	ldr	r2, [pc, #232]	; (8008820 <HAL_UART_MspInit+0x108>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d135      	bne.n	80087a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800873a:	2300      	movs	r3, #0
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	4b39      	ldr	r3, [pc, #228]	; (8008824 <HAL_UART_MspInit+0x10c>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	4a38      	ldr	r2, [pc, #224]	; (8008824 <HAL_UART_MspInit+0x10c>)
 8008744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008748:	6413      	str	r3, [r2, #64]	; 0x40
 800874a:	4b36      	ldr	r3, [pc, #216]	; (8008824 <HAL_UART_MspInit+0x10c>)
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	4b32      	ldr	r3, [pc, #200]	; (8008824 <HAL_UART_MspInit+0x10c>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <HAL_UART_MspInit+0x10c>)
 8008760:	f043 0310 	orr.w	r3, r3, #16
 8008764:	6313      	str	r3, [r2, #48]	; 0x30
 8008766:	4b2f      	ldr	r3, [pc, #188]	; (8008824 <HAL_UART_MspInit+0x10c>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_OBC_Pin|DEBUG_RX_OBC_Pin;
 8008772:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008778:	2302      	movs	r3, #2
 800877a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877c:	2300      	movs	r3, #0
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008780:	2303      	movs	r3, #3
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008784:	2308      	movs	r3, #8
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008788:	f107 031c 	add.w	r3, r7, #28
 800878c:	4619      	mov	r1, r3
 800878e:	4826      	ldr	r0, [pc, #152]	; (8008828 <HAL_UART_MspInit+0x110>)
 8008790:	f001 f810 	bl	80097b4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	2052      	movs	r0, #82	; 0x52
 800879a:	f000 fc58 	bl	800904e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800879e:	2052      	movs	r0, #82	; 0x52
 80087a0:	f000 fc71 	bl	8009086 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80087a4:	e038      	b.n	8008818 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART1)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a20      	ldr	r2, [pc, #128]	; (800882c <HAL_UART_MspInit+0x114>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d133      	bne.n	8008818 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087ba:	f043 0310 	orr.w	r3, r3, #16
 80087be:	6453      	str	r3, [r2, #68]	; 0x44
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	613b      	str	r3, [r7, #16]
 80087ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	4b14      	ldr	r3, [pc, #80]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	4a13      	ldr	r2, [pc, #76]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087d6:	f043 0302 	orr.w	r3, r3, #2
 80087da:	6313      	str	r3, [r2, #48]	; 0x30
 80087dc:	4b11      	ldr	r3, [pc, #68]	; (8008824 <HAL_UART_MspInit+0x10c>)
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80087e8:	23c0      	movs	r3, #192	; 0xc0
 80087ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ec:	2302      	movs	r3, #2
 80087ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f4:	2303      	movs	r3, #3
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087f8:	2307      	movs	r3, #7
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087fc:	f107 031c 	add.w	r3, r7, #28
 8008800:	4619      	mov	r1, r3
 8008802:	480b      	ldr	r0, [pc, #44]	; (8008830 <HAL_UART_MspInit+0x118>)
 8008804:	f000 ffd6 	bl	80097b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	2025      	movs	r0, #37	; 0x25
 800880e:	f000 fc1e 	bl	800904e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008812:	2025      	movs	r0, #37	; 0x25
 8008814:	f000 fc37 	bl	8009086 <HAL_NVIC_EnableIRQ>
}
 8008818:	bf00      	nop
 800881a:	3730      	adds	r7, #48	; 0x30
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40007800 	.word	0x40007800
 8008824:	40023800 	.word	0x40023800
 8008828:	40021000 	.word	0x40021000
 800882c:	40011000 	.word	0x40011000
 8008830:	40020400 	.word	0x40020400

08008834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800886c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008838:	480d      	ldr	r0, [pc, #52]	; (8008870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800883a:	490e      	ldr	r1, [pc, #56]	; (8008874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800883c:	4a0e      	ldr	r2, [pc, #56]	; (8008878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800883e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008840:	e002      	b.n	8008848 <LoopCopyDataInit>

08008842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008846:	3304      	adds	r3, #4

08008848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800884a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800884c:	d3f9      	bcc.n	8008842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800884e:	4a0b      	ldr	r2, [pc, #44]	; (800887c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008850:	4c0b      	ldr	r4, [pc, #44]	; (8008880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008854:	e001      	b.n	800885a <LoopFillZerobss>

08008856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008858:	3204      	adds	r2, #4

0800885a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800885a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800885c:	d3fb      	bcc.n	8008856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800885e:	f7ff fddb 	bl	8008418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008862:	f008 fc6b 	bl	801113c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008866:	f7fe fe7f 	bl	8007568 <main>
  bx  lr    
 800886a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800886c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008874:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8008878:	080135a4 	.word	0x080135a4
  ldr r2, =_sbss
 800887c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8008880:	200022dc 	.word	0x200022dc

08008884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008884:	e7fe      	b.n	8008884 <ADC_IRQHandler>
	...

08008888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800888c:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <HAL_Init+0x40>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0d      	ldr	r2, [pc, #52]	; (80088c8 <HAL_Init+0x40>)
 8008892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <HAL_Init+0x40>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <HAL_Init+0x40>)
 800889e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <HAL_Init+0x40>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a07      	ldr	r2, [pc, #28]	; (80088c8 <HAL_Init+0x40>)
 80088aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088b0:	2003      	movs	r0, #3
 80088b2:	f000 fbc1 	bl	8009038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80088b6:	200f      	movs	r0, #15
 80088b8:	f000 f808 	bl	80088cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80088bc:	f7ff fc4e 	bl	800815c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	40023c00 	.word	0x40023c00

080088cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088d4:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_InitTick+0x54>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <HAL_InitTick+0x58>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	4619      	mov	r1, r3
 80088de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 fbd9 	bl	80090a2 <HAL_SYSTICK_Config>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e00e      	b.n	8008918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b0f      	cmp	r3, #15
 80088fe:	d80a      	bhi.n	8008916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008900:	2200      	movs	r2, #0
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	f000 fba1 	bl	800904e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800890c:	4a06      	ldr	r2, [pc, #24]	; (8008928 <HAL_InitTick+0x5c>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	e000      	b.n	8008918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000000 	.word	0x20000000
 8008924:	20000008 	.word	0x20000008
 8008928:	20000004 	.word	0x20000004

0800892c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008930:	4b06      	ldr	r3, [pc, #24]	; (800894c <HAL_IncTick+0x20>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <HAL_IncTick+0x24>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4413      	add	r3, r2
 800893c:	4a04      	ldr	r2, [pc, #16]	; (8008950 <HAL_IncTick+0x24>)
 800893e:	6013      	str	r3, [r2, #0]
}
 8008940:	bf00      	nop
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000008 	.word	0x20000008
 8008950:	200009f0 	.word	0x200009f0

08008954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  return uwTick;
 8008958:	4b03      	ldr	r3, [pc, #12]	; (8008968 <HAL_GetTick+0x14>)
 800895a:	681b      	ldr	r3, [r3, #0]
}
 800895c:	4618      	mov	r0, r3
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	200009f0 	.word	0x200009f0

0800896c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008974:	f7ff ffee 	bl	8008954 <HAL_GetTick>
 8008978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d005      	beq.n	8008992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008986:	4b0a      	ldr	r3, [pc, #40]	; (80089b0 <HAL_Delay+0x44>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008992:	bf00      	nop
 8008994:	f7ff ffde 	bl	8008954 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d8f7      	bhi.n	8008994 <HAL_Delay+0x28>
  {
  }
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000008 	.word	0x20000008

080089b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e033      	b.n	8008a32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f7 fea8 	bl	8000728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d118      	bne.n	8008a24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80089fa:	f023 0302 	bic.w	r3, r3, #2
 80089fe:	f043 0202 	orr.w	r2, r3, #2
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f94a 	bl	8008ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f043 0201 	orr.w	r2, r3, #1
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40
 8008a22:	e001      	b.n	8008a28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x1c>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e113      	b.n	8008c80 <HAL_ADC_ConfigChannel+0x244>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d925      	bls.n	8008ab4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68d9      	ldr	r1, [r3, #12]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	4613      	mov	r3, r2
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	4413      	add	r3, r2
 8008a7c:	3b1e      	subs	r3, #30
 8008a7e:	2207      	movs	r2, #7
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	43da      	mvns	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	400a      	ands	r2, r1
 8008a8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68d9      	ldr	r1, [r3, #12]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4403      	add	r3, r0
 8008aa6:	3b1e      	subs	r3, #30
 8008aa8:	409a      	lsls	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	e022      	b.n	8008afa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6919      	ldr	r1, [r3, #16]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	4413      	add	r3, r2
 8008ac8:	2207      	movs	r2, #7
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	43da      	mvns	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	400a      	ands	r2, r1
 8008ad6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6919      	ldr	r1, [r3, #16]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4618      	mov	r0, r3
 8008aea:	4603      	mov	r3, r0
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	4403      	add	r3, r0
 8008af0:	409a      	lsls	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d824      	bhi.n	8008b4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	3b05      	subs	r3, #5
 8008b14:	221f      	movs	r2, #31
 8008b16:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1a:	43da      	mvns	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	400a      	ands	r2, r1
 8008b22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4618      	mov	r0, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3b05      	subs	r3, #5
 8008b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	635a      	str	r2, [r3, #52]	; 0x34
 8008b4a:	e04c      	b.n	8008be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b0c      	cmp	r3, #12
 8008b52:	d824      	bhi.n	8008b9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	3b23      	subs	r3, #35	; 0x23
 8008b66:	221f      	movs	r2, #31
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	43da      	mvns	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	400a      	ands	r2, r1
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	4618      	mov	r0, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	3b23      	subs	r3, #35	; 0x23
 8008b90:	fa00 f203 	lsl.w	r2, r0, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b9c:	e023      	b.n	8008be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	3b41      	subs	r3, #65	; 0x41
 8008bb0:	221f      	movs	r2, #31
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	400a      	ands	r2, r1
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4618      	mov	r0, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3b41      	subs	r3, #65	; 0x41
 8008bda:	fa00 f203 	lsl.w	r2, r0, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008be6:	4b29      	ldr	r3, [pc, #164]	; (8008c8c <HAL_ADC_ConfigChannel+0x250>)
 8008be8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a28      	ldr	r2, [pc, #160]	; (8008c90 <HAL_ADC_ConfigChannel+0x254>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d10f      	bne.n	8008c14 <HAL_ADC_ConfigChannel+0x1d8>
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b12      	cmp	r3, #18
 8008bfa:	d10b      	bne.n	8008c14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <HAL_ADC_ConfigChannel+0x254>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d12b      	bne.n	8008c76 <HAL_ADC_ConfigChannel+0x23a>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a1c      	ldr	r2, [pc, #112]	; (8008c94 <HAL_ADC_ConfigChannel+0x258>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <HAL_ADC_ConfigChannel+0x1f4>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b11      	cmp	r3, #17
 8008c2e:	d122      	bne.n	8008c76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <HAL_ADC_ConfigChannel+0x258>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d111      	bne.n	8008c76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008c52:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <HAL_ADC_ConfigChannel+0x25c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <HAL_ADC_ConfigChannel+0x260>)
 8008c58:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5c:	0c9a      	lsrs	r2, r3, #18
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c68:	e002      	b.n	8008c70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1f9      	bne.n	8008c6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40012300 	.word	0x40012300
 8008c90:	40012000 	.word	0x40012000
 8008c94:	10000012 	.word	0x10000012
 8008c98:	20000000 	.word	0x20000000
 8008c9c:	431bde83 	.word	0x431bde83

08008ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ca8:	4b79      	ldr	r3, [pc, #484]	; (8008e90 <ADC_Init+0x1f0>)
 8008caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6899      	ldr	r1, [r3, #8]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	4a58      	ldr	r2, [pc, #352]	; (8008e94 <ADC_Init+0x1f4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d022      	beq.n	8008d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6899      	ldr	r1, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6899      	ldr	r1, [r3, #8]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	609a      	str	r2, [r3, #8]
 8008d7c:	e00f      	b.n	8008d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0202 	bic.w	r2, r2, #2
 8008dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6899      	ldr	r1, [r3, #8]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7e1b      	ldrb	r3, [r3, #24]
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01b      	beq.n	8008e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6859      	ldr	r1, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	3b01      	subs	r3, #1
 8008df8:	035a      	lsls	r2, r3, #13
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
 8008e02:	e007      	b.n	8008e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	051a      	lsls	r2, r3, #20
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6899      	ldr	r1, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e56:	025a      	lsls	r2, r3, #9
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6899      	ldr	r1, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	029a      	lsls	r2, r3, #10
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	609a      	str	r2, [r3, #8]
}
 8008e84:	bf00      	nop
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	40012300 	.word	0x40012300
 8008e94:	0f000001 	.word	0x0f000001

08008e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <__NVIC_SetPriorityGrouping+0x44>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008eca:	4a04      	ldr	r2, [pc, #16]	; (8008edc <__NVIC_SetPriorityGrouping+0x44>)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	60d3      	str	r3, [r2, #12]
}
 8008ed0:	bf00      	nop
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	e000ed00 	.word	0xe000ed00

08008ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ee4:	4b04      	ldr	r3, [pc, #16]	; (8008ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	f003 0307 	and.w	r3, r3, #7
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	e000ed00 	.word	0xe000ed00

08008efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db0b      	blt.n	8008f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	f003 021f 	and.w	r2, r3, #31
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <__NVIC_EnableIRQ+0x38>)
 8008f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8008f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	e000e100 	.word	0xe000e100

08008f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	db0a      	blt.n	8008f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	490c      	ldr	r1, [pc, #48]	; (8008f84 <__NVIC_SetPriority+0x4c>)
 8008f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f56:	0112      	lsls	r2, r2, #4
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f60:	e00a      	b.n	8008f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4908      	ldr	r1, [pc, #32]	; (8008f88 <__NVIC_SetPriority+0x50>)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	3b04      	subs	r3, #4
 8008f70:	0112      	lsls	r2, r2, #4
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	440b      	add	r3, r1
 8008f76:	761a      	strb	r2, [r3, #24]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	e000e100 	.word	0xe000e100
 8008f88:	e000ed00 	.word	0xe000ed00

08008f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b089      	sub	sp, #36	; 0x24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0307 	and.w	r3, r3, #7
 8008f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	f1c3 0307 	rsb	r3, r3, #7
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	bf28      	it	cs
 8008faa:	2304      	movcs	r3, #4
 8008fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	2b06      	cmp	r3, #6
 8008fb4:	d902      	bls.n	8008fbc <NVIC_EncodePriority+0x30>
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	3b03      	subs	r3, #3
 8008fba:	e000      	b.n	8008fbe <NVIC_EncodePriority+0x32>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fca:	43da      	mvns	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	401a      	ands	r2, r3
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	43d9      	mvns	r1, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fe4:	4313      	orrs	r3, r2
         );
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3724      	adds	r7, #36	; 0x24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009004:	d301      	bcc.n	800900a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009006:	2301      	movs	r3, #1
 8009008:	e00f      	b.n	800902a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800900a:	4a0a      	ldr	r2, [pc, #40]	; (8009034 <SysTick_Config+0x40>)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3b01      	subs	r3, #1
 8009010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009012:	210f      	movs	r1, #15
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	f7ff ff8e 	bl	8008f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <SysTick_Config+0x40>)
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009022:	4b04      	ldr	r3, [pc, #16]	; (8009034 <SysTick_Config+0x40>)
 8009024:	2207      	movs	r2, #7
 8009026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	e000e010 	.word	0xe000e010

08009038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff29 	bl	8008e98 <__NVIC_SetPriorityGrouping>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800904e:	b580      	push	{r7, lr}
 8009050:	b086      	sub	sp, #24
 8009052:	af00      	add	r7, sp, #0
 8009054:	4603      	mov	r3, r0
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009060:	f7ff ff3e 	bl	8008ee0 <__NVIC_GetPriorityGrouping>
 8009064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	6978      	ldr	r0, [r7, #20]
 800906c:	f7ff ff8e 	bl	8008f8c <NVIC_EncodePriority>
 8009070:	4602      	mov	r2, r0
 8009072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff ff5d 	bl	8008f38 <__NVIC_SetPriority>
}
 800907e:	bf00      	nop
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	4603      	mov	r3, r0
 800908e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff ff31 	bl	8008efc <__NVIC_EnableIRQ>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff ffa2 	bl	8008ff4 <SysTick_Config>
 80090b0:	4603      	mov	r3, r0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80090c8:	f7ff fc44 	bl	8008954 <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e099      	b.n	800920c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090f8:	e00f      	b.n	800911a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090fa:	f7ff fc2b 	bl	8008954 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b05      	cmp	r3, #5
 8009106:	d908      	bls.n	800911a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2203      	movs	r2, #3
 8009112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e078      	b.n	800920c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e8      	bne.n	80090fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4b38      	ldr	r3, [pc, #224]	; (8009214 <HAL_DMA_Init+0x158>)
 8009134:	4013      	ands	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800915e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b04      	cmp	r3, #4
 8009172:	d107      	bne.n	8009184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917c:	4313      	orrs	r3, r2
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d117      	bne.n	80091de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00e      	beq.n	80091de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa7b 	bl	80096bc <DMA_CheckFifoParam>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2240      	movs	r2, #64	; 0x40
 80091d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80091da:	2301      	movs	r3, #1
 80091dc:	e016      	b.n	800920c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa32 	bl	8009650 <DMA_CalcBaseAndBitshift>
 80091ec:	4603      	mov	r3, r0
 80091ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f4:	223f      	movs	r2, #63	; 0x3f
 80091f6:	409a      	lsls	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	f010803f 	.word	0xf010803f

08009218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009226:	f7ff fb95 	bl	8008954 <HAL_GetTick>
 800922a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	d008      	beq.n	800924a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e052      	b.n	80092f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0216 	bic.w	r2, r2, #22
 8009258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	695a      	ldr	r2, [r3, #20]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <HAL_DMA_Abort+0x62>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0208 	bic.w	r2, r2, #8
 8009288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0201 	bic.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800929a:	e013      	b.n	80092c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800929c:	f7ff fb5a 	bl	8008954 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	d90c      	bls.n	80092c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2203      	movs	r2, #3
 80092b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e015      	b.n	80092f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e4      	bne.n	800929c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d6:	223f      	movs	r2, #63	; 0x3f
 80092d8:	409a      	lsls	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	d004      	beq.n	8009316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2280      	movs	r2, #128	; 0x80
 8009310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e00c      	b.n	8009330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2205      	movs	r2, #5
 800931a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009348:	4b92      	ldr	r3, [pc, #584]	; (8009594 <HAL_DMA_IRQHandler+0x258>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a92      	ldr	r2, [pc, #584]	; (8009598 <HAL_DMA_IRQHandler+0x25c>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	0a9b      	lsrs	r3, r3, #10
 8009354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009366:	2208      	movs	r2, #8
 8009368:	409a      	lsls	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d01a      	beq.n	80093a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d013      	beq.n	80093a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0204 	bic.w	r2, r2, #4
 800938e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009394:	2208      	movs	r2, #8
 8009396:	409a      	lsls	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ac:	2201      	movs	r2, #1
 80093ae:	409a      	lsls	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4013      	ands	r3, r2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d012      	beq.n	80093de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ca:	2201      	movs	r2, #1
 80093cc:	409a      	lsls	r2, r3
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	f043 0202 	orr.w	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e2:	2204      	movs	r2, #4
 80093e4:	409a      	lsls	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4013      	ands	r3, r2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d012      	beq.n	8009414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009400:	2204      	movs	r2, #4
 8009402:	409a      	lsls	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940c:	f043 0204 	orr.w	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009418:	2210      	movs	r2, #16
 800941a:	409a      	lsls	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4013      	ands	r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d043      	beq.n	80094ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d03c      	beq.n	80094ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009436:	2210      	movs	r2, #16
 8009438:	409a      	lsls	r2, r3
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d018      	beq.n	800947e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d108      	bne.n	800946c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d024      	beq.n	80094ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	4798      	blx	r3
 800946a:	e01f      	b.n	80094ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01b      	beq.n	80094ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
 800947c:	e016      	b.n	80094ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009488:	2b00      	cmp	r3, #0
 800948a:	d107      	bne.n	800949c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0208 	bic.w	r2, r2, #8
 800949a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b0:	2220      	movs	r2, #32
 80094b2:	409a      	lsls	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 808e 	beq.w	80095da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8086 	beq.w	80095da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d2:	2220      	movs	r2, #32
 80094d4:	409a      	lsls	r2, r3
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d136      	bne.n	8009554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0216 	bic.w	r2, r2, #22
 80094f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	695a      	ldr	r2, [r3, #20]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <HAL_DMA_IRQHandler+0x1da>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009512:	2b00      	cmp	r3, #0
 8009514:	d007      	beq.n	8009526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0208 	bic.w	r2, r2, #8
 8009524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952a:	223f      	movs	r2, #63	; 0x3f
 800952c:	409a      	lsls	r2, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009546:	2b00      	cmp	r3, #0
 8009548:	d07d      	beq.n	8009646 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
        }
        return;
 8009552:	e078      	b.n	8009646 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d01c      	beq.n	800959c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d108      	bne.n	8009582 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009574:	2b00      	cmp	r3, #0
 8009576:	d030      	beq.n	80095da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
 8009580:	e02b      	b.n	80095da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d027      	beq.n	80095da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
 8009592:	e022      	b.n	80095da <HAL_DMA_IRQHandler+0x29e>
 8009594:	20000000 	.word	0x20000000
 8009598:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10f      	bne.n	80095ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0210 	bic.w	r2, r2, #16
 80095b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d032      	beq.n	8009648 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d022      	beq.n	8009634 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2205      	movs	r2, #5
 80095f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0201 	bic.w	r2, r2, #1
 8009604:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3301      	adds	r3, #1
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	429a      	cmp	r2, r3
 8009610:	d307      	bcc.n	8009622 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1f2      	bne.n	8009606 <HAL_DMA_IRQHandler+0x2ca>
 8009620:	e000      	b.n	8009624 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009622:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	4798      	blx	r3
 8009644:	e000      	b.n	8009648 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009646:	bf00      	nop
    }
  }
}
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop

08009650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	3b10      	subs	r3, #16
 8009660:	4a14      	ldr	r2, [pc, #80]	; (80096b4 <DMA_CalcBaseAndBitshift+0x64>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	091b      	lsrs	r3, r3, #4
 8009668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800966a:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <DMA_CalcBaseAndBitshift+0x68>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d909      	bls.n	8009692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	1d1a      	adds	r2, r3, #4
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	659a      	str	r2, [r3, #88]	; 0x58
 8009690:	e007      	b.n	80096a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800969a:	f023 0303 	bic.w	r3, r3, #3
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	aaaaaaab 	.word	0xaaaaaaab
 80096b8:	080134b8 	.word	0x080134b8

080096bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d11f      	bne.n	8009716 <DMA_CheckFifoParam+0x5a>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d856      	bhi.n	800978a <DMA_CheckFifoParam+0xce>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <DMA_CheckFifoParam+0x28>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	080096f5 	.word	0x080096f5
 80096e8:	08009707 	.word	0x08009707
 80096ec:	080096f5 	.word	0x080096f5
 80096f0:	0800978b 	.word	0x0800978b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d046      	beq.n	800978e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009704:	e043      	b.n	800978e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800970e:	d140      	bne.n	8009792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009714:	e03d      	b.n	8009792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800971e:	d121      	bne.n	8009764 <DMA_CheckFifoParam+0xa8>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b03      	cmp	r3, #3
 8009724:	d837      	bhi.n	8009796 <DMA_CheckFifoParam+0xda>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <DMA_CheckFifoParam+0x70>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800973d 	.word	0x0800973d
 8009730:	08009743 	.word	0x08009743
 8009734:	0800973d 	.word	0x0800973d
 8009738:	08009755 	.word	0x08009755
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
      break;
 8009740:	e030      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d025      	beq.n	800979a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009752:	e022      	b.n	800979a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800975c:	d11f      	bne.n	800979e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009762:	e01c      	b.n	800979e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b02      	cmp	r3, #2
 8009768:	d903      	bls.n	8009772 <DMA_CheckFifoParam+0xb6>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d003      	beq.n	8009778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009770:	e018      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
      break;
 8009776:	e015      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
      break;
 8009788:	e00b      	b.n	80097a2 <DMA_CheckFifoParam+0xe6>
      break;
 800978a:	bf00      	nop
 800978c:	e00a      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;
 800978e:	bf00      	nop
 8009790:	e008      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;
 8009792:	bf00      	nop
 8009794:	e006      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;
 8009796:	bf00      	nop
 8009798:	e004      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <DMA_CheckFifoParam+0xe8>
      break;
 80097a2:	bf00      	nop
    }
  } 
  
  return status; 
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop

080097b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b089      	sub	sp, #36	; 0x24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097ca:	2300      	movs	r3, #0
 80097cc:	61fb      	str	r3, [r7, #28]
 80097ce:	e177      	b.n	8009ac0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80097d0:	2201      	movs	r2, #1
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4013      	ands	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	f040 8166 	bne.w	8009aba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d005      	beq.n	8009806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009802:	2b02      	cmp	r3, #2
 8009804:	d130      	bne.n	8009868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	2203      	movs	r2, #3
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43db      	mvns	r3, r3
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	4013      	ands	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	fa02 f303 	lsl.w	r3, r2, r3
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	4313      	orrs	r3, r2
 800982e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800983c:	2201      	movs	r2, #1
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	fa02 f303 	lsl.w	r3, r2, r3
 8009844:	43db      	mvns	r3, r3
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	4013      	ands	r3, r2
 800984a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	091b      	lsrs	r3, r3, #4
 8009852:	f003 0201 	and.w	r2, r3, #1
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	4313      	orrs	r3, r2
 8009860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	2b03      	cmp	r3, #3
 8009872:	d017      	beq.n	80098a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	2203      	movs	r2, #3
 8009880:	fa02 f303 	lsl.w	r3, r2, r3
 8009884:	43db      	mvns	r3, r3
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	4013      	ands	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	fa02 f303 	lsl.w	r3, r2, r3
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	4313      	orrs	r3, r2
 800989c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d123      	bne.n	80098f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	08da      	lsrs	r2, r3, #3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3208      	adds	r2, #8
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	f003 0307 	and.w	r3, r3, #7
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	220f      	movs	r2, #15
 80098c8:	fa02 f303 	lsl.w	r3, r2, r3
 80098cc:	43db      	mvns	r3, r3
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	4013      	ands	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	691a      	ldr	r2, [r3, #16]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	08da      	lsrs	r2, r3, #3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3208      	adds	r2, #8
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	2203      	movs	r2, #3
 8009904:	fa02 f303 	lsl.w	r3, r2, r3
 8009908:	43db      	mvns	r3, r3
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	4013      	ands	r3, r2
 800990e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f003 0203 	and.w	r2, r3, #3
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	fa02 f303 	lsl.w	r3, r2, r3
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	4313      	orrs	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 80c0 	beq.w	8009aba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	4b66      	ldr	r3, [pc, #408]	; (8009ad8 <HAL_GPIO_Init+0x324>)
 8009940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009942:	4a65      	ldr	r2, [pc, #404]	; (8009ad8 <HAL_GPIO_Init+0x324>)
 8009944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009948:	6453      	str	r3, [r2, #68]	; 0x44
 800994a:	4b63      	ldr	r3, [pc, #396]	; (8009ad8 <HAL_GPIO_Init+0x324>)
 800994c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009956:	4a61      	ldr	r2, [pc, #388]	; (8009adc <HAL_GPIO_Init+0x328>)
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	089b      	lsrs	r3, r3, #2
 800995c:	3302      	adds	r3, #2
 800995e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	220f      	movs	r2, #15
 800996e:	fa02 f303 	lsl.w	r3, r2, r3
 8009972:	43db      	mvns	r3, r3
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	4013      	ands	r3, r2
 8009978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a58      	ldr	r2, [pc, #352]	; (8009ae0 <HAL_GPIO_Init+0x32c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d037      	beq.n	80099f2 <HAL_GPIO_Init+0x23e>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a57      	ldr	r2, [pc, #348]	; (8009ae4 <HAL_GPIO_Init+0x330>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d031      	beq.n	80099ee <HAL_GPIO_Init+0x23a>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a56      	ldr	r2, [pc, #344]	; (8009ae8 <HAL_GPIO_Init+0x334>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d02b      	beq.n	80099ea <HAL_GPIO_Init+0x236>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a55      	ldr	r2, [pc, #340]	; (8009aec <HAL_GPIO_Init+0x338>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d025      	beq.n	80099e6 <HAL_GPIO_Init+0x232>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a54      	ldr	r2, [pc, #336]	; (8009af0 <HAL_GPIO_Init+0x33c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d01f      	beq.n	80099e2 <HAL_GPIO_Init+0x22e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a53      	ldr	r2, [pc, #332]	; (8009af4 <HAL_GPIO_Init+0x340>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d019      	beq.n	80099de <HAL_GPIO_Init+0x22a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a52      	ldr	r2, [pc, #328]	; (8009af8 <HAL_GPIO_Init+0x344>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <HAL_GPIO_Init+0x226>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a51      	ldr	r2, [pc, #324]	; (8009afc <HAL_GPIO_Init+0x348>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d00d      	beq.n	80099d6 <HAL_GPIO_Init+0x222>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a50      	ldr	r2, [pc, #320]	; (8009b00 <HAL_GPIO_Init+0x34c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d007      	beq.n	80099d2 <HAL_GPIO_Init+0x21e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a4f      	ldr	r2, [pc, #316]	; (8009b04 <HAL_GPIO_Init+0x350>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d101      	bne.n	80099ce <HAL_GPIO_Init+0x21a>
 80099ca:	2309      	movs	r3, #9
 80099cc:	e012      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099ce:	230a      	movs	r3, #10
 80099d0:	e010      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099d2:	2308      	movs	r3, #8
 80099d4:	e00e      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099d6:	2307      	movs	r3, #7
 80099d8:	e00c      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099da:	2306      	movs	r3, #6
 80099dc:	e00a      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099de:	2305      	movs	r3, #5
 80099e0:	e008      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099e2:	2304      	movs	r3, #4
 80099e4:	e006      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099e6:	2303      	movs	r3, #3
 80099e8:	e004      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e002      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <HAL_GPIO_Init+0x240>
 80099f2:	2300      	movs	r3, #0
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	f002 0203 	and.w	r2, r2, #3
 80099fa:	0092      	lsls	r2, r2, #2
 80099fc:	4093      	lsls	r3, r2
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a04:	4935      	ldr	r1, [pc, #212]	; (8009adc <HAL_GPIO_Init+0x328>)
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	089b      	lsrs	r3, r3, #2
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009a12:	4b3d      	ldr	r3, [pc, #244]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009a36:	4a34      	ldr	r2, [pc, #208]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009a3c:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	43db      	mvns	r3, r3
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009a60:	4a29      	ldr	r2, [pc, #164]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009a66:	4b28      	ldr	r3, [pc, #160]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	43db      	mvns	r3, r3
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	4013      	ands	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009a8a:	4a1f      	ldr	r2, [pc, #124]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009a90:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ab4:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <HAL_GPIO_Init+0x354>)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	3301      	adds	r3, #1
 8009abe:	61fb      	str	r3, [r7, #28]
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	2b0f      	cmp	r3, #15
 8009ac4:	f67f ae84 	bls.w	80097d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	3724      	adds	r7, #36	; 0x24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40023800 	.word	0x40023800
 8009adc:	40013800 	.word	0x40013800
 8009ae0:	40020000 	.word	0x40020000
 8009ae4:	40020400 	.word	0x40020400
 8009ae8:	40020800 	.word	0x40020800
 8009aec:	40020c00 	.word	0x40020c00
 8009af0:	40021000 	.word	0x40021000
 8009af4:	40021400 	.word	0x40021400
 8009af8:	40021800 	.word	0x40021800
 8009afc:	40021c00 	.word	0x40021c00
 8009b00:	40022000 	.word	0x40022000
 8009b04:	40022400 	.word	0x40022400
 8009b08:	40013c00 	.word	0x40013c00

08009b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	807b      	strh	r3, [r7, #2]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b1c:	787b      	ldrb	r3, [r7, #1]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b22:	887a      	ldrh	r2, [r7, #2]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009b28:	e003      	b.n	8009b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009b2a:	887b      	ldrh	r3, [r7, #2]
 8009b2c:	041a      	lsls	r2, r3, #16
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	619a      	str	r2, [r3, #24]
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b40:	b08f      	sub	sp, #60	; 0x3c
 8009b42:	af0a      	add	r7, sp, #40	; 0x28
 8009b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e10f      	b.n	8009d70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f006 ff9c 	bl	8010aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2203      	movs	r2, #3
 8009b74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f003 fee5 	bl	800d95e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	687e      	ldr	r6, [r7, #4]
 8009b9c:	466d      	mov	r5, sp
 8009b9e:	f106 0410 	add.w	r4, r6, #16
 8009ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8009bb2:	1d33      	adds	r3, r6, #4
 8009bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bb6:	6838      	ldr	r0, [r7, #0]
 8009bb8:	f003 fdbc 	bl	800d734 <USB_CoreInit>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e0d0      	b.n	8009d70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f003 fed3 	bl	800d980 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	73fb      	strb	r3, [r7, #15]
 8009bde:	e04a      	b.n	8009c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009be0:	7bfa      	ldrb	r2, [r7, #15]
 8009be2:	6879      	ldr	r1, [r7, #4]
 8009be4:	4613      	mov	r3, r2
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	1a9b      	subs	r3, r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	440b      	add	r3, r1
 8009bee:	333d      	adds	r3, #61	; 0x3d
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009bf4:	7bfa      	ldrb	r2, [r7, #15]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	1a9b      	subs	r3, r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	440b      	add	r3, r1
 8009c02:	333c      	adds	r3, #60	; 0x3c
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009c08:	7bfa      	ldrb	r2, [r7, #15]
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	b298      	uxth	r0, r3
 8009c0e:	6879      	ldr	r1, [r7, #4]
 8009c10:	4613      	mov	r3, r2
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	3342      	adds	r3, #66	; 0x42
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009c20:	7bfa      	ldrb	r2, [r7, #15]
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	4613      	mov	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	1a9b      	subs	r3, r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	333f      	adds	r3, #63	; 0x3f
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009c34:	7bfa      	ldrb	r2, [r7, #15]
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	3344      	adds	r3, #68	; 0x44
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009c48:	7bfa      	ldrb	r2, [r7, #15]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	1a9b      	subs	r3, r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	3348      	adds	r3, #72	; 0x48
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009c5c:	7bfa      	ldrb	r2, [r7, #15]
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	4613      	mov	r3, r2
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	3350      	adds	r3, #80	; 0x50
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	3301      	adds	r3, #1
 8009c74:	73fb      	strb	r3, [r7, #15]
 8009c76:	7bfa      	ldrb	r2, [r7, #15]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d3af      	bcc.n	8009be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
 8009c84:	e044      	b.n	8009d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009c86:	7bfa      	ldrb	r2, [r7, #15]
 8009c88:	6879      	ldr	r1, [r7, #4]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009c9c:	7bfa      	ldrb	r2, [r7, #15]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009cae:	7bfa      	ldrb	r2, [r7, #15]
 8009cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009cb2:	7bfa      	ldrb	r2, [r7, #15]
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009cc8:	7bfa      	ldrb	r2, [r7, #15]
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009cde:	7bfa      	ldrb	r2, [r7, #15]
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	1a9b      	subs	r3, r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009cf4:	7bfa      	ldrb	r2, [r7, #15]
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	1a9b      	subs	r3, r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	440b      	add	r3, r1
 8009d02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
 8009d10:	7bfa      	ldrb	r2, [r7, #15]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d3b5      	bcc.n	8009c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	687e      	ldr	r6, [r7, #4]
 8009d22:	466d      	mov	r5, sp
 8009d24:	f106 0410 	add.w	r4, r6, #16
 8009d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8009d38:	1d33      	adds	r3, r6, #4
 8009d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d3c:	6838      	ldr	r0, [r7, #0]
 8009d3e:	f003 fe6b 	bl	800da18 <USB_DevInit>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e00d      	b.n	8009d70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f004 fee7 	bl	800eb3c <USB_DevDisconnect>

  return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_PCD_Start+0x1c>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e020      	b.n	8009dd6 <HAL_PCD_Start+0x5e>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d109      	bne.n	8009db8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d005      	beq.n	8009db8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f003 fdbd 	bl	800d93c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f004 fe97 	bl	800eafa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009dde:	b590      	push	{r4, r7, lr}
 8009de0:	b08d      	sub	sp, #52	; 0x34
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f004 ff55 	bl	800eca4 <USB_GetMode>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 839d 	bne.w	800a53c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f004 feb9 	bl	800eb7e <USB_ReadInterrupts>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 8393 	beq.w	800a53a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f004 feb0 	bl	800eb7e <USB_ReadInterrupts>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d107      	bne.n	8009e38 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	695a      	ldr	r2, [r3, #20]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f002 0202 	and.w	r2, r2, #2
 8009e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f004 fe9e 	bl	800eb7e <USB_ReadInterrupts>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b10      	cmp	r3, #16
 8009e4a:	d161      	bne.n	8009f10 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	699a      	ldr	r2, [r3, #24]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0210 	bic.w	r2, r2, #16
 8009e5a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	f003 020f 	and.w	r2, r3, #15
 8009e68:	4613      	mov	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4413      	add	r3, r2
 8009e78:	3304      	adds	r3, #4
 8009e7a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	0c5b      	lsrs	r3, r3, #17
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d124      	bne.n	8009ed2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009e8e:	4013      	ands	r3, r2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d035      	beq.n	8009f00 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	091b      	lsrs	r3, r3, #4
 8009e9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6a38      	ldr	r0, [r7, #32]
 8009ea8:	f004 fcd5 	bl	800e856 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	091b      	lsrs	r3, r3, #4
 8009eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eb8:	441a      	add	r2, r3
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	091b      	lsrs	r3, r3, #4
 8009ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eca:	441a      	add	r2, r3
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	619a      	str	r2, [r3, #24]
 8009ed0:	e016      	b.n	8009f00 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	0c5b      	lsrs	r3, r3, #17
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	2b06      	cmp	r3, #6
 8009edc:	d110      	bne.n	8009f00 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6a38      	ldr	r0, [r7, #32]
 8009eea:	f004 fcb4 	bl	800e856 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	091b      	lsrs	r3, r3, #4
 8009ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009efa:	441a      	add	r2, r3
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0210 	orr.w	r2, r2, #16
 8009f0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f004 fe32 	bl	800eb7e <USB_ReadInterrupts>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f24:	d16e      	bne.n	800a004 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f004 fe38 	bl	800eba4 <USB_ReadDevAllOutEpInterrupt>
 8009f34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009f36:	e062      	b.n	8009ffe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d057      	beq.n	8009ff2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f48:	b2d2      	uxtb	r2, r2
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f004 fe5d 	bl	800ec0c <USB_ReadDevOutEPInterrupt>
 8009f52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00c      	beq.n	8009f78 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fdb0 	bl	800aad8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f003 0308 	and.w	r3, r3, #8
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00c      	beq.n	8009f9c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8e:	461a      	mov	r2, r3
 8009f90:	2308      	movs	r3, #8
 8009f92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 feaa 	bl	800acf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f003 0310 	and.w	r3, r3, #16
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d008      	beq.n	8009fb8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d008      	beq.n	8009fd4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fce:	461a      	mov	r2, r3
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d009      	beq.n	8009ff2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fea:	461a      	mov	r2, r3
 8009fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ff0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	085b      	lsrs	r3, r3, #1
 8009ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	2b00      	cmp	r3, #0
 800a002:	d199      	bne.n	8009f38 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f004 fdb8 	bl	800eb7e <USB_ReadInterrupts>
 800a00e:	4603      	mov	r3, r0
 800a010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a018:	f040 80c0 	bne.w	800a19c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4618      	mov	r0, r3
 800a022:	f004 fdd9 	bl	800ebd8 <USB_ReadDevAllInEpInterrupt>
 800a026:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a02c:	e0b2      	b.n	800a194 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80a7 	beq.w	800a188 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f004 fdff 	bl	800ec48 <USB_ReadDevInEPInterrupt>
 800a04a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d057      	beq.n	800a106 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2201      	movs	r2, #1
 800a05e:	fa02 f303 	lsl.w	r3, r2, r3
 800a062:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	43db      	mvns	r3, r3
 800a070:	69f9      	ldr	r1, [r7, #28]
 800a072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a076:	4013      	ands	r3, r2
 800a078:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	4413      	add	r3, r2
 800a082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a086:	461a      	mov	r2, r3
 800a088:	2301      	movs	r3, #1
 800a08a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d132      	bne.n	800a0fa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a098:	4613      	mov	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	3348      	adds	r3, #72	; 0x48
 800a0a4:	6819      	ldr	r1, [r3, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4403      	add	r3, r0
 800a0b4:	3344      	adds	r3, #68	; 0x44
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4419      	add	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0be:	4613      	mov	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4403      	add	r3, r0
 800a0c8:	3348      	adds	r3, #72	; 0x48
 800a0ca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d113      	bne.n	800a0fa <HAL_PCD_IRQHandler+0x31c>
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3350      	adds	r3, #80	; 0x50
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6818      	ldr	r0, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	f004 fe07 	bl	800ed08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f006 fd52 	bl	8010baa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	461a      	mov	r2, r3
 800a11e:	2308      	movs	r3, #8
 800a120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d008      	beq.n	800a13e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a138:	461a      	mov	r2, r3
 800a13a:	2310      	movs	r3, #16
 800a13c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d008      	beq.n	800a15a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a154:	461a      	mov	r2, r3
 800a156:	2340      	movs	r3, #64	; 0x40
 800a158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a170:	461a      	mov	r2, r3
 800a172:	2302      	movs	r3, #2
 800a174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fc1b 	bl	800a9be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3301      	adds	r3, #1
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	085b      	lsrs	r3, r3, #1
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	f47f af49 	bne.w	800a02e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f004 fcec 	bl	800eb7e <USB_ReadInterrupts>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1b0:	d122      	bne.n	800a1f8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	69fa      	ldr	r2, [r7, #28]
 800a1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d108      	bne.n	800a1e2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a1d8:	2100      	movs	r1, #0
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fe26 	bl	800ae2c <HAL_PCDEx_LPM_Callback>
 800a1e0:	e002      	b.n	800a1e8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f006 fd58 	bl	8010c98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a1f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f004 fcbe 	bl	800eb7e <USB_ReadInterrupts>
 800a202:	4603      	mov	r3, r0
 800a204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a20c:	d112      	bne.n	800a234 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d102      	bne.n	800a224 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f006 fd14 	bl	8010c4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695a      	ldr	r2, [r3, #20]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a232:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f004 fca0 	bl	800eb7e <USB_ReadInterrupts>
 800a23e:	4603      	mov	r3, r0
 800a240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a248:	f040 80c7 	bne.w	800a3da <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2110      	movs	r1, #16
 800a266:	4618      	mov	r0, r3
 800a268:	f003 fd3a 	bl	800dce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a26c:	2300      	movs	r3, #0
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a270:	e056      	b.n	800a320 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a27e:	461a      	mov	r2, r3
 800a280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a284:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	015a      	lsls	r2, r3, #5
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	4413      	add	r3, r2
 800a28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a296:	0151      	lsls	r1, r2, #5
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	440a      	add	r2, r1
 800a29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2a4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a2d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a318:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	3301      	adds	r3, #1
 800a31e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a326:	429a      	cmp	r2, r3
 800a328:	d3a3      	bcc.n	800a272 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a338:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a33c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	2b00      	cmp	r3, #0
 800a344:	d016      	beq.n	800a374 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a356:	f043 030b 	orr.w	r3, r3, #11
 800a35a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a36c:	f043 030b 	orr.w	r3, r3, #11
 800a370:	6453      	str	r3, [r2, #68]	; 0x44
 800a372:	e015      	b.n	800a3a0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a386:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a38a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a39a:	f043 030b 	orr.w	r3, r3, #11
 800a39e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a3b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f004 fc9f 	bl	800ed08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695a      	ldr	r2, [r3, #20]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a3d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f004 fbcd 	bl	800eb7e <USB_ReadInterrupts>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ee:	d124      	bne.n	800a43a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f004 fc63 	bl	800ecc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f003 fccb 	bl	800dd9a <USB_GetDevSpeed>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681c      	ldr	r4, [r3, #0]
 800a410:	f001 f92c 	bl	800b66c <HAL_RCC_GetHCLKFreq>
 800a414:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	4620      	mov	r0, r4
 800a420:	f003 f9ea 	bl	800d7f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f006 fbe8 	bl	8010bfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	695a      	ldr	r2, [r3, #20]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a438:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f004 fb9d 	bl	800eb7e <USB_ReadInterrupts>
 800a444:	4603      	mov	r3, r0
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b08      	cmp	r3, #8
 800a44c:	d10a      	bne.n	800a464 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f006 fbc5 	bl	8010bde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	695a      	ldr	r2, [r3, #20]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f002 0208 	and.w	r2, r2, #8
 800a462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f004 fb88 	bl	800eb7e <USB_ReadInterrupts>
 800a46e:	4603      	mov	r3, r0
 800a470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a478:	d10f      	bne.n	800a49a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	b2db      	uxtb	r3, r3
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f006 fc27 	bl	8010cd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	695a      	ldr	r2, [r3, #20]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f004 fb6d 	bl	800eb7e <USB_ReadInterrupts>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4ae:	d10f      	bne.n	800a4d0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f006 fbfa 	bl	8010cb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	695a      	ldr	r2, [r3, #20]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a4ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f004 fb52 	bl	800eb7e <USB_ReadInterrupts>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e4:	d10a      	bne.n	800a4fc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f006 fc08 	bl	8010cfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a4fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f004 fb3c 	bl	800eb7e <USB_ReadInterrupts>
 800a506:	4603      	mov	r3, r0
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	d115      	bne.n	800a53c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f006 fbf8 	bl	8010d18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6859      	ldr	r1, [r3, #4]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	430a      	orrs	r2, r1
 800a536:	605a      	str	r2, [r3, #4]
 800a538:	e000      	b.n	800a53c <HAL_PCD_IRQHandler+0x75e>
      return;
 800a53a:	bf00      	nop
    }
  }
}
 800a53c:	3734      	adds	r7, #52	; 0x34
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd90      	pop	{r4, r7, pc}

0800a542 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	460b      	mov	r3, r1
 800a54c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_PCD_SetAddress+0x1a>
 800a558:	2302      	movs	r3, #2
 800a55a:	e013      	b.n	800a584 <HAL_PCD_SetAddress+0x42>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	4611      	mov	r1, r2
 800a574:	4618      	mov	r0, r3
 800a576:	f004 fa9a 	bl	800eaae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	4608      	mov	r0, r1
 800a596:	4611      	mov	r1, r2
 800a598:	461a      	mov	r2, r3
 800a59a:	4603      	mov	r3, r0
 800a59c:	70fb      	strb	r3, [r7, #3]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	803b      	strh	r3, [r7, #0]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a5aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	da0f      	bge.n	800a5d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	f003 020f 	and.w	r2, r3, #15
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	3338      	adds	r3, #56	; 0x38
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	705a      	strb	r2, [r3, #1]
 800a5d0:	e00f      	b.n	800a5f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	f003 020f 	and.w	r2, r3, #15
 800a5d8:	4613      	mov	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	1a9b      	subs	r3, r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	f003 030f 	and.w	r3, r3, #15
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a5fe:	883a      	ldrh	r2, [r7, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	78ba      	ldrb	r2, [r7, #2]
 800a608:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b29a      	uxth	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a61c:	78bb      	ldrb	r3, [r7, #2]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d102      	bne.n	800a628 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_PCD_EP_Open+0xaa>
 800a632:	2302      	movs	r3, #2
 800a634:	e00e      	b.n	800a654 <HAL_PCD_EP_Open+0xc8>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	4618      	mov	r0, r3
 800a646:	f003 fbcd 	bl	800dde4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a652:	7afb      	ldrb	r3, [r7, #11]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	da0f      	bge.n	800a690 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	f003 020f 	and.w	r2, r3, #15
 800a676:	4613      	mov	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	1a9b      	subs	r3, r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	3338      	adds	r3, #56	; 0x38
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	4413      	add	r3, r2
 800a684:	3304      	adds	r3, #4
 800a686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	705a      	strb	r2, [r3, #1]
 800a68e:	e00f      	b.n	800a6b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	f003 020f 	and.w	r2, r3, #15
 800a696:	4613      	mov	r3, r2
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d101      	bne.n	800a6ca <HAL_PCD_EP_Close+0x6e>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e00e      	b.n	800a6e8 <HAL_PCD_EP_Close+0x8c>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68f9      	ldr	r1, [r7, #12]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f003 fc0b 	bl	800def4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	f003 020f 	and.w	r2, r3, #15
 800a706:	4613      	mov	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	3304      	adds	r3, #4
 800a718:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2200      	movs	r2, #0
 800a72a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2200      	movs	r2, #0
 800a730:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d102      	bne.n	800a74c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	2b00      	cmp	r3, #0
 800a754:	d109      	bne.n	800a76a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	461a      	mov	r2, r3
 800a762:	6979      	ldr	r1, [r7, #20]
 800a764:	f003 fee6 	bl	800e534 <USB_EP0StartXfer>
 800a768:	e008      	b.n	800a77c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	461a      	mov	r2, r3
 800a776:	6979      	ldr	r1, [r7, #20]
 800a778:	f003 fc98 	bl	800e0ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	f003 020f 	and.w	r2, r3, #15
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	1a9b      	subs	r3, r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a7a8:	681b      	ldr	r3, [r3, #0]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b086      	sub	sp, #24
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7c6:	7afb      	ldrb	r3, [r7, #11]
 800a7c8:	f003 020f 	and.w	r2, r3, #15
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	3338      	adds	r3, #56	; 0x38
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	3304      	adds	r3, #4
 800a7dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7f6:	7afb      	ldrb	r3, [r7, #11]
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d102      	bne.n	800a810 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	461a      	mov	r2, r3
 800a826:	6979      	ldr	r1, [r7, #20]
 800a828:	f003 fe84 	bl	800e534 <USB_EP0StartXfer>
 800a82c:	e008      	b.n	800a840 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	f003 fc36 	bl	800e0ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d901      	bls.n	800a868 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e050      	b.n	800a90a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	da0f      	bge.n	800a890 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	f003 020f 	and.w	r2, r3, #15
 800a876:	4613      	mov	r3, r2
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	3338      	adds	r3, #56	; 0x38
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	4413      	add	r3, r2
 800a884:	3304      	adds	r3, #4
 800a886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	705a      	strb	r2, [r3, #1]
 800a88e:	e00d      	b.n	800a8ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_PCD_EP_SetStall+0x82>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e01e      	b.n	800a90a <HAL_PCD_EP_SetStall+0xc0>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68f9      	ldr	r1, [r7, #12]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f004 f813 	bl	800e906 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	b2d9      	uxtb	r1, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f004 fa04 	bl	800ed08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	f003 020f 	and.w	r2, r3, #15
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d901      	bls.n	800a930 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e042      	b.n	800a9b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a934:	2b00      	cmp	r3, #0
 800a936:	da0f      	bge.n	800a958 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	f003 020f 	and.w	r2, r3, #15
 800a93e:	4613      	mov	r3, r2
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	3338      	adds	r3, #56	; 0x38
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	4413      	add	r3, r2
 800a94c:	3304      	adds	r3, #4
 800a94e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	705a      	strb	r2, [r3, #1]
 800a956:	e00f      	b.n	800a978 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	f003 020f 	and.w	r2, r3, #15
 800a95e:	4613      	mov	r3, r2
 800a960:	00db      	lsls	r3, r3, #3
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	3304      	adds	r3, #4
 800a970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	f003 030f 	and.w	r3, r3, #15
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a990:	2b01      	cmp	r3, #1
 800a992:	d101      	bne.n	800a998 <HAL_PCD_EP_ClrStall+0x86>
 800a994:	2302      	movs	r3, #2
 800a996:	e00e      	b.n	800a9b6 <HAL_PCD_EP_ClrStall+0xa4>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68f9      	ldr	r1, [r7, #12]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f004 f81b 	bl	800e9e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b08a      	sub	sp, #40	; 0x28
 800a9c2:	af02      	add	r7, sp, #8
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	3338      	adds	r3, #56	; 0x38
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d901      	bls.n	800a9f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e06c      	b.n	800aad0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	695a      	ldr	r2, [r3, #20]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d902      	bls.n	800aa12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	3303      	adds	r3, #3
 800aa16:	089b      	lsrs	r3, r3, #2
 800aa18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aa1a:	e02b      	b.n	800aa74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d902      	bls.n	800aa38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	3303      	adds	r3, #3
 800aa3c:	089b      	lsrs	r3, r3, #2
 800aa3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	68d9      	ldr	r1, [r3, #12]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4603      	mov	r3, r0
 800aa56:	6978      	ldr	r0, [r7, #20]
 800aa58:	f003 febf 	bl	800e7da <USB_WritePacket>

    ep->xfer_buff  += len;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68da      	ldr	r2, [r3, #12]
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	441a      	add	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	699a      	ldr	r2, [r3, #24]
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	441a      	add	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d809      	bhi.n	800aa9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699a      	ldr	r2, [r3, #24]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d203      	bcs.n	800aa9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1be      	bne.n	800aa1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	695a      	ldr	r2, [r3, #20]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d811      	bhi.n	800aace <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	f003 030f 	and.w	r3, r3, #15
 800aab0:	2201      	movs	r2, #1
 800aab2:	fa02 f303 	lsl.w	r3, r2, r3
 800aab6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aabe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	43db      	mvns	r3, r3
 800aac4:	6939      	ldr	r1, [r7, #16]
 800aac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaca:	4013      	ands	r3, r2
 800aacc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3720      	adds	r7, #32
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	333c      	adds	r3, #60	; 0x3c
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	f040 80a0 	bne.w	800ac50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f003 0308 	and.w	r3, r3, #8
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d015      	beq.n	800ab46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4a72      	ldr	r2, [pc, #456]	; (800ace8 <PCD_EP_OutXfrComplete_int+0x210>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	f240 80dd 	bls.w	800acde <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 80d7 	beq.w	800acde <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab42:	6093      	str	r3, [r2, #8]
 800ab44:	e0cb      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f003 0320 	and.w	r3, r3, #32
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	2320      	movs	r3, #32
 800ab60:	6093      	str	r3, [r2, #8]
 800ab62:	e0bc      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 80b7 	bne.w	800acde <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4a5d      	ldr	r2, [pc, #372]	; (800ace8 <PCD_EP_OutXfrComplete_int+0x210>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d90f      	bls.n	800ab98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab94:	6093      	str	r3, [r2, #8]
 800ab96:	e0a2      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800abaa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	0159      	lsls	r1, r3, #5
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	440b      	add	r3, r1
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800abbe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	4613      	mov	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	1a9b      	subs	r3, r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4403      	add	r3, r0
 800abce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800abd2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	4613      	mov	r3, r2
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	1a9b      	subs	r3, r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	440b      	add	r3, r1
 800abe2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800abe6:	6819      	ldr	r1, [r3, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4613      	mov	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4403      	add	r3, r0
 800abf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4419      	add	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	4613      	mov	r3, r2
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4403      	add	r3, r0
 800ac0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ac10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d114      	bne.n	800ac42 <PCD_EP_OutXfrComplete_int+0x16a>
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	440b      	add	r3, r1
 800ac26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	f004 f863 	bl	800ed08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f005 ff93 	bl	8010b74 <HAL_PCD_DataOutStageCallback>
 800ac4e:	e046      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a26      	ldr	r2, [pc, #152]	; (800acec <PCD_EP_OutXfrComplete_int+0x214>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d124      	bne.n	800aca2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac74:	6093      	str	r3, [r2, #8]
 800ac76:	e032      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d008      	beq.n	800ac94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	015a      	lsls	r2, r3, #5
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	4413      	add	r3, r2
 800ac8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8e:	461a      	mov	r2, r3
 800ac90:	2320      	movs	r3, #32
 800ac92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f005 ff6a 	bl	8010b74 <HAL_PCD_DataOutStageCallback>
 800aca0:	e01d      	b.n	800acde <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d114      	bne.n	800acd2 <PCD_EP_OutXfrComplete_int+0x1fa>
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	1a9b      	subs	r3, r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d108      	bne.n	800acd2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6818      	ldr	r0, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800acca:	461a      	mov	r2, r3
 800accc:	2100      	movs	r1, #0
 800acce:	f004 f81b 	bl	800ed08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f005 ff4b 	bl	8010b74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	4f54300a 	.word	0x4f54300a
 800acec:	4f54310a 	.word	0x4f54310a

0800acf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	333c      	adds	r3, #60	; 0x3c
 800ad08:	3304      	adds	r3, #4
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4a15      	ldr	r2, [pc, #84]	; (800ad78 <PCD_EP_OutSetupPacket_int+0x88>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d90e      	bls.n	800ad44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d009      	beq.n	800ad44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f005 ff03 	bl	8010b50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4a0a      	ldr	r2, [pc, #40]	; (800ad78 <PCD_EP_OutSetupPacket_int+0x88>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d90c      	bls.n	800ad6c <PCD_EP_OutSetupPacket_int+0x7c>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d108      	bne.n	800ad6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad64:	461a      	mov	r2, r3
 800ad66:	2101      	movs	r1, #1
 800ad68:	f003 ffce 	bl	800ed08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	4f54300a 	.word	0x4f54300a

0800ad7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d107      	bne.n	800adaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ad9a:	883b      	ldrh	r3, [r7, #0]
 800ad9c:	0419      	lsls	r1, r3, #16
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	430a      	orrs	r2, r1
 800ada6:	629a      	str	r2, [r3, #40]	; 0x28
 800ada8:	e028      	b.n	800adfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb0:	0c1b      	lsrs	r3, r3, #16
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	4413      	add	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
 800adbc:	e00d      	b.n	800adda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
 800adc4:	3340      	adds	r3, #64	; 0x40
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	0c1b      	lsrs	r3, r3, #16
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	3301      	adds	r3, #1
 800add8:	73fb      	strb	r3, [r7, #15]
 800adda:	7bfa      	ldrb	r2, [r7, #15]
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	3b01      	subs	r3, #1
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d3ec      	bcc.n	800adbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ade4:	883b      	ldrh	r3, [r7, #0]
 800ade6:	0418      	lsls	r0, r3, #16
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6819      	ldr	r1, [r3, #0]
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	3b01      	subs	r3, #1
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	4302      	orrs	r2, r0
 800adf4:	3340      	adds	r3, #64	; 0x40
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	887a      	ldrh	r2, [r7, #2]
 800ae1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e264      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d075      	beq.n	800af4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae62:	4ba3      	ldr	r3, [pc, #652]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f003 030c 	and.w	r3, r3, #12
 800ae6a:	2b04      	cmp	r3, #4
 800ae6c:	d00c      	beq.n	800ae88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae6e:	4ba0      	ldr	r3, [pc, #640]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	d112      	bne.n	800aea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae7a:	4b9d      	ldr	r3, [pc, #628]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae86:	d10b      	bne.n	800aea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae88:	4b99      	ldr	r3, [pc, #612]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d05b      	beq.n	800af4c <HAL_RCC_OscConfig+0x108>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d157      	bne.n	800af4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e23f      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea8:	d106      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x74>
 800aeaa:	4b91      	ldr	r3, [pc, #580]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a90      	ldr	r2, [pc, #576]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aeb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	e01d      	b.n	800aef4 <HAL_RCC_OscConfig+0xb0>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aec0:	d10c      	bne.n	800aedc <HAL_RCC_OscConfig+0x98>
 800aec2:	4b8b      	ldr	r3, [pc, #556]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a8a      	ldr	r2, [pc, #552]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	4b88      	ldr	r3, [pc, #544]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a87      	ldr	r2, [pc, #540]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	e00b      	b.n	800aef4 <HAL_RCC_OscConfig+0xb0>
 800aedc:	4b84      	ldr	r3, [pc, #528]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a83      	ldr	r2, [pc, #524]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	4b81      	ldr	r3, [pc, #516]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a80      	ldr	r2, [pc, #512]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aeee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d013      	beq.n	800af24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aefc:	f7fd fd2a 	bl	8008954 <HAL_GetTick>
 800af00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af02:	e008      	b.n	800af16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af04:	f7fd fd26 	bl	8008954 <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	2b64      	cmp	r3, #100	; 0x64
 800af10:	d901      	bls.n	800af16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e204      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af16:	4b76      	ldr	r3, [pc, #472]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0f0      	beq.n	800af04 <HAL_RCC_OscConfig+0xc0>
 800af22:	e014      	b.n	800af4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af24:	f7fd fd16 	bl	8008954 <HAL_GetTick>
 800af28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af2c:	f7fd fd12 	bl	8008954 <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b64      	cmp	r3, #100	; 0x64
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e1f0      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af3e:	4b6c      	ldr	r3, [pc, #432]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f0      	bne.n	800af2c <HAL_RCC_OscConfig+0xe8>
 800af4a:	e000      	b.n	800af4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d063      	beq.n	800b022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af5a:	4b65      	ldr	r3, [pc, #404]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f003 030c 	and.w	r3, r3, #12
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00b      	beq.n	800af7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af66:	4b62      	ldr	r3, [pc, #392]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af6e:	2b08      	cmp	r3, #8
 800af70:	d11c      	bne.n	800afac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af72:	4b5f      	ldr	r3, [pc, #380]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d116      	bne.n	800afac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af7e:	4b5c      	ldr	r3, [pc, #368]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d005      	beq.n	800af96 <HAL_RCC_OscConfig+0x152>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d001      	beq.n	800af96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e1c4      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af96:	4b56      	ldr	r3, [pc, #344]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	4952      	ldr	r1, [pc, #328]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afaa:	e03a      	b.n	800b022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d020      	beq.n	800aff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afb4:	4b4f      	ldr	r3, [pc, #316]	; (800b0f4 <HAL_RCC_OscConfig+0x2b0>)
 800afb6:	2201      	movs	r2, #1
 800afb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afba:	f7fd fccb 	bl	8008954 <HAL_GetTick>
 800afbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afc0:	e008      	b.n	800afd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afc2:	f7fd fcc7 	bl	8008954 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d901      	bls.n	800afd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e1a5      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afd4:	4b46      	ldr	r3, [pc, #280]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0f0      	beq.n	800afc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afe0:	4b43      	ldr	r3, [pc, #268]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	4940      	ldr	r1, [pc, #256]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	600b      	str	r3, [r1, #0]
 800aff4:	e015      	b.n	800b022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aff6:	4b3f      	ldr	r3, [pc, #252]	; (800b0f4 <HAL_RCC_OscConfig+0x2b0>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800affc:	f7fd fcaa 	bl	8008954 <HAL_GetTick>
 800b000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b002:	e008      	b.n	800b016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b004:	f7fd fca6 	bl	8008954 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d901      	bls.n	800b016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e184      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b016:	4b36      	ldr	r3, [pc, #216]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0302 	and.w	r3, r3, #2
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f0      	bne.n	800b004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0308 	and.w	r3, r3, #8
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d030      	beq.n	800b090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d016      	beq.n	800b064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b036:	4b30      	ldr	r3, [pc, #192]	; (800b0f8 <HAL_RCC_OscConfig+0x2b4>)
 800b038:	2201      	movs	r2, #1
 800b03a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b03c:	f7fd fc8a 	bl	8008954 <HAL_GetTick>
 800b040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b042:	e008      	b.n	800b056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b044:	f7fd fc86 	bl	8008954 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d901      	bls.n	800b056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e164      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b056:	4b26      	ldr	r3, [pc, #152]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d0f0      	beq.n	800b044 <HAL_RCC_OscConfig+0x200>
 800b062:	e015      	b.n	800b090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b064:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <HAL_RCC_OscConfig+0x2b4>)
 800b066:	2200      	movs	r2, #0
 800b068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b06a:	f7fd fc73 	bl	8008954 <HAL_GetTick>
 800b06e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b070:	e008      	b.n	800b084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b072:	f7fd fc6f 	bl	8008954 <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d901      	bls.n	800b084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e14d      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b084:	4b1a      	ldr	r3, [pc, #104]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1f0      	bne.n	800b072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80a0 	beq.w	800b1de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0a2:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10f      	bne.n	800b0ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60bb      	str	r3, [r7, #8]
 800b0b2:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	4a0e      	ldr	r2, [pc, #56]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <HAL_RCC_OscConfig+0x2ac>)
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c6:	60bb      	str	r3, [r7, #8]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <HAL_RCC_OscConfig+0x2b8>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d121      	bne.n	800b11e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0da:	4b08      	ldr	r3, [pc, #32]	; (800b0fc <HAL_RCC_OscConfig+0x2b8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a07      	ldr	r2, [pc, #28]	; (800b0fc <HAL_RCC_OscConfig+0x2b8>)
 800b0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0e6:	f7fd fc35 	bl	8008954 <HAL_GetTick>
 800b0ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ec:	e011      	b.n	800b112 <HAL_RCC_OscConfig+0x2ce>
 800b0ee:	bf00      	nop
 800b0f0:	40023800 	.word	0x40023800
 800b0f4:	42470000 	.word	0x42470000
 800b0f8:	42470e80 	.word	0x42470e80
 800b0fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b100:	f7fd fc28 	bl	8008954 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e106      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b112:	4b85      	ldr	r3, [pc, #532]	; (800b328 <HAL_RCC_OscConfig+0x4e4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0f0      	beq.n	800b100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d106      	bne.n	800b134 <HAL_RCC_OscConfig+0x2f0>
 800b126:	4b81      	ldr	r3, [pc, #516]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12a:	4a80      	ldr	r2, [pc, #512]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	6713      	str	r3, [r2, #112]	; 0x70
 800b132:	e01c      	b.n	800b16e <HAL_RCC_OscConfig+0x32a>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	2b05      	cmp	r3, #5
 800b13a:	d10c      	bne.n	800b156 <HAL_RCC_OscConfig+0x312>
 800b13c:	4b7b      	ldr	r3, [pc, #492]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b140:	4a7a      	ldr	r2, [pc, #488]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b142:	f043 0304 	orr.w	r3, r3, #4
 800b146:	6713      	str	r3, [r2, #112]	; 0x70
 800b148:	4b78      	ldr	r3, [pc, #480]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14c:	4a77      	ldr	r2, [pc, #476]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b14e:	f043 0301 	orr.w	r3, r3, #1
 800b152:	6713      	str	r3, [r2, #112]	; 0x70
 800b154:	e00b      	b.n	800b16e <HAL_RCC_OscConfig+0x32a>
 800b156:	4b75      	ldr	r3, [pc, #468]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15a:	4a74      	ldr	r2, [pc, #464]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	6713      	str	r3, [r2, #112]	; 0x70
 800b162:	4b72      	ldr	r3, [pc, #456]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b166:	4a71      	ldr	r2, [pc, #452]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b168:	f023 0304 	bic.w	r3, r3, #4
 800b16c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d015      	beq.n	800b1a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b176:	f7fd fbed 	bl	8008954 <HAL_GetTick>
 800b17a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b17c:	e00a      	b.n	800b194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b17e:	f7fd fbe9 	bl	8008954 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	f241 3288 	movw	r2, #5000	; 0x1388
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d901      	bls.n	800b194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e0c5      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b194:	4b65      	ldr	r3, [pc, #404]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0ee      	beq.n	800b17e <HAL_RCC_OscConfig+0x33a>
 800b1a0:	e014      	b.n	800b1cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1a2:	f7fd fbd7 	bl	8008954 <HAL_GetTick>
 800b1a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1a8:	e00a      	b.n	800b1c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1aa:	f7fd fbd3 	bl	8008954 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d901      	bls.n	800b1c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e0af      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1c0:	4b5a      	ldr	r3, [pc, #360]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1ee      	bne.n	800b1aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d105      	bne.n	800b1de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1d2:	4b56      	ldr	r3, [pc, #344]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	4a55      	ldr	r2, [pc, #340]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b1d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 809b 	beq.w	800b31e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1e8:	4b50      	ldr	r3, [pc, #320]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 030c 	and.w	r3, r3, #12
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d05c      	beq.n	800b2ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d141      	bne.n	800b280 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1fc:	4b4c      	ldr	r3, [pc, #304]	; (800b330 <HAL_RCC_OscConfig+0x4ec>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b202:	f7fd fba7 	bl	8008954 <HAL_GetTick>
 800b206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b208:	e008      	b.n	800b21c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b20a:	f7fd fba3 	bl	8008954 <HAL_GetTick>
 800b20e:	4602      	mov	r2, r0
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	2b02      	cmp	r3, #2
 800b216:	d901      	bls.n	800b21c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e081      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b21c:	4b43      	ldr	r3, [pc, #268]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1f0      	bne.n	800b20a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	69da      	ldr	r2, [r3, #28]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	019b      	lsls	r3, r3, #6
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	085b      	lsrs	r3, r3, #1
 800b240:	3b01      	subs	r3, #1
 800b242:	041b      	lsls	r3, r3, #16
 800b244:	431a      	orrs	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	061b      	lsls	r3, r3, #24
 800b24c:	4937      	ldr	r1, [pc, #220]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b252:	4b37      	ldr	r3, [pc, #220]	; (800b330 <HAL_RCC_OscConfig+0x4ec>)
 800b254:	2201      	movs	r2, #1
 800b256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b258:	f7fd fb7c 	bl	8008954 <HAL_GetTick>
 800b25c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b25e:	e008      	b.n	800b272 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b260:	f7fd fb78 	bl	8008954 <HAL_GetTick>
 800b264:	4602      	mov	r2, r0
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e056      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b272:	4b2e      	ldr	r3, [pc, #184]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f0      	beq.n	800b260 <HAL_RCC_OscConfig+0x41c>
 800b27e:	e04e      	b.n	800b31e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b280:	4b2b      	ldr	r3, [pc, #172]	; (800b330 <HAL_RCC_OscConfig+0x4ec>)
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b286:	f7fd fb65 	bl	8008954 <HAL_GetTick>
 800b28a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b28c:	e008      	b.n	800b2a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b28e:	f7fd fb61 	bl	8008954 <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e03f      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2a0:	4b22      	ldr	r3, [pc, #136]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f0      	bne.n	800b28e <HAL_RCC_OscConfig+0x44a>
 800b2ac:	e037      	b.n	800b31e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d101      	bne.n	800b2ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e032      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2ba:	4b1c      	ldr	r3, [pc, #112]	; (800b32c <HAL_RCC_OscConfig+0x4e8>)
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d028      	beq.n	800b31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d121      	bne.n	800b31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d11a      	bne.n	800b31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d111      	bne.n	800b31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b300:	085b      	lsrs	r3, r3, #1
 800b302:	3b01      	subs	r3, #1
 800b304:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b306:	429a      	cmp	r2, r3
 800b308:	d107      	bne.n	800b31a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b316:	429a      	cmp	r2, r3
 800b318:	d001      	beq.n	800b31e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e000      	b.n	800b320 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40007000 	.word	0x40007000
 800b32c:	40023800 	.word	0x40023800
 800b330:	42470060 	.word	0x42470060

0800b334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e0cc      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b348:	4b68      	ldr	r3, [pc, #416]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 030f 	and.w	r3, r3, #15
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d90c      	bls.n	800b370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b356:	4b65      	ldr	r3, [pc, #404]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35e:	4b63      	ldr	r3, [pc, #396]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d001      	beq.n	800b370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e0b8      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0302 	and.w	r3, r3, #2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d020      	beq.n	800b3be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b388:	4b59      	ldr	r3, [pc, #356]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	4a58      	ldr	r2, [pc, #352]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b38e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0308 	and.w	r3, r3, #8
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d005      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3a0:	4b53      	ldr	r3, [pc, #332]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	4a52      	ldr	r2, [pc, #328]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b3aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3ac:	4b50      	ldr	r3, [pc, #320]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	494d      	ldr	r1, [pc, #308]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d044      	beq.n	800b454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d107      	bne.n	800b3e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3d2:	4b47      	ldr	r3, [pc, #284]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d119      	bne.n	800b412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e07f      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d003      	beq.n	800b3f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d107      	bne.n	800b402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3f2:	4b3f      	ldr	r3, [pc, #252]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d109      	bne.n	800b412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e06f      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b402:	4b3b      	ldr	r3, [pc, #236]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	e067      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b412:	4b37      	ldr	r3, [pc, #220]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f023 0203 	bic.w	r2, r3, #3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	4934      	ldr	r1, [pc, #208]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b420:	4313      	orrs	r3, r2
 800b422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b424:	f7fd fa96 	bl	8008954 <HAL_GetTick>
 800b428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b42a:	e00a      	b.n	800b442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b42c:	f7fd fa92 	bl	8008954 <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d901      	bls.n	800b442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e04f      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b442:	4b2b      	ldr	r3, [pc, #172]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f003 020c 	and.w	r2, r3, #12
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	429a      	cmp	r2, r3
 800b452:	d1eb      	bne.n	800b42c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b454:	4b25      	ldr	r3, [pc, #148]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 030f 	and.w	r3, r3, #15
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d20c      	bcs.n	800b47c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b462:	4b22      	ldr	r3, [pc, #136]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	b2d2      	uxtb	r2, r2
 800b468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b46a:	4b20      	ldr	r3, [pc, #128]	; (800b4ec <HAL_RCC_ClockConfig+0x1b8>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d001      	beq.n	800b47c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e032      	b.n	800b4e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b488:	4b19      	ldr	r3, [pc, #100]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	4916      	ldr	r1, [pc, #88]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b496:	4313      	orrs	r3, r2
 800b498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b4a6:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	490e      	ldr	r1, [pc, #56]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b4ba:	f000 f821 	bl	800b500 <HAL_RCC_GetSysClockFreq>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	091b      	lsrs	r3, r3, #4
 800b4c6:	f003 030f 	and.w	r3, r3, #15
 800b4ca:	490a      	ldr	r1, [pc, #40]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c0>)
 800b4cc:	5ccb      	ldrb	r3, [r1, r3]
 800b4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d2:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b4d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <HAL_RCC_ClockConfig+0x1c8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fd f9f6 	bl	80088cc <HAL_InitTick>

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	40023c00 	.word	0x40023c00
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	080134a0 	.word	0x080134a0
 800b4f8:	20000000 	.word	0x20000000
 800b4fc:	20000004 	.word	0x20000004

0800b500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b500:	b5b0      	push	{r4, r5, r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b506:	2100      	movs	r1, #0
 800b508:	6079      	str	r1, [r7, #4]
 800b50a:	2100      	movs	r1, #0
 800b50c:	60f9      	str	r1, [r7, #12]
 800b50e:	2100      	movs	r1, #0
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b512:	2100      	movs	r1, #0
 800b514:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b516:	4952      	ldr	r1, [pc, #328]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b518:	6889      	ldr	r1, [r1, #8]
 800b51a:	f001 010c 	and.w	r1, r1, #12
 800b51e:	2908      	cmp	r1, #8
 800b520:	d00d      	beq.n	800b53e <HAL_RCC_GetSysClockFreq+0x3e>
 800b522:	2908      	cmp	r1, #8
 800b524:	f200 8094 	bhi.w	800b650 <HAL_RCC_GetSysClockFreq+0x150>
 800b528:	2900      	cmp	r1, #0
 800b52a:	d002      	beq.n	800b532 <HAL_RCC_GetSysClockFreq+0x32>
 800b52c:	2904      	cmp	r1, #4
 800b52e:	d003      	beq.n	800b538 <HAL_RCC_GetSysClockFreq+0x38>
 800b530:	e08e      	b.n	800b650 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b532:	4b4c      	ldr	r3, [pc, #304]	; (800b664 <HAL_RCC_GetSysClockFreq+0x164>)
 800b534:	60bb      	str	r3, [r7, #8]
       break;
 800b536:	e08e      	b.n	800b656 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b538:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <HAL_RCC_GetSysClockFreq+0x168>)
 800b53a:	60bb      	str	r3, [r7, #8]
      break;
 800b53c:	e08b      	b.n	800b656 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b53e:	4948      	ldr	r1, [pc, #288]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b540:	6849      	ldr	r1, [r1, #4]
 800b542:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b546:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b548:	4945      	ldr	r1, [pc, #276]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b54a:	6849      	ldr	r1, [r1, #4]
 800b54c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b550:	2900      	cmp	r1, #0
 800b552:	d024      	beq.n	800b59e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b554:	4942      	ldr	r1, [pc, #264]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b556:	6849      	ldr	r1, [r1, #4]
 800b558:	0989      	lsrs	r1, r1, #6
 800b55a:	4608      	mov	r0, r1
 800b55c:	f04f 0100 	mov.w	r1, #0
 800b560:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b564:	f04f 0500 	mov.w	r5, #0
 800b568:	ea00 0204 	and.w	r2, r0, r4
 800b56c:	ea01 0305 	and.w	r3, r1, r5
 800b570:	493d      	ldr	r1, [pc, #244]	; (800b668 <HAL_RCC_GetSysClockFreq+0x168>)
 800b572:	fb01 f003 	mul.w	r0, r1, r3
 800b576:	2100      	movs	r1, #0
 800b578:	fb01 f102 	mul.w	r1, r1, r2
 800b57c:	1844      	adds	r4, r0, r1
 800b57e:	493a      	ldr	r1, [pc, #232]	; (800b668 <HAL_RCC_GetSysClockFreq+0x168>)
 800b580:	fba2 0101 	umull	r0, r1, r2, r1
 800b584:	1863      	adds	r3, r4, r1
 800b586:	4619      	mov	r1, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f04f 0300 	mov.w	r3, #0
 800b590:	f7f4 fe96 	bl	80002c0 <__aeabi_uldivmod>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4613      	mov	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e04a      	b.n	800b634 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b59e:	4b30      	ldr	r3, [pc, #192]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	099b      	lsrs	r3, r3, #6
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	f04f 0300 	mov.w	r3, #0
 800b5aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5ae:	f04f 0100 	mov.w	r1, #0
 800b5b2:	ea02 0400 	and.w	r4, r2, r0
 800b5b6:	ea03 0501 	and.w	r5, r3, r1
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f04f 0200 	mov.w	r2, #0
 800b5c2:	f04f 0300 	mov.w	r3, #0
 800b5c6:	014b      	lsls	r3, r1, #5
 800b5c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b5cc:	0142      	lsls	r2, r0, #5
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	1b00      	subs	r0, r0, r4
 800b5d4:	eb61 0105 	sbc.w	r1, r1, r5
 800b5d8:	f04f 0200 	mov.w	r2, #0
 800b5dc:	f04f 0300 	mov.w	r3, #0
 800b5e0:	018b      	lsls	r3, r1, #6
 800b5e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b5e6:	0182      	lsls	r2, r0, #6
 800b5e8:	1a12      	subs	r2, r2, r0
 800b5ea:	eb63 0301 	sbc.w	r3, r3, r1
 800b5ee:	f04f 0000 	mov.w	r0, #0
 800b5f2:	f04f 0100 	mov.w	r1, #0
 800b5f6:	00d9      	lsls	r1, r3, #3
 800b5f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b5fc:	00d0      	lsls	r0, r2, #3
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	1912      	adds	r2, r2, r4
 800b604:	eb45 0303 	adc.w	r3, r5, r3
 800b608:	f04f 0000 	mov.w	r0, #0
 800b60c:	f04f 0100 	mov.w	r1, #0
 800b610:	0299      	lsls	r1, r3, #10
 800b612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b616:	0290      	lsls	r0, r2, #10
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4610      	mov	r0, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	461a      	mov	r2, r3
 800b624:	f04f 0300 	mov.w	r3, #0
 800b628:	f7f4 fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4613      	mov	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b634:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <HAL_RCC_GetSysClockFreq+0x160>)
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	0c1b      	lsrs	r3, r3, #16
 800b63a:	f003 0303 	and.w	r3, r3, #3
 800b63e:	3301      	adds	r3, #1
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64c:	60bb      	str	r3, [r7, #8]
      break;
 800b64e:	e002      	b.n	800b656 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <HAL_RCC_GetSysClockFreq+0x164>)
 800b652:	60bb      	str	r3, [r7, #8]
      break;
 800b654:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b656:	68bb      	ldr	r3, [r7, #8]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bdb0      	pop	{r4, r5, r7, pc}
 800b660:	40023800 	.word	0x40023800
 800b664:	00f42400 	.word	0x00f42400
 800b668:	016e3600 	.word	0x016e3600

0800b66c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b670:	4b03      	ldr	r3, [pc, #12]	; (800b680 <HAL_RCC_GetHCLKFreq+0x14>)
 800b672:	681b      	ldr	r3, [r3, #0]
}
 800b674:	4618      	mov	r0, r3
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	20000000 	.word	0x20000000

0800b684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b688:	f7ff fff0 	bl	800b66c <HAL_RCC_GetHCLKFreq>
 800b68c:	4602      	mov	r2, r0
 800b68e:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	0a9b      	lsrs	r3, r3, #10
 800b694:	f003 0307 	and.w	r3, r3, #7
 800b698:	4903      	ldr	r1, [pc, #12]	; (800b6a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b69a:	5ccb      	ldrb	r3, [r1, r3]
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	40023800 	.word	0x40023800
 800b6a8:	080134b0 	.word	0x080134b0

0800b6ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b6b0:	f7ff ffdc 	bl	800b66c <HAL_RCC_GetHCLKFreq>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	0b5b      	lsrs	r3, r3, #13
 800b6bc:	f003 0307 	and.w	r3, r3, #7
 800b6c0:	4903      	ldr	r1, [pc, #12]	; (800b6d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6c2:	5ccb      	ldrb	r3, [r1, r3]
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	40023800 	.word	0x40023800
 800b6d0:	080134b0 	.word	0x080134b0

0800b6d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e07b      	b.n	800b7de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d108      	bne.n	800b700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6f6:	d009      	beq.n	800b70c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	61da      	str	r2, [r3, #28]
 800b6fe:	e005      	b.n	800b70c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7fc fc7a 	bl	8008020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2202      	movs	r2, #2
 800b730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b754:	431a      	orrs	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	f003 0302 	and.w	r3, r3, #2
 800b768:	431a      	orrs	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b790:	ea42 0103 	orr.w	r1, r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b798:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	0c1b      	lsrs	r3, r3, #16
 800b7aa:	f003 0104 	and.w	r1, r3, #4
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	f003 0210 	and.w	r2, r3, #16
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69da      	ldr	r2, [r3, #28]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b088      	sub	sp, #32
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	603b      	str	r3, [r7, #0]
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b800:	2b01      	cmp	r3, #1
 800b802:	d101      	bne.n	800b808 <HAL_SPI_Transmit+0x22>
 800b804:	2302      	movs	r3, #2
 800b806:	e126      	b.n	800ba56 <HAL_SPI_Transmit+0x270>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b810:	f7fd f8a0 	bl	8008954 <HAL_GetTick>
 800b814:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b01      	cmp	r3, #1
 800b824:	d002      	beq.n	800b82c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b826:	2302      	movs	r3, #2
 800b828:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b82a:	e10b      	b.n	800ba44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <HAL_SPI_Transmit+0x52>
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b83c:	e102      	b.n	800ba44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2203      	movs	r2, #3
 800b842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	88fa      	ldrh	r2, [r7, #6]
 800b856:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	88fa      	ldrh	r2, [r7, #6]
 800b85c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b884:	d10f      	bne.n	800b8a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b894:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	d007      	beq.n	800b8c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8cc:	d14b      	bne.n	800b966 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <HAL_SPI_Transmit+0xf6>
 800b8d6:	8afb      	ldrh	r3, [r7, #22]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d13e      	bne.n	800b95a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e0:	881a      	ldrh	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ec:	1c9a      	adds	r2, r3, #2
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b900:	e02b      	b.n	800b95a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d112      	bne.n	800b936 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b914:	881a      	ldrh	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b920:	1c9a      	adds	r2, r3, #2
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	3b01      	subs	r3, #1
 800b92e:	b29a      	uxth	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	86da      	strh	r2, [r3, #54]	; 0x36
 800b934:	e011      	b.n	800b95a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b936:	f7fd f80d 	bl	8008954 <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	429a      	cmp	r2, r3
 800b944:	d803      	bhi.n	800b94e <HAL_SPI_Transmit+0x168>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d102      	bne.n	800b954 <HAL_SPI_Transmit+0x16e>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b958:	e074      	b.n	800ba44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b95e:	b29b      	uxth	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1ce      	bne.n	800b902 <HAL_SPI_Transmit+0x11c>
 800b964:	e04c      	b.n	800ba00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d002      	beq.n	800b974 <HAL_SPI_Transmit+0x18e>
 800b96e:	8afb      	ldrh	r3, [r7, #22]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d140      	bne.n	800b9f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	330c      	adds	r3, #12
 800b97e:	7812      	ldrb	r2, [r2, #0]
 800b980:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b986:	1c5a      	adds	r2, r3, #1
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b990:	b29b      	uxth	r3, r3
 800b992:	3b01      	subs	r3, #1
 800b994:	b29a      	uxth	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b99a:	e02c      	b.n	800b9f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d113      	bne.n	800b9d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	7812      	ldrb	r2, [r2, #0]
 800b9b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800b9d0:	e011      	b.n	800b9f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9d2:	f7fc ffbf 	bl	8008954 <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d803      	bhi.n	800b9ea <HAL_SPI_Transmit+0x204>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e8:	d102      	bne.n	800b9f0 <HAL_SPI_Transmit+0x20a>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b9f4:	e026      	b.n	800ba44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1cd      	bne.n	800b99c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fbcb 	bl	800c1a0 <SPI_EndRxTxTransaction>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2220      	movs	r2, #32
 800ba14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	613b      	str	r3, [r7, #16]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	613b      	str	r3, [r7, #16]
 800ba32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	77fb      	strb	r3, [r7, #31]
 800ba40:	e000      	b.n	800ba44 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ba42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba54:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3720      	adds	r7, #32
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b088      	sub	sp, #32
 800ba62:	af02      	add	r7, sp, #8
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba7a:	d112      	bne.n	800baa2 <HAL_SPI_Receive+0x44>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10e      	bne.n	800baa2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2204      	movs	r2, #4
 800ba88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ba8c:	88fa      	ldrh	r2, [r7, #6]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	4613      	mov	r3, r2
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f8f1 	bl	800bc80 <HAL_SPI_TransmitReceive>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	e0ea      	b.n	800bc78 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d101      	bne.n	800bab0 <HAL_SPI_Receive+0x52>
 800baac:	2302      	movs	r3, #2
 800baae:	e0e3      	b.n	800bc78 <HAL_SPI_Receive+0x21a>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bab8:	f7fc ff4c 	bl	8008954 <HAL_GetTick>
 800babc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d002      	beq.n	800bad0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800baca:	2302      	movs	r3, #2
 800bacc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bace:	e0ca      	b.n	800bc66 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <HAL_SPI_Receive+0x7e>
 800bad6:	88fb      	ldrh	r3, [r7, #6]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d102      	bne.n	800bae2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bae0:	e0c1      	b.n	800bc66 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2204      	movs	r2, #4
 800bae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	88fa      	ldrh	r2, [r7, #6]
 800bb00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb28:	d10f      	bne.n	800bb4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b40      	cmp	r3, #64	; 0x40
 800bb56:	d007      	beq.n	800bb68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d162      	bne.n	800bc36 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bb70:	e02e      	b.n	800bbd0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d115      	bne.n	800bbac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f103 020c 	add.w	r2, r3, #12
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8c:	7812      	ldrb	r2, [r2, #0]
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bbaa:	e011      	b.n	800bbd0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbac:	f7fc fed2 	bl	8008954 <HAL_GetTick>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d803      	bhi.n	800bbc4 <HAL_SPI_Receive+0x166>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc2:	d102      	bne.n	800bbca <HAL_SPI_Receive+0x16c>
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bbce:	e04a      	b.n	800bc66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1cb      	bne.n	800bb72 <HAL_SPI_Receive+0x114>
 800bbda:	e031      	b.n	800bc40 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d113      	bne.n	800bc12 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68da      	ldr	r2, [r3, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	b292      	uxth	r2, r2
 800bbf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfc:	1c9a      	adds	r2, r3, #2
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc10:	e011      	b.n	800bc36 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc12:	f7fc fe9f 	bl	8008954 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d803      	bhi.n	800bc2a <HAL_SPI_Receive+0x1cc>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc28:	d102      	bne.n	800bc30 <HAL_SPI_Receive+0x1d2>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bc34:	e017      	b.n	800bc66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1cd      	bne.n	800bbdc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 fa45 	bl	800c0d4 <SPI_EndRxTransaction>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2220      	movs	r2, #32
 800bc54:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	75fb      	strb	r3, [r7, #23]
 800bc62:	e000      	b.n	800bc66 <HAL_SPI_Receive+0x208>
  }

error :
 800bc64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08c      	sub	sp, #48	; 0x30
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bc92:	2300      	movs	r3, #0
 800bc94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d101      	bne.n	800bca6 <HAL_SPI_TransmitReceive+0x26>
 800bca2:	2302      	movs	r3, #2
 800bca4:	e18a      	b.n	800bfbc <HAL_SPI_TransmitReceive+0x33c>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcae:	f7fc fe51 	bl	8008954 <HAL_GetTick>
 800bcb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bcc4:	887b      	ldrh	r3, [r7, #2]
 800bcc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bcc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d00f      	beq.n	800bcf0 <HAL_SPI_TransmitReceive+0x70>
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcd6:	d107      	bne.n	800bce8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <HAL_SPI_TransmitReceive+0x68>
 800bce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d003      	beq.n	800bcf0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bce8:	2302      	movs	r3, #2
 800bcea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bcee:	e15b      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_SPI_TransmitReceive+0x82>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <HAL_SPI_TransmitReceive+0x82>
 800bcfc:	887b      	ldrh	r3, [r7, #2]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d103      	bne.n	800bd0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd08:	e14e      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d003      	beq.n	800bd1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	887a      	ldrh	r2, [r7, #2]
 800bd2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	887a      	ldrh	r2, [r7, #2]
 800bd34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	887a      	ldrh	r2, [r7, #2]
 800bd40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	887a      	ldrh	r2, [r7, #2]
 800bd46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5e:	2b40      	cmp	r3, #64	; 0x40
 800bd60:	d007      	beq.n	800bd72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7a:	d178      	bne.n	800be6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <HAL_SPI_TransmitReceive+0x10a>
 800bd84:	8b7b      	ldrh	r3, [r7, #26]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d166      	bne.n	800be58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	881a      	ldrh	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9a:	1c9a      	adds	r2, r3, #2
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	3b01      	subs	r3, #1
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdae:	e053      	b.n	800be58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d11b      	bne.n	800bdf6 <HAL_SPI_TransmitReceive+0x176>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d016      	beq.n	800bdf6 <HAL_SPI_TransmitReceive+0x176>
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d113      	bne.n	800bdf6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd2:	881a      	ldrh	r2, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdde:	1c9a      	adds	r2, r3, #2
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b01      	cmp	r3, #1
 800be02:	d119      	bne.n	800be38 <HAL_SPI_TransmitReceive+0x1b8>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d014      	beq.n	800be38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68da      	ldr	r2, [r3, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be18:	b292      	uxth	r2, r2
 800be1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be20:	1c9a      	adds	r2, r3, #2
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be34:	2301      	movs	r3, #1
 800be36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800be38:	f7fc fd8c 	bl	8008954 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be44:	429a      	cmp	r2, r3
 800be46:	d807      	bhi.n	800be58 <HAL_SPI_TransmitReceive+0x1d8>
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4e:	d003      	beq.n	800be58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800be56:	e0a7      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1a6      	bne.n	800bdb0 <HAL_SPI_TransmitReceive+0x130>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be66:	b29b      	uxth	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1a1      	bne.n	800bdb0 <HAL_SPI_TransmitReceive+0x130>
 800be6c:	e07c      	b.n	800bf68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <HAL_SPI_TransmitReceive+0x1fc>
 800be76:	8b7b      	ldrh	r3, [r7, #26]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d16b      	bne.n	800bf54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	330c      	adds	r3, #12
 800be86:	7812      	ldrb	r2, [r2, #0]
 800be88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bea2:	e057      	b.n	800bf54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d11c      	bne.n	800beec <HAL_SPI_TransmitReceive+0x26c>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d017      	beq.n	800beec <HAL_SPI_TransmitReceive+0x26c>
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d114      	bne.n	800beec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	330c      	adds	r3, #12
 800becc:	7812      	ldrb	r2, [r2, #0]
 800bece:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bede:	b29b      	uxth	r3, r3
 800bee0:	3b01      	subs	r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bee8:	2300      	movs	r3, #0
 800beea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d119      	bne.n	800bf2e <HAL_SPI_TransmitReceive+0x2ae>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800befe:	b29b      	uxth	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d014      	beq.n	800bf2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0e:	b2d2      	uxtb	r2, r2
 800bf10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf2e:	f7fc fd11 	bl	8008954 <HAL_GetTick>
 800bf32:	4602      	mov	r2, r0
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d803      	bhi.n	800bf46 <HAL_SPI_TransmitReceive+0x2c6>
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf44:	d102      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x2cc>
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d103      	bne.n	800bf54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf52:	e029      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1a2      	bne.n	800bea4 <HAL_SPI_TransmitReceive+0x224>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d19d      	bne.n	800bea4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bf68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f917 	bl	800c1a0 <SPI_EndRxTxTransaction>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2220      	movs	r2, #32
 800bf82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bf84:	e010      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10b      	bne.n	800bfa6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	e000      	b.n	800bfa8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bfa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bfb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3730      	adds	r7, #48	; 0x30
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b088      	sub	sp, #32
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	603b      	str	r3, [r7, #0]
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bfd4:	f7fc fcbe 	bl	8008954 <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	1a9b      	subs	r3, r3, r2
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bfe4:	f7fc fcb6 	bl	8008954 <HAL_GetTick>
 800bfe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bfea:	4b39      	ldr	r3, [pc, #228]	; (800c0d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	015b      	lsls	r3, r3, #5
 800bff0:	0d1b      	lsrs	r3, r3, #20
 800bff2:	69fa      	ldr	r2, [r7, #28]
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
 800bff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bffa:	e054      	b.n	800c0a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d050      	beq.n	800c0a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c004:	f7fc fca6 	bl	8008954 <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	429a      	cmp	r2, r3
 800c012:	d902      	bls.n	800c01a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d13d      	bne.n	800c096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c032:	d111      	bne.n	800c058 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c03c:	d004      	beq.n	800c048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c046:	d107      	bne.n	800c058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c060:	d10f      	bne.n	800c082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e017      	b.n	800c0c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	bf0c      	ite	eq
 800c0b6:	2301      	moveq	r3, #1
 800c0b8:	2300      	movne	r3, #0
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	461a      	mov	r2, r3
 800c0be:	79fb      	ldrb	r3, [r7, #7]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d19b      	bne.n	800bffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000000 	.word	0x20000000

0800c0d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af02      	add	r7, sp, #8
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0e8:	d111      	bne.n	800c10e <SPI_EndRxTransaction+0x3a>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f2:	d004      	beq.n	800c0fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0fc:	d107      	bne.n	800c10e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c10c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c116:	d12a      	bne.n	800c16e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c120:	d012      	beq.n	800c148 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2200      	movs	r2, #0
 800c12a:	2180      	movs	r1, #128	; 0x80
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7ff ff49 	bl	800bfc4 <SPI_WaitFlagStateUntilTimeout>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d02d      	beq.n	800c194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13c:	f043 0220 	orr.w	r2, r3, #32
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e026      	b.n	800c196 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2200      	movs	r2, #0
 800c150:	2101      	movs	r1, #1
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff ff36 	bl	800bfc4 <SPI_WaitFlagStateUntilTimeout>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d01a      	beq.n	800c194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c162:	f043 0220 	orr.w	r2, r3, #32
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c16a:	2303      	movs	r3, #3
 800c16c:	e013      	b.n	800c196 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2200      	movs	r2, #0
 800c176:	2101      	movs	r1, #1
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff ff23 	bl	800bfc4 <SPI_WaitFlagStateUntilTimeout>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d007      	beq.n	800c194 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c188:	f043 0220 	orr.w	r2, r3, #32
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e000      	b.n	800c196 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
	...

0800c1a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c1ac:	4b1b      	ldr	r3, [pc, #108]	; (800c21c <SPI_EndRxTxTransaction+0x7c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a1b      	ldr	r2, [pc, #108]	; (800c220 <SPI_EndRxTxTransaction+0x80>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	0d5b      	lsrs	r3, r3, #21
 800c1b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1bc:	fb02 f303 	mul.w	r3, r2, r3
 800c1c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ca:	d112      	bne.n	800c1f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2180      	movs	r1, #128	; 0x80
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff fef4 	bl	800bfc4 <SPI_WaitFlagStateUntilTimeout>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d016      	beq.n	800c210 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e6:	f043 0220 	orr.w	r2, r3, #32
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e00f      	b.n	800c212 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00a      	beq.n	800c20e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c208:	2b80      	cmp	r3, #128	; 0x80
 800c20a:	d0f2      	beq.n	800c1f2 <SPI_EndRxTxTransaction+0x52>
 800c20c:	e000      	b.n	800c210 <SPI_EndRxTxTransaction+0x70>
        break;
 800c20e:	bf00      	nop
  }

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	20000000 	.word	0x20000000
 800c220:	165e9f81 	.word	0x165e9f81

0800c224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e041      	b.n	800c2ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7fc f962 	bl	8008514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f000 f9ce 	bl	800c604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d001      	beq.n	800c2dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	e04e      	b.n	800c37a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f042 0201 	orr.w	r2, r2, #1
 800c2f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a23      	ldr	r2, [pc, #140]	; (800c388 <HAL_TIM_Base_Start_IT+0xc4>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d022      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c306:	d01d      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a1f      	ldr	r2, [pc, #124]	; (800c38c <HAL_TIM_Base_Start_IT+0xc8>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d018      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a1e      	ldr	r2, [pc, #120]	; (800c390 <HAL_TIM_Base_Start_IT+0xcc>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d013      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1c      	ldr	r2, [pc, #112]	; (800c394 <HAL_TIM_Base_Start_IT+0xd0>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00e      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a1b      	ldr	r2, [pc, #108]	; (800c398 <HAL_TIM_Base_Start_IT+0xd4>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d009      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a19      	ldr	r2, [pc, #100]	; (800c39c <HAL_TIM_Base_Start_IT+0xd8>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d004      	beq.n	800c344 <HAL_TIM_Base_Start_IT+0x80>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a18      	ldr	r2, [pc, #96]	; (800c3a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d111      	bne.n	800c368 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b06      	cmp	r3, #6
 800c354:	d010      	beq.n	800c378 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f042 0201 	orr.w	r2, r2, #1
 800c364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c366:	e007      	b.n	800c378 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f042 0201 	orr.w	r2, r2, #1
 800c376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40010000 	.word	0x40010000
 800c38c:	40000400 	.word	0x40000400
 800c390:	40000800 	.word	0x40000800
 800c394:	40000c00 	.word	0x40000c00
 800c398:	40010400 	.word	0x40010400
 800c39c:	40014000 	.word	0x40014000
 800c3a0:	40001800 	.word	0x40001800

0800c3a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	f003 0302 	and.w	r3, r3, #2
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d122      	bne.n	800c400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	f003 0302 	and.w	r3, r3, #2
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d11b      	bne.n	800c400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f06f 0202 	mvn.w	r2, #2
 800c3d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f8ee 	bl	800c5c8 <HAL_TIM_IC_CaptureCallback>
 800c3ec:	e005      	b.n	800c3fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f8e0 	bl	800c5b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 f8f1 	bl	800c5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	f003 0304 	and.w	r3, r3, #4
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d122      	bne.n	800c454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d11b      	bne.n	800c454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f06f 0204 	mvn.w	r2, #4
 800c424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2202      	movs	r2, #2
 800c42a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f8c4 	bl	800c5c8 <HAL_TIM_IC_CaptureCallback>
 800c440:	e005      	b.n	800c44e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f8b6 	bl	800c5b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f8c7 	bl	800c5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b08      	cmp	r3, #8
 800c460:	d122      	bne.n	800c4a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f003 0308 	and.w	r3, r3, #8
 800c46c:	2b08      	cmp	r3, #8
 800c46e:	d11b      	bne.n	800c4a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f06f 0208 	mvn.w	r2, #8
 800c478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2204      	movs	r2, #4
 800c47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f89a 	bl	800c5c8 <HAL_TIM_IC_CaptureCallback>
 800c494:	e005      	b.n	800c4a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f88c 	bl	800c5b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f89d 	bl	800c5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	f003 0310 	and.w	r3, r3, #16
 800c4b2:	2b10      	cmp	r3, #16
 800c4b4:	d122      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f003 0310 	and.w	r3, r3, #16
 800c4c0:	2b10      	cmp	r3, #16
 800c4c2:	d11b      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f06f 0210 	mvn.w	r2, #16
 800c4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f870 	bl	800c5c8 <HAL_TIM_IC_CaptureCallback>
 800c4e8:	e005      	b.n	800c4f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f862 	bl	800c5b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f873 	bl	800c5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b01      	cmp	r3, #1
 800c508:	d10e      	bne.n	800c528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b01      	cmp	r3, #1
 800c516:	d107      	bne.n	800c528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f06f 0201 	mvn.w	r2, #1
 800c520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7fa ffca 	bl	80074bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c532:	2b80      	cmp	r3, #128	; 0x80
 800c534:	d10e      	bne.n	800c554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c540:	2b80      	cmp	r3, #128	; 0x80
 800c542:	d107      	bne.n	800c554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f97e 	bl	800c850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55e:	2b40      	cmp	r3, #64	; 0x40
 800c560:	d10e      	bne.n	800c580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c56c:	2b40      	cmp	r3, #64	; 0x40
 800c56e:	d107      	bne.n	800c580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f838 	bl	800c5f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b20      	cmp	r3, #32
 800c58c:	d10e      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b20      	cmp	r3, #32
 800c59a:	d107      	bne.n	800c5ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f06f 0220 	mvn.w	r2, #32
 800c5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f948 	bl	800c83c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5ac:	bf00      	nop
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a40      	ldr	r2, [pc, #256]	; (800c718 <TIM_Base_SetConfig+0x114>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d013      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c622:	d00f      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a3d      	ldr	r2, [pc, #244]	; (800c71c <TIM_Base_SetConfig+0x118>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00b      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a3c      	ldr	r2, [pc, #240]	; (800c720 <TIM_Base_SetConfig+0x11c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d007      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a3b      	ldr	r2, [pc, #236]	; (800c724 <TIM_Base_SetConfig+0x120>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d003      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a3a      	ldr	r2, [pc, #232]	; (800c728 <TIM_Base_SetConfig+0x124>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d108      	bne.n	800c656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c64a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4313      	orrs	r3, r2
 800c654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a2f      	ldr	r2, [pc, #188]	; (800c718 <TIM_Base_SetConfig+0x114>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d02b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c664:	d027      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a2c      	ldr	r2, [pc, #176]	; (800c71c <TIM_Base_SetConfig+0x118>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d023      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a2b      	ldr	r2, [pc, #172]	; (800c720 <TIM_Base_SetConfig+0x11c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d01f      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a2a      	ldr	r2, [pc, #168]	; (800c724 <TIM_Base_SetConfig+0x120>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d01b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a29      	ldr	r2, [pc, #164]	; (800c728 <TIM_Base_SetConfig+0x124>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d017      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a28      	ldr	r2, [pc, #160]	; (800c72c <TIM_Base_SetConfig+0x128>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d013      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a27      	ldr	r2, [pc, #156]	; (800c730 <TIM_Base_SetConfig+0x12c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d00f      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a26      	ldr	r2, [pc, #152]	; (800c734 <TIM_Base_SetConfig+0x130>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a25      	ldr	r2, [pc, #148]	; (800c738 <TIM_Base_SetConfig+0x134>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d007      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a24      	ldr	r2, [pc, #144]	; (800c73c <TIM_Base_SetConfig+0x138>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d003      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a23      	ldr	r2, [pc, #140]	; (800c740 <TIM_Base_SetConfig+0x13c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d108      	bne.n	800c6c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a0a      	ldr	r2, [pc, #40]	; (800c718 <TIM_Base_SetConfig+0x114>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d003      	beq.n	800c6fc <TIM_Base_SetConfig+0xf8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a0c      	ldr	r2, [pc, #48]	; (800c728 <TIM_Base_SetConfig+0x124>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d103      	bne.n	800c704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	691a      	ldr	r2, [r3, #16]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	615a      	str	r2, [r3, #20]
}
 800c70a:	bf00      	nop
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	40010000 	.word	0x40010000
 800c71c:	40000400 	.word	0x40000400
 800c720:	40000800 	.word	0x40000800
 800c724:	40000c00 	.word	0x40000c00
 800c728:	40010400 	.word	0x40010400
 800c72c:	40014000 	.word	0x40014000
 800c730:	40014400 	.word	0x40014400
 800c734:	40014800 	.word	0x40014800
 800c738:	40001800 	.word	0x40001800
 800c73c:	40001c00 	.word	0x40001c00
 800c740:	40002000 	.word	0x40002000

0800c744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c754:	2b01      	cmp	r3, #1
 800c756:	d101      	bne.n	800c75c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c758:	2302      	movs	r3, #2
 800c75a:	e05a      	b.n	800c812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a21      	ldr	r2, [pc, #132]	; (800c820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d022      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7a8:	d01d      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d018      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a1b      	ldr	r2, [pc, #108]	; (800c828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d013      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a1a      	ldr	r2, [pc, #104]	; (800c82c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d00e      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a18      	ldr	r2, [pc, #96]	; (800c830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d009      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a17      	ldr	r2, [pc, #92]	; (800c834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d004      	beq.n	800c7e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a15      	ldr	r2, [pc, #84]	; (800c838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d10c      	bne.n	800c800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	40010000 	.word	0x40010000
 800c824:	40000400 	.word	0x40000400
 800c828:	40000800 	.word	0x40000800
 800c82c:	40000c00 	.word	0x40000c00
 800c830:	40010400 	.word	0x40010400
 800c834:	40014000 	.word	0x40014000
 800c838:	40001800 	.word	0x40001800

0800c83c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e03f      	b.n	800c8f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7fb ff44 	bl	8008718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2224      	movs	r2, #36	; 0x24
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fd7b 	bl	800d3a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	691a      	ldr	r2, [r3, #16]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	695a      	ldr	r2, [r3, #20]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b08a      	sub	sp, #40	; 0x28
 800c902:	af02      	add	r7, sp, #8
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	603b      	str	r3, [r7, #0]
 800c90a:	4613      	mov	r3, r2
 800c90c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b20      	cmp	r3, #32
 800c91c:	d17c      	bne.n	800ca18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <HAL_UART_Transmit+0x2c>
 800c924:	88fb      	ldrh	r3, [r7, #6]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d101      	bne.n	800c92e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e075      	b.n	800ca1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_UART_Transmit+0x3e>
 800c938:	2302      	movs	r3, #2
 800c93a:	e06e      	b.n	800ca1a <HAL_UART_Transmit+0x11c>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2221      	movs	r2, #33	; 0x21
 800c94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c952:	f7fb ffff 	bl	8008954 <HAL_GetTick>
 800c956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	88fa      	ldrh	r2, [r7, #6]
 800c95c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	88fa      	ldrh	r2, [r7, #6]
 800c962:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c96c:	d108      	bne.n	800c980 <HAL_UART_Transmit+0x82>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	61bb      	str	r3, [r7, #24]
 800c97e:	e003      	b.n	800c988 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c990:	e02a      	b.n	800c9e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2200      	movs	r2, #0
 800c99a:	2180      	movs	r1, #128	; 0x80
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f000 faf9 	bl	800cf94 <UART_WaitOnFlagUntilTimeout>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e036      	b.n	800ca1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10b      	bne.n	800c9ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	3302      	adds	r3, #2
 800c9c6:	61bb      	str	r3, [r7, #24]
 800c9c8:	e007      	b.n	800c9da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	781a      	ldrb	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1cf      	bne.n	800c992 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2140      	movs	r1, #64	; 0x40
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 fac9 	bl	800cf94 <UART_WaitOnFlagUntilTimeout>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e006      	b.n	800ca1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2220      	movs	r2, #32
 800ca10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	e000      	b.n	800ca1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ca18:	2302      	movs	r3, #2
  }
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3720      	adds	r7, #32
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
	...

0800ca24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b0ba      	sub	sp, #232	; 0xe8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ca56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca5a:	f003 030f 	and.w	r3, r3, #15
 800ca5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ca62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10f      	bne.n	800ca8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca6e:	f003 0320 	and.w	r3, r3, #32
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d009      	beq.n	800ca8a <HAL_UART_IRQHandler+0x66>
 800ca76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca7a:	f003 0320 	and.w	r3, r3, #32
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fbd3 	bl	800d22e <UART_Receive_IT>
      return;
 800ca88:	e256      	b.n	800cf38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ca8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f000 80de 	beq.w	800cc50 <HAL_UART_IRQHandler+0x22c>
 800ca94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca98:	f003 0301 	and.w	r3, r3, #1
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d106      	bne.n	800caae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800caa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800caa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80d1 	beq.w	800cc50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800caae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00b      	beq.n	800cad2 <HAL_UART_IRQHandler+0xae>
 800caba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d005      	beq.n	800cad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	f043 0201 	orr.w	r2, r3, #1
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad6:	f003 0304 	and.w	r3, r3, #4
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00b      	beq.n	800caf6 <HAL_UART_IRQHandler+0xd2>
 800cade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	f043 0202 	orr.w	r2, r3, #2
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800caf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <HAL_UART_IRQHandler+0xf6>
 800cb02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d005      	beq.n	800cb1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	f043 0204 	orr.w	r2, r3, #4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb1e:	f003 0308 	and.w	r3, r3, #8
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d011      	beq.n	800cb4a <HAL_UART_IRQHandler+0x126>
 800cb26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb2a:	f003 0320 	and.w	r3, r3, #32
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d105      	bne.n	800cb3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cb32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d005      	beq.n	800cb4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb42:	f043 0208 	orr.w	r2, r3, #8
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 81ed 	beq.w	800cf2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb58:	f003 0320 	and.w	r3, r3, #32
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d008      	beq.n	800cb72 <HAL_UART_IRQHandler+0x14e>
 800cb60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb64:	f003 0320 	and.w	r3, r3, #32
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fb5e 	bl	800d22e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb7c:	2b40      	cmp	r3, #64	; 0x40
 800cb7e:	bf0c      	ite	eq
 800cb80:	2301      	moveq	r3, #1
 800cb82:	2300      	movne	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d103      	bne.n	800cb9e <HAL_UART_IRQHandler+0x17a>
 800cb96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d04f      	beq.n	800cc3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fa66 	bl	800d070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbae:	2b40      	cmp	r3, #64	; 0x40
 800cbb0:	d141      	bne.n	800cc36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbc0:	e853 3f00 	ldrex	r3, [r3]
 800cbc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cbc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3314      	adds	r3, #20
 800cbda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cbde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cbe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cbea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cbee:	e841 2300 	strex	r3, r2, [r1]
 800cbf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cbf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1d9      	bne.n	800cbb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d013      	beq.n	800cc2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	4a7d      	ldr	r2, [pc, #500]	; (800ce00 <HAL_UART_IRQHandler+0x3dc>)
 800cc0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fc fb70 	bl	80092f8 <HAL_DMA_Abort_IT>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d016      	beq.n	800cc4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc28:	4610      	mov	r0, r2
 800cc2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc2c:	e00e      	b.n	800cc4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f99a 	bl	800cf68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc34:	e00a      	b.n	800cc4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f996 	bl	800cf68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc3c:	e006      	b.n	800cc4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f992 	bl	800cf68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800cc4a:	e170      	b.n	800cf2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc4c:	bf00      	nop
    return;
 800cc4e:	e16e      	b.n	800cf2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	f040 814a 	bne.w	800ceee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc5e:	f003 0310 	and.w	r3, r3, #16
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 8143 	beq.w	800ceee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc6c:	f003 0310 	and.w	r3, r3, #16
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 813c 	beq.w	800ceee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc76:	2300      	movs	r3, #0
 800cc78:	60bb      	str	r3, [r7, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60bb      	str	r3, [r7, #8]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	60bb      	str	r3, [r7, #8]
 800cc8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc96:	2b40      	cmp	r3, #64	; 0x40
 800cc98:	f040 80b4 	bne.w	800ce04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8140 	beq.w	800cf32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ccb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	f080 8139 	bcs.w	800cf32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccd2:	f000 8088 	beq.w	800cde6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	330c      	adds	r3, #12
 800ccdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ccec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	330c      	adds	r3, #12
 800ccfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cd02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cd0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd12:	e841 2300 	strex	r3, r2, [r1]
 800cd16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cd1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1d9      	bne.n	800ccd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3314      	adds	r3, #20
 800cd28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd34:	f023 0301 	bic.w	r3, r3, #1
 800cd38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3314      	adds	r3, #20
 800cd42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd52:	e841 2300 	strex	r3, r2, [r1]
 800cd56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1e1      	bne.n	800cd22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3314      	adds	r3, #20
 800cd64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd68:	e853 3f00 	ldrex	r3, [r3]
 800cd6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3314      	adds	r3, #20
 800cd7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd82:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e3      	bne.n	800cd5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdae:	e853 3f00 	ldrex	r3, [r3]
 800cdb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdb6:	f023 0310 	bic.w	r3, r3, #16
 800cdba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	330c      	adds	r3, #12
 800cdc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cdc8:	65ba      	str	r2, [r7, #88]	; 0x58
 800cdca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdd0:	e841 2300 	strex	r3, r2, [r1]
 800cdd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1e3      	bne.n	800cda4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fc fa19 	bl	8009218 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 f8c0 	bl	800cf7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cdfc:	e099      	b.n	800cf32 <HAL_UART_IRQHandler+0x50e>
 800cdfe:	bf00      	nop
 800ce00:	0800d137 	.word	0x0800d137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 808b 	beq.w	800cf36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ce20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 8086 	beq.w	800cf36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	330c      	adds	r3, #12
 800ce30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	e853 3f00 	ldrex	r3, [r3]
 800ce38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ce4e:	647a      	str	r2, [r7, #68]	; 0x44
 800ce50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1e3      	bne.n	800ce2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3314      	adds	r3, #20
 800ce68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	623b      	str	r3, [r7, #32]
   return(result);
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	f023 0301 	bic.w	r3, r3, #1
 800ce78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3314      	adds	r3, #20
 800ce82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce86:	633a      	str	r2, [r7, #48]	; 0x30
 800ce88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce8e:	e841 2300 	strex	r3, r2, [r1]
 800ce92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e3      	bne.n	800ce62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	330c      	adds	r3, #12
 800ceae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f023 0310 	bic.w	r3, r3, #16
 800cebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	330c      	adds	r3, #12
 800cec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cecc:	61fa      	str	r2, [r7, #28]
 800cece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	69b9      	ldr	r1, [r7, #24]
 800ced2:	69fa      	ldr	r2, [r7, #28]
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	617b      	str	r3, [r7, #20]
   return(result);
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e3      	bne.n	800cea8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cee4:	4619      	mov	r1, r3
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f848 	bl	800cf7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ceec:	e023      	b.n	800cf36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d009      	beq.n	800cf0e <HAL_UART_IRQHandler+0x4ea>
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f929 	bl	800d15e <UART_Transmit_IT>
    return;
 800cf0c:	e014      	b.n	800cf38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cf0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00e      	beq.n	800cf38 <HAL_UART_IRQHandler+0x514>
 800cf1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d008      	beq.n	800cf38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f969 	bl	800d1fe <UART_EndTransmit_IT>
    return;
 800cf2c:	e004      	b.n	800cf38 <HAL_UART_IRQHandler+0x514>
    return;
 800cf2e:	bf00      	nop
 800cf30:	e002      	b.n	800cf38 <HAL_UART_IRQHandler+0x514>
      return;
 800cf32:	bf00      	nop
 800cf34:	e000      	b.n	800cf38 <HAL_UART_IRQHandler+0x514>
      return;
 800cf36:	bf00      	nop
  }
}
 800cf38:	37e8      	adds	r7, #232	; 0xe8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop

0800cf40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b090      	sub	sp, #64	; 0x40
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	603b      	str	r3, [r7, #0]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfa4:	e050      	b.n	800d048 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfac:	d04c      	beq.n	800d048 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d007      	beq.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cfb4:	f7fb fcce 	bl	8008954 <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d241      	bcs.n	800d048 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	330c      	adds	r3, #12
 800cfca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	e853 3f00 	ldrex	r3, [r3]
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfe4:	637a      	str	r2, [r7, #52]	; 0x34
 800cfe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfec:	e841 2300 	strex	r3, r2, [r1]
 800cff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1e5      	bne.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3314      	adds	r3, #20
 800cffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	e853 3f00 	ldrex	r3, [r3]
 800d006:	613b      	str	r3, [r7, #16]
   return(result);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	f023 0301 	bic.w	r3, r3, #1
 800d00e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3314      	adds	r3, #20
 800d016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d018:	623a      	str	r2, [r7, #32]
 800d01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01c:	69f9      	ldr	r1, [r7, #28]
 800d01e:	6a3a      	ldr	r2, [r7, #32]
 800d020:	e841 2300 	strex	r3, r2, [r1]
 800d024:	61bb      	str	r3, [r7, #24]
   return(result);
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e5      	bne.n	800cff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2220      	movs	r2, #32
 800d030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2220      	movs	r2, #32
 800d038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d044:	2303      	movs	r3, #3
 800d046:	e00f      	b.n	800d068 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	4013      	ands	r3, r2
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	429a      	cmp	r2, r3
 800d056:	bf0c      	ite	eq
 800d058:	2301      	moveq	r3, #1
 800d05a:	2300      	movne	r3, #0
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	461a      	mov	r2, r3
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	429a      	cmp	r2, r3
 800d064:	d09f      	beq.n	800cfa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3740      	adds	r7, #64	; 0x40
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d070:	b480      	push	{r7}
 800d072:	b095      	sub	sp, #84	; 0x54
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	330c      	adds	r3, #12
 800d07e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d08e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	330c      	adds	r3, #12
 800d096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d098:	643a      	str	r2, [r7, #64]	; 0x40
 800d09a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d09e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e5      	bne.n	800d078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3314      	adds	r3, #20
 800d0b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	e853 3f00 	ldrex	r3, [r3]
 800d0ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	f023 0301 	bic.w	r3, r3, #1
 800d0c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d4:	e841 2300 	strex	r3, r2, [r1]
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d1e5      	bne.n	800d0ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d119      	bne.n	800d11c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	330c      	adds	r3, #12
 800d0ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	e853 3f00 	ldrex	r3, [r3]
 800d0f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	f023 0310 	bic.w	r3, r3, #16
 800d0fe:	647b      	str	r3, [r7, #68]	; 0x44
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	330c      	adds	r3, #12
 800d106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d108:	61ba      	str	r2, [r7, #24]
 800d10a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10c:	6979      	ldr	r1, [r7, #20]
 800d10e:	69ba      	ldr	r2, [r7, #24]
 800d110:	e841 2300 	strex	r3, r2, [r1]
 800d114:	613b      	str	r3, [r7, #16]
   return(result);
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1e5      	bne.n	800d0e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2220      	movs	r2, #32
 800d120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d12a:	bf00      	nop
 800d12c:	3754      	adds	r7, #84	; 0x54
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff ff09 	bl	800cf68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d15e:	b480      	push	{r7}
 800d160:	b085      	sub	sp, #20
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b21      	cmp	r3, #33	; 0x21
 800d170:	d13e      	bne.n	800d1f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d17a:	d114      	bne.n	800d1a6 <UART_Transmit_IT+0x48>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d110      	bne.n	800d1a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a1b      	ldr	r3, [r3, #32]
 800d188:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d198:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	1c9a      	adds	r2, r3, #2
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	621a      	str	r2, [r3, #32]
 800d1a4:	e008      	b.n	800d1b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a1b      	ldr	r3, [r3, #32]
 800d1aa:	1c59      	adds	r1, r3, #1
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	6211      	str	r1, [r2, #32]
 800d1b0:	781a      	ldrb	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10f      	bne.n	800d1ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68da      	ldr	r2, [r3, #12]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68da      	ldr	r2, [r3, #12]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e000      	b.n	800d1f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d1f0:	2302      	movs	r3, #2
  }
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b082      	sub	sp, #8
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68da      	ldr	r2, [r3, #12]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d214:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff fe8e 	bl	800cf40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b08c      	sub	sp, #48	; 0x30
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	2b22      	cmp	r3, #34	; 0x22
 800d240:	f040 80ab 	bne.w	800d39a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d24c:	d117      	bne.n	800d27e <UART_Receive_IT+0x50>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d113      	bne.n	800d27e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d256:	2300      	movs	r3, #0
 800d258:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b29b      	uxth	r3, r3
 800d268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d276:	1c9a      	adds	r2, r3, #2
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	629a      	str	r2, [r3, #40]	; 0x28
 800d27c:	e026      	b.n	800d2cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d282:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d284:	2300      	movs	r3, #0
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d290:	d007      	beq.n	800d2a2 <UART_Receive_IT+0x74>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10a      	bne.n	800d2b0 <UART_Receive_IT+0x82>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	e008      	b.n	800d2c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	4619      	mov	r1, r3
 800d2da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d15a      	bne.n	800d396 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f022 0220 	bic.w	r2, r2, #32
 800d2ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68da      	ldr	r2, [r3, #12]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	695a      	ldr	r2, [r3, #20]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f022 0201 	bic.w	r2, r2, #1
 800d30e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2220      	movs	r2, #32
 800d314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d135      	bne.n	800d38c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	330c      	adds	r3, #12
 800d32c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	e853 3f00 	ldrex	r3, [r3]
 800d334:	613b      	str	r3, [r7, #16]
   return(result);
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	f023 0310 	bic.w	r3, r3, #16
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	330c      	adds	r3, #12
 800d344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d346:	623a      	str	r2, [r7, #32]
 800d348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34a:	69f9      	ldr	r1, [r7, #28]
 800d34c:	6a3a      	ldr	r2, [r7, #32]
 800d34e:	e841 2300 	strex	r3, r2, [r1]
 800d352:	61bb      	str	r3, [r7, #24]
   return(result);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e5      	bne.n	800d326 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b10      	cmp	r3, #16
 800d366:	d10a      	bne.n	800d37e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff fdf9 	bl	800cf7c <HAL_UARTEx_RxEventCallback>
 800d38a:	e002      	b.n	800d392 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7ff fde1 	bl	800cf54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	e002      	b.n	800d39c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	e000      	b.n	800d39c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d39a:	2302      	movs	r3, #2
  }
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3730      	adds	r7, #48	; 0x30
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	b09f      	sub	sp, #124	; 0x7c
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d3b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ba:	68d9      	ldr	r1, [r3, #12]
 800d3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	ea40 0301 	orr.w	r3, r0, r1
 800d3c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c8:	689a      	ldr	r2, [r3, #8]
 800d3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d8:	69db      	ldr	r3, [r3, #28]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d3e8:	f021 010c 	bic.w	r1, r1, #12
 800d3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d402:	6999      	ldr	r1, [r3, #24]
 800d404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	ea40 0301 	orr.w	r3, r0, r1
 800d40c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	4bc5      	ldr	r3, [pc, #788]	; (800d728 <UART_SetConfig+0x384>)
 800d414:	429a      	cmp	r2, r3
 800d416:	d004      	beq.n	800d422 <UART_SetConfig+0x7e>
 800d418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	4bc3      	ldr	r3, [pc, #780]	; (800d72c <UART_SetConfig+0x388>)
 800d41e:	429a      	cmp	r2, r3
 800d420:	d103      	bne.n	800d42a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d422:	f7fe f943 	bl	800b6ac <HAL_RCC_GetPCLK2Freq>
 800d426:	6778      	str	r0, [r7, #116]	; 0x74
 800d428:	e002      	b.n	800d430 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d42a:	f7fe f92b 	bl	800b684 <HAL_RCC_GetPCLK1Freq>
 800d42e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d438:	f040 80b6 	bne.w	800d5a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d43c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d43e:	461c      	mov	r4, r3
 800d440:	f04f 0500 	mov.w	r5, #0
 800d444:	4622      	mov	r2, r4
 800d446:	462b      	mov	r3, r5
 800d448:	1891      	adds	r1, r2, r2
 800d44a:	6439      	str	r1, [r7, #64]	; 0x40
 800d44c:	415b      	adcs	r3, r3
 800d44e:	647b      	str	r3, [r7, #68]	; 0x44
 800d450:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d454:	1912      	adds	r2, r2, r4
 800d456:	eb45 0303 	adc.w	r3, r5, r3
 800d45a:	f04f 0000 	mov.w	r0, #0
 800d45e:	f04f 0100 	mov.w	r1, #0
 800d462:	00d9      	lsls	r1, r3, #3
 800d464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d468:	00d0      	lsls	r0, r2, #3
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	1911      	adds	r1, r2, r4
 800d470:	6639      	str	r1, [r7, #96]	; 0x60
 800d472:	416b      	adcs	r3, r5
 800d474:	667b      	str	r3, [r7, #100]	; 0x64
 800d476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	461a      	mov	r2, r3
 800d47c:	f04f 0300 	mov.w	r3, #0
 800d480:	1891      	adds	r1, r2, r2
 800d482:	63b9      	str	r1, [r7, #56]	; 0x38
 800d484:	415b      	adcs	r3, r3
 800d486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d48c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d490:	f7f2 ff16 	bl	80002c0 <__aeabi_uldivmod>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	4ba5      	ldr	r3, [pc, #660]	; (800d730 <UART_SetConfig+0x38c>)
 800d49a:	fba3 2302 	umull	r2, r3, r3, r2
 800d49e:	095b      	lsrs	r3, r3, #5
 800d4a0:	011e      	lsls	r6, r3, #4
 800d4a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4a4:	461c      	mov	r4, r3
 800d4a6:	f04f 0500 	mov.w	r5, #0
 800d4aa:	4622      	mov	r2, r4
 800d4ac:	462b      	mov	r3, r5
 800d4ae:	1891      	adds	r1, r2, r2
 800d4b0:	6339      	str	r1, [r7, #48]	; 0x30
 800d4b2:	415b      	adcs	r3, r3
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d4b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d4ba:	1912      	adds	r2, r2, r4
 800d4bc:	eb45 0303 	adc.w	r3, r5, r3
 800d4c0:	f04f 0000 	mov.w	r0, #0
 800d4c4:	f04f 0100 	mov.w	r1, #0
 800d4c8:	00d9      	lsls	r1, r3, #3
 800d4ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d4ce:	00d0      	lsls	r0, r2, #3
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	1911      	adds	r1, r2, r4
 800d4d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800d4d8:	416b      	adcs	r3, r5
 800d4da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	f04f 0300 	mov.w	r3, #0
 800d4e6:	1891      	adds	r1, r2, r2
 800d4e8:	62b9      	str	r1, [r7, #40]	; 0x28
 800d4ea:	415b      	adcs	r3, r3
 800d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d4f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d4f6:	f7f2 fee3 	bl	80002c0 <__aeabi_uldivmod>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4b8c      	ldr	r3, [pc, #560]	; (800d730 <UART_SetConfig+0x38c>)
 800d500:	fba3 1302 	umull	r1, r3, r3, r2
 800d504:	095b      	lsrs	r3, r3, #5
 800d506:	2164      	movs	r1, #100	; 0x64
 800d508:	fb01 f303 	mul.w	r3, r1, r3
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	3332      	adds	r3, #50	; 0x32
 800d512:	4a87      	ldr	r2, [pc, #540]	; (800d730 <UART_SetConfig+0x38c>)
 800d514:	fba2 2303 	umull	r2, r3, r2, r3
 800d518:	095b      	lsrs	r3, r3, #5
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d520:	441e      	add	r6, r3
 800d522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d524:	4618      	mov	r0, r3
 800d526:	f04f 0100 	mov.w	r1, #0
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	1894      	adds	r4, r2, r2
 800d530:	623c      	str	r4, [r7, #32]
 800d532:	415b      	adcs	r3, r3
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
 800d536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d53a:	1812      	adds	r2, r2, r0
 800d53c:	eb41 0303 	adc.w	r3, r1, r3
 800d540:	f04f 0400 	mov.w	r4, #0
 800d544:	f04f 0500 	mov.w	r5, #0
 800d548:	00dd      	lsls	r5, r3, #3
 800d54a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d54e:	00d4      	lsls	r4, r2, #3
 800d550:	4622      	mov	r2, r4
 800d552:	462b      	mov	r3, r5
 800d554:	1814      	adds	r4, r2, r0
 800d556:	653c      	str	r4, [r7, #80]	; 0x50
 800d558:	414b      	adcs	r3, r1
 800d55a:	657b      	str	r3, [r7, #84]	; 0x54
 800d55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	461a      	mov	r2, r3
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	1891      	adds	r1, r2, r2
 800d568:	61b9      	str	r1, [r7, #24]
 800d56a:	415b      	adcs	r3, r3
 800d56c:	61fb      	str	r3, [r7, #28]
 800d56e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d576:	f7f2 fea3 	bl	80002c0 <__aeabi_uldivmod>
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	4b6c      	ldr	r3, [pc, #432]	; (800d730 <UART_SetConfig+0x38c>)
 800d580:	fba3 1302 	umull	r1, r3, r3, r2
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	2164      	movs	r1, #100	; 0x64
 800d588:	fb01 f303 	mul.w	r3, r1, r3
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	3332      	adds	r3, #50	; 0x32
 800d592:	4a67      	ldr	r2, [pc, #412]	; (800d730 <UART_SetConfig+0x38c>)
 800d594:	fba2 2303 	umull	r2, r3, r2, r3
 800d598:	095b      	lsrs	r3, r3, #5
 800d59a:	f003 0207 	and.w	r2, r3, #7
 800d59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4432      	add	r2, r6
 800d5a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d5a6:	e0b9      	b.n	800d71c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d5a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5aa:	461c      	mov	r4, r3
 800d5ac:	f04f 0500 	mov.w	r5, #0
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	1891      	adds	r1, r2, r2
 800d5b6:	6139      	str	r1, [r7, #16]
 800d5b8:	415b      	adcs	r3, r3
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5c0:	1912      	adds	r2, r2, r4
 800d5c2:	eb45 0303 	adc.w	r3, r5, r3
 800d5c6:	f04f 0000 	mov.w	r0, #0
 800d5ca:	f04f 0100 	mov.w	r1, #0
 800d5ce:	00d9      	lsls	r1, r3, #3
 800d5d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d5d4:	00d0      	lsls	r0, r2, #3
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	eb12 0804 	adds.w	r8, r2, r4
 800d5de:	eb43 0905 	adc.w	r9, r3, r5
 800d5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f04f 0100 	mov.w	r1, #0
 800d5ec:	f04f 0200 	mov.w	r2, #0
 800d5f0:	f04f 0300 	mov.w	r3, #0
 800d5f4:	008b      	lsls	r3, r1, #2
 800d5f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d5fa:	0082      	lsls	r2, r0, #2
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	4649      	mov	r1, r9
 800d600:	f7f2 fe5e 	bl	80002c0 <__aeabi_uldivmod>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	4b49      	ldr	r3, [pc, #292]	; (800d730 <UART_SetConfig+0x38c>)
 800d60a:	fba3 2302 	umull	r2, r3, r3, r2
 800d60e:	095b      	lsrs	r3, r3, #5
 800d610:	011e      	lsls	r6, r3, #4
 800d612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d614:	4618      	mov	r0, r3
 800d616:	f04f 0100 	mov.w	r1, #0
 800d61a:	4602      	mov	r2, r0
 800d61c:	460b      	mov	r3, r1
 800d61e:	1894      	adds	r4, r2, r2
 800d620:	60bc      	str	r4, [r7, #8]
 800d622:	415b      	adcs	r3, r3
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d62a:	1812      	adds	r2, r2, r0
 800d62c:	eb41 0303 	adc.w	r3, r1, r3
 800d630:	f04f 0400 	mov.w	r4, #0
 800d634:	f04f 0500 	mov.w	r5, #0
 800d638:	00dd      	lsls	r5, r3, #3
 800d63a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d63e:	00d4      	lsls	r4, r2, #3
 800d640:	4622      	mov	r2, r4
 800d642:	462b      	mov	r3, r5
 800d644:	1814      	adds	r4, r2, r0
 800d646:	64bc      	str	r4, [r7, #72]	; 0x48
 800d648:	414b      	adcs	r3, r1
 800d64a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	f04f 0100 	mov.w	r1, #0
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	f04f 0300 	mov.w	r3, #0
 800d65e:	008b      	lsls	r3, r1, #2
 800d660:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d664:	0082      	lsls	r2, r0, #2
 800d666:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d66a:	f7f2 fe29 	bl	80002c0 <__aeabi_uldivmod>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4b2f      	ldr	r3, [pc, #188]	; (800d730 <UART_SetConfig+0x38c>)
 800d674:	fba3 1302 	umull	r1, r3, r3, r2
 800d678:	095b      	lsrs	r3, r3, #5
 800d67a:	2164      	movs	r1, #100	; 0x64
 800d67c:	fb01 f303 	mul.w	r3, r1, r3
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	011b      	lsls	r3, r3, #4
 800d684:	3332      	adds	r3, #50	; 0x32
 800d686:	4a2a      	ldr	r2, [pc, #168]	; (800d730 <UART_SetConfig+0x38c>)
 800d688:	fba2 2303 	umull	r2, r3, r2, r3
 800d68c:	095b      	lsrs	r3, r3, #5
 800d68e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d692:	441e      	add	r6, r3
 800d694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d696:	4618      	mov	r0, r3
 800d698:	f04f 0100 	mov.w	r1, #0
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	1894      	adds	r4, r2, r2
 800d6a2:	603c      	str	r4, [r7, #0]
 800d6a4:	415b      	adcs	r3, r3
 800d6a6:	607b      	str	r3, [r7, #4]
 800d6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ac:	1812      	adds	r2, r2, r0
 800d6ae:	eb41 0303 	adc.w	r3, r1, r3
 800d6b2:	f04f 0400 	mov.w	r4, #0
 800d6b6:	f04f 0500 	mov.w	r5, #0
 800d6ba:	00dd      	lsls	r5, r3, #3
 800d6bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d6c0:	00d4      	lsls	r4, r2, #3
 800d6c2:	4622      	mov	r2, r4
 800d6c4:	462b      	mov	r3, r5
 800d6c6:	eb12 0a00 	adds.w	sl, r2, r0
 800d6ca:	eb43 0b01 	adc.w	fp, r3, r1
 800d6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f04f 0100 	mov.w	r1, #0
 800d6d8:	f04f 0200 	mov.w	r2, #0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	008b      	lsls	r3, r1, #2
 800d6e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d6e6:	0082      	lsls	r2, r0, #2
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	4659      	mov	r1, fp
 800d6ec:	f7f2 fde8 	bl	80002c0 <__aeabi_uldivmod>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <UART_SetConfig+0x38c>)
 800d6f6:	fba3 1302 	umull	r1, r3, r3, r2
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	2164      	movs	r1, #100	; 0x64
 800d6fe:	fb01 f303 	mul.w	r3, r1, r3
 800d702:	1ad3      	subs	r3, r2, r3
 800d704:	011b      	lsls	r3, r3, #4
 800d706:	3332      	adds	r3, #50	; 0x32
 800d708:	4a09      	ldr	r2, [pc, #36]	; (800d730 <UART_SetConfig+0x38c>)
 800d70a:	fba2 2303 	umull	r2, r3, r2, r3
 800d70e:	095b      	lsrs	r3, r3, #5
 800d710:	f003 020f 	and.w	r2, r3, #15
 800d714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4432      	add	r2, r6
 800d71a:	609a      	str	r2, [r3, #8]
}
 800d71c:	bf00      	nop
 800d71e:	377c      	adds	r7, #124	; 0x7c
 800d720:	46bd      	mov	sp, r7
 800d722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d726:	bf00      	nop
 800d728:	40011000 	.word	0x40011000
 800d72c:	40011400 	.word	0x40011400
 800d730:	51eb851f 	.word	0x51eb851f

0800d734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d734:	b084      	sub	sp, #16
 800d736:	b580      	push	{r7, lr}
 800d738:	b084      	sub	sp, #16
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	f107 001c 	add.w	r0, r7, #28
 800d742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d122      	bne.n	800d792 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d776:	2b01      	cmp	r3, #1
 800d778:	d105      	bne.n	800d786 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f001 fb1c 	bl	800edc4 <USB_CoreReset>
 800d78c:	4603      	mov	r3, r0
 800d78e:	73fb      	strb	r3, [r7, #15]
 800d790:	e01a      	b.n	800d7c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 fb10 	bl	800edc4 <USB_CoreReset>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7ba:	e005      	b.n	800d7c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d10b      	bne.n	800d7e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f043 0206 	orr.w	r2, r3, #6
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f043 0220 	orr.w	r2, r3, #32
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7f2:	b004      	add	sp, #16
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	4613      	mov	r3, r2
 800d804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	d165      	bne.n	800d8d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	4a41      	ldr	r2, [pc, #260]	; (800d914 <USB_SetTurnaroundTime+0x11c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d906      	bls.n	800d822 <USB_SetTurnaroundTime+0x2a>
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	4a40      	ldr	r2, [pc, #256]	; (800d918 <USB_SetTurnaroundTime+0x120>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d202      	bcs.n	800d822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d81c:	230f      	movs	r3, #15
 800d81e:	617b      	str	r3, [r7, #20]
 800d820:	e062      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	4a3c      	ldr	r2, [pc, #240]	; (800d918 <USB_SetTurnaroundTime+0x120>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d306      	bcc.n	800d838 <USB_SetTurnaroundTime+0x40>
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	4a3b      	ldr	r2, [pc, #236]	; (800d91c <USB_SetTurnaroundTime+0x124>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d202      	bcs.n	800d838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d832:	230e      	movs	r3, #14
 800d834:	617b      	str	r3, [r7, #20]
 800d836:	e057      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	4a38      	ldr	r2, [pc, #224]	; (800d91c <USB_SetTurnaroundTime+0x124>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d306      	bcc.n	800d84e <USB_SetTurnaroundTime+0x56>
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	4a37      	ldr	r2, [pc, #220]	; (800d920 <USB_SetTurnaroundTime+0x128>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d202      	bcs.n	800d84e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d848:	230d      	movs	r3, #13
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e04c      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	4a33      	ldr	r2, [pc, #204]	; (800d920 <USB_SetTurnaroundTime+0x128>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d306      	bcc.n	800d864 <USB_SetTurnaroundTime+0x6c>
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	4a32      	ldr	r2, [pc, #200]	; (800d924 <USB_SetTurnaroundTime+0x12c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d802      	bhi.n	800d864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d85e:	230c      	movs	r3, #12
 800d860:	617b      	str	r3, [r7, #20]
 800d862:	e041      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4a2f      	ldr	r2, [pc, #188]	; (800d924 <USB_SetTurnaroundTime+0x12c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d906      	bls.n	800d87a <USB_SetTurnaroundTime+0x82>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4a2e      	ldr	r2, [pc, #184]	; (800d928 <USB_SetTurnaroundTime+0x130>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d802      	bhi.n	800d87a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d874:	230b      	movs	r3, #11
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e036      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4a2a      	ldr	r2, [pc, #168]	; (800d928 <USB_SetTurnaroundTime+0x130>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d906      	bls.n	800d890 <USB_SetTurnaroundTime+0x98>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	4a29      	ldr	r2, [pc, #164]	; (800d92c <USB_SetTurnaroundTime+0x134>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d802      	bhi.n	800d890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d88a:	230a      	movs	r3, #10
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	e02b      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	4a26      	ldr	r2, [pc, #152]	; (800d92c <USB_SetTurnaroundTime+0x134>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d906      	bls.n	800d8a6 <USB_SetTurnaroundTime+0xae>
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4a25      	ldr	r2, [pc, #148]	; (800d930 <USB_SetTurnaroundTime+0x138>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d202      	bcs.n	800d8a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d8a0:	2309      	movs	r3, #9
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	e020      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	4a21      	ldr	r2, [pc, #132]	; (800d930 <USB_SetTurnaroundTime+0x138>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d306      	bcc.n	800d8bc <USB_SetTurnaroundTime+0xc4>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	4a20      	ldr	r2, [pc, #128]	; (800d934 <USB_SetTurnaroundTime+0x13c>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d802      	bhi.n	800d8bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d8b6:	2308      	movs	r3, #8
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e015      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	4a1d      	ldr	r2, [pc, #116]	; (800d934 <USB_SetTurnaroundTime+0x13c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d906      	bls.n	800d8d2 <USB_SetTurnaroundTime+0xda>
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	4a1c      	ldr	r2, [pc, #112]	; (800d938 <USB_SetTurnaroundTime+0x140>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d202      	bcs.n	800d8d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d8cc:	2307      	movs	r3, #7
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e00a      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d8d2:	2306      	movs	r3, #6
 800d8d4:	617b      	str	r3, [r7, #20]
 800d8d6:	e007      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d8d8:	79fb      	ldrb	r3, [r7, #7]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d8de:	2309      	movs	r3, #9
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	e001      	b.n	800d8e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d8e4:	2309      	movs	r3, #9
 800d8e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	68da      	ldr	r2, [r3, #12]
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	029b      	lsls	r3, r3, #10
 800d8fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d900:	431a      	orrs	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	371c      	adds	r7, #28
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	00d8acbf 	.word	0x00d8acbf
 800d918:	00e4e1c0 	.word	0x00e4e1c0
 800d91c:	00f42400 	.word	0x00f42400
 800d920:	01067380 	.word	0x01067380
 800d924:	011a499f 	.word	0x011a499f
 800d928:	01312cff 	.word	0x01312cff
 800d92c:	014ca43f 	.word	0x014ca43f
 800d930:	016e3600 	.word	0x016e3600
 800d934:	01a6ab1f 	.word	0x01a6ab1f
 800d938:	01e84800 	.word	0x01e84800

0800d93c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	f043 0201 	orr.w	r2, r3, #1
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	f023 0201 	bic.w	r2, r3, #1
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d98c:	2300      	movs	r3, #0
 800d98e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d115      	bne.n	800d9ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	f7fa ffdc 	bl	800896c <HAL_Delay>
      ms++;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f001 f972 	bl	800eca4 <USB_GetMode>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d01e      	beq.n	800da04 <USB_SetCurrentMode+0x84>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b31      	cmp	r3, #49	; 0x31
 800d9ca:	d9f0      	bls.n	800d9ae <USB_SetCurrentMode+0x2e>
 800d9cc:	e01a      	b.n	800da04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d115      	bne.n	800da00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	f7fa ffc3 	bl	800896c <HAL_Delay>
      ms++;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f001 f959 	bl	800eca4 <USB_GetMode>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <USB_SetCurrentMode+0x84>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b31      	cmp	r3, #49	; 0x31
 800d9fc:	d9f0      	bls.n	800d9e0 <USB_SetCurrentMode+0x60>
 800d9fe:	e001      	b.n	800da04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e005      	b.n	800da10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b32      	cmp	r3, #50	; 0x32
 800da08:	d101      	bne.n	800da0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	e000      	b.n	800da10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da18:	b084      	sub	sp, #16
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b086      	sub	sp, #24
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800da26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da32:	2300      	movs	r3, #0
 800da34:	613b      	str	r3, [r7, #16]
 800da36:	e009      	b.n	800da4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	3340      	adds	r3, #64	; 0x40
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	4413      	add	r3, r2
 800da42:	2200      	movs	r2, #0
 800da44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	3301      	adds	r3, #1
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	2b0e      	cmp	r3, #14
 800da50:	d9f2      	bls.n	800da38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800da52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d11c      	bne.n	800da92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da66:	f043 0302 	orr.w	r3, r3, #2
 800da6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	639a      	str	r2, [r3, #56]	; 0x38
 800da90:	e00b      	b.n	800daaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dab0:	461a      	mov	r2, r3
 800dab2:	2300      	movs	r3, #0
 800dab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dabc:	4619      	mov	r1, r3
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dac4:	461a      	mov	r2, r3
 800dac6:	680b      	ldr	r3, [r1, #0]
 800dac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d10c      	bne.n	800daea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d104      	bne.n	800dae0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dad6:	2100      	movs	r1, #0
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f945 	bl	800dd68 <USB_SetDevSpeed>
 800dade:	e008      	b.n	800daf2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dae0:	2101      	movs	r1, #1
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f940 	bl	800dd68 <USB_SetDevSpeed>
 800dae8:	e003      	b.n	800daf2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800daea:	2103      	movs	r1, #3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f93b 	bl	800dd68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800daf2:	2110      	movs	r1, #16
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f8f3 	bl	800dce0 <USB_FlushTxFifo>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f90f 	bl	800dd28 <USB_FlushRxFifo>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db1a:	461a      	mov	r2, r3
 800db1c:	2300      	movs	r3, #0
 800db1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db26:	461a      	mov	r2, r3
 800db28:	2300      	movs	r3, #0
 800db2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	461a      	mov	r2, r3
 800db34:	2300      	movs	r3, #0
 800db36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	e043      	b.n	800dbc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4413      	add	r3, r2
 800db46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db54:	d118      	bne.n	800db88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10a      	bne.n	800db72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db68:	461a      	mov	r2, r3
 800db6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	e013      	b.n	800db9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	015a      	lsls	r2, r3, #5
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	4413      	add	r3, r2
 800db7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7e:	461a      	mov	r2, r3
 800db80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	e008      	b.n	800db9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	015a      	lsls	r2, r3, #5
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db94:	461a      	mov	r2, r3
 800db96:	2300      	movs	r3, #0
 800db98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba6:	461a      	mov	r2, r3
 800dba8:	2300      	movs	r3, #0
 800dbaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dbbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	613b      	str	r3, [r7, #16]
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d3b7      	bcc.n	800db3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbce:	2300      	movs	r3, #0
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	e043      	b.n	800dc5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	015a      	lsls	r2, r3, #5
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4413      	add	r3, r2
 800dbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbea:	d118      	bne.n	800dc1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	015a      	lsls	r2, r3, #5
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc04:	6013      	str	r3, [r2, #0]
 800dc06:	e013      	b.n	800dc30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc14:	461a      	mov	r2, r3
 800dc16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	e008      	b.n	800dc30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	015a      	lsls	r2, r3, #5
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	4413      	add	r3, r2
 800dc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dc54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	613b      	str	r3, [r7, #16]
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d3b7      	bcc.n	800dbd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dc84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d105      	bne.n	800dc98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	f043 0210 	orr.w	r2, r3, #16
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	699a      	ldr	r2, [r3, #24]
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <USB_DevInit+0x2c4>)
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f043 0208 	orr.w	r2, r3, #8
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d107      	bne.n	800dccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcc4:	f043 0304 	orr.w	r3, r3, #4
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcd8:	b004      	add	sp, #16
 800dcda:	4770      	bx	lr
 800dcdc:	803c3800 	.word	0x803c3800

0800dce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dcea:	2300      	movs	r3, #0
 800dcec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	019b      	lsls	r3, r3, #6
 800dcf2:	f043 0220 	orr.w	r2, r3, #32
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	4a08      	ldr	r2, [pc, #32]	; (800dd24 <USB_FlushTxFifo+0x44>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d901      	bls.n	800dd0a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800dd06:	2303      	movs	r3, #3
 800dd08:	e006      	b.n	800dd18 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	f003 0320 	and.w	r3, r3, #32
 800dd12:	2b20      	cmp	r3, #32
 800dd14:	d0f1      	beq.n	800dcfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	00030d40 	.word	0x00030d40

0800dd28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2210      	movs	r2, #16
 800dd38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	4a08      	ldr	r2, [pc, #32]	; (800dd64 <USB_FlushRxFifo+0x3c>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d901      	bls.n	800dd4a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e006      	b.n	800dd58 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	f003 0310 	and.w	r3, r3, #16
 800dd52:	2b10      	cmp	r3, #16
 800dd54:	d0f1      	beq.n	800dd3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	00030d40 	.word	0x00030d40

0800dd68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b087      	sub	sp, #28
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	f003 0306 	and.w	r3, r3, #6
 800ddb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d102      	bne.n	800ddc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	75fb      	strb	r3, [r7, #23]
 800ddbe:	e00a      	b.n	800ddd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d002      	beq.n	800ddcc <USB_GetDevSpeed+0x32>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b06      	cmp	r3, #6
 800ddca:	d102      	bne.n	800ddd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ddcc:	2302      	movs	r3, #2
 800ddce:	75fb      	strb	r3, [r7, #23]
 800ddd0:	e001      	b.n	800ddd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ddd2:	230f      	movs	r3, #15
 800ddd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	371c      	adds	r7, #28
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	785b      	ldrb	r3, [r3, #1]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d13a      	bne.n	800de76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de06:	69da      	ldr	r2, [r3, #28]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	f003 030f 	and.w	r3, r3, #15
 800de10:	2101      	movs	r1, #1
 800de12:	fa01 f303 	lsl.w	r3, r1, r3
 800de16:	b29b      	uxth	r3, r3
 800de18:	68f9      	ldr	r1, [r7, #12]
 800de1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de1e:	4313      	orrs	r3, r2
 800de20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	015a      	lsls	r2, r3, #5
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	4413      	add	r3, r2
 800de2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d155      	bne.n	800dee4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	015a      	lsls	r2, r3, #5
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	4413      	add	r3, r2
 800de40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	689b      	ldr	r3, [r3, #8]
 800de4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	78db      	ldrb	r3, [r3, #3]
 800de52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	059b      	lsls	r3, r3, #22
 800de5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800de5c:	4313      	orrs	r3, r2
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	0151      	lsls	r1, r2, #5
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	440a      	add	r2, r1
 800de66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	e036      	b.n	800dee4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7c:	69da      	ldr	r2, [r3, #28]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 030f 	and.w	r3, r3, #15
 800de86:	2101      	movs	r1, #1
 800de88:	fa01 f303 	lsl.w	r3, r1, r3
 800de8c:	041b      	lsls	r3, r3, #16
 800de8e:	68f9      	ldr	r1, [r7, #12]
 800de90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de94:	4313      	orrs	r3, r2
 800de96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d11a      	bne.n	800dee4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	015a      	lsls	r2, r3, #5
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	4413      	add	r3, r2
 800deb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	78db      	ldrb	r3, [r3, #3]
 800dec8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800deca:	430b      	orrs	r3, r1
 800decc:	4313      	orrs	r3, r2
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	0151      	lsls	r1, r2, #5
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	440a      	add	r2, r1
 800ded6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dee2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
	...

0800def4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d161      	bne.n	800dfd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	015a      	lsls	r2, r3, #5
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	4413      	add	r3, r2
 800df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df26:	d11f      	bne.n	800df68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	015a      	lsls	r2, r3, #5
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	0151      	lsls	r1, r2, #5
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	440a      	add	r2, r1
 800df3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	015a      	lsls	r2, r3, #5
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4413      	add	r3, r2
 800df50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	0151      	lsls	r1, r2, #5
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	440a      	add	r2, r1
 800df5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	f003 030f 	and.w	r3, r3, #15
 800df78:	2101      	movs	r1, #1
 800df7a:	fa01 f303 	lsl.w	r3, r1, r3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	43db      	mvns	r3, r3
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df88:	4013      	ands	r3, r2
 800df8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df92:	69da      	ldr	r2, [r3, #28]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f003 030f 	and.w	r3, r3, #15
 800df9c:	2101      	movs	r1, #1
 800df9e:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	43db      	mvns	r3, r3
 800dfa6:	68f9      	ldr	r1, [r7, #12]
 800dfa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfac:	4013      	ands	r3, r2
 800dfae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	015a      	lsls	r2, r3, #5
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	0159      	lsls	r1, r3, #5
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	440b      	add	r3, r1
 800dfc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4b35      	ldr	r3, [pc, #212]	; (800e0a4 <USB_DeactivateEndpoint+0x1b0>)
 800dfce:	4013      	ands	r3, r2
 800dfd0:	600b      	str	r3, [r1, #0]
 800dfd2:	e060      	b.n	800e096 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	015a      	lsls	r2, r3, #5
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4413      	add	r3, r2
 800dfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfea:	d11f      	bne.n	800e02c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	015a      	lsls	r2, r3, #5
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	4413      	add	r3, r2
 800dff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	0151      	lsls	r1, r2, #5
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	440a      	add	r2, r1
 800e002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e006:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e00a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	015a      	lsls	r2, r3, #5
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	0151      	lsls	r1, r2, #5
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	440a      	add	r2, r1
 800e022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e02a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	f003 030f 	and.w	r3, r3, #15
 800e03c:	2101      	movs	r1, #1
 800e03e:	fa01 f303 	lsl.w	r3, r1, r3
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	43db      	mvns	r3, r3
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e04c:	4013      	ands	r3, r2
 800e04e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e056:	69da      	ldr	r2, [r3, #28]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	2101      	movs	r1, #1
 800e062:	fa01 f303 	lsl.w	r3, r1, r3
 800e066:	041b      	lsls	r3, r3, #16
 800e068:	43db      	mvns	r3, r3
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e070:	4013      	ands	r3, r2
 800e072:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	015a      	lsls	r2, r3, #5
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	0159      	lsls	r1, r3, #5
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	440b      	add	r3, r1
 800e08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e08e:	4619      	mov	r1, r3
 800e090:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <USB_DeactivateEndpoint+0x1b4>)
 800e092:	4013      	ands	r3, r2
 800e094:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	ec337800 	.word	0xec337800
 800e0a8:	eff37800 	.word	0xeff37800

0800e0ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b08a      	sub	sp, #40	; 0x28
 800e0b0:	af02      	add	r7, sp, #8
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	785b      	ldrb	r3, [r3, #1]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	f040 815c 	bne.w	800e386 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d132      	bne.n	800e13c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	015a      	lsls	r2, r3, #5
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	4413      	add	r3, r2
 800e0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	0151      	lsls	r1, r2, #5
 800e0e8:	69fa      	ldr	r2, [r7, #28]
 800e0ea:	440a      	add	r2, r1
 800e0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e0f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e0f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e106:	691b      	ldr	r3, [r3, #16]
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	0151      	lsls	r1, r2, #5
 800e10c:	69fa      	ldr	r2, [r7, #28]
 800e10e:	440a      	add	r2, r1
 800e110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	015a      	lsls	r2, r3, #5
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	4413      	add	r3, r2
 800e122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e126:	691b      	ldr	r3, [r3, #16]
 800e128:	69ba      	ldr	r2, [r7, #24]
 800e12a:	0151      	lsls	r1, r2, #5
 800e12c:	69fa      	ldr	r2, [r7, #28]
 800e12e:	440a      	add	r2, r1
 800e130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e134:	0cdb      	lsrs	r3, r3, #19
 800e136:	04db      	lsls	r3, r3, #19
 800e138:	6113      	str	r3, [r2, #16]
 800e13a:	e074      	b.n	800e226 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	4413      	add	r3, r2
 800e144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	69ba      	ldr	r2, [r7, #24]
 800e14c:	0151      	lsls	r1, r2, #5
 800e14e:	69fa      	ldr	r2, [r7, #28]
 800e150:	440a      	add	r2, r1
 800e152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e156:	0cdb      	lsrs	r3, r3, #19
 800e158:	04db      	lsls	r3, r3, #19
 800e15a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	69ba      	ldr	r2, [r7, #24]
 800e16c:	0151      	lsls	r1, r2, #5
 800e16e:	69fa      	ldr	r2, [r7, #28]
 800e170:	440a      	add	r2, r1
 800e172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e176:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e17a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e17e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6959      	ldr	r1, [r3, #20]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	440b      	add	r3, r1
 800e198:	1e59      	subs	r1, r3, #1
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e1a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e1a4:	4b9d      	ldr	r3, [pc, #628]	; (800e41c <USB_EPStartXfer+0x370>)
 800e1a6:	400b      	ands	r3, r1
 800e1a8:	69b9      	ldr	r1, [r7, #24]
 800e1aa:	0148      	lsls	r0, r1, #5
 800e1ac:	69f9      	ldr	r1, [r7, #28]
 800e1ae:	4401      	add	r1, r0
 800e1b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c4:	691a      	ldr	r2, [r3, #16]
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	695b      	ldr	r3, [r3, #20]
 800e1ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1ce:	69b9      	ldr	r1, [r7, #24]
 800e1d0:	0148      	lsls	r0, r1, #5
 800e1d2:	69f9      	ldr	r1, [r7, #28]
 800e1d4:	4401      	add	r1, r0
 800e1d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	78db      	ldrb	r3, [r3, #3]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d11f      	bne.n	800e226 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	015a      	lsls	r2, r3, #5
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	69ba      	ldr	r2, [r7, #24]
 800e1f6:	0151      	lsls	r1, r2, #5
 800e1f8:	69fa      	ldr	r2, [r7, #28]
 800e1fa:	440a      	add	r2, r1
 800e1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e200:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e204:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	0151      	lsls	r1, r2, #5
 800e218:	69fa      	ldr	r2, [r7, #28]
 800e21a:	440a      	add	r2, r1
 800e21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e224:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d14b      	bne.n	800e2c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d009      	beq.n	800e248 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	015a      	lsls	r2, r3, #5
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	4413      	add	r3, r2
 800e23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e240:	461a      	mov	r2, r3
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	78db      	ldrb	r3, [r3, #3]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d128      	bne.n	800e2a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d110      	bne.n	800e282 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	69ba      	ldr	r2, [r7, #24]
 800e270:	0151      	lsls	r1, r2, #5
 800e272:	69fa      	ldr	r2, [r7, #28]
 800e274:	440a      	add	r2, r1
 800e276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e27a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	e00f      	b.n	800e2a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	0151      	lsls	r1, r2, #5
 800e294:	69fa      	ldr	r2, [r7, #28]
 800e296:	440a      	add	r2, r1
 800e298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e29c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	015a      	lsls	r2, r3, #5
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	69ba      	ldr	r2, [r7, #24]
 800e2b2:	0151      	lsls	r1, r2, #5
 800e2b4:	69fa      	ldr	r2, [r7, #28]
 800e2b6:	440a      	add	r2, r1
 800e2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2c0:	6013      	str	r3, [r2, #0]
 800e2c2:	e12f      	b.n	800e524 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	015a      	lsls	r2, r3, #5
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	0151      	lsls	r1, r2, #5
 800e2d6:	69fa      	ldr	r2, [r7, #28]
 800e2d8:	440a      	add	r2, r1
 800e2da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	78db      	ldrb	r3, [r3, #3]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d015      	beq.n	800e318 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	695b      	ldr	r3, [r3, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8117 	beq.w	800e524 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f003 030f 	and.w	r3, r3, #15
 800e306:	2101      	movs	r1, #1
 800e308:	fa01 f303 	lsl.w	r3, r1, r3
 800e30c:	69f9      	ldr	r1, [r7, #28]
 800e30e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e312:	4313      	orrs	r3, r2
 800e314:	634b      	str	r3, [r1, #52]	; 0x34
 800e316:	e105      	b.n	800e524 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e324:	2b00      	cmp	r3, #0
 800e326:	d110      	bne.n	800e34a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	69ba      	ldr	r2, [r7, #24]
 800e338:	0151      	lsls	r1, r2, #5
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	440a      	add	r2, r1
 800e33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	e00f      	b.n	800e36a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	015a      	lsls	r2, r3, #5
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	69ba      	ldr	r2, [r7, #24]
 800e35a:	0151      	lsls	r1, r2, #5
 800e35c:	69fa      	ldr	r2, [r7, #28]
 800e35e:	440a      	add	r2, r1
 800e360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e368:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	68d9      	ldr	r1, [r3, #12]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	781a      	ldrb	r2, [r3, #0]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	695b      	ldr	r3, [r3, #20]
 800e376:	b298      	uxth	r0, r3
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	4603      	mov	r3, r0
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f000 fa2b 	bl	800e7da <USB_WritePacket>
 800e384:	e0ce      	b.n	800e524 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	015a      	lsls	r2, r3, #5
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	4413      	add	r3, r2
 800e38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	0151      	lsls	r1, r2, #5
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	440a      	add	r2, r1
 800e39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3a0:	0cdb      	lsrs	r3, r3, #19
 800e3a2:	04db      	lsls	r3, r3, #19
 800e3a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	015a      	lsls	r2, r3, #5
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	0151      	lsls	r1, r2, #5
 800e3b8:	69fa      	ldr	r2, [r7, #28]
 800e3ba:	440a      	add	r2, r1
 800e3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e3c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e3c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	695b      	ldr	r3, [r3, #20]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d126      	bne.n	800e420 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	015a      	lsls	r2, r3, #5
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	4413      	add	r3, r2
 800e3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3de:	691a      	ldr	r2, [r3, #16]
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3e8:	69b9      	ldr	r1, [r7, #24]
 800e3ea:	0148      	lsls	r0, r1, #5
 800e3ec:	69f9      	ldr	r1, [r7, #28]
 800e3ee:	4401      	add	r1, r0
 800e3f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	015a      	lsls	r2, r3, #5
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	69ba      	ldr	r2, [r7, #24]
 800e408:	0151      	lsls	r1, r2, #5
 800e40a:	69fa      	ldr	r2, [r7, #28]
 800e40c:	440a      	add	r2, r1
 800e40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e416:	6113      	str	r3, [r2, #16]
 800e418:	e036      	b.n	800e488 <USB_EPStartXfer+0x3dc>
 800e41a:	bf00      	nop
 800e41c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	695a      	ldr	r2, [r3, #20]
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	4413      	add	r3, r2
 800e42a:	1e5a      	subs	r2, r3, #1
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	fbb2 f3f3 	udiv	r3, r2, r3
 800e434:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	015a      	lsls	r2, r3, #5
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	4413      	add	r3, r2
 800e43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e442:	691a      	ldr	r2, [r3, #16]
 800e444:	8afb      	ldrh	r3, [r7, #22]
 800e446:	04d9      	lsls	r1, r3, #19
 800e448:	4b39      	ldr	r3, [pc, #228]	; (800e530 <USB_EPStartXfer+0x484>)
 800e44a:	400b      	ands	r3, r1
 800e44c:	69b9      	ldr	r1, [r7, #24]
 800e44e:	0148      	lsls	r0, r1, #5
 800e450:	69f9      	ldr	r1, [r7, #28]
 800e452:	4401      	add	r1, r0
 800e454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e458:	4313      	orrs	r3, r2
 800e45a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	015a      	lsls	r2, r3, #5
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	4413      	add	r3, r2
 800e464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	8af9      	ldrh	r1, [r7, #22]
 800e470:	fb01 f303 	mul.w	r3, r1, r3
 800e474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e478:	69b9      	ldr	r1, [r7, #24]
 800e47a:	0148      	lsls	r0, r1, #5
 800e47c:	69f9      	ldr	r1, [r7, #28]
 800e47e:	4401      	add	r1, r0
 800e480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e484:	4313      	orrs	r3, r2
 800e486:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d10d      	bne.n	800e4aa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d009      	beq.n	800e4aa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	68d9      	ldr	r1, [r3, #12]
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a6:	460a      	mov	r2, r1
 800e4a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	78db      	ldrb	r3, [r3, #3]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d128      	bne.n	800e504 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d110      	bne.n	800e4e4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	69ba      	ldr	r2, [r7, #24]
 800e4d2:	0151      	lsls	r1, r2, #5
 800e4d4:	69fa      	ldr	r2, [r7, #28]
 800e4d6:	440a      	add	r2, r1
 800e4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4e0:	6013      	str	r3, [r2, #0]
 800e4e2:	e00f      	b.n	800e504 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e502:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	015a      	lsls	r2, r3, #5
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	4413      	add	r3, r2
 800e50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69ba      	ldr	r2, [r7, #24]
 800e514:	0151      	lsls	r1, r2, #5
 800e516:	69fa      	ldr	r2, [r7, #28]
 800e518:	440a      	add	r2, r1
 800e51a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e51e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3720      	adds	r7, #32
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	1ff80000 	.word	0x1ff80000

0800e534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	4613      	mov	r3, r2
 800e540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	785b      	ldrb	r3, [r3, #1]
 800e550:	2b01      	cmp	r3, #1
 800e552:	f040 80cd 	bne.w	800e6f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d132      	bne.n	800e5c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	015a      	lsls	r2, r3, #5
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	4413      	add	r3, r2
 800e566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	0151      	lsls	r1, r2, #5
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	440a      	add	r2, r1
 800e574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e578:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e57c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	015a      	lsls	r2, r3, #5
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	4413      	add	r3, r2
 800e58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e58e:	691b      	ldr	r3, [r3, #16]
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	0151      	lsls	r1, r2, #5
 800e594:	697a      	ldr	r2, [r7, #20]
 800e596:	440a      	add	r2, r1
 800e598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e59c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	015a      	lsls	r2, r3, #5
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	0151      	lsls	r1, r2, #5
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	440a      	add	r2, r1
 800e5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5bc:	0cdb      	lsrs	r3, r3, #19
 800e5be:	04db      	lsls	r3, r3, #19
 800e5c0:	6113      	str	r3, [r2, #16]
 800e5c2:	e04e      	b.n	800e662 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	0151      	lsls	r1, r2, #5
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	440a      	add	r2, r1
 800e5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5de:	0cdb      	lsrs	r3, r3, #19
 800e5e0:	04db      	lsls	r3, r3, #19
 800e5e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	015a      	lsls	r2, r3, #5
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	0151      	lsls	r1, r2, #5
 800e5f6:	697a      	ldr	r2, [r7, #20]
 800e5f8:	440a      	add	r2, r1
 800e5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e606:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	695a      	ldr	r2, [r3, #20]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	429a      	cmp	r2, r3
 800e612:	d903      	bls.n	800e61c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	689a      	ldr	r2, [r3, #8]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	015a      	lsls	r2, r3, #5
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	4413      	add	r3, r2
 800e624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	0151      	lsls	r1, r2, #5
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	440a      	add	r2, r1
 800e632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e63a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e648:	691a      	ldr	r2, [r3, #16]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	695b      	ldr	r3, [r3, #20]
 800e64e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e652:	6939      	ldr	r1, [r7, #16]
 800e654:	0148      	lsls	r0, r1, #5
 800e656:	6979      	ldr	r1, [r7, #20]
 800e658:	4401      	add	r1, r0
 800e65a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e65e:	4313      	orrs	r3, r2
 800e660:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d11e      	bne.n	800e6a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d009      	beq.n	800e684 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	015a      	lsls	r2, r3, #5
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	4413      	add	r3, r2
 800e678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67c:	461a      	mov	r2, r3
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	015a      	lsls	r2, r3, #5
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	4413      	add	r3, r2
 800e68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	0151      	lsls	r1, r2, #5
 800e696:	697a      	ldr	r2, [r7, #20]
 800e698:	440a      	add	r2, r1
 800e69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e69e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6a2:	6013      	str	r3, [r2, #0]
 800e6a4:	e092      	b.n	800e7cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	0151      	lsls	r1, r2, #5
 800e6b8:	697a      	ldr	r2, [r7, #20]
 800e6ba:	440a      	add	r2, r1
 800e6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d07e      	beq.n	800e7cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	f003 030f 	and.w	r3, r3, #15
 800e6de:	2101      	movs	r1, #1
 800e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e4:	6979      	ldr	r1, [r7, #20]
 800e6e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	634b      	str	r3, [r1, #52]	; 0x34
 800e6ee:	e06d      	b.n	800e7cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	693a      	ldr	r2, [r7, #16]
 800e700:	0151      	lsls	r1, r2, #5
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	440a      	add	r2, r1
 800e706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e70a:	0cdb      	lsrs	r3, r3, #19
 800e70c:	04db      	lsls	r3, r3, #19
 800e70e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	015a      	lsls	r2, r3, #5
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	4413      	add	r3, r2
 800e718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	0151      	lsls	r1, r2, #5
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	440a      	add	r2, r1
 800e726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e72a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e72e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e732:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d003      	beq.n	800e744 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	015a      	lsls	r2, r3, #5
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	693a      	ldr	r2, [r7, #16]
 800e754:	0151      	lsls	r1, r2, #5
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	440a      	add	r2, r1
 800e75a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e75e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e762:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e770:	691a      	ldr	r2, [r3, #16]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e77a:	6939      	ldr	r1, [r7, #16]
 800e77c:	0148      	lsls	r0, r1, #5
 800e77e:	6979      	ldr	r1, [r7, #20]
 800e780:	4401      	add	r1, r0
 800e782:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e786:	4313      	orrs	r3, r2
 800e788:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d10d      	bne.n	800e7ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d009      	beq.n	800e7ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	68d9      	ldr	r1, [r3, #12]
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	015a      	lsls	r2, r3, #5
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a8:	460a      	mov	r2, r1
 800e7aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	693a      	ldr	r2, [r7, #16]
 800e7bc:	0151      	lsls	r1, r2, #5
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	440a      	add	r2, r1
 800e7c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	371c      	adds	r7, #28
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr

0800e7da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e7da:	b480      	push	{r7}
 800e7dc:	b089      	sub	sp, #36	; 0x24
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	60f8      	str	r0, [r7, #12]
 800e7e2:	60b9      	str	r1, [r7, #8]
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	71fb      	strb	r3, [r7, #7]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e7f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d123      	bne.n	800e848 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e800:	88bb      	ldrh	r3, [r7, #4]
 800e802:	3303      	adds	r3, #3
 800e804:	089b      	lsrs	r3, r3, #2
 800e806:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e808:	2300      	movs	r3, #0
 800e80a:	61bb      	str	r3, [r7, #24]
 800e80c:	e018      	b.n	800e840 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e80e:	79fb      	ldrb	r3, [r7, #7]
 800e810:	031a      	lsls	r2, r3, #12
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	4413      	add	r3, r2
 800e816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e81a:	461a      	mov	r2, r3
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	3301      	adds	r3, #1
 800e826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	3301      	adds	r3, #1
 800e82c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	3301      	adds	r3, #1
 800e832:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	3301      	adds	r3, #1
 800e838:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	3301      	adds	r3, #1
 800e83e:	61bb      	str	r3, [r7, #24]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	429a      	cmp	r2, r3
 800e846:	d3e2      	bcc.n	800e80e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3724      	adds	r7, #36	; 0x24
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e856:	b480      	push	{r7}
 800e858:	b08b      	sub	sp, #44	; 0x2c
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	60f8      	str	r0, [r7, #12]
 800e85e:	60b9      	str	r1, [r7, #8]
 800e860:	4613      	mov	r3, r2
 800e862:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e86c:	88fb      	ldrh	r3, [r7, #6]
 800e86e:	089b      	lsrs	r3, r3, #2
 800e870:	b29b      	uxth	r3, r3
 800e872:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e874:	88fb      	ldrh	r3, [r7, #6]
 800e876:	f003 0303 	and.w	r3, r3, #3
 800e87a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e87c:	2300      	movs	r3, #0
 800e87e:	623b      	str	r3, [r7, #32]
 800e880:	e014      	b.n	800e8ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	601a      	str	r2, [r3, #0]
    pDest++;
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	3301      	adds	r3, #1
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	3301      	adds	r3, #1
 800e898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	3301      	adds	r3, #1
 800e89e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	623b      	str	r3, [r7, #32]
 800e8ac:	6a3a      	ldr	r2, [r7, #32]
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d3e6      	bcc.n	800e882 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e8b4:	8bfb      	ldrh	r3, [r7, #30]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d01e      	beq.n	800e8f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	f107 0310 	add.w	r3, r7, #16
 800e8ca:	6812      	ldr	r2, [r2, #0]
 800e8cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	00db      	lsls	r3, r3, #3
 800e8d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	701a      	strb	r2, [r3, #0]
      i++;
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	623b      	str	r3, [r7, #32]
      pDest++;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e8ec:	8bfb      	ldrh	r3, [r7, #30]
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e8f2:	8bfb      	ldrh	r3, [r7, #30]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1ea      	bne.n	800e8ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	372c      	adds	r7, #44	; 0x2c
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e906:	b480      	push	{r7}
 800e908:	b085      	sub	sp, #20
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	785b      	ldrb	r3, [r3, #1]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d12c      	bne.n	800e97c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	015a      	lsls	r2, r3, #5
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	4413      	add	r3, r2
 800e92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	db12      	blt.n	800e95a <USB_EPSetStall+0x54>
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00f      	beq.n	800e95a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	0151      	lsls	r1, r2, #5
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	440a      	add	r2, r1
 800e950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e958:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	015a      	lsls	r2, r3, #5
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	4413      	add	r3, r2
 800e962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	0151      	lsls	r1, r2, #5
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	440a      	add	r2, r1
 800e970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	e02b      	b.n	800e9d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	015a      	lsls	r2, r3, #5
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	4413      	add	r3, r2
 800e984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	db12      	blt.n	800e9b4 <USB_EPSetStall+0xae>
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00f      	beq.n	800e9b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	015a      	lsls	r2, r3, #5
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	0151      	lsls	r1, r2, #5
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	440a      	add	r2, r1
 800e9aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e9b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e9d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9e2:	b480      	push	{r7}
 800e9e4:	b085      	sub	sp, #20
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	785b      	ldrb	r3, [r3, #1]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d128      	bne.n	800ea50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	015a      	lsls	r2, r3, #5
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	4413      	add	r3, r2
 800ea06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	0151      	lsls	r1, r2, #5
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	440a      	add	r2, r1
 800ea14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	78db      	ldrb	r3, [r3, #3]
 800ea22:	2b03      	cmp	r3, #3
 800ea24:	d003      	beq.n	800ea2e <USB_EPClearStall+0x4c>
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	78db      	ldrb	r3, [r3, #3]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d138      	bne.n	800eaa0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	015a      	lsls	r2, r3, #5
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	4413      	add	r3, r2
 800ea36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	68ba      	ldr	r2, [r7, #8]
 800ea3e:	0151      	lsls	r1, r2, #5
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	440a      	add	r2, r1
 800ea44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea4c:	6013      	str	r3, [r2, #0]
 800ea4e:	e027      	b.n	800eaa0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	015a      	lsls	r2, r3, #5
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	4413      	add	r3, r2
 800ea58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	0151      	lsls	r1, r2, #5
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	440a      	add	r2, r1
 800ea66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	78db      	ldrb	r3, [r3, #3]
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d003      	beq.n	800ea80 <USB_EPClearStall+0x9e>
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	78db      	ldrb	r3, [r3, #3]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d10f      	bne.n	800eaa0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	015a      	lsls	r2, r3, #5
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4413      	add	r3, r2
 800ea88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	0151      	lsls	r1, r2, #5
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	440a      	add	r2, r1
 800ea96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	460b      	mov	r3, r1
 800eab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eacc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ead0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	011b      	lsls	r3, r3, #4
 800eade:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eae2:	68f9      	ldr	r1, [r7, #12]
 800eae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eae8:	4313      	orrs	r3, r2
 800eaea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr

0800eafa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eafa:	b480      	push	{r7}
 800eafc:	b085      	sub	sp, #20
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb14:	f023 0303 	bic.w	r3, r3, #3
 800eb18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb28:	f023 0302 	bic.w	r3, r3, #2
 800eb2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb56:	f023 0303 	bic.w	r3, r3, #3
 800eb5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb6a:	f043 0302 	orr.w	r3, r3, #2
 800eb6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3714      	adds	r7, #20
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eb7e:	b480      	push	{r7}
 800eb80:	b085      	sub	sp, #20
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	4013      	ands	r3, r2
 800eb94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eb96:	68fb      	ldr	r3, [r7, #12]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	4013      	ands	r3, r2
 800ebc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	0c1b      	lsrs	r3, r3, #16
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3714      	adds	r7, #20
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebea:	699b      	ldr	r3, [r3, #24]
 800ebec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebf4:	69db      	ldr	r3, [r3, #28]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	b29b      	uxth	r3, r3
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec1c:	78fb      	ldrb	r3, [r7, #3]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	4013      	ands	r3, r2
 800ec38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec3a:	68bb      	ldr	r3, [r7, #8]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	460b      	mov	r3, r1
 800ec52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec6c:	78fb      	ldrb	r3, [r7, #3]
 800ec6e:	f003 030f 	and.w	r3, r3, #15
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	fa22 f303 	lsr.w	r3, r2, r3
 800ec78:	01db      	lsls	r3, r3, #7
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec82:	78fb      	ldrb	r3, [r7, #3]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	693a      	ldr	r2, [r7, #16]
 800ec92:	4013      	ands	r3, r2
 800ec94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec96:	68bb      	ldr	r3, [r7, #8]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	371c      	adds	r7, #28
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	695b      	ldr	r3, [r3, #20]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ecde:	f023 0307 	bic.w	r3, r3, #7
 800ece2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
	...

0800ed08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	460b      	mov	r3, r1
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	333c      	adds	r3, #60	; 0x3c
 800ed1e:	3304      	adds	r3, #4
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	4a26      	ldr	r2, [pc, #152]	; (800edc0 <USB_EP0_OutStart+0xb8>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d90a      	bls.n	800ed42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed3c:	d101      	bne.n	800ed42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e037      	b.n	800edb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed48:	461a      	mov	r2, r3
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed70:	f043 0318 	orr.w	r3, r3, #24
 800ed74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ed88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d10f      	bne.n	800edb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed96:	461a      	mov	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800edae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	4f54300a 	.word	0x4f54300a

0800edc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edcc:	2300      	movs	r3, #0
 800edce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3301      	adds	r3, #1
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	4a13      	ldr	r2, [pc, #76]	; (800ee24 <USB_CoreReset+0x60>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d901      	bls.n	800ede0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800eddc:	2303      	movs	r3, #3
 800edde:	e01a      	b.n	800ee16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	daf3      	bge.n	800edd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ede8:	2300      	movs	r3, #0
 800edea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	691b      	ldr	r3, [r3, #16]
 800edf0:	f043 0201 	orr.w	r2, r3, #1
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3301      	adds	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	4a09      	ldr	r2, [pc, #36]	; (800ee24 <USB_CoreReset+0x60>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d901      	bls.n	800ee08 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e006      	b.n	800ee16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d0f1      	beq.n	800edf8 <USB_CoreReset+0x34>

  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	00030d40 	.word	0x00030d40

0800ee28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ee34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ee38:	f002 f906 	bl	8011048 <USBD_static_malloc>
 800ee3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d105      	bne.n	800ee50 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e066      	b.n	800ef1e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	7c1b      	ldrb	r3, [r3, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d119      	bne.n	800ee94 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee64:	2202      	movs	r2, #2
 800ee66:	2181      	movs	r1, #129	; 0x81
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 ffca 	bl	8010e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ee74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee78:	2202      	movs	r2, #2
 800ee7a:	2101      	movs	r1, #1
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f001 ffc0 	bl	8010e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2210      	movs	r2, #16
 800ee8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ee92:	e016      	b.n	800eec2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ee94:	2340      	movs	r3, #64	; 0x40
 800ee96:	2202      	movs	r2, #2
 800ee98:	2181      	movs	r1, #129	; 0x81
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f001 ffb1 	bl	8010e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eea6:	2340      	movs	r3, #64	; 0x40
 800eea8:	2202      	movs	r2, #2
 800eeaa:	2101      	movs	r1, #1
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f001 ffa8 	bl	8010e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2210      	movs	r2, #16
 800eebe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eec2:	2308      	movs	r3, #8
 800eec4:	2203      	movs	r2, #3
 800eec6:	2182      	movs	r1, #130	; 0x82
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 ff9a 	bl	8010e02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2201      	movs	r2, #1
 800eed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	7c1b      	ldrb	r3, [r3, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d109      	bne.n	800ef0c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eefe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef02:	2101      	movs	r1, #1
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f002 f86b 	bl	8010fe0 <USBD_LL_PrepareReceive>
 800ef0a:	e007      	b.n	800ef1c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef12:	2340      	movs	r3, #64	; 0x40
 800ef14:	2101      	movs	r1, #1
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f002 f862 	bl	8010fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	460b      	mov	r3, r1
 800ef30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ef32:	2181      	movs	r1, #129	; 0x81
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f001 ff8a 	bl	8010e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ef40:	2101      	movs	r1, #1
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f001 ff83 	bl	8010e4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ef50:	2182      	movs	r1, #130	; 0x82
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f001 ff7b 	bl	8010e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00e      	beq.n	800ef90 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef82:	4618      	mov	r0, r3
 800ef84:	f002 f86e 	bl	8011064 <USBD_static_free>
    pdev->pClassData = NULL;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
	...

0800ef9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800efae:	2300      	movs	r3, #0
 800efb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800efb2:	2300      	movs	r3, #0
 800efb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800efb6:	2300      	movs	r3, #0
 800efb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d101      	bne.n	800efc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800efc0:	2303      	movs	r3, #3
 800efc2:	e0af      	b.n	800f124 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d03f      	beq.n	800f050 <USBD_CDC_Setup+0xb4>
 800efd0:	2b20      	cmp	r3, #32
 800efd2:	f040 809f 	bne.w	800f114 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	88db      	ldrh	r3, [r3, #6]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d02e      	beq.n	800f03c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	b25b      	sxtb	r3, r3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	da16      	bge.n	800f016 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800eff4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	88d2      	ldrh	r2, [r2, #6]
 800effa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	88db      	ldrh	r3, [r3, #6]
 800f000:	2b07      	cmp	r3, #7
 800f002:	bf28      	it	cs
 800f004:	2307      	movcs	r3, #7
 800f006:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	89fa      	ldrh	r2, [r7, #14]
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f001 fae9 	bl	80105e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f014:	e085      	b.n	800f122 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	785a      	ldrb	r2, [r3, #1]
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	88db      	ldrh	r3, [r3, #6]
 800f024:	b2da      	uxtb	r2, r3
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f02c:	6939      	ldr	r1, [r7, #16]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	88db      	ldrh	r3, [r3, #6]
 800f032:	461a      	mov	r2, r3
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f001 fb02 	bl	801063e <USBD_CtlPrepareRx>
      break;
 800f03a:	e072      	b.n	800f122 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	683a      	ldr	r2, [r7, #0]
 800f046:	7850      	ldrb	r0, [r2, #1]
 800f048:	2200      	movs	r2, #0
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	4798      	blx	r3
      break;
 800f04e:	e068      	b.n	800f122 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	2b0b      	cmp	r3, #11
 800f056:	d852      	bhi.n	800f0fe <USBD_CDC_Setup+0x162>
 800f058:	a201      	add	r2, pc, #4	; (adr r2, 800f060 <USBD_CDC_Setup+0xc4>)
 800f05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05e:	bf00      	nop
 800f060:	0800f091 	.word	0x0800f091
 800f064:	0800f10d 	.word	0x0800f10d
 800f068:	0800f0ff 	.word	0x0800f0ff
 800f06c:	0800f0ff 	.word	0x0800f0ff
 800f070:	0800f0ff 	.word	0x0800f0ff
 800f074:	0800f0ff 	.word	0x0800f0ff
 800f078:	0800f0ff 	.word	0x0800f0ff
 800f07c:	0800f0ff 	.word	0x0800f0ff
 800f080:	0800f0ff 	.word	0x0800f0ff
 800f084:	0800f0ff 	.word	0x0800f0ff
 800f088:	0800f0bb 	.word	0x0800f0bb
 800f08c:	0800f0e5 	.word	0x0800f0e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b03      	cmp	r3, #3
 800f09a:	d107      	bne.n	800f0ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f09c:	f107 030a 	add.w	r3, r7, #10
 800f0a0:	2202      	movs	r2, #2
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f001 fa9e 	bl	80105e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0aa:	e032      	b.n	800f112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f0ac:	6839      	ldr	r1, [r7, #0]
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f001 fa28 	bl	8010504 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0b4:	2303      	movs	r3, #3
 800f0b6:	75fb      	strb	r3, [r7, #23]
          break;
 800f0b8:	e02b      	b.n	800f112 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	d107      	bne.n	800f0d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f0c6:	f107 030d 	add.w	r3, r7, #13
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f001 fa89 	bl	80105e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0d4:	e01d      	b.n	800f112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f001 fa13 	bl	8010504 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800f0e2:	e016      	b.n	800f112 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d00f      	beq.n	800f110 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f001 fa06 	bl	8010504 <USBD_CtlError>
            ret = USBD_FAIL;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f0fc:	e008      	b.n	800f110 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f001 f9ff 	bl	8010504 <USBD_CtlError>
          ret = USBD_FAIL;
 800f106:	2303      	movs	r3, #3
 800f108:	75fb      	strb	r3, [r7, #23]
          break;
 800f10a:	e002      	b.n	800f112 <USBD_CDC_Setup+0x176>
          break;
 800f10c:	bf00      	nop
 800f10e:	e008      	b.n	800f122 <USBD_CDC_Setup+0x186>
          break;
 800f110:	bf00      	nop
      }
      break;
 800f112:	e006      	b.n	800f122 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f114:	6839      	ldr	r1, [r7, #0]
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f001 f9f4 	bl	8010504 <USBD_CtlError>
      ret = USBD_FAIL;
 800f11c:	2303      	movs	r3, #3
 800f11e:	75fb      	strb	r3, [r7, #23]
      break;
 800f120:	bf00      	nop
  }

  return (uint8_t)ret;
 800f122:	7dfb      	ldrb	r3, [r7, #23]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3718      	adds	r7, #24
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	460b      	mov	r3, r1
 800f136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f13e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f146:	2b00      	cmp	r3, #0
 800f148:	d101      	bne.n	800f14e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f14a:	2303      	movs	r3, #3
 800f14c:	e04f      	b.n	800f1ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f154:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f156:	78fa      	ldrb	r2, [r7, #3]
 800f158:	6879      	ldr	r1, [r7, #4]
 800f15a:	4613      	mov	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	440b      	add	r3, r1
 800f164:	3318      	adds	r3, #24
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d029      	beq.n	800f1c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f16c:	78fa      	ldrb	r2, [r7, #3]
 800f16e:	6879      	ldr	r1, [r7, #4]
 800f170:	4613      	mov	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	440b      	add	r3, r1
 800f17a:	3318      	adds	r3, #24
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	78f9      	ldrb	r1, [r7, #3]
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	460b      	mov	r3, r1
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	1a5b      	subs	r3, r3, r1
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4403      	add	r3, r0
 800f18c:	3344      	adds	r3, #68	; 0x44
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	fbb2 f1f3 	udiv	r1, r2, r3
 800f194:	fb03 f301 	mul.w	r3, r3, r1
 800f198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d110      	bne.n	800f1c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f19e:	78fa      	ldrb	r2, [r7, #3]
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3318      	adds	r3, #24
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f1b2:	78f9      	ldrb	r1, [r7, #3]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f001 fef0 	bl	8010f9e <USBD_LL_Transmit>
 800f1be:	e015      	b.n	800f1ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00b      	beq.n	800f1ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1da:	691b      	ldr	r3, [r3, #16]
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f1e8:	78fa      	ldrb	r2, [r7, #3]
 800f1ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	460b      	mov	r3, r1
 800f200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f210:	2b00      	cmp	r3, #0
 800f212:	d101      	bne.n	800f218 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f214:	2303      	movs	r3, #3
 800f216:	e015      	b.n	800f244 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f218:	78fb      	ldrb	r3, [r7, #3]
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f001 ff00 	bl	8011022 <USBD_LL_GetRxDataSize>
 800f222:	4602      	mov	r2, r0
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f23e:	4611      	mov	r1, r2
 800f240:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f25a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f262:	2303      	movs	r3, #3
 800f264:	e01b      	b.n	800f29e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d015      	beq.n	800f29c <USBD_CDC_EP0_RxReady+0x50>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f276:	2bff      	cmp	r3, #255	; 0xff
 800f278:	d010      	beq.n	800f29c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f288:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f290:	b292      	uxth	r2, r2
 800f292:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	22ff      	movs	r2, #255	; 0xff
 800f298:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
	...

0800f2a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2243      	movs	r2, #67	; 0x43
 800f2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f2b6:	4b03      	ldr	r3, [pc, #12]	; (800f2c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	20000094 	.word	0x20000094

0800f2c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2243      	movs	r2, #67	; 0x43
 800f2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f2d6:	4b03      	ldr	r3, [pc, #12]	; (800f2e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	20000050 	.word	0x20000050

0800f2e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2243      	movs	r2, #67	; 0x43
 800f2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f2f6:	4b03      	ldr	r3, [pc, #12]	; (800f304 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	200000d8 	.word	0x200000d8

0800f308 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	220a      	movs	r2, #10
 800f314:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f316:	4b03      	ldr	r3, [pc, #12]	; (800f324 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr
 800f324:	2000000c 	.word	0x2000000c

0800f328 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f338:	2303      	movs	r3, #3
 800f33a:	e004      	b.n	800f346 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	370c      	adds	r7, #12
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr

0800f352 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f352:	b480      	push	{r7}
 800f354:	b087      	sub	sp, #28
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f364:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e008      	b.n	800f382 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	371c      	adds	r7, #28
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f38e:	b480      	push	{r7}
 800f390:	b085      	sub	sp, #20
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f39e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d101      	bne.n	800f3aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f3a6:	2303      	movs	r3, #3
 800f3a8:	e004      	b.n	800f3b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d101      	bne.n	800f3de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e016      	b.n	800f40c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	7c1b      	ldrb	r3, [r3, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d109      	bne.n	800f3fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3f0:	2101      	movs	r1, #1
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f001 fdf4 	bl	8010fe0 <USBD_LL_PrepareReceive>
 800f3f8:	e007      	b.n	800f40a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f400:	2340      	movs	r3, #64	; 0x40
 800f402:	2101      	movs	r1, #1
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f001 fdeb 	bl	8010fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	4613      	mov	r3, r2
 800f420:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d101      	bne.n	800f42c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f428:	2303      	movs	r3, #3
 800f42a:	e01f      	b.n	800f46c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2200      	movs	r2, #0
 800f438:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2200      	movs	r2, #0
 800f440:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	68ba      	ldr	r2, [r7, #8]
 800f44e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	79fa      	ldrb	r2, [r7, #7]
 800f45e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f001 fc67 	bl	8010d34 <USBD_LL_Init>
 800f466:	4603      	mov	r3, r0
 800f468:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f47e:	2300      	movs	r3, #0
 800f480:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f488:	2303      	movs	r3, #3
 800f48a:	e016      	b.n	800f4ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00b      	beq.n	800f4b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a8:	f107 020e 	add.w	r2, r7, #14
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f001 fc7e 	bl	8010dcc <USBD_LL_Start>
 800f4d0:	4603      	mov	r3, r0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b083      	sub	sp, #12
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f506:	2b00      	cmp	r3, #0
 800f508:	d009      	beq.n	800f51e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	78fa      	ldrb	r2, [r7, #3]
 800f514:	4611      	mov	r1, r2
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	4798      	blx	r3
 800f51a:	4603      	mov	r3, r0
 800f51c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d007      	beq.n	800f54e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	78fa      	ldrb	r2, [r7, #3]
 800f548:	4611      	mov	r1, r2
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	4798      	blx	r3
  }

  return USBD_OK;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 ff90 	bl	8010490 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f57e:	461a      	mov	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f58c:	f003 031f 	and.w	r3, r3, #31
 800f590:	2b02      	cmp	r3, #2
 800f592:	d01a      	beq.n	800f5ca <USBD_LL_SetupStage+0x72>
 800f594:	2b02      	cmp	r3, #2
 800f596:	d822      	bhi.n	800f5de <USBD_LL_SetupStage+0x86>
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <USBD_LL_SetupStage+0x4a>
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d00a      	beq.n	800f5b6 <USBD_LL_SetupStage+0x5e>
 800f5a0:	e01d      	b.n	800f5de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fa62 	bl	800fa74 <USBD_StdDevReq>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f5b4:	e020      	b.n	800f5f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fac6 	bl	800fb50 <USBD_StdItfReq>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f5c8:	e016      	b.n	800f5f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fb05 	bl	800fbe2 <USBD_StdEPReq>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	73fb      	strb	r3, [r7, #15]
      break;
 800f5dc:	e00c      	b.n	800f5f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f5e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f001 fc4d 	bl	8010e8c <USBD_LL_StallEP>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f6:	bf00      	nop
  }

  return ret;
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b086      	sub	sp, #24
 800f606:	af00      	add	r7, sp, #0
 800f608:	60f8      	str	r0, [r7, #12]
 800f60a:	460b      	mov	r3, r1
 800f60c:	607a      	str	r2, [r7, #4]
 800f60e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f610:	7afb      	ldrb	r3, [r7, #11]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d138      	bne.n	800f688 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f61c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f624:	2b03      	cmp	r3, #3
 800f626:	d14a      	bne.n	800f6be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	689a      	ldr	r2, [r3, #8]
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	429a      	cmp	r2, r3
 800f632:	d913      	bls.n	800f65c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	689a      	ldr	r2, [r3, #8]
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	1ad2      	subs	r2, r2, r3
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	68da      	ldr	r2, [r3, #12]
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bf28      	it	cs
 800f64e:	4613      	movcs	r3, r2
 800f650:	461a      	mov	r2, r3
 800f652:	6879      	ldr	r1, [r7, #4]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f001 f80f 	bl	8010678 <USBD_CtlContinueRx>
 800f65a:	e030      	b.n	800f6be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f662:	b2db      	uxtb	r3, r3
 800f664:	2b03      	cmp	r3, #3
 800f666:	d10b      	bne.n	800f680 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d005      	beq.n	800f680 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f001 f80a 	bl	801069a <USBD_CtlSendStatus>
 800f686:	e01a      	b.n	800f6be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b03      	cmp	r3, #3
 800f692:	d114      	bne.n	800f6be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f69a:	699b      	ldr	r3, [r3, #24]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00e      	beq.n	800f6be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6a6:	699b      	ldr	r3, [r3, #24]
 800f6a8:	7afa      	ldrb	r2, [r7, #11]
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	4798      	blx	r3
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f6b4:	7dfb      	ldrb	r3, [r7, #23]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f6ba:	7dfb      	ldrb	r3, [r7, #23]
 800f6bc:	e000      	b.n	800f6c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f6d6:	7afb      	ldrb	r3, [r7, #11]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d16b      	bne.n	800f7b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	3314      	adds	r3, #20
 800f6e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d156      	bne.n	800f79a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	689a      	ldr	r2, [r3, #8]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d914      	bls.n	800f722 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	689a      	ldr	r2, [r3, #8]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	1ad2      	subs	r2, r2, r3
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	689b      	ldr	r3, [r3, #8]
 800f70a:	461a      	mov	r2, r3
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f000 ff84 	bl	801061c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f714:	2300      	movs	r3, #0
 800f716:	2200      	movs	r2, #0
 800f718:	2100      	movs	r1, #0
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f001 fc60 	bl	8010fe0 <USBD_LL_PrepareReceive>
 800f720:	e03b      	b.n	800f79a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	68da      	ldr	r2, [r3, #12]
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d11c      	bne.n	800f768 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	685a      	ldr	r2, [r3, #4]
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f736:	429a      	cmp	r2, r3
 800f738:	d316      	bcc.n	800f768 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f744:	429a      	cmp	r2, r3
 800f746:	d20f      	bcs.n	800f768 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f748:	2200      	movs	r2, #0
 800f74a:	2100      	movs	r1, #0
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 ff65 	bl	801061c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2200      	movs	r2, #0
 800f756:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f75a:	2300      	movs	r3, #0
 800f75c:	2200      	movs	r2, #0
 800f75e:	2100      	movs	r1, #0
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f001 fc3d 	bl	8010fe0 <USBD_LL_PrepareReceive>
 800f766:	e018      	b.n	800f79a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	2b03      	cmp	r3, #3
 800f772:	d10b      	bne.n	800f78c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d005      	beq.n	800f78c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f78c:	2180      	movs	r1, #128	; 0x80
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f001 fb7c 	bl	8010e8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f000 ff93 	bl	80106c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	d122      	bne.n	800f7ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f7ff fe98 	bl	800f4da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f7b2:	e01a      	b.n	800f7ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	d114      	bne.n	800f7ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7c6:	695b      	ldr	r3, [r3, #20]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00e      	beq.n	800f7ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	7afa      	ldrb	r2, [r7, #11]
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	4798      	blx	r3
 800f7dc:	4603      	mov	r3, r0
 800f7de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	e000      	b.n	800f7ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f824:	2303      	movs	r3, #3
 800f826:	e02f      	b.n	800f888 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00f      	beq.n	800f852 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d009      	beq.n	800f852 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	6852      	ldr	r2, [r2, #4]
 800f84a:	b2d2      	uxtb	r2, r2
 800f84c:	4611      	mov	r1, r2
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f852:	2340      	movs	r3, #64	; 0x40
 800f854:	2200      	movs	r2, #0
 800f856:	2100      	movs	r1, #0
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 fad2 	bl	8010e02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2201      	movs	r2, #1
 800f862:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2240      	movs	r2, #64	; 0x40
 800f86a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f86e:	2340      	movs	r3, #64	; 0x40
 800f870:	2200      	movs	r2, #0
 800f872:	2180      	movs	r1, #128	; 0x80
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f001 fac4 	bl	8010e02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2201      	movs	r2, #1
 800f87e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2240      	movs	r2, #64	; 0x40
 800f884:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	78fa      	ldrb	r2, [r7, #3]
 800f8a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2204      	movs	r2, #4
 800f8ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d106      	bne.n	800f8fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d101      	bne.n	800f922 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f91e:	2303      	movs	r3, #3
 800f920:	e012      	b.n	800f948 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b03      	cmp	r3, #3
 800f92c:	d10b      	bne.n	800f946 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f934:	69db      	ldr	r3, [r3, #28]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d005      	beq.n	800f946 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f966:	2303      	movs	r3, #3
 800f968:	e014      	b.n	800f994 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f970:	b2db      	uxtb	r3, r3
 800f972:	2b03      	cmp	r3, #3
 800f974:	d10d      	bne.n	800f992 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d007      	beq.n	800f992 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f988:	6a1b      	ldr	r3, [r3, #32]
 800f98a:	78fa      	ldrb	r2, [r7, #3]
 800f98c:	4611      	mov	r1, r2
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e014      	b.n	800f9e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b03      	cmp	r3, #3
 800f9c0:	d10d      	bne.n	800f9de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d007      	beq.n	800f9de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d6:	78fa      	ldrb	r2, [r7, #3]
 800f9d8:	4611      	mov	r1, r2
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b082      	sub	sp, #8
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d009      	beq.n	800fa2c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	6852      	ldr	r2, [r2, #4]
 800fa24:	b2d2      	uxtb	r2, r2
 800fa26:	4611      	mov	r1, r2
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	4798      	blx	r3
  }

  return USBD_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fa36:	b480      	push	{r7}
 800fa38:	b087      	sub	sp, #28
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fa54:	8a3b      	ldrh	r3, [r7, #16]
 800fa56:	021b      	lsls	r3, r3, #8
 800fa58:	b21a      	sxth	r2, r3
 800fa5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	b21b      	sxth	r3, r3
 800fa62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fa64:	89fb      	ldrh	r3, [r7, #14]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	371c      	adds	r7, #28
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
	...

0800fa74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa8a:	2b40      	cmp	r3, #64	; 0x40
 800fa8c:	d005      	beq.n	800fa9a <USBD_StdDevReq+0x26>
 800fa8e:	2b40      	cmp	r3, #64	; 0x40
 800fa90:	d853      	bhi.n	800fb3a <USBD_StdDevReq+0xc6>
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00b      	beq.n	800faae <USBD_StdDevReq+0x3a>
 800fa96:	2b20      	cmp	r3, #32
 800fa98:	d14f      	bne.n	800fb3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	6839      	ldr	r1, [r7, #0]
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	4798      	blx	r3
 800faa8:	4603      	mov	r3, r0
 800faaa:	73fb      	strb	r3, [r7, #15]
      break;
 800faac:	e04a      	b.n	800fb44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	785b      	ldrb	r3, [r3, #1]
 800fab2:	2b09      	cmp	r3, #9
 800fab4:	d83b      	bhi.n	800fb2e <USBD_StdDevReq+0xba>
 800fab6:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <USBD_StdDevReq+0x48>)
 800fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabc:	0800fb11 	.word	0x0800fb11
 800fac0:	0800fb25 	.word	0x0800fb25
 800fac4:	0800fb2f 	.word	0x0800fb2f
 800fac8:	0800fb1b 	.word	0x0800fb1b
 800facc:	0800fb2f 	.word	0x0800fb2f
 800fad0:	0800faef 	.word	0x0800faef
 800fad4:	0800fae5 	.word	0x0800fae5
 800fad8:	0800fb2f 	.word	0x0800fb2f
 800fadc:	0800fb07 	.word	0x0800fb07
 800fae0:	0800faf9 	.word	0x0800faf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 f9de 	bl	800fea8 <USBD_GetDescriptor>
          break;
 800faec:	e024      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800faee:	6839      	ldr	r1, [r7, #0]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fb43 	bl	801017c <USBD_SetAddress>
          break;
 800faf6:	e01f      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800faf8:	6839      	ldr	r1, [r7, #0]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fb82 	bl	8010204 <USBD_SetConfig>
 800fb00:	4603      	mov	r3, r0
 800fb02:	73fb      	strb	r3, [r7, #15]
          break;
 800fb04:	e018      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 fc21 	bl	8010350 <USBD_GetConfig>
          break;
 800fb0e:	e013      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 fc52 	bl	80103bc <USBD_GetStatus>
          break;
 800fb18:	e00e      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fc81 	bl	8010424 <USBD_SetFeature>
          break;
 800fb22:	e009      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fb24:	6839      	ldr	r1, [r7, #0]
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fc90 	bl	801044c <USBD_ClrFeature>
          break;
 800fb2c:	e004      	b.n	800fb38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fce7 	bl	8010504 <USBD_CtlError>
          break;
 800fb36:	bf00      	nop
      }
      break;
 800fb38:	e004      	b.n	800fb44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fce1 	bl	8010504 <USBD_CtlError>
      break;
 800fb42:	bf00      	nop
  }

  return ret;
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3710      	adds	r7, #16
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop

0800fb50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb66:	2b40      	cmp	r3, #64	; 0x40
 800fb68:	d005      	beq.n	800fb76 <USBD_StdItfReq+0x26>
 800fb6a:	2b40      	cmp	r3, #64	; 0x40
 800fb6c:	d82f      	bhi.n	800fbce <USBD_StdItfReq+0x7e>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <USBD_StdItfReq+0x26>
 800fb72:	2b20      	cmp	r3, #32
 800fb74:	d12b      	bne.n	800fbce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	d81d      	bhi.n	800fbc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	889b      	ldrh	r3, [r3, #4]
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d813      	bhi.n	800fbb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	6839      	ldr	r1, [r7, #0]
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	4798      	blx	r3
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	88db      	ldrh	r3, [r3, #6]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d110      	bne.n	800fbca <USBD_StdItfReq+0x7a>
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10d      	bne.n	800fbca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fd73 	bl	801069a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fbb4:	e009      	b.n	800fbca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 fca3 	bl	8010504 <USBD_CtlError>
          break;
 800fbbe:	e004      	b.n	800fbca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fc9e 	bl	8010504 <USBD_CtlError>
          break;
 800fbc8:	e000      	b.n	800fbcc <USBD_StdItfReq+0x7c>
          break;
 800fbca:	bf00      	nop
      }
      break;
 800fbcc:	e004      	b.n	800fbd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fc97 	bl	8010504 <USBD_CtlError>
      break;
 800fbd6:	bf00      	nop
  }

  return ret;
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbec:	2300      	movs	r3, #0
 800fbee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	889b      	ldrh	r3, [r3, #4]
 800fbf4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbfe:	2b40      	cmp	r3, #64	; 0x40
 800fc00:	d007      	beq.n	800fc12 <USBD_StdEPReq+0x30>
 800fc02:	2b40      	cmp	r3, #64	; 0x40
 800fc04:	f200 8145 	bhi.w	800fe92 <USBD_StdEPReq+0x2b0>
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00c      	beq.n	800fc26 <USBD_StdEPReq+0x44>
 800fc0c:	2b20      	cmp	r3, #32
 800fc0e:	f040 8140 	bne.w	800fe92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	6839      	ldr	r1, [r7, #0]
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	4798      	blx	r3
 800fc20:	4603      	mov	r3, r0
 800fc22:	73fb      	strb	r3, [r7, #15]
      break;
 800fc24:	e13a      	b.n	800fe9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	785b      	ldrb	r3, [r3, #1]
 800fc2a:	2b03      	cmp	r3, #3
 800fc2c:	d007      	beq.n	800fc3e <USBD_StdEPReq+0x5c>
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	f300 8129 	bgt.w	800fe86 <USBD_StdEPReq+0x2a4>
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d07f      	beq.n	800fd38 <USBD_StdEPReq+0x156>
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d03c      	beq.n	800fcb6 <USBD_StdEPReq+0xd4>
 800fc3c:	e123      	b.n	800fe86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d002      	beq.n	800fc50 <USBD_StdEPReq+0x6e>
 800fc4a:	2b03      	cmp	r3, #3
 800fc4c:	d016      	beq.n	800fc7c <USBD_StdEPReq+0x9a>
 800fc4e:	e02c      	b.n	800fcaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc50:	7bbb      	ldrb	r3, [r7, #14]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00d      	beq.n	800fc72 <USBD_StdEPReq+0x90>
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
 800fc58:	2b80      	cmp	r3, #128	; 0x80
 800fc5a:	d00a      	beq.n	800fc72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc5c:	7bbb      	ldrb	r3, [r7, #14]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f001 f913 	bl	8010e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc66:	2180      	movs	r1, #128	; 0x80
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f001 f90f 	bl	8010e8c <USBD_LL_StallEP>
 800fc6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc70:	e020      	b.n	800fcb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fc72:	6839      	ldr	r1, [r7, #0]
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 fc45 	bl	8010504 <USBD_CtlError>
              break;
 800fc7a:	e01b      	b.n	800fcb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	885b      	ldrh	r3, [r3, #2]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10e      	bne.n	800fca2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc84:	7bbb      	ldrb	r3, [r7, #14]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00b      	beq.n	800fca2 <USBD_StdEPReq+0xc0>
 800fc8a:	7bbb      	ldrb	r3, [r7, #14]
 800fc8c:	2b80      	cmp	r3, #128	; 0x80
 800fc8e:	d008      	beq.n	800fca2 <USBD_StdEPReq+0xc0>
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	88db      	ldrh	r3, [r3, #6]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d104      	bne.n	800fca2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc98:	7bbb      	ldrb	r3, [r7, #14]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f001 f8f5 	bl	8010e8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 fcf9 	bl	801069a <USBD_CtlSendStatus>

              break;
 800fca8:	e004      	b.n	800fcb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fcaa:	6839      	ldr	r1, [r7, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fc29 	bl	8010504 <USBD_CtlError>
              break;
 800fcb2:	bf00      	nop
          }
          break;
 800fcb4:	e0ec      	b.n	800fe90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b02      	cmp	r3, #2
 800fcc0:	d002      	beq.n	800fcc8 <USBD_StdEPReq+0xe6>
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d016      	beq.n	800fcf4 <USBD_StdEPReq+0x112>
 800fcc6:	e030      	b.n	800fd2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d00d      	beq.n	800fcea <USBD_StdEPReq+0x108>
 800fcce:	7bbb      	ldrb	r3, [r7, #14]
 800fcd0:	2b80      	cmp	r3, #128	; 0x80
 800fcd2:	d00a      	beq.n	800fcea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcd4:	7bbb      	ldrb	r3, [r7, #14]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f001 f8d7 	bl	8010e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcde:	2180      	movs	r1, #128	; 0x80
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 f8d3 	bl	8010e8c <USBD_LL_StallEP>
 800fce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fce8:	e025      	b.n	800fd36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fcea:	6839      	ldr	r1, [r7, #0]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 fc09 	bl	8010504 <USBD_CtlError>
              break;
 800fcf2:	e020      	b.n	800fd36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	885b      	ldrh	r3, [r3, #2]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d11b      	bne.n	800fd34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcfc:	7bbb      	ldrb	r3, [r7, #14]
 800fcfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d004      	beq.n	800fd10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f001 f8dd 	bl	8010eca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fcc2 	bl	801069a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	4798      	blx	r3
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fd28:	e004      	b.n	800fd34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fbe9 	bl	8010504 <USBD_CtlError>
              break;
 800fd32:	e000      	b.n	800fd36 <USBD_StdEPReq+0x154>
              break;
 800fd34:	bf00      	nop
          }
          break;
 800fd36:	e0ab      	b.n	800fe90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b02      	cmp	r3, #2
 800fd42:	d002      	beq.n	800fd4a <USBD_StdEPReq+0x168>
 800fd44:	2b03      	cmp	r3, #3
 800fd46:	d032      	beq.n	800fdae <USBD_StdEPReq+0x1cc>
 800fd48:	e097      	b.n	800fe7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd4a:	7bbb      	ldrb	r3, [r7, #14]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d007      	beq.n	800fd60 <USBD_StdEPReq+0x17e>
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
 800fd52:	2b80      	cmp	r3, #128	; 0x80
 800fd54:	d004      	beq.n	800fd60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 fbd3 	bl	8010504 <USBD_CtlError>
                break;
 800fd5e:	e091      	b.n	800fe84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	da0b      	bge.n	800fd80 <USBD_StdEPReq+0x19e>
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd6e:	4613      	mov	r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4413      	add	r3, r2
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	3310      	adds	r3, #16
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	3304      	adds	r3, #4
 800fd7e:	e00b      	b.n	800fd98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd80:	7bbb      	ldrb	r3, [r7, #14]
 800fd82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd86:	4613      	mov	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	4413      	add	r3, r2
 800fd96:	3304      	adds	r3, #4
 800fd98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2202      	movs	r2, #2
 800fda4:	4619      	mov	r1, r3
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fc1d 	bl	80105e6 <USBD_CtlSendData>
              break;
 800fdac:	e06a      	b.n	800fe84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fdae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	da11      	bge.n	800fdda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fdb6:	7bbb      	ldrb	r3, [r7, #14]
 800fdb8:	f003 020f 	and.w	r2, r3, #15
 800fdbc:	6879      	ldr	r1, [r7, #4]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	440b      	add	r3, r1
 800fdc8:	3324      	adds	r3, #36	; 0x24
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d117      	bne.n	800fe00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fb96 	bl	8010504 <USBD_CtlError>
                  break;
 800fdd8:	e054      	b.n	800fe84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fdda:	7bbb      	ldrb	r3, [r7, #14]
 800fddc:	f003 020f 	and.w	r2, r3, #15
 800fde0:	6879      	ldr	r1, [r7, #4]
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d104      	bne.n	800fe00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fdf6:	6839      	ldr	r1, [r7, #0]
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fb83 	bl	8010504 <USBD_CtlError>
                  break;
 800fdfe:	e041      	b.n	800fe84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	da0b      	bge.n	800fe20 <USBD_StdEPReq+0x23e>
 800fe08:	7bbb      	ldrb	r3, [r7, #14]
 800fe0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe0e:	4613      	mov	r3, r2
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	4413      	add	r3, r2
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	3310      	adds	r3, #16
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	3304      	adds	r3, #4
 800fe1e:	e00b      	b.n	800fe38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fe20:	7bbb      	ldrb	r3, [r7, #14]
 800fe22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe26:	4613      	mov	r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	4413      	add	r3, r2
 800fe36:	3304      	adds	r3, #4
 800fe38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe3a:	7bbb      	ldrb	r3, [r7, #14]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <USBD_StdEPReq+0x264>
 800fe40:	7bbb      	ldrb	r3, [r7, #14]
 800fe42:	2b80      	cmp	r3, #128	; 0x80
 800fe44:	d103      	bne.n	800fe4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	601a      	str	r2, [r3, #0]
 800fe4c:	e00e      	b.n	800fe6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe4e:	7bbb      	ldrb	r3, [r7, #14]
 800fe50:	4619      	mov	r1, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f001 f858 	bl	8010f08 <USBD_LL_IsStallEP>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2201      	movs	r2, #1
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	e002      	b.n	800fe6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	4619      	mov	r1, r3
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fbb7 	bl	80105e6 <USBD_CtlSendData>
              break;
 800fe78:	e004      	b.n	800fe84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fe7a:	6839      	ldr	r1, [r7, #0]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fb41 	bl	8010504 <USBD_CtlError>
              break;
 800fe82:	bf00      	nop
          }
          break;
 800fe84:	e004      	b.n	800fe90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fb3b 	bl	8010504 <USBD_CtlError>
          break;
 800fe8e:	bf00      	nop
      }
      break;
 800fe90:	e004      	b.n	800fe9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fe92:	6839      	ldr	r1, [r7, #0]
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 fb35 	bl	8010504 <USBD_CtlError>
      break;
 800fe9a:	bf00      	nop
  }

  return ret;
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800feb2:	2300      	movs	r3, #0
 800feb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800feba:	2300      	movs	r3, #0
 800febc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	885b      	ldrh	r3, [r3, #2]
 800fec2:	0a1b      	lsrs	r3, r3, #8
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	3b01      	subs	r3, #1
 800fec8:	2b06      	cmp	r3, #6
 800feca:	f200 8128 	bhi.w	801011e <USBD_GetDescriptor+0x276>
 800fece:	a201      	add	r2, pc, #4	; (adr r2, 800fed4 <USBD_GetDescriptor+0x2c>)
 800fed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed4:	0800fef1 	.word	0x0800fef1
 800fed8:	0800ff09 	.word	0x0800ff09
 800fedc:	0800ff49 	.word	0x0800ff49
 800fee0:	0801011f 	.word	0x0801011f
 800fee4:	0801011f 	.word	0x0801011f
 800fee8:	080100bf 	.word	0x080100bf
 800feec:	080100eb 	.word	0x080100eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	7c12      	ldrb	r2, [r2, #16]
 800fefc:	f107 0108 	add.w	r1, r7, #8
 800ff00:	4610      	mov	r0, r2
 800ff02:	4798      	blx	r3
 800ff04:	60f8      	str	r0, [r7, #12]
      break;
 800ff06:	e112      	b.n	801012e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	7c1b      	ldrb	r3, [r3, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10d      	bne.n	800ff2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff18:	f107 0208 	add.w	r2, r7, #8
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	4798      	blx	r3
 800ff20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3301      	adds	r3, #1
 800ff26:	2202      	movs	r2, #2
 800ff28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ff2a:	e100      	b.n	801012e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff34:	f107 0208 	add.w	r2, r7, #8
 800ff38:	4610      	mov	r0, r2
 800ff3a:	4798      	blx	r3
 800ff3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3301      	adds	r3, #1
 800ff42:	2202      	movs	r2, #2
 800ff44:	701a      	strb	r2, [r3, #0]
      break;
 800ff46:	e0f2      	b.n	801012e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	885b      	ldrh	r3, [r3, #2]
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b05      	cmp	r3, #5
 800ff50:	f200 80ac 	bhi.w	80100ac <USBD_GetDescriptor+0x204>
 800ff54:	a201      	add	r2, pc, #4	; (adr r2, 800ff5c <USBD_GetDescriptor+0xb4>)
 800ff56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5a:	bf00      	nop
 800ff5c:	0800ff75 	.word	0x0800ff75
 800ff60:	0800ffa9 	.word	0x0800ffa9
 800ff64:	0800ffdd 	.word	0x0800ffdd
 800ff68:	08010011 	.word	0x08010011
 800ff6c:	08010045 	.word	0x08010045
 800ff70:	08010079 	.word	0x08010079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00b      	beq.n	800ff98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	7c12      	ldrb	r2, [r2, #16]
 800ff8c:	f107 0108 	add.w	r1, r7, #8
 800ff90:	4610      	mov	r0, r2
 800ff92:	4798      	blx	r3
 800ff94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff96:	e091      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff98:	6839      	ldr	r1, [r7, #0]
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f000 fab2 	bl	8010504 <USBD_CtlError>
            err++;
 800ffa0:	7afb      	ldrb	r3, [r7, #11]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	72fb      	strb	r3, [r7, #11]
          break;
 800ffa6:	e089      	b.n	80100bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00b      	beq.n	800ffcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	7c12      	ldrb	r2, [r2, #16]
 800ffc0:	f107 0108 	add.w	r1, r7, #8
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	4798      	blx	r3
 800ffc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffca:	e077      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ffcc:	6839      	ldr	r1, [r7, #0]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fa98 	bl	8010504 <USBD_CtlError>
            err++;
 800ffd4:	7afb      	ldrb	r3, [r7, #11]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ffda:	e06f      	b.n	80100bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00b      	beq.n	8010000 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	7c12      	ldrb	r2, [r2, #16]
 800fff4:	f107 0108 	add.w	r1, r7, #8
 800fff8:	4610      	mov	r0, r2
 800fffa:	4798      	blx	r3
 800fffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fffe:	e05d      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fa7e 	bl	8010504 <USBD_CtlError>
            err++;
 8010008:	7afb      	ldrb	r3, [r7, #11]
 801000a:	3301      	adds	r3, #1
 801000c:	72fb      	strb	r3, [r7, #11]
          break;
 801000e:	e055      	b.n	80100bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00b      	beq.n	8010034 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	7c12      	ldrb	r2, [r2, #16]
 8010028:	f107 0108 	add.w	r1, r7, #8
 801002c:	4610      	mov	r0, r2
 801002e:	4798      	blx	r3
 8010030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010032:	e043      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 fa64 	bl	8010504 <USBD_CtlError>
            err++;
 801003c:	7afb      	ldrb	r3, [r7, #11]
 801003e:	3301      	adds	r3, #1
 8010040:	72fb      	strb	r3, [r7, #11]
          break;
 8010042:	e03b      	b.n	80100bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801004a:	695b      	ldr	r3, [r3, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00b      	beq.n	8010068 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	7c12      	ldrb	r2, [r2, #16]
 801005c:	f107 0108 	add.w	r1, r7, #8
 8010060:	4610      	mov	r0, r2
 8010062:	4798      	blx	r3
 8010064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010066:	e029      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fa4a 	bl	8010504 <USBD_CtlError>
            err++;
 8010070:	7afb      	ldrb	r3, [r7, #11]
 8010072:	3301      	adds	r3, #1
 8010074:	72fb      	strb	r3, [r7, #11]
          break;
 8010076:	e021      	b.n	80100bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801007e:	699b      	ldr	r3, [r3, #24]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00b      	beq.n	801009c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	7c12      	ldrb	r2, [r2, #16]
 8010090:	f107 0108 	add.w	r1, r7, #8
 8010094:	4610      	mov	r0, r2
 8010096:	4798      	blx	r3
 8010098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801009a:	e00f      	b.n	80100bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801009c:	6839      	ldr	r1, [r7, #0]
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fa30 	bl	8010504 <USBD_CtlError>
            err++;
 80100a4:	7afb      	ldrb	r3, [r7, #11]
 80100a6:	3301      	adds	r3, #1
 80100a8:	72fb      	strb	r3, [r7, #11]
          break;
 80100aa:	e007      	b.n	80100bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 fa28 	bl	8010504 <USBD_CtlError>
          err++;
 80100b4:	7afb      	ldrb	r3, [r7, #11]
 80100b6:	3301      	adds	r3, #1
 80100b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80100ba:	bf00      	nop
      }
      break;
 80100bc:	e037      	b.n	801012e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	7c1b      	ldrb	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d109      	bne.n	80100da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100ce:	f107 0208 	add.w	r2, r7, #8
 80100d2:	4610      	mov	r0, r2
 80100d4:	4798      	blx	r3
 80100d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100d8:	e029      	b.n	801012e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 fa11 	bl	8010504 <USBD_CtlError>
        err++;
 80100e2:	7afb      	ldrb	r3, [r7, #11]
 80100e4:	3301      	adds	r3, #1
 80100e6:	72fb      	strb	r3, [r7, #11]
      break;
 80100e8:	e021      	b.n	801012e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7c1b      	ldrb	r3, [r3, #16]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10d      	bne.n	801010e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100fa:	f107 0208 	add.w	r2, r7, #8
 80100fe:	4610      	mov	r0, r2
 8010100:	4798      	blx	r3
 8010102:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	3301      	adds	r3, #1
 8010108:	2207      	movs	r2, #7
 801010a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801010c:	e00f      	b.n	801012e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f9f7 	bl	8010504 <USBD_CtlError>
        err++;
 8010116:	7afb      	ldrb	r3, [r7, #11]
 8010118:	3301      	adds	r3, #1
 801011a:	72fb      	strb	r3, [r7, #11]
      break;
 801011c:	e007      	b.n	801012e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f000 f9ef 	bl	8010504 <USBD_CtlError>
      err++;
 8010126:	7afb      	ldrb	r3, [r7, #11]
 8010128:	3301      	adds	r3, #1
 801012a:	72fb      	strb	r3, [r7, #11]
      break;
 801012c:	bf00      	nop
  }

  if (err != 0U)
 801012e:	7afb      	ldrb	r3, [r7, #11]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d11e      	bne.n	8010172 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	88db      	ldrh	r3, [r3, #6]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d016      	beq.n	801016a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801013c:	893b      	ldrh	r3, [r7, #8]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00e      	beq.n	8010160 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	88da      	ldrh	r2, [r3, #6]
 8010146:	893b      	ldrh	r3, [r7, #8]
 8010148:	4293      	cmp	r3, r2
 801014a:	bf28      	it	cs
 801014c:	4613      	movcs	r3, r2
 801014e:	b29b      	uxth	r3, r3
 8010150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010152:	893b      	ldrh	r3, [r7, #8]
 8010154:	461a      	mov	r2, r3
 8010156:	68f9      	ldr	r1, [r7, #12]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 fa44 	bl	80105e6 <USBD_CtlSendData>
 801015e:	e009      	b.n	8010174 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010160:	6839      	ldr	r1, [r7, #0]
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 f9ce 	bl	8010504 <USBD_CtlError>
 8010168:	e004      	b.n	8010174 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fa95 	bl	801069a <USBD_CtlSendStatus>
 8010170:	e000      	b.n	8010174 <USBD_GetDescriptor+0x2cc>
    return;
 8010172:	bf00      	nop
  }
}
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop

0801017c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	889b      	ldrh	r3, [r3, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d131      	bne.n	80101f2 <USBD_SetAddress+0x76>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	88db      	ldrh	r3, [r3, #6]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d12d      	bne.n	80101f2 <USBD_SetAddress+0x76>
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	885b      	ldrh	r3, [r3, #2]
 801019a:	2b7f      	cmp	r3, #127	; 0x7f
 801019c:	d829      	bhi.n	80101f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	885b      	ldrh	r3, [r3, #2]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d104      	bne.n	80101c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f9a3 	bl	8010504 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101be:	e01d      	b.n	80101fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	7bfa      	ldrb	r2, [r7, #15]
 80101c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	4619      	mov	r1, r3
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 fec7 	bl	8010f60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fa61 	bl	801069a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d004      	beq.n	80101e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2202      	movs	r2, #2
 80101e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101e6:	e009      	b.n	80101fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2201      	movs	r2, #1
 80101ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101f0:	e004      	b.n	80101fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80101f2:	6839      	ldr	r1, [r7, #0]
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f985 	bl	8010504 <USBD_CtlError>
  }
}
 80101fa:	bf00      	nop
 80101fc:	bf00      	nop
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801020e:	2300      	movs	r3, #0
 8010210:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	885b      	ldrh	r3, [r3, #2]
 8010216:	b2da      	uxtb	r2, r3
 8010218:	4b4c      	ldr	r3, [pc, #304]	; (801034c <USBD_SetConfig+0x148>)
 801021a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801021c:	4b4b      	ldr	r3, [pc, #300]	; (801034c <USBD_SetConfig+0x148>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d905      	bls.n	8010230 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010224:	6839      	ldr	r1, [r7, #0]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f96c 	bl	8010504 <USBD_CtlError>
    return USBD_FAIL;
 801022c:	2303      	movs	r3, #3
 801022e:	e088      	b.n	8010342 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010236:	b2db      	uxtb	r3, r3
 8010238:	2b02      	cmp	r3, #2
 801023a:	d002      	beq.n	8010242 <USBD_SetConfig+0x3e>
 801023c:	2b03      	cmp	r3, #3
 801023e:	d025      	beq.n	801028c <USBD_SetConfig+0x88>
 8010240:	e071      	b.n	8010326 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010242:	4b42      	ldr	r3, [pc, #264]	; (801034c <USBD_SetConfig+0x148>)
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d01c      	beq.n	8010284 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801024a:	4b40      	ldr	r3, [pc, #256]	; (801034c <USBD_SetConfig+0x148>)
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	461a      	mov	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010254:	4b3d      	ldr	r3, [pc, #244]	; (801034c <USBD_SetConfig+0x148>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7ff f948 	bl	800f4f0 <USBD_SetClassConfig>
 8010260:	4603      	mov	r3, r0
 8010262:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010264:	7bfb      	ldrb	r3, [r7, #15]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d004      	beq.n	8010274 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f949 	bl	8010504 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010272:	e065      	b.n	8010340 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 fa10 	bl	801069a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2203      	movs	r2, #3
 801027e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010282:	e05d      	b.n	8010340 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fa08 	bl	801069a <USBD_CtlSendStatus>
      break;
 801028a:	e059      	b.n	8010340 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801028c:	4b2f      	ldr	r3, [pc, #188]	; (801034c <USBD_SetConfig+0x148>)
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d112      	bne.n	80102ba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2202      	movs	r2, #2
 8010298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801029c:	4b2b      	ldr	r3, [pc, #172]	; (801034c <USBD_SetConfig+0x148>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	461a      	mov	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102a6:	4b29      	ldr	r3, [pc, #164]	; (801034c <USBD_SetConfig+0x148>)
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	4619      	mov	r1, r3
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff f93b 	bl	800f528 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f9f1 	bl	801069a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80102b8:	e042      	b.n	8010340 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80102ba:	4b24      	ldr	r3, [pc, #144]	; (801034c <USBD_SetConfig+0x148>)
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	461a      	mov	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d02a      	beq.n	801031e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	4619      	mov	r1, r3
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff f929 	bl	800f528 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80102d6:	4b1d      	ldr	r3, [pc, #116]	; (801034c <USBD_SetConfig+0x148>)
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80102e0:	4b1a      	ldr	r3, [pc, #104]	; (801034c <USBD_SetConfig+0x148>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	4619      	mov	r1, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff f902 	bl	800f4f0 <USBD_SetClassConfig>
 80102ec:	4603      	mov	r3, r0
 80102ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80102f0:	7bfb      	ldrb	r3, [r7, #15]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00f      	beq.n	8010316 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f903 	bl	8010504 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	b2db      	uxtb	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff f90e 	bl	800f528 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2202      	movs	r2, #2
 8010310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010314:	e014      	b.n	8010340 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f9bf 	bl	801069a <USBD_CtlSendStatus>
      break;
 801031c:	e010      	b.n	8010340 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f9bb 	bl	801069a <USBD_CtlSendStatus>
      break;
 8010324:	e00c      	b.n	8010340 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 f8eb 	bl	8010504 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801032e:	4b07      	ldr	r3, [pc, #28]	; (801034c <USBD_SetConfig+0x148>)
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff f8f7 	bl	800f528 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801033a:	2303      	movs	r3, #3
 801033c:	73fb      	strb	r3, [r7, #15]
      break;
 801033e:	bf00      	nop
  }

  return ret;
 8010340:	7bfb      	ldrb	r3, [r7, #15]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	2000025c 	.word	0x2000025c

08010350 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	88db      	ldrh	r3, [r3, #6]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d004      	beq.n	801036c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f8cd 	bl	8010504 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801036a:	e023      	b.n	80103b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010372:	b2db      	uxtb	r3, r3
 8010374:	2b02      	cmp	r3, #2
 8010376:	dc02      	bgt.n	801037e <USBD_GetConfig+0x2e>
 8010378:	2b00      	cmp	r3, #0
 801037a:	dc03      	bgt.n	8010384 <USBD_GetConfig+0x34>
 801037c:	e015      	b.n	80103aa <USBD_GetConfig+0x5a>
 801037e:	2b03      	cmp	r3, #3
 8010380:	d00b      	beq.n	801039a <USBD_GetConfig+0x4a>
 8010382:	e012      	b.n	80103aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	3308      	adds	r3, #8
 801038e:	2201      	movs	r2, #1
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 f927 	bl	80105e6 <USBD_CtlSendData>
        break;
 8010398:	e00c      	b.n	80103b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	3304      	adds	r3, #4
 801039e:	2201      	movs	r2, #1
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f91f 	bl	80105e6 <USBD_CtlSendData>
        break;
 80103a8:	e004      	b.n	80103b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80103aa:	6839      	ldr	r1, [r7, #0]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f8a9 	bl	8010504 <USBD_CtlError>
        break;
 80103b2:	bf00      	nop
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	3b01      	subs	r3, #1
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d81e      	bhi.n	8010412 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	88db      	ldrh	r3, [r3, #6]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d004      	beq.n	80103e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80103dc:	6839      	ldr	r1, [r7, #0]
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f890 	bl	8010504 <USBD_CtlError>
        break;
 80103e4:	e01a      	b.n	801041c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d005      	beq.n	8010402 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	f043 0202 	orr.w	r2, r3, #2
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	330c      	adds	r3, #12
 8010406:	2202      	movs	r2, #2
 8010408:	4619      	mov	r1, r3
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 f8eb 	bl	80105e6 <USBD_CtlSendData>
      break;
 8010410:	e004      	b.n	801041c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010412:	6839      	ldr	r1, [r7, #0]
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 f875 	bl	8010504 <USBD_CtlError>
      break;
 801041a:	bf00      	nop
  }
}
 801041c:	bf00      	nop
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	885b      	ldrh	r3, [r3, #2]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d106      	bne.n	8010444 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f92b 	bl	801069a <USBD_CtlSendStatus>
  }
}
 8010444:	bf00      	nop
 8010446:	3708      	adds	r7, #8
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801045c:	b2db      	uxtb	r3, r3
 801045e:	3b01      	subs	r3, #1
 8010460:	2b02      	cmp	r3, #2
 8010462:	d80b      	bhi.n	801047c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	885b      	ldrh	r3, [r3, #2]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d10c      	bne.n	8010486 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f000 f910 	bl	801069a <USBD_CtlSendStatus>
      }
      break;
 801047a:	e004      	b.n	8010486 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f840 	bl	8010504 <USBD_CtlError>
      break;
 8010484:	e000      	b.n	8010488 <USBD_ClrFeature+0x3c>
      break;
 8010486:	bf00      	nop
  }
}
 8010488:	bf00      	nop
 801048a:	3708      	adds	r7, #8
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	781a      	ldrb	r2, [r3, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	3301      	adds	r3, #1
 80104aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	781a      	ldrb	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	3301      	adds	r3, #1
 80104b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f7ff fabb 	bl	800fa36 <SWAPBYTE>
 80104c0:	4603      	mov	r3, r0
 80104c2:	461a      	mov	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	3301      	adds	r3, #1
 80104cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3301      	adds	r3, #1
 80104d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f7ff faae 	bl	800fa36 <SWAPBYTE>
 80104da:	4603      	mov	r3, r0
 80104dc:	461a      	mov	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3301      	adds	r3, #1
 80104e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3301      	adds	r3, #1
 80104ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f7ff faa1 	bl	800fa36 <SWAPBYTE>
 80104f4:	4603      	mov	r3, r0
 80104f6:	461a      	mov	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	80da      	strh	r2, [r3, #6]
}
 80104fc:	bf00      	nop
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801050e:	2180      	movs	r1, #128	; 0x80
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 fcbb 	bl	8010e8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010516:	2100      	movs	r1, #0
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 fcb7 	bl	8010e8c <USBD_LL_StallEP>
}
 801051e:	bf00      	nop
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b086      	sub	sp, #24
 801052a:	af00      	add	r7, sp, #0
 801052c:	60f8      	str	r0, [r7, #12]
 801052e:	60b9      	str	r1, [r7, #8]
 8010530:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010532:	2300      	movs	r3, #0
 8010534:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d036      	beq.n	80105aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010540:	6938      	ldr	r0, [r7, #16]
 8010542:	f000 f836 	bl	80105b2 <USBD_GetLen>
 8010546:	4603      	mov	r3, r0
 8010548:	3301      	adds	r3, #1
 801054a:	b29b      	uxth	r3, r3
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	b29a      	uxth	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010554:	7dfb      	ldrb	r3, [r7, #23]
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	4413      	add	r3, r2
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	7812      	ldrb	r2, [r2, #0]
 801055e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	3301      	adds	r3, #1
 8010564:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010566:	7dfb      	ldrb	r3, [r7, #23]
 8010568:	68ba      	ldr	r2, [r7, #8]
 801056a:	4413      	add	r3, r2
 801056c:	2203      	movs	r2, #3
 801056e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010570:	7dfb      	ldrb	r3, [r7, #23]
 8010572:	3301      	adds	r3, #1
 8010574:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010576:	e013      	b.n	80105a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010578:	7dfb      	ldrb	r3, [r7, #23]
 801057a:	68ba      	ldr	r2, [r7, #8]
 801057c:	4413      	add	r3, r2
 801057e:	693a      	ldr	r2, [r7, #16]
 8010580:	7812      	ldrb	r2, [r2, #0]
 8010582:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	3301      	adds	r3, #1
 8010588:	613b      	str	r3, [r7, #16]
    idx++;
 801058a:	7dfb      	ldrb	r3, [r7, #23]
 801058c:	3301      	adds	r3, #1
 801058e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010590:	7dfb      	ldrb	r3, [r7, #23]
 8010592:	68ba      	ldr	r2, [r7, #8]
 8010594:	4413      	add	r3, r2
 8010596:	2200      	movs	r2, #0
 8010598:	701a      	strb	r2, [r3, #0]
    idx++;
 801059a:	7dfb      	ldrb	r3, [r7, #23]
 801059c:	3301      	adds	r3, #1
 801059e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1e7      	bne.n	8010578 <USBD_GetString+0x52>
 80105a8:	e000      	b.n	80105ac <USBD_GetString+0x86>
    return;
 80105aa:	bf00      	nop
  }
}
 80105ac:	3718      	adds	r7, #24
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80105b2:	b480      	push	{r7}
 80105b4:	b085      	sub	sp, #20
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80105ba:	2300      	movs	r3, #0
 80105bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80105c2:	e005      	b.n	80105d0 <USBD_GetLen+0x1e>
  {
    len++;
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	3301      	adds	r3, #1
 80105c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	3301      	adds	r3, #1
 80105ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1f5      	bne.n	80105c4 <USBD_GetLen+0x12>
  }

  return len;
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr

080105e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b084      	sub	sp, #16
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	60f8      	str	r0, [r7, #12]
 80105ee:	60b9      	str	r1, [r7, #8]
 80105f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2202      	movs	r2, #2
 80105f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	2100      	movs	r1, #0
 801060c:	68f8      	ldr	r0, [r7, #12]
 801060e:	f000 fcc6 	bl	8010f9e <USBD_LL_Transmit>

  return USBD_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	2100      	movs	r1, #0
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f000 fcb5 	bl	8010f9e <USBD_LL_Transmit>

  return USBD_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}

0801063e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801063e:	b580      	push	{r7, lr}
 8010640:	b084      	sub	sp, #16
 8010642:	af00      	add	r7, sp, #0
 8010644:	60f8      	str	r0, [r7, #12]
 8010646:	60b9      	str	r1, [r7, #8]
 8010648:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2203      	movs	r2, #3
 801064e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	2100      	movs	r1, #0
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f000 fcb9 	bl	8010fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801066e:	2300      	movs	r3, #0
}
 8010670:	4618      	mov	r0, r3
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	2100      	movs	r1, #0
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f000 fca8 	bl	8010fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010690:	2300      	movs	r3, #0
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b082      	sub	sp, #8
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2204      	movs	r2, #4
 80106a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80106aa:	2300      	movs	r3, #0
 80106ac:	2200      	movs	r2, #0
 80106ae:	2100      	movs	r1, #0
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 fc74 	bl	8010f9e <USBD_LL_Transmit>

  return USBD_OK;
 80106b6:	2300      	movs	r3, #0
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2205      	movs	r2, #5
 80106cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80106d0:	2300      	movs	r3, #0
 80106d2:	2200      	movs	r2, #0
 80106d4:	2100      	movs	r1, #0
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 fc82 	bl	8010fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106ec:	2200      	movs	r2, #0
 80106ee:	4912      	ldr	r1, [pc, #72]	; (8010738 <MX_USB_DEVICE_Init+0x50>)
 80106f0:	4812      	ldr	r0, [pc, #72]	; (801073c <MX_USB_DEVICE_Init+0x54>)
 80106f2:	f7fe fe8f 	bl	800f414 <USBD_Init>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106fc:	f7f6 ffea 	bl	80076d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010700:	490f      	ldr	r1, [pc, #60]	; (8010740 <MX_USB_DEVICE_Init+0x58>)
 8010702:	480e      	ldr	r0, [pc, #56]	; (801073c <MX_USB_DEVICE_Init+0x54>)
 8010704:	f7fe feb6 	bl	800f474 <USBD_RegisterClass>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d001      	beq.n	8010712 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801070e:	f7f6 ffe1 	bl	80076d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010712:	490c      	ldr	r1, [pc, #48]	; (8010744 <MX_USB_DEVICE_Init+0x5c>)
 8010714:	4809      	ldr	r0, [pc, #36]	; (801073c <MX_USB_DEVICE_Init+0x54>)
 8010716:	f7fe fe07 	bl	800f328 <USBD_CDC_RegisterInterface>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d001      	beq.n	8010724 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010720:	f7f6 ffd8 	bl	80076d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010724:	4805      	ldr	r0, [pc, #20]	; (801073c <MX_USB_DEVICE_Init+0x54>)
 8010726:	f7fe fecc 	bl	800f4c2 <USBD_Start>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010730:	f7f6 ffd0 	bl	80076d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010734:	bf00      	nop
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20000130 	.word	0x20000130
 801073c:	200009f4 	.word	0x200009f4
 8010740:	20000018 	.word	0x20000018
 8010744:	2000011c 	.word	0x2000011c

08010748 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801074c:	2200      	movs	r2, #0
 801074e:	4905      	ldr	r1, [pc, #20]	; (8010764 <CDC_Init_FS+0x1c>)
 8010750:	4805      	ldr	r0, [pc, #20]	; (8010768 <CDC_Init_FS+0x20>)
 8010752:	f7fe fdfe 	bl	800f352 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010756:	4905      	ldr	r1, [pc, #20]	; (801076c <CDC_Init_FS+0x24>)
 8010758:	4803      	ldr	r0, [pc, #12]	; (8010768 <CDC_Init_FS+0x20>)
 801075a:	f7fe fe18 	bl	800f38e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801075e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010760:	4618      	mov	r0, r3
 8010762:	bd80      	pop	{r7, pc}
 8010764:	200014c4 	.word	0x200014c4
 8010768:	200009f4 	.word	0x200009f4
 801076c:	20000cc4 	.word	0x20000cc4

08010770 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010770:	b480      	push	{r7}
 8010772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010774:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010776:	4618      	mov	r0, r3
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
 8010786:	4603      	mov	r3, r0
 8010788:	6039      	str	r1, [r7, #0]
 801078a:	71fb      	strb	r3, [r7, #7]
 801078c:	4613      	mov	r3, r2
 801078e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010790:	79fb      	ldrb	r3, [r7, #7]
 8010792:	2b23      	cmp	r3, #35	; 0x23
 8010794:	d84a      	bhi.n	801082c <CDC_Control_FS+0xac>
 8010796:	a201      	add	r2, pc, #4	; (adr r2, 801079c <CDC_Control_FS+0x1c>)
 8010798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079c:	0801082d 	.word	0x0801082d
 80107a0:	0801082d 	.word	0x0801082d
 80107a4:	0801082d 	.word	0x0801082d
 80107a8:	0801082d 	.word	0x0801082d
 80107ac:	0801082d 	.word	0x0801082d
 80107b0:	0801082d 	.word	0x0801082d
 80107b4:	0801082d 	.word	0x0801082d
 80107b8:	0801082d 	.word	0x0801082d
 80107bc:	0801082d 	.word	0x0801082d
 80107c0:	0801082d 	.word	0x0801082d
 80107c4:	0801082d 	.word	0x0801082d
 80107c8:	0801082d 	.word	0x0801082d
 80107cc:	0801082d 	.word	0x0801082d
 80107d0:	0801082d 	.word	0x0801082d
 80107d4:	0801082d 	.word	0x0801082d
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	0801082d 	.word	0x0801082d
 80107e0:	0801082d 	.word	0x0801082d
 80107e4:	0801082d 	.word	0x0801082d
 80107e8:	0801082d 	.word	0x0801082d
 80107ec:	0801082d 	.word	0x0801082d
 80107f0:	0801082d 	.word	0x0801082d
 80107f4:	0801082d 	.word	0x0801082d
 80107f8:	0801082d 	.word	0x0801082d
 80107fc:	0801082d 	.word	0x0801082d
 8010800:	0801082d 	.word	0x0801082d
 8010804:	0801082d 	.word	0x0801082d
 8010808:	0801082d 	.word	0x0801082d
 801080c:	0801082d 	.word	0x0801082d
 8010810:	0801082d 	.word	0x0801082d
 8010814:	0801082d 	.word	0x0801082d
 8010818:	0801082d 	.word	0x0801082d
 801081c:	0801082d 	.word	0x0801082d
 8010820:	0801082d 	.word	0x0801082d
 8010824:	0801082d 	.word	0x0801082d
 8010828:	0801082d 	.word	0x0801082d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801082c:	bf00      	nop
  }

  return (USBD_OK);
 801082e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010830:	4618      	mov	r0, r3
 8010832:	370c      	adds	r7, #12
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	4805      	ldr	r0, [pc, #20]	; (8010860 <CDC_Receive_FS+0x24>)
 801084a:	f7fe fda0 	bl	800f38e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801084e:	4804      	ldr	r0, [pc, #16]	; (8010860 <CDC_Receive_FS+0x24>)
 8010850:	f7fe fdb6 	bl	800f3c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010854:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010856:	4618      	mov	r0, r3
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	200009f4 	.word	0x200009f4

08010864 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010864:	b480      	push	{r7}
 8010866:	b087      	sub	sp, #28
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	4613      	mov	r3, r2
 8010870:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801087a:	4618      	mov	r0, r3
 801087c:	371c      	adds	r7, #28
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
	...

08010888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	6039      	str	r1, [r7, #0]
 8010892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	2212      	movs	r2, #18
 8010898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801089a:	4b03      	ldr	r3, [pc, #12]	; (80108a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	2000014c 	.word	0x2000014c

080108ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	4603      	mov	r3, r0
 80108b4:	6039      	str	r1, [r7, #0]
 80108b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2204      	movs	r2, #4
 80108bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80108be:	4b03      	ldr	r3, [pc, #12]	; (80108cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	20000160 	.word	0x20000160

080108d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	4603      	mov	r3, r0
 80108d8:	6039      	str	r1, [r7, #0]
 80108da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d105      	bne.n	80108ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	4907      	ldr	r1, [pc, #28]	; (8010904 <USBD_FS_ProductStrDescriptor+0x34>)
 80108e6:	4808      	ldr	r0, [pc, #32]	; (8010908 <USBD_FS_ProductStrDescriptor+0x38>)
 80108e8:	f7ff fe1d 	bl	8010526 <USBD_GetString>
 80108ec:	e004      	b.n	80108f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108ee:	683a      	ldr	r2, [r7, #0]
 80108f0:	4904      	ldr	r1, [pc, #16]	; (8010904 <USBD_FS_ProductStrDescriptor+0x34>)
 80108f2:	4805      	ldr	r0, [pc, #20]	; (8010908 <USBD_FS_ProductStrDescriptor+0x38>)
 80108f4:	f7ff fe17 	bl	8010526 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108f8:	4b02      	ldr	r3, [pc, #8]	; (8010904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	20001cc4 	.word	0x20001cc4
 8010908:	0801333c 	.word	0x0801333c

0801090c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	6039      	str	r1, [r7, #0]
 8010916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	4904      	ldr	r1, [pc, #16]	; (801092c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801091c:	4804      	ldr	r0, [pc, #16]	; (8010930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801091e:	f7ff fe02 	bl	8010526 <USBD_GetString>
  return USBD_StrDesc;
 8010922:	4b02      	ldr	r3, [pc, #8]	; (801092c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20001cc4 	.word	0x20001cc4
 8010930:	08013354 	.word	0x08013354

08010934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	6039      	str	r1, [r7, #0]
 801093e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	221a      	movs	r2, #26
 8010944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010946:	f000 f843 	bl	80109d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801094a:	4b02      	ldr	r3, [pc, #8]	; (8010954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801094c:	4618      	mov	r0, r3
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	20000164 	.word	0x20000164

08010958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	4603      	mov	r3, r0
 8010960:	6039      	str	r1, [r7, #0]
 8010962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d105      	bne.n	8010976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	4907      	ldr	r1, [pc, #28]	; (801098c <USBD_FS_ConfigStrDescriptor+0x34>)
 801096e:	4808      	ldr	r0, [pc, #32]	; (8010990 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010970:	f7ff fdd9 	bl	8010526 <USBD_GetString>
 8010974:	e004      	b.n	8010980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	4904      	ldr	r1, [pc, #16]	; (801098c <USBD_FS_ConfigStrDescriptor+0x34>)
 801097a:	4805      	ldr	r0, [pc, #20]	; (8010990 <USBD_FS_ConfigStrDescriptor+0x38>)
 801097c:	f7ff fdd3 	bl	8010526 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010980:	4b02      	ldr	r3, [pc, #8]	; (801098c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010982:	4618      	mov	r0, r3
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	20001cc4 	.word	0x20001cc4
 8010990:	08013368 	.word	0x08013368

08010994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	6039      	str	r1, [r7, #0]
 801099e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d105      	bne.n	80109b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	4907      	ldr	r1, [pc, #28]	; (80109c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109aa:	4808      	ldr	r0, [pc, #32]	; (80109cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109ac:	f7ff fdbb 	bl	8010526 <USBD_GetString>
 80109b0:	e004      	b.n	80109bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109b2:	683a      	ldr	r2, [r7, #0]
 80109b4:	4904      	ldr	r1, [pc, #16]	; (80109c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109b6:	4805      	ldr	r0, [pc, #20]	; (80109cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109b8:	f7ff fdb5 	bl	8010526 <USBD_GetString>
  }
  return USBD_StrDesc;
 80109bc:	4b02      	ldr	r3, [pc, #8]	; (80109c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20001cc4 	.word	0x20001cc4
 80109cc:	08013374 	.word	0x08013374

080109d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80109d6:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <Get_SerialNum+0x44>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80109dc:	4b0e      	ldr	r3, [pc, #56]	; (8010a18 <Get_SerialNum+0x48>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80109e2:	4b0e      	ldr	r3, [pc, #56]	; (8010a1c <Get_SerialNum+0x4c>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4413      	add	r3, r2
 80109ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d009      	beq.n	8010a0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109f6:	2208      	movs	r2, #8
 80109f8:	4909      	ldr	r1, [pc, #36]	; (8010a20 <Get_SerialNum+0x50>)
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f000 f814 	bl	8010a28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010a00:	2204      	movs	r2, #4
 8010a02:	4908      	ldr	r1, [pc, #32]	; (8010a24 <Get_SerialNum+0x54>)
 8010a04:	68b8      	ldr	r0, [r7, #8]
 8010a06:	f000 f80f 	bl	8010a28 <IntToUnicode>
  }
}
 8010a0a:	bf00      	nop
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	1fff7a10 	.word	0x1fff7a10
 8010a18:	1fff7a14 	.word	0x1fff7a14
 8010a1c:	1fff7a18 	.word	0x1fff7a18
 8010a20:	20000166 	.word	0x20000166
 8010a24:	20000176 	.word	0x20000176

08010a28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b087      	sub	sp, #28
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	4613      	mov	r3, r2
 8010a34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	75fb      	strb	r3, [r7, #23]
 8010a3e:	e027      	b.n	8010a90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	0f1b      	lsrs	r3, r3, #28
 8010a44:	2b09      	cmp	r3, #9
 8010a46:	d80b      	bhi.n	8010a60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	0f1b      	lsrs	r3, r3, #28
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	7dfb      	ldrb	r3, [r7, #23]
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4619      	mov	r1, r3
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	440b      	add	r3, r1
 8010a58:	3230      	adds	r2, #48	; 0x30
 8010a5a:	b2d2      	uxtb	r2, r2
 8010a5c:	701a      	strb	r2, [r3, #0]
 8010a5e:	e00a      	b.n	8010a76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	0f1b      	lsrs	r3, r3, #28
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	7dfb      	ldrb	r3, [r7, #23]
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	440b      	add	r3, r1
 8010a70:	3237      	adds	r2, #55	; 0x37
 8010a72:	b2d2      	uxtb	r2, r2
 8010a74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	011b      	lsls	r3, r3, #4
 8010a7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a7c:	7dfb      	ldrb	r3, [r7, #23]
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	3301      	adds	r3, #1
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	4413      	add	r3, r2
 8010a86:	2200      	movs	r2, #0
 8010a88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	75fb      	strb	r3, [r7, #23]
 8010a90:	7dfa      	ldrb	r2, [r7, #23]
 8010a92:	79fb      	ldrb	r3, [r7, #7]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d3d3      	bcc.n	8010a40 <IntToUnicode+0x18>
  }
}
 8010a98:	bf00      	nop
 8010a9a:	bf00      	nop
 8010a9c:	371c      	adds	r7, #28
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
	...

08010aa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08a      	sub	sp, #40	; 0x28
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ab0:	f107 0314 	add.w	r3, r7, #20
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	601a      	str	r2, [r3, #0]
 8010ab8:	605a      	str	r2, [r3, #4]
 8010aba:	609a      	str	r2, [r3, #8]
 8010abc:	60da      	str	r2, [r3, #12]
 8010abe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ac8:	d13a      	bne.n	8010b40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010aca:	2300      	movs	r3, #0
 8010acc:	613b      	str	r3, [r7, #16]
 8010ace:	4b1e      	ldr	r3, [pc, #120]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ad2:	4a1d      	ldr	r2, [pc, #116]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010ad4:	f043 0301 	orr.w	r3, r3, #1
 8010ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8010ada:	4b1b      	ldr	r3, [pc, #108]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ade:	f003 0301 	and.w	r3, r3, #1
 8010ae2:	613b      	str	r3, [r7, #16]
 8010ae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010ae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aec:	2302      	movs	r3, #2
 8010aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010af4:	2303      	movs	r3, #3
 8010af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010af8:	230a      	movs	r3, #10
 8010afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010afc:	f107 0314 	add.w	r3, r7, #20
 8010b00:	4619      	mov	r1, r3
 8010b02:	4812      	ldr	r0, [pc, #72]	; (8010b4c <HAL_PCD_MspInit+0xa4>)
 8010b04:	f7f8 fe56 	bl	80097b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b08:	4b0f      	ldr	r3, [pc, #60]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b0c:	4a0e      	ldr	r2, [pc, #56]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b12:	6353      	str	r3, [r2, #52]	; 0x34
 8010b14:	2300      	movs	r3, #0
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	4b0b      	ldr	r3, [pc, #44]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b1c:	4a0a      	ldr	r2, [pc, #40]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b22:	6453      	str	r3, [r2, #68]	; 0x44
 8010b24:	4b08      	ldr	r3, [pc, #32]	; (8010b48 <HAL_PCD_MspInit+0xa0>)
 8010b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b2c:	60fb      	str	r3, [r7, #12]
 8010b2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010b30:	2200      	movs	r2, #0
 8010b32:	2100      	movs	r1, #0
 8010b34:	2043      	movs	r0, #67	; 0x43
 8010b36:	f7f8 fa8a 	bl	800904e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b3a:	2043      	movs	r0, #67	; 0x43
 8010b3c:	f7f8 faa3 	bl	8009086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b40:	bf00      	nop
 8010b42:	3728      	adds	r7, #40	; 0x28
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	40023800 	.word	0x40023800
 8010b4c:	40020000 	.word	0x40020000

08010b50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010b64:	4619      	mov	r1, r3
 8010b66:	4610      	mov	r0, r2
 8010b68:	f7fe fcf6 	bl	800f558 <USBD_LL_SetupStage>
}
 8010b6c:	bf00      	nop
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010b86:	78fa      	ldrb	r2, [r7, #3]
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	1a9b      	subs	r3, r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	440b      	add	r3, r1
 8010b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	78fb      	ldrb	r3, [r7, #3]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	f7fe fd30 	bl	800f602 <USBD_LL_DataOutStage>
}
 8010ba2:	bf00      	nop
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010bbc:	78fa      	ldrb	r2, [r7, #3]
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	440b      	add	r3, r1
 8010bca:	3348      	adds	r3, #72	; 0x48
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	78fb      	ldrb	r3, [r7, #3]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	f7fe fd79 	bl	800f6c8 <USBD_LL_DataInStage>
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fe8d 	bl	800f90c <USBD_LL_SOF>
}
 8010bf2:	bf00      	nop
 8010bf4:	3708      	adds	r7, #8
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b084      	sub	sp, #16
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c02:	2301      	movs	r3, #1
 8010c04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d102      	bne.n	8010c14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	73fb      	strb	r3, [r7, #15]
 8010c12:	e008      	b.n	8010c26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	2b02      	cmp	r3, #2
 8010c1a:	d102      	bne.n	8010c22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	73fb      	strb	r3, [r7, #15]
 8010c20:	e001      	b.n	8010c26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010c22:	f7f6 fd57 	bl	80076d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c2c:	7bfa      	ldrb	r2, [r7, #15]
 8010c2e:	4611      	mov	r1, r2
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fe fe2d 	bl	800f890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fe fdd9 	bl	800f7f4 <USBD_LL_Reset>
}
 8010c42:	bf00      	nop
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
	...

08010c4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fe28 	bl	800f8b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	6812      	ldr	r2, [r2, #0]
 8010c6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c72:	f043 0301 	orr.w	r3, r3, #1
 8010c76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6a1b      	ldr	r3, [r3, #32]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d005      	beq.n	8010c8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c80:	4b04      	ldr	r3, [pc, #16]	; (8010c94 <HAL_PCD_SuspendCallback+0x48>)
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	4a03      	ldr	r2, [pc, #12]	; (8010c94 <HAL_PCD_SuspendCallback+0x48>)
 8010c86:	f043 0306 	orr.w	r3, r3, #6
 8010c8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c8c:	bf00      	nop
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	e000ed00 	.word	0xe000ed00

08010c98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fe fe18 	bl	800f8dc <USBD_LL_Resume>
}
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cc6:	78fa      	ldrb	r2, [r7, #3]
 8010cc8:	4611      	mov	r1, r2
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fe fe66 	bl	800f99c <USBD_LL_IsoOUTIncomplete>
}
 8010cd0:	bf00      	nop
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010cea:	78fa      	ldrb	r2, [r7, #3]
 8010cec:	4611      	mov	r1, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fe fe2e 	bl	800f950 <USBD_LL_IsoINIncomplete>
}
 8010cf4:	bf00      	nop
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fe fe6c 	bl	800f9e8 <USBD_LL_DevConnected>
}
 8010d10:	bf00      	nop
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fe69 	bl	800f9fe <USBD_LL_DevDisconnected>
}
 8010d2c:	bf00      	nop
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d13c      	bne.n	8010dbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d44:	4a20      	ldr	r2, [pc, #128]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	4a1e      	ldr	r2, [pc, #120]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d54:	4b1c      	ldr	r3, [pc, #112]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010d5c:	4b1a      	ldr	r3, [pc, #104]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d5e:	2204      	movs	r2, #4
 8010d60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d62:	4b19      	ldr	r3, [pc, #100]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d64:	2202      	movs	r2, #2
 8010d66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d68:	4b17      	ldr	r3, [pc, #92]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d6e:	4b16      	ldr	r3, [pc, #88]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d70:	2202      	movs	r2, #2
 8010d72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d74:	4b14      	ldr	r3, [pc, #80]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d7a:	4b13      	ldr	r3, [pc, #76]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d80:	4b11      	ldr	r3, [pc, #68]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d86:	4b10      	ldr	r3, [pc, #64]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d8c:	4b0e      	ldr	r3, [pc, #56]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d92:	480d      	ldr	r0, [pc, #52]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010d94:	f7f8 fed3 	bl	8009b3e <HAL_PCD_Init>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010d9e:	f7f6 fc99 	bl	80076d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010da2:	2180      	movs	r1, #128	; 0x80
 8010da4:	4808      	ldr	r0, [pc, #32]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010da6:	f7fa f830 	bl	800ae0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010daa:	2240      	movs	r2, #64	; 0x40
 8010dac:	2100      	movs	r1, #0
 8010dae:	4806      	ldr	r0, [pc, #24]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010db0:	f7f9 ffe4 	bl	800ad7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010db4:	2280      	movs	r2, #128	; 0x80
 8010db6:	2101      	movs	r1, #1
 8010db8:	4803      	ldr	r0, [pc, #12]	; (8010dc8 <USBD_LL_Init+0x94>)
 8010dba:	f7f9 ffdf 	bl	800ad7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	20001ec4 	.word	0x20001ec4

08010dcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7f8 ffc8 	bl	8009d78 <HAL_PCD_Start>
 8010de8:	4603      	mov	r3, r0
 8010dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dec:	7bfb      	ldrb	r3, [r7, #15]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 f942 	bl	8011078 <USBD_Get_USB_Status>
 8010df4:	4603      	mov	r3, r0
 8010df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b084      	sub	sp, #16
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	461a      	mov	r2, r3
 8010e10:	4603      	mov	r3, r0
 8010e12:	70fb      	strb	r3, [r7, #3]
 8010e14:	460b      	mov	r3, r1
 8010e16:	70bb      	strb	r3, [r7, #2]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010e2a:	78bb      	ldrb	r3, [r7, #2]
 8010e2c:	883a      	ldrh	r2, [r7, #0]
 8010e2e:	78f9      	ldrb	r1, [r7, #3]
 8010e30:	f7f9 fbac 	bl	800a58c <HAL_PCD_EP_Open>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 f91c 	bl	8011078 <USBD_Get_USB_Status>
 8010e40:	4603      	mov	r3, r0
 8010e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b084      	sub	sp, #16
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
 8010e56:	460b      	mov	r3, r1
 8010e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e68:	78fa      	ldrb	r2, [r7, #3]
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f9 fbf5 	bl	800a65c <HAL_PCD_EP_Close>
 8010e72:	4603      	mov	r3, r0
 8010e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f000 f8fd 	bl	8011078 <USBD_Get_USB_Status>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	460b      	mov	r3, r1
 8010e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ea6:	78fa      	ldrb	r2, [r7, #3]
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7f9 fccd 	bl	800a84a <HAL_PCD_EP_SetStall>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eb4:	7bfb      	ldrb	r3, [r7, #15]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f000 f8de 	bl	8011078 <USBD_Get_USB_Status>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3710      	adds	r7, #16
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b084      	sub	sp, #16
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ee4:	78fa      	ldrb	r2, [r7, #3]
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7f9 fd12 	bl	800a912 <HAL_PCD_EP_ClrStall>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ef2:	7bfb      	ldrb	r3, [r7, #15]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f000 f8bf 	bl	8011078 <USBD_Get_USB_Status>
 8010efa:	4603      	mov	r3, r0
 8010efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3710      	adds	r7, #16
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b085      	sub	sp, #20
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	da0b      	bge.n	8010f3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f24:	78fb      	ldrb	r3, [r7, #3]
 8010f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f2a:	68f9      	ldr	r1, [r7, #12]
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	1a9b      	subs	r3, r3, r2
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	440b      	add	r3, r1
 8010f36:	333e      	adds	r3, #62	; 0x3e
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	e00b      	b.n	8010f54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f3c:	78fb      	ldrb	r3, [r7, #3]
 8010f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f42:	68f9      	ldr	r1, [r7, #12]
 8010f44:	4613      	mov	r3, r2
 8010f46:	00db      	lsls	r3, r3, #3
 8010f48:	1a9b      	subs	r3, r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	440b      	add	r3, r1
 8010f4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	460b      	mov	r3, r1
 8010f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010f7a:	78fa      	ldrb	r2, [r7, #3]
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f9 fadf 	bl	800a542 <HAL_PCD_SetAddress>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 f874 	bl	8011078 <USBD_Get_USB_Status>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b086      	sub	sp, #24
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	60f8      	str	r0, [r7, #12]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
 8010faa:	460b      	mov	r3, r1
 8010fac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010fbc:	7af9      	ldrb	r1, [r7, #11]
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	f7f9 fbf8 	bl	800a7b6 <HAL_PCD_EP_Transmit>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f000 f853 	bl	8011078 <USBD_Get_USB_Status>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	607a      	str	r2, [r7, #4]
 8010fea:	603b      	str	r3, [r7, #0]
 8010fec:	460b      	mov	r3, r1
 8010fee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ffe:	7af9      	ldrb	r1, [r7, #11]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	f7f9 fb74 	bl	800a6f0 <HAL_PCD_EP_Receive>
 8011008:	4603      	mov	r3, r0
 801100a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801100c:	7dfb      	ldrb	r3, [r7, #23]
 801100e:	4618      	mov	r0, r3
 8011010:	f000 f832 	bl	8011078 <USBD_Get_USB_Status>
 8011014:	4603      	mov	r3, r0
 8011016:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011018:	7dbb      	ldrb	r3, [r7, #22]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3718      	adds	r7, #24
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b082      	sub	sp, #8
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	460b      	mov	r3, r1
 801102c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011034:	78fa      	ldrb	r2, [r7, #3]
 8011036:	4611      	mov	r1, r2
 8011038:	4618      	mov	r0, r3
 801103a:	f7f9 fba4 	bl	800a786 <HAL_PCD_EP_GetRxCount>
 801103e:	4603      	mov	r3, r0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011050:	4b03      	ldr	r3, [pc, #12]	; (8011060 <USBD_static_malloc+0x18>)
}
 8011052:	4618      	mov	r0, r3
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	20000260 	.word	0x20000260

08011064 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]

}
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011086:	79fb      	ldrb	r3, [r7, #7]
 8011088:	2b03      	cmp	r3, #3
 801108a:	d817      	bhi.n	80110bc <USBD_Get_USB_Status+0x44>
 801108c:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <USBD_Get_USB_Status+0x1c>)
 801108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011092:	bf00      	nop
 8011094:	080110a5 	.word	0x080110a5
 8011098:	080110ab 	.word	0x080110ab
 801109c:	080110b1 	.word	0x080110b1
 80110a0:	080110b7 	.word	0x080110b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80110a4:	2300      	movs	r3, #0
 80110a6:	73fb      	strb	r3, [r7, #15]
    break;
 80110a8:	e00b      	b.n	80110c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110aa:	2303      	movs	r3, #3
 80110ac:	73fb      	strb	r3, [r7, #15]
    break;
 80110ae:	e008      	b.n	80110c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110b0:	2301      	movs	r3, #1
 80110b2:	73fb      	strb	r3, [r7, #15]
    break;
 80110b4:	e005      	b.n	80110c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	73fb      	strb	r3, [r7, #15]
    break;
 80110ba:	e002      	b.n	80110c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80110bc:	2303      	movs	r3, #3
 80110be:	73fb      	strb	r3, [r7, #15]
    break;
 80110c0:	bf00      	nop
  }
  return usb_status;
 80110c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3714      	adds	r7, #20
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <__assert_func>:
 80110d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110d2:	4614      	mov	r4, r2
 80110d4:	461a      	mov	r2, r3
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <__assert_func+0x2c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4605      	mov	r5, r0
 80110dc:	68d8      	ldr	r0, [r3, #12]
 80110de:	b14c      	cbz	r4, 80110f4 <__assert_func+0x24>
 80110e0:	4b07      	ldr	r3, [pc, #28]	; (8011100 <__assert_func+0x30>)
 80110e2:	9100      	str	r1, [sp, #0]
 80110e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110e8:	4906      	ldr	r1, [pc, #24]	; (8011104 <__assert_func+0x34>)
 80110ea:	462b      	mov	r3, r5
 80110ec:	f000 f814 	bl	8011118 <fiprintf>
 80110f0:	f000 fdf4 	bl	8011cdc <abort>
 80110f4:	4b04      	ldr	r3, [pc, #16]	; (8011108 <__assert_func+0x38>)
 80110f6:	461c      	mov	r4, r3
 80110f8:	e7f3      	b.n	80110e2 <__assert_func+0x12>
 80110fa:	bf00      	nop
 80110fc:	20000180 	.word	0x20000180
 8011100:	080134c0 	.word	0x080134c0
 8011104:	080134cd 	.word	0x080134cd
 8011108:	080134fb 	.word	0x080134fb

0801110c <__errno>:
 801110c:	4b01      	ldr	r3, [pc, #4]	; (8011114 <__errno+0x8>)
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	20000180 	.word	0x20000180

08011118 <fiprintf>:
 8011118:	b40e      	push	{r1, r2, r3}
 801111a:	b503      	push	{r0, r1, lr}
 801111c:	4601      	mov	r1, r0
 801111e:	ab03      	add	r3, sp, #12
 8011120:	4805      	ldr	r0, [pc, #20]	; (8011138 <fiprintf+0x20>)
 8011122:	f853 2b04 	ldr.w	r2, [r3], #4
 8011126:	6800      	ldr	r0, [r0, #0]
 8011128:	9301      	str	r3, [sp, #4]
 801112a:	f000 f933 	bl	8011394 <_vfiprintf_r>
 801112e:	b002      	add	sp, #8
 8011130:	f85d eb04 	ldr.w	lr, [sp], #4
 8011134:	b003      	add	sp, #12
 8011136:	4770      	bx	lr
 8011138:	20000180 	.word	0x20000180

0801113c <__libc_init_array>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	4d0d      	ldr	r5, [pc, #52]	; (8011174 <__libc_init_array+0x38>)
 8011140:	4c0d      	ldr	r4, [pc, #52]	; (8011178 <__libc_init_array+0x3c>)
 8011142:	1b64      	subs	r4, r4, r5
 8011144:	10a4      	asrs	r4, r4, #2
 8011146:	2600      	movs	r6, #0
 8011148:	42a6      	cmp	r6, r4
 801114a:	d109      	bne.n	8011160 <__libc_init_array+0x24>
 801114c:	4d0b      	ldr	r5, [pc, #44]	; (801117c <__libc_init_array+0x40>)
 801114e:	4c0c      	ldr	r4, [pc, #48]	; (8011180 <__libc_init_array+0x44>)
 8011150:	f001 fa8a 	bl	8012668 <_init>
 8011154:	1b64      	subs	r4, r4, r5
 8011156:	10a4      	asrs	r4, r4, #2
 8011158:	2600      	movs	r6, #0
 801115a:	42a6      	cmp	r6, r4
 801115c:	d105      	bne.n	801116a <__libc_init_array+0x2e>
 801115e:	bd70      	pop	{r4, r5, r6, pc}
 8011160:	f855 3b04 	ldr.w	r3, [r5], #4
 8011164:	4798      	blx	r3
 8011166:	3601      	adds	r6, #1
 8011168:	e7ee      	b.n	8011148 <__libc_init_array+0xc>
 801116a:	f855 3b04 	ldr.w	r3, [r5], #4
 801116e:	4798      	blx	r3
 8011170:	3601      	adds	r6, #1
 8011172:	e7f2      	b.n	801115a <__libc_init_array+0x1e>
 8011174:	0801359c 	.word	0x0801359c
 8011178:	0801359c 	.word	0x0801359c
 801117c:	0801359c 	.word	0x0801359c
 8011180:	080135a0 	.word	0x080135a0

08011184 <malloc>:
 8011184:	4b02      	ldr	r3, [pc, #8]	; (8011190 <malloc+0xc>)
 8011186:	4601      	mov	r1, r0
 8011188:	6818      	ldr	r0, [r3, #0]
 801118a:	f000 b87f 	b.w	801128c <_malloc_r>
 801118e:	bf00      	nop
 8011190:	20000180 	.word	0x20000180

08011194 <free>:
 8011194:	4b02      	ldr	r3, [pc, #8]	; (80111a0 <free+0xc>)
 8011196:	4601      	mov	r1, r0
 8011198:	6818      	ldr	r0, [r3, #0]
 801119a:	f000 b827 	b.w	80111ec <_free_r>
 801119e:	bf00      	nop
 80111a0:	20000180 	.word	0x20000180

080111a4 <memcmp>:
 80111a4:	b530      	push	{r4, r5, lr}
 80111a6:	3901      	subs	r1, #1
 80111a8:	2400      	movs	r4, #0
 80111aa:	42a2      	cmp	r2, r4
 80111ac:	d101      	bne.n	80111b2 <memcmp+0xe>
 80111ae:	2000      	movs	r0, #0
 80111b0:	e005      	b.n	80111be <memcmp+0x1a>
 80111b2:	5d03      	ldrb	r3, [r0, r4]
 80111b4:	3401      	adds	r4, #1
 80111b6:	5d0d      	ldrb	r5, [r1, r4]
 80111b8:	42ab      	cmp	r3, r5
 80111ba:	d0f6      	beq.n	80111aa <memcmp+0x6>
 80111bc:	1b58      	subs	r0, r3, r5
 80111be:	bd30      	pop	{r4, r5, pc}

080111c0 <memcpy>:
 80111c0:	440a      	add	r2, r1
 80111c2:	4291      	cmp	r1, r2
 80111c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80111c8:	d100      	bne.n	80111cc <memcpy+0xc>
 80111ca:	4770      	bx	lr
 80111cc:	b510      	push	{r4, lr}
 80111ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111d6:	4291      	cmp	r1, r2
 80111d8:	d1f9      	bne.n	80111ce <memcpy+0xe>
 80111da:	bd10      	pop	{r4, pc}

080111dc <memset>:
 80111dc:	4402      	add	r2, r0
 80111de:	4603      	mov	r3, r0
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d100      	bne.n	80111e6 <memset+0xa>
 80111e4:	4770      	bx	lr
 80111e6:	f803 1b01 	strb.w	r1, [r3], #1
 80111ea:	e7f9      	b.n	80111e0 <memset+0x4>

080111ec <_free_r>:
 80111ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ee:	2900      	cmp	r1, #0
 80111f0:	d048      	beq.n	8011284 <_free_r+0x98>
 80111f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111f6:	9001      	str	r0, [sp, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f1a1 0404 	sub.w	r4, r1, #4
 80111fe:	bfb8      	it	lt
 8011200:	18e4      	addlt	r4, r4, r3
 8011202:	f000 ffab 	bl	801215c <__malloc_lock>
 8011206:	4a20      	ldr	r2, [pc, #128]	; (8011288 <_free_r+0x9c>)
 8011208:	9801      	ldr	r0, [sp, #4]
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	4615      	mov	r5, r2
 801120e:	b933      	cbnz	r3, 801121e <_free_r+0x32>
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	6014      	str	r4, [r2, #0]
 8011214:	b003      	add	sp, #12
 8011216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801121a:	f000 bfa5 	b.w	8012168 <__malloc_unlock>
 801121e:	42a3      	cmp	r3, r4
 8011220:	d90b      	bls.n	801123a <_free_r+0x4e>
 8011222:	6821      	ldr	r1, [r4, #0]
 8011224:	1862      	adds	r2, r4, r1
 8011226:	4293      	cmp	r3, r2
 8011228:	bf04      	itt	eq
 801122a:	681a      	ldreq	r2, [r3, #0]
 801122c:	685b      	ldreq	r3, [r3, #4]
 801122e:	6063      	str	r3, [r4, #4]
 8011230:	bf04      	itt	eq
 8011232:	1852      	addeq	r2, r2, r1
 8011234:	6022      	streq	r2, [r4, #0]
 8011236:	602c      	str	r4, [r5, #0]
 8011238:	e7ec      	b.n	8011214 <_free_r+0x28>
 801123a:	461a      	mov	r2, r3
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	b10b      	cbz	r3, 8011244 <_free_r+0x58>
 8011240:	42a3      	cmp	r3, r4
 8011242:	d9fa      	bls.n	801123a <_free_r+0x4e>
 8011244:	6811      	ldr	r1, [r2, #0]
 8011246:	1855      	adds	r5, r2, r1
 8011248:	42a5      	cmp	r5, r4
 801124a:	d10b      	bne.n	8011264 <_free_r+0x78>
 801124c:	6824      	ldr	r4, [r4, #0]
 801124e:	4421      	add	r1, r4
 8011250:	1854      	adds	r4, r2, r1
 8011252:	42a3      	cmp	r3, r4
 8011254:	6011      	str	r1, [r2, #0]
 8011256:	d1dd      	bne.n	8011214 <_free_r+0x28>
 8011258:	681c      	ldr	r4, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6053      	str	r3, [r2, #4]
 801125e:	4421      	add	r1, r4
 8011260:	6011      	str	r1, [r2, #0]
 8011262:	e7d7      	b.n	8011214 <_free_r+0x28>
 8011264:	d902      	bls.n	801126c <_free_r+0x80>
 8011266:	230c      	movs	r3, #12
 8011268:	6003      	str	r3, [r0, #0]
 801126a:	e7d3      	b.n	8011214 <_free_r+0x28>
 801126c:	6825      	ldr	r5, [r4, #0]
 801126e:	1961      	adds	r1, r4, r5
 8011270:	428b      	cmp	r3, r1
 8011272:	bf04      	itt	eq
 8011274:	6819      	ldreq	r1, [r3, #0]
 8011276:	685b      	ldreq	r3, [r3, #4]
 8011278:	6063      	str	r3, [r4, #4]
 801127a:	bf04      	itt	eq
 801127c:	1949      	addeq	r1, r1, r5
 801127e:	6021      	streq	r1, [r4, #0]
 8011280:	6054      	str	r4, [r2, #4]
 8011282:	e7c7      	b.n	8011214 <_free_r+0x28>
 8011284:	b003      	add	sp, #12
 8011286:	bd30      	pop	{r4, r5, pc}
 8011288:	20000480 	.word	0x20000480

0801128c <_malloc_r>:
 801128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128e:	1ccd      	adds	r5, r1, #3
 8011290:	f025 0503 	bic.w	r5, r5, #3
 8011294:	3508      	adds	r5, #8
 8011296:	2d0c      	cmp	r5, #12
 8011298:	bf38      	it	cc
 801129a:	250c      	movcc	r5, #12
 801129c:	2d00      	cmp	r5, #0
 801129e:	4606      	mov	r6, r0
 80112a0:	db01      	blt.n	80112a6 <_malloc_r+0x1a>
 80112a2:	42a9      	cmp	r1, r5
 80112a4:	d903      	bls.n	80112ae <_malloc_r+0x22>
 80112a6:	230c      	movs	r3, #12
 80112a8:	6033      	str	r3, [r6, #0]
 80112aa:	2000      	movs	r0, #0
 80112ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ae:	f000 ff55 	bl	801215c <__malloc_lock>
 80112b2:	4921      	ldr	r1, [pc, #132]	; (8011338 <_malloc_r+0xac>)
 80112b4:	680a      	ldr	r2, [r1, #0]
 80112b6:	4614      	mov	r4, r2
 80112b8:	b99c      	cbnz	r4, 80112e2 <_malloc_r+0x56>
 80112ba:	4f20      	ldr	r7, [pc, #128]	; (801133c <_malloc_r+0xb0>)
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	b923      	cbnz	r3, 80112ca <_malloc_r+0x3e>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4630      	mov	r0, r6
 80112c4:	f000 fbb8 	bl	8011a38 <_sbrk_r>
 80112c8:	6038      	str	r0, [r7, #0]
 80112ca:	4629      	mov	r1, r5
 80112cc:	4630      	mov	r0, r6
 80112ce:	f000 fbb3 	bl	8011a38 <_sbrk_r>
 80112d2:	1c43      	adds	r3, r0, #1
 80112d4:	d123      	bne.n	801131e <_malloc_r+0x92>
 80112d6:	230c      	movs	r3, #12
 80112d8:	6033      	str	r3, [r6, #0]
 80112da:	4630      	mov	r0, r6
 80112dc:	f000 ff44 	bl	8012168 <__malloc_unlock>
 80112e0:	e7e3      	b.n	80112aa <_malloc_r+0x1e>
 80112e2:	6823      	ldr	r3, [r4, #0]
 80112e4:	1b5b      	subs	r3, r3, r5
 80112e6:	d417      	bmi.n	8011318 <_malloc_r+0x8c>
 80112e8:	2b0b      	cmp	r3, #11
 80112ea:	d903      	bls.n	80112f4 <_malloc_r+0x68>
 80112ec:	6023      	str	r3, [r4, #0]
 80112ee:	441c      	add	r4, r3
 80112f0:	6025      	str	r5, [r4, #0]
 80112f2:	e004      	b.n	80112fe <_malloc_r+0x72>
 80112f4:	6863      	ldr	r3, [r4, #4]
 80112f6:	42a2      	cmp	r2, r4
 80112f8:	bf0c      	ite	eq
 80112fa:	600b      	streq	r3, [r1, #0]
 80112fc:	6053      	strne	r3, [r2, #4]
 80112fe:	4630      	mov	r0, r6
 8011300:	f000 ff32 	bl	8012168 <__malloc_unlock>
 8011304:	f104 000b 	add.w	r0, r4, #11
 8011308:	1d23      	adds	r3, r4, #4
 801130a:	f020 0007 	bic.w	r0, r0, #7
 801130e:	1ac2      	subs	r2, r0, r3
 8011310:	d0cc      	beq.n	80112ac <_malloc_r+0x20>
 8011312:	1a1b      	subs	r3, r3, r0
 8011314:	50a3      	str	r3, [r4, r2]
 8011316:	e7c9      	b.n	80112ac <_malloc_r+0x20>
 8011318:	4622      	mov	r2, r4
 801131a:	6864      	ldr	r4, [r4, #4]
 801131c:	e7cc      	b.n	80112b8 <_malloc_r+0x2c>
 801131e:	1cc4      	adds	r4, r0, #3
 8011320:	f024 0403 	bic.w	r4, r4, #3
 8011324:	42a0      	cmp	r0, r4
 8011326:	d0e3      	beq.n	80112f0 <_malloc_r+0x64>
 8011328:	1a21      	subs	r1, r4, r0
 801132a:	4630      	mov	r0, r6
 801132c:	f000 fb84 	bl	8011a38 <_sbrk_r>
 8011330:	3001      	adds	r0, #1
 8011332:	d1dd      	bne.n	80112f0 <_malloc_r+0x64>
 8011334:	e7cf      	b.n	80112d6 <_malloc_r+0x4a>
 8011336:	bf00      	nop
 8011338:	20000480 	.word	0x20000480
 801133c:	20000484 	.word	0x20000484

08011340 <__sfputc_r>:
 8011340:	6893      	ldr	r3, [r2, #8]
 8011342:	3b01      	subs	r3, #1
 8011344:	2b00      	cmp	r3, #0
 8011346:	b410      	push	{r4}
 8011348:	6093      	str	r3, [r2, #8]
 801134a:	da08      	bge.n	801135e <__sfputc_r+0x1e>
 801134c:	6994      	ldr	r4, [r2, #24]
 801134e:	42a3      	cmp	r3, r4
 8011350:	db01      	blt.n	8011356 <__sfputc_r+0x16>
 8011352:	290a      	cmp	r1, #10
 8011354:	d103      	bne.n	801135e <__sfputc_r+0x1e>
 8011356:	f85d 4b04 	ldr.w	r4, [sp], #4
 801135a:	f000 bbff 	b.w	8011b5c <__swbuf_r>
 801135e:	6813      	ldr	r3, [r2, #0]
 8011360:	1c58      	adds	r0, r3, #1
 8011362:	6010      	str	r0, [r2, #0]
 8011364:	7019      	strb	r1, [r3, #0]
 8011366:	4608      	mov	r0, r1
 8011368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801136c:	4770      	bx	lr

0801136e <__sfputs_r>:
 801136e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	4614      	mov	r4, r2
 8011376:	18d5      	adds	r5, r2, r3
 8011378:	42ac      	cmp	r4, r5
 801137a:	d101      	bne.n	8011380 <__sfputs_r+0x12>
 801137c:	2000      	movs	r0, #0
 801137e:	e007      	b.n	8011390 <__sfputs_r+0x22>
 8011380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011384:	463a      	mov	r2, r7
 8011386:	4630      	mov	r0, r6
 8011388:	f7ff ffda 	bl	8011340 <__sfputc_r>
 801138c:	1c43      	adds	r3, r0, #1
 801138e:	d1f3      	bne.n	8011378 <__sfputs_r+0xa>
 8011390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011394 <_vfiprintf_r>:
 8011394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	460d      	mov	r5, r1
 801139a:	b09d      	sub	sp, #116	; 0x74
 801139c:	4614      	mov	r4, r2
 801139e:	4698      	mov	r8, r3
 80113a0:	4606      	mov	r6, r0
 80113a2:	b118      	cbz	r0, 80113ac <_vfiprintf_r+0x18>
 80113a4:	6983      	ldr	r3, [r0, #24]
 80113a6:	b90b      	cbnz	r3, 80113ac <_vfiprintf_r+0x18>
 80113a8:	f000 fdba 	bl	8011f20 <__sinit>
 80113ac:	4b89      	ldr	r3, [pc, #548]	; (80115d4 <_vfiprintf_r+0x240>)
 80113ae:	429d      	cmp	r5, r3
 80113b0:	d11b      	bne.n	80113ea <_vfiprintf_r+0x56>
 80113b2:	6875      	ldr	r5, [r6, #4]
 80113b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113b6:	07d9      	lsls	r1, r3, #31
 80113b8:	d405      	bmi.n	80113c6 <_vfiprintf_r+0x32>
 80113ba:	89ab      	ldrh	r3, [r5, #12]
 80113bc:	059a      	lsls	r2, r3, #22
 80113be:	d402      	bmi.n	80113c6 <_vfiprintf_r+0x32>
 80113c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113c2:	f000 fe4b 	bl	801205c <__retarget_lock_acquire_recursive>
 80113c6:	89ab      	ldrh	r3, [r5, #12]
 80113c8:	071b      	lsls	r3, r3, #28
 80113ca:	d501      	bpl.n	80113d0 <_vfiprintf_r+0x3c>
 80113cc:	692b      	ldr	r3, [r5, #16]
 80113ce:	b9eb      	cbnz	r3, 801140c <_vfiprintf_r+0x78>
 80113d0:	4629      	mov	r1, r5
 80113d2:	4630      	mov	r0, r6
 80113d4:	f000 fc14 	bl	8011c00 <__swsetup_r>
 80113d8:	b1c0      	cbz	r0, 801140c <_vfiprintf_r+0x78>
 80113da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113dc:	07dc      	lsls	r4, r3, #31
 80113de:	d50e      	bpl.n	80113fe <_vfiprintf_r+0x6a>
 80113e0:	f04f 30ff 	mov.w	r0, #4294967295
 80113e4:	b01d      	add	sp, #116	; 0x74
 80113e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ea:	4b7b      	ldr	r3, [pc, #492]	; (80115d8 <_vfiprintf_r+0x244>)
 80113ec:	429d      	cmp	r5, r3
 80113ee:	d101      	bne.n	80113f4 <_vfiprintf_r+0x60>
 80113f0:	68b5      	ldr	r5, [r6, #8]
 80113f2:	e7df      	b.n	80113b4 <_vfiprintf_r+0x20>
 80113f4:	4b79      	ldr	r3, [pc, #484]	; (80115dc <_vfiprintf_r+0x248>)
 80113f6:	429d      	cmp	r5, r3
 80113f8:	bf08      	it	eq
 80113fa:	68f5      	ldreq	r5, [r6, #12]
 80113fc:	e7da      	b.n	80113b4 <_vfiprintf_r+0x20>
 80113fe:	89ab      	ldrh	r3, [r5, #12]
 8011400:	0598      	lsls	r0, r3, #22
 8011402:	d4ed      	bmi.n	80113e0 <_vfiprintf_r+0x4c>
 8011404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011406:	f000 fe2a 	bl	801205e <__retarget_lock_release_recursive>
 801140a:	e7e9      	b.n	80113e0 <_vfiprintf_r+0x4c>
 801140c:	2300      	movs	r3, #0
 801140e:	9309      	str	r3, [sp, #36]	; 0x24
 8011410:	2320      	movs	r3, #32
 8011412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011416:	f8cd 800c 	str.w	r8, [sp, #12]
 801141a:	2330      	movs	r3, #48	; 0x30
 801141c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80115e0 <_vfiprintf_r+0x24c>
 8011420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011424:	f04f 0901 	mov.w	r9, #1
 8011428:	4623      	mov	r3, r4
 801142a:	469a      	mov	sl, r3
 801142c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011430:	b10a      	cbz	r2, 8011436 <_vfiprintf_r+0xa2>
 8011432:	2a25      	cmp	r2, #37	; 0x25
 8011434:	d1f9      	bne.n	801142a <_vfiprintf_r+0x96>
 8011436:	ebba 0b04 	subs.w	fp, sl, r4
 801143a:	d00b      	beq.n	8011454 <_vfiprintf_r+0xc0>
 801143c:	465b      	mov	r3, fp
 801143e:	4622      	mov	r2, r4
 8011440:	4629      	mov	r1, r5
 8011442:	4630      	mov	r0, r6
 8011444:	f7ff ff93 	bl	801136e <__sfputs_r>
 8011448:	3001      	adds	r0, #1
 801144a:	f000 80aa 	beq.w	80115a2 <_vfiprintf_r+0x20e>
 801144e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011450:	445a      	add	r2, fp
 8011452:	9209      	str	r2, [sp, #36]	; 0x24
 8011454:	f89a 3000 	ldrb.w	r3, [sl]
 8011458:	2b00      	cmp	r3, #0
 801145a:	f000 80a2 	beq.w	80115a2 <_vfiprintf_r+0x20e>
 801145e:	2300      	movs	r3, #0
 8011460:	f04f 32ff 	mov.w	r2, #4294967295
 8011464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011468:	f10a 0a01 	add.w	sl, sl, #1
 801146c:	9304      	str	r3, [sp, #16]
 801146e:	9307      	str	r3, [sp, #28]
 8011470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011474:	931a      	str	r3, [sp, #104]	; 0x68
 8011476:	4654      	mov	r4, sl
 8011478:	2205      	movs	r2, #5
 801147a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801147e:	4858      	ldr	r0, [pc, #352]	; (80115e0 <_vfiprintf_r+0x24c>)
 8011480:	f7ee fece 	bl	8000220 <memchr>
 8011484:	9a04      	ldr	r2, [sp, #16]
 8011486:	b9d8      	cbnz	r0, 80114c0 <_vfiprintf_r+0x12c>
 8011488:	06d1      	lsls	r1, r2, #27
 801148a:	bf44      	itt	mi
 801148c:	2320      	movmi	r3, #32
 801148e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011492:	0713      	lsls	r3, r2, #28
 8011494:	bf44      	itt	mi
 8011496:	232b      	movmi	r3, #43	; 0x2b
 8011498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801149c:	f89a 3000 	ldrb.w	r3, [sl]
 80114a0:	2b2a      	cmp	r3, #42	; 0x2a
 80114a2:	d015      	beq.n	80114d0 <_vfiprintf_r+0x13c>
 80114a4:	9a07      	ldr	r2, [sp, #28]
 80114a6:	4654      	mov	r4, sl
 80114a8:	2000      	movs	r0, #0
 80114aa:	f04f 0c0a 	mov.w	ip, #10
 80114ae:	4621      	mov	r1, r4
 80114b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114b4:	3b30      	subs	r3, #48	; 0x30
 80114b6:	2b09      	cmp	r3, #9
 80114b8:	d94e      	bls.n	8011558 <_vfiprintf_r+0x1c4>
 80114ba:	b1b0      	cbz	r0, 80114ea <_vfiprintf_r+0x156>
 80114bc:	9207      	str	r2, [sp, #28]
 80114be:	e014      	b.n	80114ea <_vfiprintf_r+0x156>
 80114c0:	eba0 0308 	sub.w	r3, r0, r8
 80114c4:	fa09 f303 	lsl.w	r3, r9, r3
 80114c8:	4313      	orrs	r3, r2
 80114ca:	9304      	str	r3, [sp, #16]
 80114cc:	46a2      	mov	sl, r4
 80114ce:	e7d2      	b.n	8011476 <_vfiprintf_r+0xe2>
 80114d0:	9b03      	ldr	r3, [sp, #12]
 80114d2:	1d19      	adds	r1, r3, #4
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	9103      	str	r1, [sp, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	bfbb      	ittet	lt
 80114dc:	425b      	neglt	r3, r3
 80114de:	f042 0202 	orrlt.w	r2, r2, #2
 80114e2:	9307      	strge	r3, [sp, #28]
 80114e4:	9307      	strlt	r3, [sp, #28]
 80114e6:	bfb8      	it	lt
 80114e8:	9204      	strlt	r2, [sp, #16]
 80114ea:	7823      	ldrb	r3, [r4, #0]
 80114ec:	2b2e      	cmp	r3, #46	; 0x2e
 80114ee:	d10c      	bne.n	801150a <_vfiprintf_r+0x176>
 80114f0:	7863      	ldrb	r3, [r4, #1]
 80114f2:	2b2a      	cmp	r3, #42	; 0x2a
 80114f4:	d135      	bne.n	8011562 <_vfiprintf_r+0x1ce>
 80114f6:	9b03      	ldr	r3, [sp, #12]
 80114f8:	1d1a      	adds	r2, r3, #4
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	9203      	str	r2, [sp, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	bfb8      	it	lt
 8011502:	f04f 33ff 	movlt.w	r3, #4294967295
 8011506:	3402      	adds	r4, #2
 8011508:	9305      	str	r3, [sp, #20]
 801150a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115f0 <_vfiprintf_r+0x25c>
 801150e:	7821      	ldrb	r1, [r4, #0]
 8011510:	2203      	movs	r2, #3
 8011512:	4650      	mov	r0, sl
 8011514:	f7ee fe84 	bl	8000220 <memchr>
 8011518:	b140      	cbz	r0, 801152c <_vfiprintf_r+0x198>
 801151a:	2340      	movs	r3, #64	; 0x40
 801151c:	eba0 000a 	sub.w	r0, r0, sl
 8011520:	fa03 f000 	lsl.w	r0, r3, r0
 8011524:	9b04      	ldr	r3, [sp, #16]
 8011526:	4303      	orrs	r3, r0
 8011528:	3401      	adds	r4, #1
 801152a:	9304      	str	r3, [sp, #16]
 801152c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011530:	482c      	ldr	r0, [pc, #176]	; (80115e4 <_vfiprintf_r+0x250>)
 8011532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011536:	2206      	movs	r2, #6
 8011538:	f7ee fe72 	bl	8000220 <memchr>
 801153c:	2800      	cmp	r0, #0
 801153e:	d03f      	beq.n	80115c0 <_vfiprintf_r+0x22c>
 8011540:	4b29      	ldr	r3, [pc, #164]	; (80115e8 <_vfiprintf_r+0x254>)
 8011542:	bb1b      	cbnz	r3, 801158c <_vfiprintf_r+0x1f8>
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	3307      	adds	r3, #7
 8011548:	f023 0307 	bic.w	r3, r3, #7
 801154c:	3308      	adds	r3, #8
 801154e:	9303      	str	r3, [sp, #12]
 8011550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011552:	443b      	add	r3, r7
 8011554:	9309      	str	r3, [sp, #36]	; 0x24
 8011556:	e767      	b.n	8011428 <_vfiprintf_r+0x94>
 8011558:	fb0c 3202 	mla	r2, ip, r2, r3
 801155c:	460c      	mov	r4, r1
 801155e:	2001      	movs	r0, #1
 8011560:	e7a5      	b.n	80114ae <_vfiprintf_r+0x11a>
 8011562:	2300      	movs	r3, #0
 8011564:	3401      	adds	r4, #1
 8011566:	9305      	str	r3, [sp, #20]
 8011568:	4619      	mov	r1, r3
 801156a:	f04f 0c0a 	mov.w	ip, #10
 801156e:	4620      	mov	r0, r4
 8011570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011574:	3a30      	subs	r2, #48	; 0x30
 8011576:	2a09      	cmp	r2, #9
 8011578:	d903      	bls.n	8011582 <_vfiprintf_r+0x1ee>
 801157a:	2b00      	cmp	r3, #0
 801157c:	d0c5      	beq.n	801150a <_vfiprintf_r+0x176>
 801157e:	9105      	str	r1, [sp, #20]
 8011580:	e7c3      	b.n	801150a <_vfiprintf_r+0x176>
 8011582:	fb0c 2101 	mla	r1, ip, r1, r2
 8011586:	4604      	mov	r4, r0
 8011588:	2301      	movs	r3, #1
 801158a:	e7f0      	b.n	801156e <_vfiprintf_r+0x1da>
 801158c:	ab03      	add	r3, sp, #12
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	462a      	mov	r2, r5
 8011592:	4b16      	ldr	r3, [pc, #88]	; (80115ec <_vfiprintf_r+0x258>)
 8011594:	a904      	add	r1, sp, #16
 8011596:	4630      	mov	r0, r6
 8011598:	f3af 8000 	nop.w
 801159c:	4607      	mov	r7, r0
 801159e:	1c78      	adds	r0, r7, #1
 80115a0:	d1d6      	bne.n	8011550 <_vfiprintf_r+0x1bc>
 80115a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115a4:	07d9      	lsls	r1, r3, #31
 80115a6:	d405      	bmi.n	80115b4 <_vfiprintf_r+0x220>
 80115a8:	89ab      	ldrh	r3, [r5, #12]
 80115aa:	059a      	lsls	r2, r3, #22
 80115ac:	d402      	bmi.n	80115b4 <_vfiprintf_r+0x220>
 80115ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115b0:	f000 fd55 	bl	801205e <__retarget_lock_release_recursive>
 80115b4:	89ab      	ldrh	r3, [r5, #12]
 80115b6:	065b      	lsls	r3, r3, #25
 80115b8:	f53f af12 	bmi.w	80113e0 <_vfiprintf_r+0x4c>
 80115bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115be:	e711      	b.n	80113e4 <_vfiprintf_r+0x50>
 80115c0:	ab03      	add	r3, sp, #12
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	462a      	mov	r2, r5
 80115c6:	4b09      	ldr	r3, [pc, #36]	; (80115ec <_vfiprintf_r+0x258>)
 80115c8:	a904      	add	r1, sp, #16
 80115ca:	4630      	mov	r0, r6
 80115cc:	f000 f880 	bl	80116d0 <_printf_i>
 80115d0:	e7e4      	b.n	801159c <_vfiprintf_r+0x208>
 80115d2:	bf00      	nop
 80115d4:	08013554 	.word	0x08013554
 80115d8:	08013574 	.word	0x08013574
 80115dc:	08013534 	.word	0x08013534
 80115e0:	08013500 	.word	0x08013500
 80115e4:	0801350a 	.word	0x0801350a
 80115e8:	00000000 	.word	0x00000000
 80115ec:	0801136f 	.word	0x0801136f
 80115f0:	08013506 	.word	0x08013506

080115f4 <_printf_common>:
 80115f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115f8:	4616      	mov	r6, r2
 80115fa:	4699      	mov	r9, r3
 80115fc:	688a      	ldr	r2, [r1, #8]
 80115fe:	690b      	ldr	r3, [r1, #16]
 8011600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011604:	4293      	cmp	r3, r2
 8011606:	bfb8      	it	lt
 8011608:	4613      	movlt	r3, r2
 801160a:	6033      	str	r3, [r6, #0]
 801160c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011610:	4607      	mov	r7, r0
 8011612:	460c      	mov	r4, r1
 8011614:	b10a      	cbz	r2, 801161a <_printf_common+0x26>
 8011616:	3301      	adds	r3, #1
 8011618:	6033      	str	r3, [r6, #0]
 801161a:	6823      	ldr	r3, [r4, #0]
 801161c:	0699      	lsls	r1, r3, #26
 801161e:	bf42      	ittt	mi
 8011620:	6833      	ldrmi	r3, [r6, #0]
 8011622:	3302      	addmi	r3, #2
 8011624:	6033      	strmi	r3, [r6, #0]
 8011626:	6825      	ldr	r5, [r4, #0]
 8011628:	f015 0506 	ands.w	r5, r5, #6
 801162c:	d106      	bne.n	801163c <_printf_common+0x48>
 801162e:	f104 0a19 	add.w	sl, r4, #25
 8011632:	68e3      	ldr	r3, [r4, #12]
 8011634:	6832      	ldr	r2, [r6, #0]
 8011636:	1a9b      	subs	r3, r3, r2
 8011638:	42ab      	cmp	r3, r5
 801163a:	dc26      	bgt.n	801168a <_printf_common+0x96>
 801163c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011640:	1e13      	subs	r3, r2, #0
 8011642:	6822      	ldr	r2, [r4, #0]
 8011644:	bf18      	it	ne
 8011646:	2301      	movne	r3, #1
 8011648:	0692      	lsls	r2, r2, #26
 801164a:	d42b      	bmi.n	80116a4 <_printf_common+0xb0>
 801164c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011650:	4649      	mov	r1, r9
 8011652:	4638      	mov	r0, r7
 8011654:	47c0      	blx	r8
 8011656:	3001      	adds	r0, #1
 8011658:	d01e      	beq.n	8011698 <_printf_common+0xa4>
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	68e5      	ldr	r5, [r4, #12]
 801165e:	6832      	ldr	r2, [r6, #0]
 8011660:	f003 0306 	and.w	r3, r3, #6
 8011664:	2b04      	cmp	r3, #4
 8011666:	bf08      	it	eq
 8011668:	1aad      	subeq	r5, r5, r2
 801166a:	68a3      	ldr	r3, [r4, #8]
 801166c:	6922      	ldr	r2, [r4, #16]
 801166e:	bf0c      	ite	eq
 8011670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011674:	2500      	movne	r5, #0
 8011676:	4293      	cmp	r3, r2
 8011678:	bfc4      	itt	gt
 801167a:	1a9b      	subgt	r3, r3, r2
 801167c:	18ed      	addgt	r5, r5, r3
 801167e:	2600      	movs	r6, #0
 8011680:	341a      	adds	r4, #26
 8011682:	42b5      	cmp	r5, r6
 8011684:	d11a      	bne.n	80116bc <_printf_common+0xc8>
 8011686:	2000      	movs	r0, #0
 8011688:	e008      	b.n	801169c <_printf_common+0xa8>
 801168a:	2301      	movs	r3, #1
 801168c:	4652      	mov	r2, sl
 801168e:	4649      	mov	r1, r9
 8011690:	4638      	mov	r0, r7
 8011692:	47c0      	blx	r8
 8011694:	3001      	adds	r0, #1
 8011696:	d103      	bne.n	80116a0 <_printf_common+0xac>
 8011698:	f04f 30ff 	mov.w	r0, #4294967295
 801169c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a0:	3501      	adds	r5, #1
 80116a2:	e7c6      	b.n	8011632 <_printf_common+0x3e>
 80116a4:	18e1      	adds	r1, r4, r3
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	2030      	movs	r0, #48	; 0x30
 80116aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80116ae:	4422      	add	r2, r4
 80116b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80116b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80116b8:	3302      	adds	r3, #2
 80116ba:	e7c7      	b.n	801164c <_printf_common+0x58>
 80116bc:	2301      	movs	r3, #1
 80116be:	4622      	mov	r2, r4
 80116c0:	4649      	mov	r1, r9
 80116c2:	4638      	mov	r0, r7
 80116c4:	47c0      	blx	r8
 80116c6:	3001      	adds	r0, #1
 80116c8:	d0e6      	beq.n	8011698 <_printf_common+0xa4>
 80116ca:	3601      	adds	r6, #1
 80116cc:	e7d9      	b.n	8011682 <_printf_common+0x8e>
	...

080116d0 <_printf_i>:
 80116d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116d4:	460c      	mov	r4, r1
 80116d6:	4691      	mov	r9, r2
 80116d8:	7e27      	ldrb	r7, [r4, #24]
 80116da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80116dc:	2f78      	cmp	r7, #120	; 0x78
 80116de:	4680      	mov	r8, r0
 80116e0:	469a      	mov	sl, r3
 80116e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116e6:	d807      	bhi.n	80116f8 <_printf_i+0x28>
 80116e8:	2f62      	cmp	r7, #98	; 0x62
 80116ea:	d80a      	bhi.n	8011702 <_printf_i+0x32>
 80116ec:	2f00      	cmp	r7, #0
 80116ee:	f000 80d8 	beq.w	80118a2 <_printf_i+0x1d2>
 80116f2:	2f58      	cmp	r7, #88	; 0x58
 80116f4:	f000 80a3 	beq.w	801183e <_printf_i+0x16e>
 80116f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80116fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011700:	e03a      	b.n	8011778 <_printf_i+0xa8>
 8011702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011706:	2b15      	cmp	r3, #21
 8011708:	d8f6      	bhi.n	80116f8 <_printf_i+0x28>
 801170a:	a001      	add	r0, pc, #4	; (adr r0, 8011710 <_printf_i+0x40>)
 801170c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011710:	08011769 	.word	0x08011769
 8011714:	0801177d 	.word	0x0801177d
 8011718:	080116f9 	.word	0x080116f9
 801171c:	080116f9 	.word	0x080116f9
 8011720:	080116f9 	.word	0x080116f9
 8011724:	080116f9 	.word	0x080116f9
 8011728:	0801177d 	.word	0x0801177d
 801172c:	080116f9 	.word	0x080116f9
 8011730:	080116f9 	.word	0x080116f9
 8011734:	080116f9 	.word	0x080116f9
 8011738:	080116f9 	.word	0x080116f9
 801173c:	08011889 	.word	0x08011889
 8011740:	080117ad 	.word	0x080117ad
 8011744:	0801186b 	.word	0x0801186b
 8011748:	080116f9 	.word	0x080116f9
 801174c:	080116f9 	.word	0x080116f9
 8011750:	080118ab 	.word	0x080118ab
 8011754:	080116f9 	.word	0x080116f9
 8011758:	080117ad 	.word	0x080117ad
 801175c:	080116f9 	.word	0x080116f9
 8011760:	080116f9 	.word	0x080116f9
 8011764:	08011873 	.word	0x08011873
 8011768:	680b      	ldr	r3, [r1, #0]
 801176a:	1d1a      	adds	r2, r3, #4
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	600a      	str	r2, [r1, #0]
 8011770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011778:	2301      	movs	r3, #1
 801177a:	e0a3      	b.n	80118c4 <_printf_i+0x1f4>
 801177c:	6825      	ldr	r5, [r4, #0]
 801177e:	6808      	ldr	r0, [r1, #0]
 8011780:	062e      	lsls	r6, r5, #24
 8011782:	f100 0304 	add.w	r3, r0, #4
 8011786:	d50a      	bpl.n	801179e <_printf_i+0xce>
 8011788:	6805      	ldr	r5, [r0, #0]
 801178a:	600b      	str	r3, [r1, #0]
 801178c:	2d00      	cmp	r5, #0
 801178e:	da03      	bge.n	8011798 <_printf_i+0xc8>
 8011790:	232d      	movs	r3, #45	; 0x2d
 8011792:	426d      	negs	r5, r5
 8011794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011798:	485e      	ldr	r0, [pc, #376]	; (8011914 <_printf_i+0x244>)
 801179a:	230a      	movs	r3, #10
 801179c:	e019      	b.n	80117d2 <_printf_i+0x102>
 801179e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80117a2:	6805      	ldr	r5, [r0, #0]
 80117a4:	600b      	str	r3, [r1, #0]
 80117a6:	bf18      	it	ne
 80117a8:	b22d      	sxthne	r5, r5
 80117aa:	e7ef      	b.n	801178c <_printf_i+0xbc>
 80117ac:	680b      	ldr	r3, [r1, #0]
 80117ae:	6825      	ldr	r5, [r4, #0]
 80117b0:	1d18      	adds	r0, r3, #4
 80117b2:	6008      	str	r0, [r1, #0]
 80117b4:	0628      	lsls	r0, r5, #24
 80117b6:	d501      	bpl.n	80117bc <_printf_i+0xec>
 80117b8:	681d      	ldr	r5, [r3, #0]
 80117ba:	e002      	b.n	80117c2 <_printf_i+0xf2>
 80117bc:	0669      	lsls	r1, r5, #25
 80117be:	d5fb      	bpl.n	80117b8 <_printf_i+0xe8>
 80117c0:	881d      	ldrh	r5, [r3, #0]
 80117c2:	4854      	ldr	r0, [pc, #336]	; (8011914 <_printf_i+0x244>)
 80117c4:	2f6f      	cmp	r7, #111	; 0x6f
 80117c6:	bf0c      	ite	eq
 80117c8:	2308      	moveq	r3, #8
 80117ca:	230a      	movne	r3, #10
 80117cc:	2100      	movs	r1, #0
 80117ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80117d2:	6866      	ldr	r6, [r4, #4]
 80117d4:	60a6      	str	r6, [r4, #8]
 80117d6:	2e00      	cmp	r6, #0
 80117d8:	bfa2      	ittt	ge
 80117da:	6821      	ldrge	r1, [r4, #0]
 80117dc:	f021 0104 	bicge.w	r1, r1, #4
 80117e0:	6021      	strge	r1, [r4, #0]
 80117e2:	b90d      	cbnz	r5, 80117e8 <_printf_i+0x118>
 80117e4:	2e00      	cmp	r6, #0
 80117e6:	d04d      	beq.n	8011884 <_printf_i+0x1b4>
 80117e8:	4616      	mov	r6, r2
 80117ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80117ee:	fb03 5711 	mls	r7, r3, r1, r5
 80117f2:	5dc7      	ldrb	r7, [r0, r7]
 80117f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117f8:	462f      	mov	r7, r5
 80117fa:	42bb      	cmp	r3, r7
 80117fc:	460d      	mov	r5, r1
 80117fe:	d9f4      	bls.n	80117ea <_printf_i+0x11a>
 8011800:	2b08      	cmp	r3, #8
 8011802:	d10b      	bne.n	801181c <_printf_i+0x14c>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	07df      	lsls	r7, r3, #31
 8011808:	d508      	bpl.n	801181c <_printf_i+0x14c>
 801180a:	6923      	ldr	r3, [r4, #16]
 801180c:	6861      	ldr	r1, [r4, #4]
 801180e:	4299      	cmp	r1, r3
 8011810:	bfde      	ittt	le
 8011812:	2330      	movle	r3, #48	; 0x30
 8011814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011818:	f106 36ff 	addle.w	r6, r6, #4294967295
 801181c:	1b92      	subs	r2, r2, r6
 801181e:	6122      	str	r2, [r4, #16]
 8011820:	f8cd a000 	str.w	sl, [sp]
 8011824:	464b      	mov	r3, r9
 8011826:	aa03      	add	r2, sp, #12
 8011828:	4621      	mov	r1, r4
 801182a:	4640      	mov	r0, r8
 801182c:	f7ff fee2 	bl	80115f4 <_printf_common>
 8011830:	3001      	adds	r0, #1
 8011832:	d14c      	bne.n	80118ce <_printf_i+0x1fe>
 8011834:	f04f 30ff 	mov.w	r0, #4294967295
 8011838:	b004      	add	sp, #16
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	4835      	ldr	r0, [pc, #212]	; (8011914 <_printf_i+0x244>)
 8011840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	680e      	ldr	r6, [r1, #0]
 8011848:	061f      	lsls	r7, r3, #24
 801184a:	f856 5b04 	ldr.w	r5, [r6], #4
 801184e:	600e      	str	r6, [r1, #0]
 8011850:	d514      	bpl.n	801187c <_printf_i+0x1ac>
 8011852:	07d9      	lsls	r1, r3, #31
 8011854:	bf44      	itt	mi
 8011856:	f043 0320 	orrmi.w	r3, r3, #32
 801185a:	6023      	strmi	r3, [r4, #0]
 801185c:	b91d      	cbnz	r5, 8011866 <_printf_i+0x196>
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	f023 0320 	bic.w	r3, r3, #32
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	2310      	movs	r3, #16
 8011868:	e7b0      	b.n	80117cc <_printf_i+0xfc>
 801186a:	6823      	ldr	r3, [r4, #0]
 801186c:	f043 0320 	orr.w	r3, r3, #32
 8011870:	6023      	str	r3, [r4, #0]
 8011872:	2378      	movs	r3, #120	; 0x78
 8011874:	4828      	ldr	r0, [pc, #160]	; (8011918 <_printf_i+0x248>)
 8011876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801187a:	e7e3      	b.n	8011844 <_printf_i+0x174>
 801187c:	065e      	lsls	r6, r3, #25
 801187e:	bf48      	it	mi
 8011880:	b2ad      	uxthmi	r5, r5
 8011882:	e7e6      	b.n	8011852 <_printf_i+0x182>
 8011884:	4616      	mov	r6, r2
 8011886:	e7bb      	b.n	8011800 <_printf_i+0x130>
 8011888:	680b      	ldr	r3, [r1, #0]
 801188a:	6826      	ldr	r6, [r4, #0]
 801188c:	6960      	ldr	r0, [r4, #20]
 801188e:	1d1d      	adds	r5, r3, #4
 8011890:	600d      	str	r5, [r1, #0]
 8011892:	0635      	lsls	r5, r6, #24
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	d501      	bpl.n	801189c <_printf_i+0x1cc>
 8011898:	6018      	str	r0, [r3, #0]
 801189a:	e002      	b.n	80118a2 <_printf_i+0x1d2>
 801189c:	0671      	lsls	r1, r6, #25
 801189e:	d5fb      	bpl.n	8011898 <_printf_i+0x1c8>
 80118a0:	8018      	strh	r0, [r3, #0]
 80118a2:	2300      	movs	r3, #0
 80118a4:	6123      	str	r3, [r4, #16]
 80118a6:	4616      	mov	r6, r2
 80118a8:	e7ba      	b.n	8011820 <_printf_i+0x150>
 80118aa:	680b      	ldr	r3, [r1, #0]
 80118ac:	1d1a      	adds	r2, r3, #4
 80118ae:	600a      	str	r2, [r1, #0]
 80118b0:	681e      	ldr	r6, [r3, #0]
 80118b2:	6862      	ldr	r2, [r4, #4]
 80118b4:	2100      	movs	r1, #0
 80118b6:	4630      	mov	r0, r6
 80118b8:	f7ee fcb2 	bl	8000220 <memchr>
 80118bc:	b108      	cbz	r0, 80118c2 <_printf_i+0x1f2>
 80118be:	1b80      	subs	r0, r0, r6
 80118c0:	6060      	str	r0, [r4, #4]
 80118c2:	6863      	ldr	r3, [r4, #4]
 80118c4:	6123      	str	r3, [r4, #16]
 80118c6:	2300      	movs	r3, #0
 80118c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118cc:	e7a8      	b.n	8011820 <_printf_i+0x150>
 80118ce:	6923      	ldr	r3, [r4, #16]
 80118d0:	4632      	mov	r2, r6
 80118d2:	4649      	mov	r1, r9
 80118d4:	4640      	mov	r0, r8
 80118d6:	47d0      	blx	sl
 80118d8:	3001      	adds	r0, #1
 80118da:	d0ab      	beq.n	8011834 <_printf_i+0x164>
 80118dc:	6823      	ldr	r3, [r4, #0]
 80118de:	079b      	lsls	r3, r3, #30
 80118e0:	d413      	bmi.n	801190a <_printf_i+0x23a>
 80118e2:	68e0      	ldr	r0, [r4, #12]
 80118e4:	9b03      	ldr	r3, [sp, #12]
 80118e6:	4298      	cmp	r0, r3
 80118e8:	bfb8      	it	lt
 80118ea:	4618      	movlt	r0, r3
 80118ec:	e7a4      	b.n	8011838 <_printf_i+0x168>
 80118ee:	2301      	movs	r3, #1
 80118f0:	4632      	mov	r2, r6
 80118f2:	4649      	mov	r1, r9
 80118f4:	4640      	mov	r0, r8
 80118f6:	47d0      	blx	sl
 80118f8:	3001      	adds	r0, #1
 80118fa:	d09b      	beq.n	8011834 <_printf_i+0x164>
 80118fc:	3501      	adds	r5, #1
 80118fe:	68e3      	ldr	r3, [r4, #12]
 8011900:	9903      	ldr	r1, [sp, #12]
 8011902:	1a5b      	subs	r3, r3, r1
 8011904:	42ab      	cmp	r3, r5
 8011906:	dcf2      	bgt.n	80118ee <_printf_i+0x21e>
 8011908:	e7eb      	b.n	80118e2 <_printf_i+0x212>
 801190a:	2500      	movs	r5, #0
 801190c:	f104 0619 	add.w	r6, r4, #25
 8011910:	e7f5      	b.n	80118fe <_printf_i+0x22e>
 8011912:	bf00      	nop
 8011914:	08013511 	.word	0x08013511
 8011918:	08013522 	.word	0x08013522

0801191c <iprintf>:
 801191c:	b40f      	push	{r0, r1, r2, r3}
 801191e:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <iprintf+0x2c>)
 8011920:	b513      	push	{r0, r1, r4, lr}
 8011922:	681c      	ldr	r4, [r3, #0]
 8011924:	b124      	cbz	r4, 8011930 <iprintf+0x14>
 8011926:	69a3      	ldr	r3, [r4, #24]
 8011928:	b913      	cbnz	r3, 8011930 <iprintf+0x14>
 801192a:	4620      	mov	r0, r4
 801192c:	f000 faf8 	bl	8011f20 <__sinit>
 8011930:	ab05      	add	r3, sp, #20
 8011932:	9a04      	ldr	r2, [sp, #16]
 8011934:	68a1      	ldr	r1, [r4, #8]
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	4620      	mov	r0, r4
 801193a:	f7ff fd2b 	bl	8011394 <_vfiprintf_r>
 801193e:	b002      	add	sp, #8
 8011940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011944:	b004      	add	sp, #16
 8011946:	4770      	bx	lr
 8011948:	20000180 	.word	0x20000180

0801194c <_puts_r>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	460e      	mov	r6, r1
 8011950:	4605      	mov	r5, r0
 8011952:	b118      	cbz	r0, 801195c <_puts_r+0x10>
 8011954:	6983      	ldr	r3, [r0, #24]
 8011956:	b90b      	cbnz	r3, 801195c <_puts_r+0x10>
 8011958:	f000 fae2 	bl	8011f20 <__sinit>
 801195c:	69ab      	ldr	r3, [r5, #24]
 801195e:	68ac      	ldr	r4, [r5, #8]
 8011960:	b913      	cbnz	r3, 8011968 <_puts_r+0x1c>
 8011962:	4628      	mov	r0, r5
 8011964:	f000 fadc 	bl	8011f20 <__sinit>
 8011968:	4b2c      	ldr	r3, [pc, #176]	; (8011a1c <_puts_r+0xd0>)
 801196a:	429c      	cmp	r4, r3
 801196c:	d120      	bne.n	80119b0 <_puts_r+0x64>
 801196e:	686c      	ldr	r4, [r5, #4]
 8011970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011972:	07db      	lsls	r3, r3, #31
 8011974:	d405      	bmi.n	8011982 <_puts_r+0x36>
 8011976:	89a3      	ldrh	r3, [r4, #12]
 8011978:	0598      	lsls	r0, r3, #22
 801197a:	d402      	bmi.n	8011982 <_puts_r+0x36>
 801197c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801197e:	f000 fb6d 	bl	801205c <__retarget_lock_acquire_recursive>
 8011982:	89a3      	ldrh	r3, [r4, #12]
 8011984:	0719      	lsls	r1, r3, #28
 8011986:	d51d      	bpl.n	80119c4 <_puts_r+0x78>
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	b1db      	cbz	r3, 80119c4 <_puts_r+0x78>
 801198c:	3e01      	subs	r6, #1
 801198e:	68a3      	ldr	r3, [r4, #8]
 8011990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011994:	3b01      	subs	r3, #1
 8011996:	60a3      	str	r3, [r4, #8]
 8011998:	bb39      	cbnz	r1, 80119ea <_puts_r+0x9e>
 801199a:	2b00      	cmp	r3, #0
 801199c:	da38      	bge.n	8011a10 <_puts_r+0xc4>
 801199e:	4622      	mov	r2, r4
 80119a0:	210a      	movs	r1, #10
 80119a2:	4628      	mov	r0, r5
 80119a4:	f000 f8da 	bl	8011b5c <__swbuf_r>
 80119a8:	3001      	adds	r0, #1
 80119aa:	d011      	beq.n	80119d0 <_puts_r+0x84>
 80119ac:	250a      	movs	r5, #10
 80119ae:	e011      	b.n	80119d4 <_puts_r+0x88>
 80119b0:	4b1b      	ldr	r3, [pc, #108]	; (8011a20 <_puts_r+0xd4>)
 80119b2:	429c      	cmp	r4, r3
 80119b4:	d101      	bne.n	80119ba <_puts_r+0x6e>
 80119b6:	68ac      	ldr	r4, [r5, #8]
 80119b8:	e7da      	b.n	8011970 <_puts_r+0x24>
 80119ba:	4b1a      	ldr	r3, [pc, #104]	; (8011a24 <_puts_r+0xd8>)
 80119bc:	429c      	cmp	r4, r3
 80119be:	bf08      	it	eq
 80119c0:	68ec      	ldreq	r4, [r5, #12]
 80119c2:	e7d5      	b.n	8011970 <_puts_r+0x24>
 80119c4:	4621      	mov	r1, r4
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 f91a 	bl	8011c00 <__swsetup_r>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d0dd      	beq.n	801198c <_puts_r+0x40>
 80119d0:	f04f 35ff 	mov.w	r5, #4294967295
 80119d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119d6:	07da      	lsls	r2, r3, #31
 80119d8:	d405      	bmi.n	80119e6 <_puts_r+0x9a>
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	059b      	lsls	r3, r3, #22
 80119de:	d402      	bmi.n	80119e6 <_puts_r+0x9a>
 80119e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119e2:	f000 fb3c 	bl	801205e <__retarget_lock_release_recursive>
 80119e6:	4628      	mov	r0, r5
 80119e8:	bd70      	pop	{r4, r5, r6, pc}
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	da04      	bge.n	80119f8 <_puts_r+0xac>
 80119ee:	69a2      	ldr	r2, [r4, #24]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	dc06      	bgt.n	8011a02 <_puts_r+0xb6>
 80119f4:	290a      	cmp	r1, #10
 80119f6:	d004      	beq.n	8011a02 <_puts_r+0xb6>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	6022      	str	r2, [r4, #0]
 80119fe:	7019      	strb	r1, [r3, #0]
 8011a00:	e7c5      	b.n	801198e <_puts_r+0x42>
 8011a02:	4622      	mov	r2, r4
 8011a04:	4628      	mov	r0, r5
 8011a06:	f000 f8a9 	bl	8011b5c <__swbuf_r>
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	d1bf      	bne.n	801198e <_puts_r+0x42>
 8011a0e:	e7df      	b.n	80119d0 <_puts_r+0x84>
 8011a10:	6823      	ldr	r3, [r4, #0]
 8011a12:	250a      	movs	r5, #10
 8011a14:	1c5a      	adds	r2, r3, #1
 8011a16:	6022      	str	r2, [r4, #0]
 8011a18:	701d      	strb	r5, [r3, #0]
 8011a1a:	e7db      	b.n	80119d4 <_puts_r+0x88>
 8011a1c:	08013554 	.word	0x08013554
 8011a20:	08013574 	.word	0x08013574
 8011a24:	08013534 	.word	0x08013534

08011a28 <puts>:
 8011a28:	4b02      	ldr	r3, [pc, #8]	; (8011a34 <puts+0xc>)
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	6818      	ldr	r0, [r3, #0]
 8011a2e:	f7ff bf8d 	b.w	801194c <_puts_r>
 8011a32:	bf00      	nop
 8011a34:	20000180 	.word	0x20000180

08011a38 <_sbrk_r>:
 8011a38:	b538      	push	{r3, r4, r5, lr}
 8011a3a:	4d06      	ldr	r5, [pc, #24]	; (8011a54 <_sbrk_r+0x1c>)
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4604      	mov	r4, r0
 8011a40:	4608      	mov	r0, r1
 8011a42:	602b      	str	r3, [r5, #0]
 8011a44:	f7f6 fcb2 	bl	80083ac <_sbrk>
 8011a48:	1c43      	adds	r3, r0, #1
 8011a4a:	d102      	bne.n	8011a52 <_sbrk_r+0x1a>
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	b103      	cbz	r3, 8011a52 <_sbrk_r+0x1a>
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	bd38      	pop	{r3, r4, r5, pc}
 8011a54:	200022d8 	.word	0x200022d8

08011a58 <sniprintf>:
 8011a58:	b40c      	push	{r2, r3}
 8011a5a:	b530      	push	{r4, r5, lr}
 8011a5c:	4b17      	ldr	r3, [pc, #92]	; (8011abc <sniprintf+0x64>)
 8011a5e:	1e0c      	subs	r4, r1, #0
 8011a60:	681d      	ldr	r5, [r3, #0]
 8011a62:	b09d      	sub	sp, #116	; 0x74
 8011a64:	da08      	bge.n	8011a78 <sniprintf+0x20>
 8011a66:	238b      	movs	r3, #139	; 0x8b
 8011a68:	602b      	str	r3, [r5, #0]
 8011a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6e:	b01d      	add	sp, #116	; 0x74
 8011a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a74:	b002      	add	sp, #8
 8011a76:	4770      	bx	lr
 8011a78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011a7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a80:	bf14      	ite	ne
 8011a82:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011a86:	4623      	moveq	r3, r4
 8011a88:	9304      	str	r3, [sp, #16]
 8011a8a:	9307      	str	r3, [sp, #28]
 8011a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a90:	9002      	str	r0, [sp, #8]
 8011a92:	9006      	str	r0, [sp, #24]
 8011a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011a9a:	ab21      	add	r3, sp, #132	; 0x84
 8011a9c:	a902      	add	r1, sp, #8
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	f000 fbe9 	bl	8012278 <_svfiprintf_r>
 8011aa6:	1c43      	adds	r3, r0, #1
 8011aa8:	bfbc      	itt	lt
 8011aaa:	238b      	movlt	r3, #139	; 0x8b
 8011aac:	602b      	strlt	r3, [r5, #0]
 8011aae:	2c00      	cmp	r4, #0
 8011ab0:	d0dd      	beq.n	8011a6e <sniprintf+0x16>
 8011ab2:	9b02      	ldr	r3, [sp, #8]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	701a      	strb	r2, [r3, #0]
 8011ab8:	e7d9      	b.n	8011a6e <sniprintf+0x16>
 8011aba:	bf00      	nop
 8011abc:	20000180 	.word	0x20000180

08011ac0 <siprintf>:
 8011ac0:	b40e      	push	{r1, r2, r3}
 8011ac2:	b500      	push	{lr}
 8011ac4:	b09c      	sub	sp, #112	; 0x70
 8011ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8011ac8:	9002      	str	r0, [sp, #8]
 8011aca:	9006      	str	r0, [sp, #24]
 8011acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ad0:	4809      	ldr	r0, [pc, #36]	; (8011af8 <siprintf+0x38>)
 8011ad2:	9107      	str	r1, [sp, #28]
 8011ad4:	9104      	str	r1, [sp, #16]
 8011ad6:	4909      	ldr	r1, [pc, #36]	; (8011afc <siprintf+0x3c>)
 8011ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011adc:	9105      	str	r1, [sp, #20]
 8011ade:	6800      	ldr	r0, [r0, #0]
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	a902      	add	r1, sp, #8
 8011ae4:	f000 fbc8 	bl	8012278 <_svfiprintf_r>
 8011ae8:	9b02      	ldr	r3, [sp, #8]
 8011aea:	2200      	movs	r2, #0
 8011aec:	701a      	strb	r2, [r3, #0]
 8011aee:	b01c      	add	sp, #112	; 0x70
 8011af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011af4:	b003      	add	sp, #12
 8011af6:	4770      	bx	lr
 8011af8:	20000180 	.word	0x20000180
 8011afc:	ffff0208 	.word	0xffff0208

08011b00 <strchr>:
 8011b00:	b2c9      	uxtb	r1, r1
 8011b02:	4603      	mov	r3, r0
 8011b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b08:	b11a      	cbz	r2, 8011b12 <strchr+0x12>
 8011b0a:	428a      	cmp	r2, r1
 8011b0c:	d1f9      	bne.n	8011b02 <strchr+0x2>
 8011b0e:	4618      	mov	r0, r3
 8011b10:	4770      	bx	lr
 8011b12:	2900      	cmp	r1, #0
 8011b14:	bf18      	it	ne
 8011b16:	2300      	movne	r3, #0
 8011b18:	e7f9      	b.n	8011b0e <strchr+0xe>

08011b1a <strcspn>:
 8011b1a:	b570      	push	{r4, r5, r6, lr}
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	461e      	mov	r6, r3
 8011b20:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011b24:	b144      	cbz	r4, 8011b38 <strcspn+0x1e>
 8011b26:	1e4a      	subs	r2, r1, #1
 8011b28:	e001      	b.n	8011b2e <strcspn+0x14>
 8011b2a:	42a5      	cmp	r5, r4
 8011b2c:	d004      	beq.n	8011b38 <strcspn+0x1e>
 8011b2e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011b32:	2d00      	cmp	r5, #0
 8011b34:	d1f9      	bne.n	8011b2a <strcspn+0x10>
 8011b36:	e7f2      	b.n	8011b1e <strcspn+0x4>
 8011b38:	1a30      	subs	r0, r6, r0
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}

08011b3c <strspn>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4603      	mov	r3, r0
 8011b40:	461e      	mov	r6, r3
 8011b42:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011b46:	b13c      	cbz	r4, 8011b58 <strspn+0x1c>
 8011b48:	1e4a      	subs	r2, r1, #1
 8011b4a:	e001      	b.n	8011b50 <strspn+0x14>
 8011b4c:	42a5      	cmp	r5, r4
 8011b4e:	d0f7      	beq.n	8011b40 <strspn+0x4>
 8011b50:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011b54:	2d00      	cmp	r5, #0
 8011b56:	d1f9      	bne.n	8011b4c <strspn+0x10>
 8011b58:	1a30      	subs	r0, r6, r0
 8011b5a:	bd70      	pop	{r4, r5, r6, pc}

08011b5c <__swbuf_r>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	460e      	mov	r6, r1
 8011b60:	4614      	mov	r4, r2
 8011b62:	4605      	mov	r5, r0
 8011b64:	b118      	cbz	r0, 8011b6e <__swbuf_r+0x12>
 8011b66:	6983      	ldr	r3, [r0, #24]
 8011b68:	b90b      	cbnz	r3, 8011b6e <__swbuf_r+0x12>
 8011b6a:	f000 f9d9 	bl	8011f20 <__sinit>
 8011b6e:	4b21      	ldr	r3, [pc, #132]	; (8011bf4 <__swbuf_r+0x98>)
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d12b      	bne.n	8011bcc <__swbuf_r+0x70>
 8011b74:	686c      	ldr	r4, [r5, #4]
 8011b76:	69a3      	ldr	r3, [r4, #24]
 8011b78:	60a3      	str	r3, [r4, #8]
 8011b7a:	89a3      	ldrh	r3, [r4, #12]
 8011b7c:	071a      	lsls	r2, r3, #28
 8011b7e:	d52f      	bpl.n	8011be0 <__swbuf_r+0x84>
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	b36b      	cbz	r3, 8011be0 <__swbuf_r+0x84>
 8011b84:	6923      	ldr	r3, [r4, #16]
 8011b86:	6820      	ldr	r0, [r4, #0]
 8011b88:	1ac0      	subs	r0, r0, r3
 8011b8a:	6963      	ldr	r3, [r4, #20]
 8011b8c:	b2f6      	uxtb	r6, r6
 8011b8e:	4283      	cmp	r3, r0
 8011b90:	4637      	mov	r7, r6
 8011b92:	dc04      	bgt.n	8011b9e <__swbuf_r+0x42>
 8011b94:	4621      	mov	r1, r4
 8011b96:	4628      	mov	r0, r5
 8011b98:	f000 f92e 	bl	8011df8 <_fflush_r>
 8011b9c:	bb30      	cbnz	r0, 8011bec <__swbuf_r+0x90>
 8011b9e:	68a3      	ldr	r3, [r4, #8]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	60a3      	str	r3, [r4, #8]
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	1c5a      	adds	r2, r3, #1
 8011ba8:	6022      	str	r2, [r4, #0]
 8011baa:	701e      	strb	r6, [r3, #0]
 8011bac:	6963      	ldr	r3, [r4, #20]
 8011bae:	3001      	adds	r0, #1
 8011bb0:	4283      	cmp	r3, r0
 8011bb2:	d004      	beq.n	8011bbe <__swbuf_r+0x62>
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	07db      	lsls	r3, r3, #31
 8011bb8:	d506      	bpl.n	8011bc8 <__swbuf_r+0x6c>
 8011bba:	2e0a      	cmp	r6, #10
 8011bbc:	d104      	bne.n	8011bc8 <__swbuf_r+0x6c>
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f000 f919 	bl	8011df8 <_fflush_r>
 8011bc6:	b988      	cbnz	r0, 8011bec <__swbuf_r+0x90>
 8011bc8:	4638      	mov	r0, r7
 8011bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bcc:	4b0a      	ldr	r3, [pc, #40]	; (8011bf8 <__swbuf_r+0x9c>)
 8011bce:	429c      	cmp	r4, r3
 8011bd0:	d101      	bne.n	8011bd6 <__swbuf_r+0x7a>
 8011bd2:	68ac      	ldr	r4, [r5, #8]
 8011bd4:	e7cf      	b.n	8011b76 <__swbuf_r+0x1a>
 8011bd6:	4b09      	ldr	r3, [pc, #36]	; (8011bfc <__swbuf_r+0xa0>)
 8011bd8:	429c      	cmp	r4, r3
 8011bda:	bf08      	it	eq
 8011bdc:	68ec      	ldreq	r4, [r5, #12]
 8011bde:	e7ca      	b.n	8011b76 <__swbuf_r+0x1a>
 8011be0:	4621      	mov	r1, r4
 8011be2:	4628      	mov	r0, r5
 8011be4:	f000 f80c 	bl	8011c00 <__swsetup_r>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d0cb      	beq.n	8011b84 <__swbuf_r+0x28>
 8011bec:	f04f 37ff 	mov.w	r7, #4294967295
 8011bf0:	e7ea      	b.n	8011bc8 <__swbuf_r+0x6c>
 8011bf2:	bf00      	nop
 8011bf4:	08013554 	.word	0x08013554
 8011bf8:	08013574 	.word	0x08013574
 8011bfc:	08013534 	.word	0x08013534

08011c00 <__swsetup_r>:
 8011c00:	4b32      	ldr	r3, [pc, #200]	; (8011ccc <__swsetup_r+0xcc>)
 8011c02:	b570      	push	{r4, r5, r6, lr}
 8011c04:	681d      	ldr	r5, [r3, #0]
 8011c06:	4606      	mov	r6, r0
 8011c08:	460c      	mov	r4, r1
 8011c0a:	b125      	cbz	r5, 8011c16 <__swsetup_r+0x16>
 8011c0c:	69ab      	ldr	r3, [r5, #24]
 8011c0e:	b913      	cbnz	r3, 8011c16 <__swsetup_r+0x16>
 8011c10:	4628      	mov	r0, r5
 8011c12:	f000 f985 	bl	8011f20 <__sinit>
 8011c16:	4b2e      	ldr	r3, [pc, #184]	; (8011cd0 <__swsetup_r+0xd0>)
 8011c18:	429c      	cmp	r4, r3
 8011c1a:	d10f      	bne.n	8011c3c <__swsetup_r+0x3c>
 8011c1c:	686c      	ldr	r4, [r5, #4]
 8011c1e:	89a3      	ldrh	r3, [r4, #12]
 8011c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c24:	0719      	lsls	r1, r3, #28
 8011c26:	d42c      	bmi.n	8011c82 <__swsetup_r+0x82>
 8011c28:	06dd      	lsls	r5, r3, #27
 8011c2a:	d411      	bmi.n	8011c50 <__swsetup_r+0x50>
 8011c2c:	2309      	movs	r3, #9
 8011c2e:	6033      	str	r3, [r6, #0]
 8011c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c34:	81a3      	strh	r3, [r4, #12]
 8011c36:	f04f 30ff 	mov.w	r0, #4294967295
 8011c3a:	e03e      	b.n	8011cba <__swsetup_r+0xba>
 8011c3c:	4b25      	ldr	r3, [pc, #148]	; (8011cd4 <__swsetup_r+0xd4>)
 8011c3e:	429c      	cmp	r4, r3
 8011c40:	d101      	bne.n	8011c46 <__swsetup_r+0x46>
 8011c42:	68ac      	ldr	r4, [r5, #8]
 8011c44:	e7eb      	b.n	8011c1e <__swsetup_r+0x1e>
 8011c46:	4b24      	ldr	r3, [pc, #144]	; (8011cd8 <__swsetup_r+0xd8>)
 8011c48:	429c      	cmp	r4, r3
 8011c4a:	bf08      	it	eq
 8011c4c:	68ec      	ldreq	r4, [r5, #12]
 8011c4e:	e7e6      	b.n	8011c1e <__swsetup_r+0x1e>
 8011c50:	0758      	lsls	r0, r3, #29
 8011c52:	d512      	bpl.n	8011c7a <__swsetup_r+0x7a>
 8011c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c56:	b141      	cbz	r1, 8011c6a <__swsetup_r+0x6a>
 8011c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c5c:	4299      	cmp	r1, r3
 8011c5e:	d002      	beq.n	8011c66 <__swsetup_r+0x66>
 8011c60:	4630      	mov	r0, r6
 8011c62:	f7ff fac3 	bl	80111ec <_free_r>
 8011c66:	2300      	movs	r3, #0
 8011c68:	6363      	str	r3, [r4, #52]	; 0x34
 8011c6a:	89a3      	ldrh	r3, [r4, #12]
 8011c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c70:	81a3      	strh	r3, [r4, #12]
 8011c72:	2300      	movs	r3, #0
 8011c74:	6063      	str	r3, [r4, #4]
 8011c76:	6923      	ldr	r3, [r4, #16]
 8011c78:	6023      	str	r3, [r4, #0]
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	f043 0308 	orr.w	r3, r3, #8
 8011c80:	81a3      	strh	r3, [r4, #12]
 8011c82:	6923      	ldr	r3, [r4, #16]
 8011c84:	b94b      	cbnz	r3, 8011c9a <__swsetup_r+0x9a>
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c90:	d003      	beq.n	8011c9a <__swsetup_r+0x9a>
 8011c92:	4621      	mov	r1, r4
 8011c94:	4630      	mov	r0, r6
 8011c96:	f000 fa07 	bl	80120a8 <__smakebuf_r>
 8011c9a:	89a0      	ldrh	r0, [r4, #12]
 8011c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ca0:	f010 0301 	ands.w	r3, r0, #1
 8011ca4:	d00a      	beq.n	8011cbc <__swsetup_r+0xbc>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	60a3      	str	r3, [r4, #8]
 8011caa:	6963      	ldr	r3, [r4, #20]
 8011cac:	425b      	negs	r3, r3
 8011cae:	61a3      	str	r3, [r4, #24]
 8011cb0:	6923      	ldr	r3, [r4, #16]
 8011cb2:	b943      	cbnz	r3, 8011cc6 <__swsetup_r+0xc6>
 8011cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011cb8:	d1ba      	bne.n	8011c30 <__swsetup_r+0x30>
 8011cba:	bd70      	pop	{r4, r5, r6, pc}
 8011cbc:	0781      	lsls	r1, r0, #30
 8011cbe:	bf58      	it	pl
 8011cc0:	6963      	ldrpl	r3, [r4, #20]
 8011cc2:	60a3      	str	r3, [r4, #8]
 8011cc4:	e7f4      	b.n	8011cb0 <__swsetup_r+0xb0>
 8011cc6:	2000      	movs	r0, #0
 8011cc8:	e7f7      	b.n	8011cba <__swsetup_r+0xba>
 8011cca:	bf00      	nop
 8011ccc:	20000180 	.word	0x20000180
 8011cd0:	08013554 	.word	0x08013554
 8011cd4:	08013574 	.word	0x08013574
 8011cd8:	08013534 	.word	0x08013534

08011cdc <abort>:
 8011cdc:	b508      	push	{r3, lr}
 8011cde:	2006      	movs	r0, #6
 8011ce0:	f000 fbf2 	bl	80124c8 <raise>
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	f7f6 fae9 	bl	80082bc <_exit>
	...

08011cec <__sflush_r>:
 8011cec:	898a      	ldrh	r2, [r1, #12]
 8011cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	0710      	lsls	r0, r2, #28
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	d458      	bmi.n	8011dac <__sflush_r+0xc0>
 8011cfa:	684b      	ldr	r3, [r1, #4]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	dc05      	bgt.n	8011d0c <__sflush_r+0x20>
 8011d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	dc02      	bgt.n	8011d0c <__sflush_r+0x20>
 8011d06:	2000      	movs	r0, #0
 8011d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d0e:	2e00      	cmp	r6, #0
 8011d10:	d0f9      	beq.n	8011d06 <__sflush_r+0x1a>
 8011d12:	2300      	movs	r3, #0
 8011d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d18:	682f      	ldr	r7, [r5, #0]
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	d032      	beq.n	8011d84 <__sflush_r+0x98>
 8011d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d20:	89a3      	ldrh	r3, [r4, #12]
 8011d22:	075a      	lsls	r2, r3, #29
 8011d24:	d505      	bpl.n	8011d32 <__sflush_r+0x46>
 8011d26:	6863      	ldr	r3, [r4, #4]
 8011d28:	1ac0      	subs	r0, r0, r3
 8011d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d2c:	b10b      	cbz	r3, 8011d32 <__sflush_r+0x46>
 8011d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d30:	1ac0      	subs	r0, r0, r3
 8011d32:	2300      	movs	r3, #0
 8011d34:	4602      	mov	r2, r0
 8011d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d38:	6a21      	ldr	r1, [r4, #32]
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	47b0      	blx	r6
 8011d3e:	1c43      	adds	r3, r0, #1
 8011d40:	89a3      	ldrh	r3, [r4, #12]
 8011d42:	d106      	bne.n	8011d52 <__sflush_r+0x66>
 8011d44:	6829      	ldr	r1, [r5, #0]
 8011d46:	291d      	cmp	r1, #29
 8011d48:	d82c      	bhi.n	8011da4 <__sflush_r+0xb8>
 8011d4a:	4a2a      	ldr	r2, [pc, #168]	; (8011df4 <__sflush_r+0x108>)
 8011d4c:	40ca      	lsrs	r2, r1
 8011d4e:	07d6      	lsls	r6, r2, #31
 8011d50:	d528      	bpl.n	8011da4 <__sflush_r+0xb8>
 8011d52:	2200      	movs	r2, #0
 8011d54:	6062      	str	r2, [r4, #4]
 8011d56:	04d9      	lsls	r1, r3, #19
 8011d58:	6922      	ldr	r2, [r4, #16]
 8011d5a:	6022      	str	r2, [r4, #0]
 8011d5c:	d504      	bpl.n	8011d68 <__sflush_r+0x7c>
 8011d5e:	1c42      	adds	r2, r0, #1
 8011d60:	d101      	bne.n	8011d66 <__sflush_r+0x7a>
 8011d62:	682b      	ldr	r3, [r5, #0]
 8011d64:	b903      	cbnz	r3, 8011d68 <__sflush_r+0x7c>
 8011d66:	6560      	str	r0, [r4, #84]	; 0x54
 8011d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d6a:	602f      	str	r7, [r5, #0]
 8011d6c:	2900      	cmp	r1, #0
 8011d6e:	d0ca      	beq.n	8011d06 <__sflush_r+0x1a>
 8011d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d74:	4299      	cmp	r1, r3
 8011d76:	d002      	beq.n	8011d7e <__sflush_r+0x92>
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f7ff fa37 	bl	80111ec <_free_r>
 8011d7e:	2000      	movs	r0, #0
 8011d80:	6360      	str	r0, [r4, #52]	; 0x34
 8011d82:	e7c1      	b.n	8011d08 <__sflush_r+0x1c>
 8011d84:	6a21      	ldr	r1, [r4, #32]
 8011d86:	2301      	movs	r3, #1
 8011d88:	4628      	mov	r0, r5
 8011d8a:	47b0      	blx	r6
 8011d8c:	1c41      	adds	r1, r0, #1
 8011d8e:	d1c7      	bne.n	8011d20 <__sflush_r+0x34>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d0c4      	beq.n	8011d20 <__sflush_r+0x34>
 8011d96:	2b1d      	cmp	r3, #29
 8011d98:	d001      	beq.n	8011d9e <__sflush_r+0xb2>
 8011d9a:	2b16      	cmp	r3, #22
 8011d9c:	d101      	bne.n	8011da2 <__sflush_r+0xb6>
 8011d9e:	602f      	str	r7, [r5, #0]
 8011da0:	e7b1      	b.n	8011d06 <__sflush_r+0x1a>
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011da8:	81a3      	strh	r3, [r4, #12]
 8011daa:	e7ad      	b.n	8011d08 <__sflush_r+0x1c>
 8011dac:	690f      	ldr	r7, [r1, #16]
 8011dae:	2f00      	cmp	r7, #0
 8011db0:	d0a9      	beq.n	8011d06 <__sflush_r+0x1a>
 8011db2:	0793      	lsls	r3, r2, #30
 8011db4:	680e      	ldr	r6, [r1, #0]
 8011db6:	bf08      	it	eq
 8011db8:	694b      	ldreq	r3, [r1, #20]
 8011dba:	600f      	str	r7, [r1, #0]
 8011dbc:	bf18      	it	ne
 8011dbe:	2300      	movne	r3, #0
 8011dc0:	eba6 0807 	sub.w	r8, r6, r7
 8011dc4:	608b      	str	r3, [r1, #8]
 8011dc6:	f1b8 0f00 	cmp.w	r8, #0
 8011dca:	dd9c      	ble.n	8011d06 <__sflush_r+0x1a>
 8011dcc:	6a21      	ldr	r1, [r4, #32]
 8011dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011dd0:	4643      	mov	r3, r8
 8011dd2:	463a      	mov	r2, r7
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	47b0      	blx	r6
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	dc06      	bgt.n	8011dea <__sflush_r+0xfe>
 8011ddc:	89a3      	ldrh	r3, [r4, #12]
 8011dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de2:	81a3      	strh	r3, [r4, #12]
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295
 8011de8:	e78e      	b.n	8011d08 <__sflush_r+0x1c>
 8011dea:	4407      	add	r7, r0
 8011dec:	eba8 0800 	sub.w	r8, r8, r0
 8011df0:	e7e9      	b.n	8011dc6 <__sflush_r+0xda>
 8011df2:	bf00      	nop
 8011df4:	20400001 	.word	0x20400001

08011df8 <_fflush_r>:
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	690b      	ldr	r3, [r1, #16]
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	460c      	mov	r4, r1
 8011e00:	b913      	cbnz	r3, 8011e08 <_fflush_r+0x10>
 8011e02:	2500      	movs	r5, #0
 8011e04:	4628      	mov	r0, r5
 8011e06:	bd38      	pop	{r3, r4, r5, pc}
 8011e08:	b118      	cbz	r0, 8011e12 <_fflush_r+0x1a>
 8011e0a:	6983      	ldr	r3, [r0, #24]
 8011e0c:	b90b      	cbnz	r3, 8011e12 <_fflush_r+0x1a>
 8011e0e:	f000 f887 	bl	8011f20 <__sinit>
 8011e12:	4b14      	ldr	r3, [pc, #80]	; (8011e64 <_fflush_r+0x6c>)
 8011e14:	429c      	cmp	r4, r3
 8011e16:	d11b      	bne.n	8011e50 <_fflush_r+0x58>
 8011e18:	686c      	ldr	r4, [r5, #4]
 8011e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d0ef      	beq.n	8011e02 <_fflush_r+0xa>
 8011e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e24:	07d0      	lsls	r0, r2, #31
 8011e26:	d404      	bmi.n	8011e32 <_fflush_r+0x3a>
 8011e28:	0599      	lsls	r1, r3, #22
 8011e2a:	d402      	bmi.n	8011e32 <_fflush_r+0x3a>
 8011e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e2e:	f000 f915 	bl	801205c <__retarget_lock_acquire_recursive>
 8011e32:	4628      	mov	r0, r5
 8011e34:	4621      	mov	r1, r4
 8011e36:	f7ff ff59 	bl	8011cec <__sflush_r>
 8011e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e3c:	07da      	lsls	r2, r3, #31
 8011e3e:	4605      	mov	r5, r0
 8011e40:	d4e0      	bmi.n	8011e04 <_fflush_r+0xc>
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	059b      	lsls	r3, r3, #22
 8011e46:	d4dd      	bmi.n	8011e04 <_fflush_r+0xc>
 8011e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e4a:	f000 f908 	bl	801205e <__retarget_lock_release_recursive>
 8011e4e:	e7d9      	b.n	8011e04 <_fflush_r+0xc>
 8011e50:	4b05      	ldr	r3, [pc, #20]	; (8011e68 <_fflush_r+0x70>)
 8011e52:	429c      	cmp	r4, r3
 8011e54:	d101      	bne.n	8011e5a <_fflush_r+0x62>
 8011e56:	68ac      	ldr	r4, [r5, #8]
 8011e58:	e7df      	b.n	8011e1a <_fflush_r+0x22>
 8011e5a:	4b04      	ldr	r3, [pc, #16]	; (8011e6c <_fflush_r+0x74>)
 8011e5c:	429c      	cmp	r4, r3
 8011e5e:	bf08      	it	eq
 8011e60:	68ec      	ldreq	r4, [r5, #12]
 8011e62:	e7da      	b.n	8011e1a <_fflush_r+0x22>
 8011e64:	08013554 	.word	0x08013554
 8011e68:	08013574 	.word	0x08013574
 8011e6c:	08013534 	.word	0x08013534

08011e70 <std>:
 8011e70:	2300      	movs	r3, #0
 8011e72:	b510      	push	{r4, lr}
 8011e74:	4604      	mov	r4, r0
 8011e76:	e9c0 3300 	strd	r3, r3, [r0]
 8011e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e7e:	6083      	str	r3, [r0, #8]
 8011e80:	8181      	strh	r1, [r0, #12]
 8011e82:	6643      	str	r3, [r0, #100]	; 0x64
 8011e84:	81c2      	strh	r2, [r0, #14]
 8011e86:	6183      	str	r3, [r0, #24]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	2208      	movs	r2, #8
 8011e8c:	305c      	adds	r0, #92	; 0x5c
 8011e8e:	f7ff f9a5 	bl	80111dc <memset>
 8011e92:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <std+0x38>)
 8011e94:	6263      	str	r3, [r4, #36]	; 0x24
 8011e96:	4b05      	ldr	r3, [pc, #20]	; (8011eac <std+0x3c>)
 8011e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e9a:	4b05      	ldr	r3, [pc, #20]	; (8011eb0 <std+0x40>)
 8011e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e9e:	4b05      	ldr	r3, [pc, #20]	; (8011eb4 <std+0x44>)
 8011ea0:	6224      	str	r4, [r4, #32]
 8011ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8011ea4:	bd10      	pop	{r4, pc}
 8011ea6:	bf00      	nop
 8011ea8:	08012501 	.word	0x08012501
 8011eac:	08012523 	.word	0x08012523
 8011eb0:	0801255b 	.word	0x0801255b
 8011eb4:	0801257f 	.word	0x0801257f

08011eb8 <_cleanup_r>:
 8011eb8:	4901      	ldr	r1, [pc, #4]	; (8011ec0 <_cleanup_r+0x8>)
 8011eba:	f000 b8af 	b.w	801201c <_fwalk_reent>
 8011ebe:	bf00      	nop
 8011ec0:	08011df9 	.word	0x08011df9

08011ec4 <__sfmoreglue>:
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	1e4a      	subs	r2, r1, #1
 8011ec8:	2568      	movs	r5, #104	; 0x68
 8011eca:	4355      	muls	r5, r2
 8011ecc:	460e      	mov	r6, r1
 8011ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ed2:	f7ff f9db 	bl	801128c <_malloc_r>
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	b140      	cbz	r0, 8011eec <__sfmoreglue+0x28>
 8011eda:	2100      	movs	r1, #0
 8011edc:	e9c0 1600 	strd	r1, r6, [r0]
 8011ee0:	300c      	adds	r0, #12
 8011ee2:	60a0      	str	r0, [r4, #8]
 8011ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ee8:	f7ff f978 	bl	80111dc <memset>
 8011eec:	4620      	mov	r0, r4
 8011eee:	bd70      	pop	{r4, r5, r6, pc}

08011ef0 <__sfp_lock_acquire>:
 8011ef0:	4801      	ldr	r0, [pc, #4]	; (8011ef8 <__sfp_lock_acquire+0x8>)
 8011ef2:	f000 b8b3 	b.w	801205c <__retarget_lock_acquire_recursive>
 8011ef6:	bf00      	nop
 8011ef8:	200022d4 	.word	0x200022d4

08011efc <__sfp_lock_release>:
 8011efc:	4801      	ldr	r0, [pc, #4]	; (8011f04 <__sfp_lock_release+0x8>)
 8011efe:	f000 b8ae 	b.w	801205e <__retarget_lock_release_recursive>
 8011f02:	bf00      	nop
 8011f04:	200022d4 	.word	0x200022d4

08011f08 <__sinit_lock_acquire>:
 8011f08:	4801      	ldr	r0, [pc, #4]	; (8011f10 <__sinit_lock_acquire+0x8>)
 8011f0a:	f000 b8a7 	b.w	801205c <__retarget_lock_acquire_recursive>
 8011f0e:	bf00      	nop
 8011f10:	200022cf 	.word	0x200022cf

08011f14 <__sinit_lock_release>:
 8011f14:	4801      	ldr	r0, [pc, #4]	; (8011f1c <__sinit_lock_release+0x8>)
 8011f16:	f000 b8a2 	b.w	801205e <__retarget_lock_release_recursive>
 8011f1a:	bf00      	nop
 8011f1c:	200022cf 	.word	0x200022cf

08011f20 <__sinit>:
 8011f20:	b510      	push	{r4, lr}
 8011f22:	4604      	mov	r4, r0
 8011f24:	f7ff fff0 	bl	8011f08 <__sinit_lock_acquire>
 8011f28:	69a3      	ldr	r3, [r4, #24]
 8011f2a:	b11b      	cbz	r3, 8011f34 <__sinit+0x14>
 8011f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f30:	f7ff bff0 	b.w	8011f14 <__sinit_lock_release>
 8011f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f38:	6523      	str	r3, [r4, #80]	; 0x50
 8011f3a:	4b13      	ldr	r3, [pc, #76]	; (8011f88 <__sinit+0x68>)
 8011f3c:	4a13      	ldr	r2, [pc, #76]	; (8011f8c <__sinit+0x6c>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f42:	42a3      	cmp	r3, r4
 8011f44:	bf04      	itt	eq
 8011f46:	2301      	moveq	r3, #1
 8011f48:	61a3      	streq	r3, [r4, #24]
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f000 f820 	bl	8011f90 <__sfp>
 8011f50:	6060      	str	r0, [r4, #4]
 8011f52:	4620      	mov	r0, r4
 8011f54:	f000 f81c 	bl	8011f90 <__sfp>
 8011f58:	60a0      	str	r0, [r4, #8]
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f000 f818 	bl	8011f90 <__sfp>
 8011f60:	2200      	movs	r2, #0
 8011f62:	60e0      	str	r0, [r4, #12]
 8011f64:	2104      	movs	r1, #4
 8011f66:	6860      	ldr	r0, [r4, #4]
 8011f68:	f7ff ff82 	bl	8011e70 <std>
 8011f6c:	68a0      	ldr	r0, [r4, #8]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	2109      	movs	r1, #9
 8011f72:	f7ff ff7d 	bl	8011e70 <std>
 8011f76:	68e0      	ldr	r0, [r4, #12]
 8011f78:	2202      	movs	r2, #2
 8011f7a:	2112      	movs	r1, #18
 8011f7c:	f7ff ff78 	bl	8011e70 <std>
 8011f80:	2301      	movs	r3, #1
 8011f82:	61a3      	str	r3, [r4, #24]
 8011f84:	e7d2      	b.n	8011f2c <__sinit+0xc>
 8011f86:	bf00      	nop
 8011f88:	080134fc 	.word	0x080134fc
 8011f8c:	08011eb9 	.word	0x08011eb9

08011f90 <__sfp>:
 8011f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f92:	4607      	mov	r7, r0
 8011f94:	f7ff ffac 	bl	8011ef0 <__sfp_lock_acquire>
 8011f98:	4b1e      	ldr	r3, [pc, #120]	; (8012014 <__sfp+0x84>)
 8011f9a:	681e      	ldr	r6, [r3, #0]
 8011f9c:	69b3      	ldr	r3, [r6, #24]
 8011f9e:	b913      	cbnz	r3, 8011fa6 <__sfp+0x16>
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	f7ff ffbd 	bl	8011f20 <__sinit>
 8011fa6:	3648      	adds	r6, #72	; 0x48
 8011fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011fac:	3b01      	subs	r3, #1
 8011fae:	d503      	bpl.n	8011fb8 <__sfp+0x28>
 8011fb0:	6833      	ldr	r3, [r6, #0]
 8011fb2:	b30b      	cbz	r3, 8011ff8 <__sfp+0x68>
 8011fb4:	6836      	ldr	r6, [r6, #0]
 8011fb6:	e7f7      	b.n	8011fa8 <__sfp+0x18>
 8011fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fbc:	b9d5      	cbnz	r5, 8011ff4 <__sfp+0x64>
 8011fbe:	4b16      	ldr	r3, [pc, #88]	; (8012018 <__sfp+0x88>)
 8011fc0:	60e3      	str	r3, [r4, #12]
 8011fc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8011fc8:	f000 f847 	bl	801205a <__retarget_lock_init_recursive>
 8011fcc:	f7ff ff96 	bl	8011efc <__sfp_lock_release>
 8011fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011fd8:	6025      	str	r5, [r4, #0]
 8011fda:	61a5      	str	r5, [r4, #24]
 8011fdc:	2208      	movs	r2, #8
 8011fde:	4629      	mov	r1, r5
 8011fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011fe4:	f7ff f8fa 	bl	80111dc <memset>
 8011fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff4:	3468      	adds	r4, #104	; 0x68
 8011ff6:	e7d9      	b.n	8011fac <__sfp+0x1c>
 8011ff8:	2104      	movs	r1, #4
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	f7ff ff62 	bl	8011ec4 <__sfmoreglue>
 8012000:	4604      	mov	r4, r0
 8012002:	6030      	str	r0, [r6, #0]
 8012004:	2800      	cmp	r0, #0
 8012006:	d1d5      	bne.n	8011fb4 <__sfp+0x24>
 8012008:	f7ff ff78 	bl	8011efc <__sfp_lock_release>
 801200c:	230c      	movs	r3, #12
 801200e:	603b      	str	r3, [r7, #0]
 8012010:	e7ee      	b.n	8011ff0 <__sfp+0x60>
 8012012:	bf00      	nop
 8012014:	080134fc 	.word	0x080134fc
 8012018:	ffff0001 	.word	0xffff0001

0801201c <_fwalk_reent>:
 801201c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012020:	4606      	mov	r6, r0
 8012022:	4688      	mov	r8, r1
 8012024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012028:	2700      	movs	r7, #0
 801202a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801202e:	f1b9 0901 	subs.w	r9, r9, #1
 8012032:	d505      	bpl.n	8012040 <_fwalk_reent+0x24>
 8012034:	6824      	ldr	r4, [r4, #0]
 8012036:	2c00      	cmp	r4, #0
 8012038:	d1f7      	bne.n	801202a <_fwalk_reent+0xe>
 801203a:	4638      	mov	r0, r7
 801203c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012040:	89ab      	ldrh	r3, [r5, #12]
 8012042:	2b01      	cmp	r3, #1
 8012044:	d907      	bls.n	8012056 <_fwalk_reent+0x3a>
 8012046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801204a:	3301      	adds	r3, #1
 801204c:	d003      	beq.n	8012056 <_fwalk_reent+0x3a>
 801204e:	4629      	mov	r1, r5
 8012050:	4630      	mov	r0, r6
 8012052:	47c0      	blx	r8
 8012054:	4307      	orrs	r7, r0
 8012056:	3568      	adds	r5, #104	; 0x68
 8012058:	e7e9      	b.n	801202e <_fwalk_reent+0x12>

0801205a <__retarget_lock_init_recursive>:
 801205a:	4770      	bx	lr

0801205c <__retarget_lock_acquire_recursive>:
 801205c:	4770      	bx	lr

0801205e <__retarget_lock_release_recursive>:
 801205e:	4770      	bx	lr

08012060 <__swhatbuf_r>:
 8012060:	b570      	push	{r4, r5, r6, lr}
 8012062:	460e      	mov	r6, r1
 8012064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012068:	2900      	cmp	r1, #0
 801206a:	b096      	sub	sp, #88	; 0x58
 801206c:	4614      	mov	r4, r2
 801206e:	461d      	mov	r5, r3
 8012070:	da07      	bge.n	8012082 <__swhatbuf_r+0x22>
 8012072:	2300      	movs	r3, #0
 8012074:	602b      	str	r3, [r5, #0]
 8012076:	89b3      	ldrh	r3, [r6, #12]
 8012078:	061a      	lsls	r2, r3, #24
 801207a:	d410      	bmi.n	801209e <__swhatbuf_r+0x3e>
 801207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012080:	e00e      	b.n	80120a0 <__swhatbuf_r+0x40>
 8012082:	466a      	mov	r2, sp
 8012084:	f000 faa2 	bl	80125cc <_fstat_r>
 8012088:	2800      	cmp	r0, #0
 801208a:	dbf2      	blt.n	8012072 <__swhatbuf_r+0x12>
 801208c:	9a01      	ldr	r2, [sp, #4]
 801208e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012096:	425a      	negs	r2, r3
 8012098:	415a      	adcs	r2, r3
 801209a:	602a      	str	r2, [r5, #0]
 801209c:	e7ee      	b.n	801207c <__swhatbuf_r+0x1c>
 801209e:	2340      	movs	r3, #64	; 0x40
 80120a0:	2000      	movs	r0, #0
 80120a2:	6023      	str	r3, [r4, #0]
 80120a4:	b016      	add	sp, #88	; 0x58
 80120a6:	bd70      	pop	{r4, r5, r6, pc}

080120a8 <__smakebuf_r>:
 80120a8:	898b      	ldrh	r3, [r1, #12]
 80120aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120ac:	079d      	lsls	r5, r3, #30
 80120ae:	4606      	mov	r6, r0
 80120b0:	460c      	mov	r4, r1
 80120b2:	d507      	bpl.n	80120c4 <__smakebuf_r+0x1c>
 80120b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120b8:	6023      	str	r3, [r4, #0]
 80120ba:	6123      	str	r3, [r4, #16]
 80120bc:	2301      	movs	r3, #1
 80120be:	6163      	str	r3, [r4, #20]
 80120c0:	b002      	add	sp, #8
 80120c2:	bd70      	pop	{r4, r5, r6, pc}
 80120c4:	ab01      	add	r3, sp, #4
 80120c6:	466a      	mov	r2, sp
 80120c8:	f7ff ffca 	bl	8012060 <__swhatbuf_r>
 80120cc:	9900      	ldr	r1, [sp, #0]
 80120ce:	4605      	mov	r5, r0
 80120d0:	4630      	mov	r0, r6
 80120d2:	f7ff f8db 	bl	801128c <_malloc_r>
 80120d6:	b948      	cbnz	r0, 80120ec <__smakebuf_r+0x44>
 80120d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120dc:	059a      	lsls	r2, r3, #22
 80120de:	d4ef      	bmi.n	80120c0 <__smakebuf_r+0x18>
 80120e0:	f023 0303 	bic.w	r3, r3, #3
 80120e4:	f043 0302 	orr.w	r3, r3, #2
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	e7e3      	b.n	80120b4 <__smakebuf_r+0xc>
 80120ec:	4b0d      	ldr	r3, [pc, #52]	; (8012124 <__smakebuf_r+0x7c>)
 80120ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	6020      	str	r0, [r4, #0]
 80120f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	9b00      	ldr	r3, [sp, #0]
 80120fc:	6163      	str	r3, [r4, #20]
 80120fe:	9b01      	ldr	r3, [sp, #4]
 8012100:	6120      	str	r0, [r4, #16]
 8012102:	b15b      	cbz	r3, 801211c <__smakebuf_r+0x74>
 8012104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012108:	4630      	mov	r0, r6
 801210a:	f000 fa71 	bl	80125f0 <_isatty_r>
 801210e:	b128      	cbz	r0, 801211c <__smakebuf_r+0x74>
 8012110:	89a3      	ldrh	r3, [r4, #12]
 8012112:	f023 0303 	bic.w	r3, r3, #3
 8012116:	f043 0301 	orr.w	r3, r3, #1
 801211a:	81a3      	strh	r3, [r4, #12]
 801211c:	89a0      	ldrh	r0, [r4, #12]
 801211e:	4305      	orrs	r5, r0
 8012120:	81a5      	strh	r5, [r4, #12]
 8012122:	e7cd      	b.n	80120c0 <__smakebuf_r+0x18>
 8012124:	08011eb9 	.word	0x08011eb9

08012128 <memmove>:
 8012128:	4288      	cmp	r0, r1
 801212a:	b510      	push	{r4, lr}
 801212c:	eb01 0402 	add.w	r4, r1, r2
 8012130:	d902      	bls.n	8012138 <memmove+0x10>
 8012132:	4284      	cmp	r4, r0
 8012134:	4623      	mov	r3, r4
 8012136:	d807      	bhi.n	8012148 <memmove+0x20>
 8012138:	1e43      	subs	r3, r0, #1
 801213a:	42a1      	cmp	r1, r4
 801213c:	d008      	beq.n	8012150 <memmove+0x28>
 801213e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012146:	e7f8      	b.n	801213a <memmove+0x12>
 8012148:	4402      	add	r2, r0
 801214a:	4601      	mov	r1, r0
 801214c:	428a      	cmp	r2, r1
 801214e:	d100      	bne.n	8012152 <memmove+0x2a>
 8012150:	bd10      	pop	{r4, pc}
 8012152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801215a:	e7f7      	b.n	801214c <memmove+0x24>

0801215c <__malloc_lock>:
 801215c:	4801      	ldr	r0, [pc, #4]	; (8012164 <__malloc_lock+0x8>)
 801215e:	f7ff bf7d 	b.w	801205c <__retarget_lock_acquire_recursive>
 8012162:	bf00      	nop
 8012164:	200022d0 	.word	0x200022d0

08012168 <__malloc_unlock>:
 8012168:	4801      	ldr	r0, [pc, #4]	; (8012170 <__malloc_unlock+0x8>)
 801216a:	f7ff bf78 	b.w	801205e <__retarget_lock_release_recursive>
 801216e:	bf00      	nop
 8012170:	200022d0 	.word	0x200022d0

08012174 <_realloc_r>:
 8012174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012176:	4607      	mov	r7, r0
 8012178:	4614      	mov	r4, r2
 801217a:	460e      	mov	r6, r1
 801217c:	b921      	cbnz	r1, 8012188 <_realloc_r+0x14>
 801217e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012182:	4611      	mov	r1, r2
 8012184:	f7ff b882 	b.w	801128c <_malloc_r>
 8012188:	b922      	cbnz	r2, 8012194 <_realloc_r+0x20>
 801218a:	f7ff f82f 	bl	80111ec <_free_r>
 801218e:	4625      	mov	r5, r4
 8012190:	4628      	mov	r0, r5
 8012192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012194:	f000 fa4e 	bl	8012634 <_malloc_usable_size_r>
 8012198:	42a0      	cmp	r0, r4
 801219a:	d20f      	bcs.n	80121bc <_realloc_r+0x48>
 801219c:	4621      	mov	r1, r4
 801219e:	4638      	mov	r0, r7
 80121a0:	f7ff f874 	bl	801128c <_malloc_r>
 80121a4:	4605      	mov	r5, r0
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d0f2      	beq.n	8012190 <_realloc_r+0x1c>
 80121aa:	4631      	mov	r1, r6
 80121ac:	4622      	mov	r2, r4
 80121ae:	f7ff f807 	bl	80111c0 <memcpy>
 80121b2:	4631      	mov	r1, r6
 80121b4:	4638      	mov	r0, r7
 80121b6:	f7ff f819 	bl	80111ec <_free_r>
 80121ba:	e7e9      	b.n	8012190 <_realloc_r+0x1c>
 80121bc:	4635      	mov	r5, r6
 80121be:	e7e7      	b.n	8012190 <_realloc_r+0x1c>

080121c0 <__ssputs_r>:
 80121c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121c4:	688e      	ldr	r6, [r1, #8]
 80121c6:	429e      	cmp	r6, r3
 80121c8:	4682      	mov	sl, r0
 80121ca:	460c      	mov	r4, r1
 80121cc:	4690      	mov	r8, r2
 80121ce:	461f      	mov	r7, r3
 80121d0:	d838      	bhi.n	8012244 <__ssputs_r+0x84>
 80121d2:	898a      	ldrh	r2, [r1, #12]
 80121d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121d8:	d032      	beq.n	8012240 <__ssputs_r+0x80>
 80121da:	6825      	ldr	r5, [r4, #0]
 80121dc:	6909      	ldr	r1, [r1, #16]
 80121de:	eba5 0901 	sub.w	r9, r5, r1
 80121e2:	6965      	ldr	r5, [r4, #20]
 80121e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121ec:	3301      	adds	r3, #1
 80121ee:	444b      	add	r3, r9
 80121f0:	106d      	asrs	r5, r5, #1
 80121f2:	429d      	cmp	r5, r3
 80121f4:	bf38      	it	cc
 80121f6:	461d      	movcc	r5, r3
 80121f8:	0553      	lsls	r3, r2, #21
 80121fa:	d531      	bpl.n	8012260 <__ssputs_r+0xa0>
 80121fc:	4629      	mov	r1, r5
 80121fe:	f7ff f845 	bl	801128c <_malloc_r>
 8012202:	4606      	mov	r6, r0
 8012204:	b950      	cbnz	r0, 801221c <__ssputs_r+0x5c>
 8012206:	230c      	movs	r3, #12
 8012208:	f8ca 3000 	str.w	r3, [sl]
 801220c:	89a3      	ldrh	r3, [r4, #12]
 801220e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012212:	81a3      	strh	r3, [r4, #12]
 8012214:	f04f 30ff 	mov.w	r0, #4294967295
 8012218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801221c:	6921      	ldr	r1, [r4, #16]
 801221e:	464a      	mov	r2, r9
 8012220:	f7fe ffce 	bl	80111c0 <memcpy>
 8012224:	89a3      	ldrh	r3, [r4, #12]
 8012226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801222a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801222e:	81a3      	strh	r3, [r4, #12]
 8012230:	6126      	str	r6, [r4, #16]
 8012232:	6165      	str	r5, [r4, #20]
 8012234:	444e      	add	r6, r9
 8012236:	eba5 0509 	sub.w	r5, r5, r9
 801223a:	6026      	str	r6, [r4, #0]
 801223c:	60a5      	str	r5, [r4, #8]
 801223e:	463e      	mov	r6, r7
 8012240:	42be      	cmp	r6, r7
 8012242:	d900      	bls.n	8012246 <__ssputs_r+0x86>
 8012244:	463e      	mov	r6, r7
 8012246:	4632      	mov	r2, r6
 8012248:	6820      	ldr	r0, [r4, #0]
 801224a:	4641      	mov	r1, r8
 801224c:	f7ff ff6c 	bl	8012128 <memmove>
 8012250:	68a3      	ldr	r3, [r4, #8]
 8012252:	6822      	ldr	r2, [r4, #0]
 8012254:	1b9b      	subs	r3, r3, r6
 8012256:	4432      	add	r2, r6
 8012258:	60a3      	str	r3, [r4, #8]
 801225a:	6022      	str	r2, [r4, #0]
 801225c:	2000      	movs	r0, #0
 801225e:	e7db      	b.n	8012218 <__ssputs_r+0x58>
 8012260:	462a      	mov	r2, r5
 8012262:	f7ff ff87 	bl	8012174 <_realloc_r>
 8012266:	4606      	mov	r6, r0
 8012268:	2800      	cmp	r0, #0
 801226a:	d1e1      	bne.n	8012230 <__ssputs_r+0x70>
 801226c:	6921      	ldr	r1, [r4, #16]
 801226e:	4650      	mov	r0, sl
 8012270:	f7fe ffbc 	bl	80111ec <_free_r>
 8012274:	e7c7      	b.n	8012206 <__ssputs_r+0x46>
	...

08012278 <_svfiprintf_r>:
 8012278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801227c:	4698      	mov	r8, r3
 801227e:	898b      	ldrh	r3, [r1, #12]
 8012280:	061b      	lsls	r3, r3, #24
 8012282:	b09d      	sub	sp, #116	; 0x74
 8012284:	4607      	mov	r7, r0
 8012286:	460d      	mov	r5, r1
 8012288:	4614      	mov	r4, r2
 801228a:	d50e      	bpl.n	80122aa <_svfiprintf_r+0x32>
 801228c:	690b      	ldr	r3, [r1, #16]
 801228e:	b963      	cbnz	r3, 80122aa <_svfiprintf_r+0x32>
 8012290:	2140      	movs	r1, #64	; 0x40
 8012292:	f7fe fffb 	bl	801128c <_malloc_r>
 8012296:	6028      	str	r0, [r5, #0]
 8012298:	6128      	str	r0, [r5, #16]
 801229a:	b920      	cbnz	r0, 80122a6 <_svfiprintf_r+0x2e>
 801229c:	230c      	movs	r3, #12
 801229e:	603b      	str	r3, [r7, #0]
 80122a0:	f04f 30ff 	mov.w	r0, #4294967295
 80122a4:	e0d1      	b.n	801244a <_svfiprintf_r+0x1d2>
 80122a6:	2340      	movs	r3, #64	; 0x40
 80122a8:	616b      	str	r3, [r5, #20]
 80122aa:	2300      	movs	r3, #0
 80122ac:	9309      	str	r3, [sp, #36]	; 0x24
 80122ae:	2320      	movs	r3, #32
 80122b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80122b8:	2330      	movs	r3, #48	; 0x30
 80122ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012464 <_svfiprintf_r+0x1ec>
 80122be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122c2:	f04f 0901 	mov.w	r9, #1
 80122c6:	4623      	mov	r3, r4
 80122c8:	469a      	mov	sl, r3
 80122ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122ce:	b10a      	cbz	r2, 80122d4 <_svfiprintf_r+0x5c>
 80122d0:	2a25      	cmp	r2, #37	; 0x25
 80122d2:	d1f9      	bne.n	80122c8 <_svfiprintf_r+0x50>
 80122d4:	ebba 0b04 	subs.w	fp, sl, r4
 80122d8:	d00b      	beq.n	80122f2 <_svfiprintf_r+0x7a>
 80122da:	465b      	mov	r3, fp
 80122dc:	4622      	mov	r2, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	4638      	mov	r0, r7
 80122e2:	f7ff ff6d 	bl	80121c0 <__ssputs_r>
 80122e6:	3001      	adds	r0, #1
 80122e8:	f000 80aa 	beq.w	8012440 <_svfiprintf_r+0x1c8>
 80122ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122ee:	445a      	add	r2, fp
 80122f0:	9209      	str	r2, [sp, #36]	; 0x24
 80122f2:	f89a 3000 	ldrb.w	r3, [sl]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 80a2 	beq.w	8012440 <_svfiprintf_r+0x1c8>
 80122fc:	2300      	movs	r3, #0
 80122fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012306:	f10a 0a01 	add.w	sl, sl, #1
 801230a:	9304      	str	r3, [sp, #16]
 801230c:	9307      	str	r3, [sp, #28]
 801230e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012312:	931a      	str	r3, [sp, #104]	; 0x68
 8012314:	4654      	mov	r4, sl
 8012316:	2205      	movs	r2, #5
 8012318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231c:	4851      	ldr	r0, [pc, #324]	; (8012464 <_svfiprintf_r+0x1ec>)
 801231e:	f7ed ff7f 	bl	8000220 <memchr>
 8012322:	9a04      	ldr	r2, [sp, #16]
 8012324:	b9d8      	cbnz	r0, 801235e <_svfiprintf_r+0xe6>
 8012326:	06d0      	lsls	r0, r2, #27
 8012328:	bf44      	itt	mi
 801232a:	2320      	movmi	r3, #32
 801232c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012330:	0711      	lsls	r1, r2, #28
 8012332:	bf44      	itt	mi
 8012334:	232b      	movmi	r3, #43	; 0x2b
 8012336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801233a:	f89a 3000 	ldrb.w	r3, [sl]
 801233e:	2b2a      	cmp	r3, #42	; 0x2a
 8012340:	d015      	beq.n	801236e <_svfiprintf_r+0xf6>
 8012342:	9a07      	ldr	r2, [sp, #28]
 8012344:	4654      	mov	r4, sl
 8012346:	2000      	movs	r0, #0
 8012348:	f04f 0c0a 	mov.w	ip, #10
 801234c:	4621      	mov	r1, r4
 801234e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012352:	3b30      	subs	r3, #48	; 0x30
 8012354:	2b09      	cmp	r3, #9
 8012356:	d94e      	bls.n	80123f6 <_svfiprintf_r+0x17e>
 8012358:	b1b0      	cbz	r0, 8012388 <_svfiprintf_r+0x110>
 801235a:	9207      	str	r2, [sp, #28]
 801235c:	e014      	b.n	8012388 <_svfiprintf_r+0x110>
 801235e:	eba0 0308 	sub.w	r3, r0, r8
 8012362:	fa09 f303 	lsl.w	r3, r9, r3
 8012366:	4313      	orrs	r3, r2
 8012368:	9304      	str	r3, [sp, #16]
 801236a:	46a2      	mov	sl, r4
 801236c:	e7d2      	b.n	8012314 <_svfiprintf_r+0x9c>
 801236e:	9b03      	ldr	r3, [sp, #12]
 8012370:	1d19      	adds	r1, r3, #4
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	9103      	str	r1, [sp, #12]
 8012376:	2b00      	cmp	r3, #0
 8012378:	bfbb      	ittet	lt
 801237a:	425b      	neglt	r3, r3
 801237c:	f042 0202 	orrlt.w	r2, r2, #2
 8012380:	9307      	strge	r3, [sp, #28]
 8012382:	9307      	strlt	r3, [sp, #28]
 8012384:	bfb8      	it	lt
 8012386:	9204      	strlt	r2, [sp, #16]
 8012388:	7823      	ldrb	r3, [r4, #0]
 801238a:	2b2e      	cmp	r3, #46	; 0x2e
 801238c:	d10c      	bne.n	80123a8 <_svfiprintf_r+0x130>
 801238e:	7863      	ldrb	r3, [r4, #1]
 8012390:	2b2a      	cmp	r3, #42	; 0x2a
 8012392:	d135      	bne.n	8012400 <_svfiprintf_r+0x188>
 8012394:	9b03      	ldr	r3, [sp, #12]
 8012396:	1d1a      	adds	r2, r3, #4
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	9203      	str	r2, [sp, #12]
 801239c:	2b00      	cmp	r3, #0
 801239e:	bfb8      	it	lt
 80123a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80123a4:	3402      	adds	r4, #2
 80123a6:	9305      	str	r3, [sp, #20]
 80123a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012474 <_svfiprintf_r+0x1fc>
 80123ac:	7821      	ldrb	r1, [r4, #0]
 80123ae:	2203      	movs	r2, #3
 80123b0:	4650      	mov	r0, sl
 80123b2:	f7ed ff35 	bl	8000220 <memchr>
 80123b6:	b140      	cbz	r0, 80123ca <_svfiprintf_r+0x152>
 80123b8:	2340      	movs	r3, #64	; 0x40
 80123ba:	eba0 000a 	sub.w	r0, r0, sl
 80123be:	fa03 f000 	lsl.w	r0, r3, r0
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	4303      	orrs	r3, r0
 80123c6:	3401      	adds	r4, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ce:	4826      	ldr	r0, [pc, #152]	; (8012468 <_svfiprintf_r+0x1f0>)
 80123d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123d4:	2206      	movs	r2, #6
 80123d6:	f7ed ff23 	bl	8000220 <memchr>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d038      	beq.n	8012450 <_svfiprintf_r+0x1d8>
 80123de:	4b23      	ldr	r3, [pc, #140]	; (801246c <_svfiprintf_r+0x1f4>)
 80123e0:	bb1b      	cbnz	r3, 801242a <_svfiprintf_r+0x1b2>
 80123e2:	9b03      	ldr	r3, [sp, #12]
 80123e4:	3307      	adds	r3, #7
 80123e6:	f023 0307 	bic.w	r3, r3, #7
 80123ea:	3308      	adds	r3, #8
 80123ec:	9303      	str	r3, [sp, #12]
 80123ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f0:	4433      	add	r3, r6
 80123f2:	9309      	str	r3, [sp, #36]	; 0x24
 80123f4:	e767      	b.n	80122c6 <_svfiprintf_r+0x4e>
 80123f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80123fa:	460c      	mov	r4, r1
 80123fc:	2001      	movs	r0, #1
 80123fe:	e7a5      	b.n	801234c <_svfiprintf_r+0xd4>
 8012400:	2300      	movs	r3, #0
 8012402:	3401      	adds	r4, #1
 8012404:	9305      	str	r3, [sp, #20]
 8012406:	4619      	mov	r1, r3
 8012408:	f04f 0c0a 	mov.w	ip, #10
 801240c:	4620      	mov	r0, r4
 801240e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012412:	3a30      	subs	r2, #48	; 0x30
 8012414:	2a09      	cmp	r2, #9
 8012416:	d903      	bls.n	8012420 <_svfiprintf_r+0x1a8>
 8012418:	2b00      	cmp	r3, #0
 801241a:	d0c5      	beq.n	80123a8 <_svfiprintf_r+0x130>
 801241c:	9105      	str	r1, [sp, #20]
 801241e:	e7c3      	b.n	80123a8 <_svfiprintf_r+0x130>
 8012420:	fb0c 2101 	mla	r1, ip, r1, r2
 8012424:	4604      	mov	r4, r0
 8012426:	2301      	movs	r3, #1
 8012428:	e7f0      	b.n	801240c <_svfiprintf_r+0x194>
 801242a:	ab03      	add	r3, sp, #12
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	462a      	mov	r2, r5
 8012430:	4b0f      	ldr	r3, [pc, #60]	; (8012470 <_svfiprintf_r+0x1f8>)
 8012432:	a904      	add	r1, sp, #16
 8012434:	4638      	mov	r0, r7
 8012436:	f3af 8000 	nop.w
 801243a:	1c42      	adds	r2, r0, #1
 801243c:	4606      	mov	r6, r0
 801243e:	d1d6      	bne.n	80123ee <_svfiprintf_r+0x176>
 8012440:	89ab      	ldrh	r3, [r5, #12]
 8012442:	065b      	lsls	r3, r3, #25
 8012444:	f53f af2c 	bmi.w	80122a0 <_svfiprintf_r+0x28>
 8012448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801244a:	b01d      	add	sp, #116	; 0x74
 801244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012450:	ab03      	add	r3, sp, #12
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	462a      	mov	r2, r5
 8012456:	4b06      	ldr	r3, [pc, #24]	; (8012470 <_svfiprintf_r+0x1f8>)
 8012458:	a904      	add	r1, sp, #16
 801245a:	4638      	mov	r0, r7
 801245c:	f7ff f938 	bl	80116d0 <_printf_i>
 8012460:	e7eb      	b.n	801243a <_svfiprintf_r+0x1c2>
 8012462:	bf00      	nop
 8012464:	08013500 	.word	0x08013500
 8012468:	0801350a 	.word	0x0801350a
 801246c:	00000000 	.word	0x00000000
 8012470:	080121c1 	.word	0x080121c1
 8012474:	08013506 	.word	0x08013506

08012478 <_raise_r>:
 8012478:	291f      	cmp	r1, #31
 801247a:	b538      	push	{r3, r4, r5, lr}
 801247c:	4604      	mov	r4, r0
 801247e:	460d      	mov	r5, r1
 8012480:	d904      	bls.n	801248c <_raise_r+0x14>
 8012482:	2316      	movs	r3, #22
 8012484:	6003      	str	r3, [r0, #0]
 8012486:	f04f 30ff 	mov.w	r0, #4294967295
 801248a:	bd38      	pop	{r3, r4, r5, pc}
 801248c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801248e:	b112      	cbz	r2, 8012496 <_raise_r+0x1e>
 8012490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012494:	b94b      	cbnz	r3, 80124aa <_raise_r+0x32>
 8012496:	4620      	mov	r0, r4
 8012498:	f000 f830 	bl	80124fc <_getpid_r>
 801249c:	462a      	mov	r2, r5
 801249e:	4601      	mov	r1, r0
 80124a0:	4620      	mov	r0, r4
 80124a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124a6:	f000 b817 	b.w	80124d8 <_kill_r>
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d00a      	beq.n	80124c4 <_raise_r+0x4c>
 80124ae:	1c59      	adds	r1, r3, #1
 80124b0:	d103      	bne.n	80124ba <_raise_r+0x42>
 80124b2:	2316      	movs	r3, #22
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	2001      	movs	r0, #1
 80124b8:	e7e7      	b.n	801248a <_raise_r+0x12>
 80124ba:	2400      	movs	r4, #0
 80124bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124c0:	4628      	mov	r0, r5
 80124c2:	4798      	blx	r3
 80124c4:	2000      	movs	r0, #0
 80124c6:	e7e0      	b.n	801248a <_raise_r+0x12>

080124c8 <raise>:
 80124c8:	4b02      	ldr	r3, [pc, #8]	; (80124d4 <raise+0xc>)
 80124ca:	4601      	mov	r1, r0
 80124cc:	6818      	ldr	r0, [r3, #0]
 80124ce:	f7ff bfd3 	b.w	8012478 <_raise_r>
 80124d2:	bf00      	nop
 80124d4:	20000180 	.word	0x20000180

080124d8 <_kill_r>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	4d07      	ldr	r5, [pc, #28]	; (80124f8 <_kill_r+0x20>)
 80124dc:	2300      	movs	r3, #0
 80124de:	4604      	mov	r4, r0
 80124e0:	4608      	mov	r0, r1
 80124e2:	4611      	mov	r1, r2
 80124e4:	602b      	str	r3, [r5, #0]
 80124e6:	f7f5 fed9 	bl	800829c <_kill>
 80124ea:	1c43      	adds	r3, r0, #1
 80124ec:	d102      	bne.n	80124f4 <_kill_r+0x1c>
 80124ee:	682b      	ldr	r3, [r5, #0]
 80124f0:	b103      	cbz	r3, 80124f4 <_kill_r+0x1c>
 80124f2:	6023      	str	r3, [r4, #0]
 80124f4:	bd38      	pop	{r3, r4, r5, pc}
 80124f6:	bf00      	nop
 80124f8:	200022d8 	.word	0x200022d8

080124fc <_getpid_r>:
 80124fc:	f7f5 bec6 	b.w	800828c <_getpid>

08012500 <__sread>:
 8012500:	b510      	push	{r4, lr}
 8012502:	460c      	mov	r4, r1
 8012504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012508:	f000 f89c 	bl	8012644 <_read_r>
 801250c:	2800      	cmp	r0, #0
 801250e:	bfab      	itete	ge
 8012510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012512:	89a3      	ldrhlt	r3, [r4, #12]
 8012514:	181b      	addge	r3, r3, r0
 8012516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801251a:	bfac      	ite	ge
 801251c:	6563      	strge	r3, [r4, #84]	; 0x54
 801251e:	81a3      	strhlt	r3, [r4, #12]
 8012520:	bd10      	pop	{r4, pc}

08012522 <__swrite>:
 8012522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012526:	461f      	mov	r7, r3
 8012528:	898b      	ldrh	r3, [r1, #12]
 801252a:	05db      	lsls	r3, r3, #23
 801252c:	4605      	mov	r5, r0
 801252e:	460c      	mov	r4, r1
 8012530:	4616      	mov	r6, r2
 8012532:	d505      	bpl.n	8012540 <__swrite+0x1e>
 8012534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012538:	2302      	movs	r3, #2
 801253a:	2200      	movs	r2, #0
 801253c:	f000 f868 	bl	8012610 <_lseek_r>
 8012540:	89a3      	ldrh	r3, [r4, #12]
 8012542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801254a:	81a3      	strh	r3, [r4, #12]
 801254c:	4632      	mov	r2, r6
 801254e:	463b      	mov	r3, r7
 8012550:	4628      	mov	r0, r5
 8012552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012556:	f000 b817 	b.w	8012588 <_write_r>

0801255a <__sseek>:
 801255a:	b510      	push	{r4, lr}
 801255c:	460c      	mov	r4, r1
 801255e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012562:	f000 f855 	bl	8012610 <_lseek_r>
 8012566:	1c43      	adds	r3, r0, #1
 8012568:	89a3      	ldrh	r3, [r4, #12]
 801256a:	bf15      	itete	ne
 801256c:	6560      	strne	r0, [r4, #84]	; 0x54
 801256e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012576:	81a3      	strheq	r3, [r4, #12]
 8012578:	bf18      	it	ne
 801257a:	81a3      	strhne	r3, [r4, #12]
 801257c:	bd10      	pop	{r4, pc}

0801257e <__sclose>:
 801257e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012582:	f000 b813 	b.w	80125ac <_close_r>
	...

08012588 <_write_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4d07      	ldr	r5, [pc, #28]	; (80125a8 <_write_r+0x20>)
 801258c:	4604      	mov	r4, r0
 801258e:	4608      	mov	r0, r1
 8012590:	4611      	mov	r1, r2
 8012592:	2200      	movs	r2, #0
 8012594:	602a      	str	r2, [r5, #0]
 8012596:	461a      	mov	r2, r3
 8012598:	f7f5 feb7 	bl	800830a <_write>
 801259c:	1c43      	adds	r3, r0, #1
 801259e:	d102      	bne.n	80125a6 <_write_r+0x1e>
 80125a0:	682b      	ldr	r3, [r5, #0]
 80125a2:	b103      	cbz	r3, 80125a6 <_write_r+0x1e>
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	200022d8 	.word	0x200022d8

080125ac <_close_r>:
 80125ac:	b538      	push	{r3, r4, r5, lr}
 80125ae:	4d06      	ldr	r5, [pc, #24]	; (80125c8 <_close_r+0x1c>)
 80125b0:	2300      	movs	r3, #0
 80125b2:	4604      	mov	r4, r0
 80125b4:	4608      	mov	r0, r1
 80125b6:	602b      	str	r3, [r5, #0]
 80125b8:	f7f5 fec3 	bl	8008342 <_close>
 80125bc:	1c43      	adds	r3, r0, #1
 80125be:	d102      	bne.n	80125c6 <_close_r+0x1a>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	b103      	cbz	r3, 80125c6 <_close_r+0x1a>
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	bd38      	pop	{r3, r4, r5, pc}
 80125c8:	200022d8 	.word	0x200022d8

080125cc <_fstat_r>:
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	4d07      	ldr	r5, [pc, #28]	; (80125ec <_fstat_r+0x20>)
 80125d0:	2300      	movs	r3, #0
 80125d2:	4604      	mov	r4, r0
 80125d4:	4608      	mov	r0, r1
 80125d6:	4611      	mov	r1, r2
 80125d8:	602b      	str	r3, [r5, #0]
 80125da:	f7f5 febe 	bl	800835a <_fstat>
 80125de:	1c43      	adds	r3, r0, #1
 80125e0:	d102      	bne.n	80125e8 <_fstat_r+0x1c>
 80125e2:	682b      	ldr	r3, [r5, #0]
 80125e4:	b103      	cbz	r3, 80125e8 <_fstat_r+0x1c>
 80125e6:	6023      	str	r3, [r4, #0]
 80125e8:	bd38      	pop	{r3, r4, r5, pc}
 80125ea:	bf00      	nop
 80125ec:	200022d8 	.word	0x200022d8

080125f0 <_isatty_r>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	4d06      	ldr	r5, [pc, #24]	; (801260c <_isatty_r+0x1c>)
 80125f4:	2300      	movs	r3, #0
 80125f6:	4604      	mov	r4, r0
 80125f8:	4608      	mov	r0, r1
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	f7f5 febd 	bl	800837a <_isatty>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_isatty_r+0x1a>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_isatty_r+0x1a>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	200022d8 	.word	0x200022d8

08012610 <_lseek_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d07      	ldr	r5, [pc, #28]	; (8012630 <_lseek_r+0x20>)
 8012614:	4604      	mov	r4, r0
 8012616:	4608      	mov	r0, r1
 8012618:	4611      	mov	r1, r2
 801261a:	2200      	movs	r2, #0
 801261c:	602a      	str	r2, [r5, #0]
 801261e:	461a      	mov	r2, r3
 8012620:	f7f5 feb6 	bl	8008390 <_lseek>
 8012624:	1c43      	adds	r3, r0, #1
 8012626:	d102      	bne.n	801262e <_lseek_r+0x1e>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	b103      	cbz	r3, 801262e <_lseek_r+0x1e>
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	200022d8 	.word	0x200022d8

08012634 <_malloc_usable_size_r>:
 8012634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012638:	1f18      	subs	r0, r3, #4
 801263a:	2b00      	cmp	r3, #0
 801263c:	bfbc      	itt	lt
 801263e:	580b      	ldrlt	r3, [r1, r0]
 8012640:	18c0      	addlt	r0, r0, r3
 8012642:	4770      	bx	lr

08012644 <_read_r>:
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	4d07      	ldr	r5, [pc, #28]	; (8012664 <_read_r+0x20>)
 8012648:	4604      	mov	r4, r0
 801264a:	4608      	mov	r0, r1
 801264c:	4611      	mov	r1, r2
 801264e:	2200      	movs	r2, #0
 8012650:	602a      	str	r2, [r5, #0]
 8012652:	461a      	mov	r2, r3
 8012654:	f7f5 fe3c 	bl	80082d0 <_read>
 8012658:	1c43      	adds	r3, r0, #1
 801265a:	d102      	bne.n	8012662 <_read_r+0x1e>
 801265c:	682b      	ldr	r3, [r5, #0]
 801265e:	b103      	cbz	r3, 8012662 <_read_r+0x1e>
 8012660:	6023      	str	r3, [r4, #0]
 8012662:	bd38      	pop	{r3, r4, r5, pc}
 8012664:	200022d8 	.word	0x200022d8

08012668 <_init>:
 8012668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266a:	bf00      	nop
 801266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801266e:	bc08      	pop	{r3}
 8012670:	469e      	mov	lr, r3
 8012672:	4770      	bx	lr

08012674 <_fini>:
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	bf00      	nop
 8012678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801267a:	bc08      	pop	{r3}
 801267c:	469e      	mov	lr, r3
 801267e:	4770      	bx	lr
