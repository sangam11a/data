
littlefs-redefined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017568  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08017718  08017718  00027718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019624  08019624  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08019624  08019624  00029624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801962c  0801962c  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801962c  0801962c  0002962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019630  08019630  00029630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08019634  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030230  2**0
                  CONTENTS
 10 .bss          00002c24  20000230  20000230  00030230  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002e54  20002e54  00030230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038efe  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006625  00000000  00000000  0006915e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023a8  00000000  00000000  0006f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002410  00000000  00000000  00071b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c7b6  00000000  00000000  00073f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e487  00000000  00000000  000a06f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3071  00000000  00000000  000ceb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c1bee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a4c4  00000000  00000000  001c1c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000230 	.word	0x20000230
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017700 	.word	0x08017700

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000234 	.word	0x20000234
 80001ec:	08017700 	.word	0x08017700

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b982 	b.w	8000e18 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f81a 	bl	8000b54 <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__popcountsi2>:
 8000b2c:	0843      	lsrs	r3, r0, #1
 8000b2e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000b32:	1ac0      	subs	r0, r0, r3
 8000b34:	0883      	lsrs	r3, r0, #2
 8000b36:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000b3a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000b3e:	4418      	add	r0, r3
 8000b40:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000b44:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000b48:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000b4c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000b50:	0e00      	lsrs	r0, r0, #24
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9d08      	ldr	r5, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	468c      	mov	ip, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8083 	bne.w	8000c6a <__udivmoddi4+0x116>
 8000b64:	428a      	cmp	r2, r1
 8000b66:	4617      	mov	r7, r2
 8000b68:	d947      	bls.n	8000bfa <__udivmoddi4+0xa6>
 8000b6a:	fab2 f282 	clz	r2, r2
 8000b6e:	b142      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b70:	f1c2 0020 	rsb	r0, r2, #32
 8000b74:	fa24 f000 	lsr.w	r0, r4, r0
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	4097      	lsls	r7, r2
 8000b7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b80:	4094      	lsls	r4, r2
 8000b82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fbbc f6f8 	udiv	r6, ip, r8
 8000b8c:	fa1f fe87 	uxth.w	lr, r7
 8000b90:	fb08 c116 	mls	r1, r8, r6, ip
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb06 f10e 	mul.w	r1, r6, lr
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x60>
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba6:	f080 8119 	bcs.w	8000ddc <__udivmoddi4+0x288>
 8000baa:	4299      	cmp	r1, r3
 8000bac:	f240 8116 	bls.w	8000ddc <__udivmoddi4+0x288>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	443b      	add	r3, r7
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	45a6      	cmp	lr, r4
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x8c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd2:	f080 8105 	bcs.w	8000de0 <__udivmoddi4+0x28c>
 8000bd6:	45a6      	cmp	lr, r4
 8000bd8:	f240 8102 	bls.w	8000de0 <__udivmoddi4+0x28c>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	443c      	add	r4, r7
 8000be0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be4:	eba4 040e 	sub.w	r4, r4, lr
 8000be8:	2600      	movs	r6, #0
 8000bea:	b11d      	cbz	r5, 8000bf4 <__udivmoddi4+0xa0>
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	b902      	cbnz	r2, 8000bfe <__udivmoddi4+0xaa>
 8000bfc:	deff      	udf	#255	; 0xff
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d150      	bne.n	8000ca8 <__udivmoddi4+0x154>
 8000c06:	1bcb      	subs	r3, r1, r7
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	2601      	movs	r6, #1
 8000c12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c16:	0c21      	lsrs	r1, r4, #16
 8000c18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb08 f30c 	mul.w	r3, r8, ip
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0xe4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0xe2>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	f200 80e9 	bhi.w	8000e08 <__udivmoddi4+0x2b4>
 8000c36:	4684      	mov	ip, r0
 8000c38:	1ac9      	subs	r1, r1, r3
 8000c3a:	b2a3      	uxth	r3, r4
 8000c3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c48:	fb08 f800 	mul.w	r8, r8, r0
 8000c4c:	45a0      	cmp	r8, r4
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x10c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x10a>
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	f200 80d9 	bhi.w	8000e10 <__udivmoddi4+0x2bc>
 8000c5e:	4618      	mov	r0, r3
 8000c60:	eba4 0408 	sub.w	r4, r4, r8
 8000c64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c68:	e7bf      	b.n	8000bea <__udivmoddi4+0x96>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0x12e>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80b1 	beq.w	8000dd6 <__udivmoddi4+0x282>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x1cc>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0x140>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80b8 	bhi.w	8000e04 <__udivmoddi4+0x2b0>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0103 	sbc.w	r1, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	468c      	mov	ip, r1
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0a8      	beq.n	8000bf4 <__udivmoddi4+0xa0>
 8000ca2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ca6:	e7a5      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000ca8:	f1c2 0320 	rsb	r3, r2, #32
 8000cac:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb0:	4097      	lsls	r7, r2
 8000cb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cba:	40d9      	lsrs	r1, r3
 8000cbc:	4330      	orrs	r0, r6
 8000cbe:	0c03      	lsrs	r3, r0, #16
 8000cc0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cc4:	fa1f f887 	uxth.w	r8, r7
 8000cc8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f108 	mul.w	r1, r6, r8
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cda:	d909      	bls.n	8000cf0 <__udivmoddi4+0x19c>
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ce2:	f080 808d 	bcs.w	8000e00 <__udivmoddi4+0x2ac>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 808a 	bls.w	8000e00 <__udivmoddi4+0x2ac>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	443b      	add	r3, r7
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b281      	uxth	r1, r0
 8000cf4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d00:	fb00 f308 	mul.w	r3, r0, r8
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x1c4>
 8000d08:	1879      	adds	r1, r7, r1
 8000d0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d0e:	d273      	bcs.n	8000df8 <__udivmoddi4+0x2a4>
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d971      	bls.n	8000df8 <__udivmoddi4+0x2a4>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4439      	add	r1, r7
 8000d18:	1acb      	subs	r3, r1, r3
 8000d1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d1e:	e778      	b.n	8000c12 <__udivmoddi4+0xbe>
 8000d20:	f1c6 0c20 	rsb	ip, r6, #32
 8000d24:	fa03 f406 	lsl.w	r4, r3, r6
 8000d28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d2c:	431c      	orrs	r4, r3
 8000d2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	0c3b      	lsrs	r3, r7, #16
 8000d42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d46:	fa1f f884 	uxth.w	r8, r4
 8000d4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d52:	fb09 fa08 	mul.w	sl, r9, r8
 8000d56:	458a      	cmp	sl, r1
 8000d58:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x220>
 8000d62:	1861      	adds	r1, r4, r1
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	d248      	bcs.n	8000dfc <__udivmoddi4+0x2a8>
 8000d6a:	458a      	cmp	sl, r1
 8000d6c:	d946      	bls.n	8000dfc <__udivmoddi4+0x2a8>
 8000d6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d72:	4421      	add	r1, r4
 8000d74:	eba1 010a 	sub.w	r1, r1, sl
 8000d78:	b2bf      	uxth	r7, r7
 8000d7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d86:	fb00 f808 	mul.w	r8, r0, r8
 8000d8a:	45b8      	cmp	r8, r7
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x24a>
 8000d8e:	19e7      	adds	r7, r4, r7
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d22e      	bcs.n	8000df4 <__udivmoddi4+0x2a0>
 8000d96:	45b8      	cmp	r8, r7
 8000d98:	d92c      	bls.n	8000df4 <__udivmoddi4+0x2a0>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4427      	add	r7, r4
 8000d9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da2:	eba7 0708 	sub.w	r7, r7, r8
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	454f      	cmp	r7, r9
 8000dac:	46c6      	mov	lr, r8
 8000dae:	4649      	mov	r1, r9
 8000db0:	d31a      	bcc.n	8000de8 <__udivmoddi4+0x294>
 8000db2:	d017      	beq.n	8000de4 <__udivmoddi4+0x290>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x27a>
 8000db6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dba:	eb67 0701 	sbc.w	r7, r7, r1
 8000dbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dc2:	40f2      	lsrs	r2, r6
 8000dc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000dc8:	40f7      	lsrs	r7, r6
 8000dca:	e9c5 2700 	strd	r2, r7, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	462e      	mov	r6, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e70b      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	e6e9      	b.n	8000bb4 <__udivmoddi4+0x60>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6fd      	b.n	8000be0 <__udivmoddi4+0x8c>
 8000de4:	4543      	cmp	r3, r8
 8000de6:	d2e5      	bcs.n	8000db4 <__udivmoddi4+0x260>
 8000de8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dec:	eb69 0104 	sbc.w	r1, r9, r4
 8000df0:	3801      	subs	r0, #1
 8000df2:	e7df      	b.n	8000db4 <__udivmoddi4+0x260>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e7d2      	b.n	8000d9e <__udivmoddi4+0x24a>
 8000df8:	4660      	mov	r0, ip
 8000dfa:	e78d      	b.n	8000d18 <__udivmoddi4+0x1c4>
 8000dfc:	4681      	mov	r9, r0
 8000dfe:	e7b9      	b.n	8000d74 <__udivmoddi4+0x220>
 8000e00:	4666      	mov	r6, ip
 8000e02:	e775      	b.n	8000cf0 <__udivmoddi4+0x19c>
 8000e04:	4630      	mov	r0, r6
 8000e06:	e74a      	b.n	8000c9e <__udivmoddi4+0x14a>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	4439      	add	r1, r7
 8000e0e:	e713      	b.n	8000c38 <__udivmoddi4+0xe4>
 8000e10:	3802      	subs	r0, #2
 8000e12:	443c      	add	r4, r7
 8000e14:	e724      	b.n	8000c60 <__udivmoddi4+0x10c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <buffersize>:
 * @brief	counts the number of non-null data in given array
 *
 * @param	buff	pointer to the array of data to be counted
 * @retval	int		number of non-null values in the array
 */
int buffersize(char *buff) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e28:	e002      	b.n	8000e30 <buffersize+0x14>
		i++;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f6      	bne.n	8000e2a <buffersize+0xe>
	return i;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 8000e4c:	b40f      	push	{r0, r1, r2, r3}
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	607b      	str	r3, [r7, #4]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a3a      	ldr	r2, [r7, #32]
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <myprintf+0x88>)
 8000e62:	f015 fe8f 	bl	8016b84 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <myprintf+0x88>)
 8000e68:	f7ff ffd8 	bl	8000e1c <buffersize>
 8000e6c:	6178      	str	r0, [r7, #20]
#endif
#ifdef UART_DEBUG
	// Add the code here for printing data to serial monitor via software simulated UART
//	while (DEBUG_DATA_TX_FLAG != 0) {
//	}
	uint32_t current_tick = HAL_GetTick();
 8000e6e:	f00b ff55 	bl	800cd1c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 8000e74:	e006      	b.n	8000e84 <myprintf+0x38>
		if (HAL_GetTick() - current_tick > 20) {
 8000e76:	f00b ff51 	bl	800cd1c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b14      	cmp	r3, #20
 8000e82:	d806      	bhi.n	8000e92 <myprintf+0x46>
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <myprintf+0x8c>)
 8000e86:	f010 fe8b 	bl	8011ba0 <HAL_UART_GetState>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b21      	cmp	r3, #33	; 0x21
 8000e8e:	d0f2      	beq.n	8000e76 <myprintf+0x2a>
 8000e90:	e000      	b.n	8000e94 <myprintf+0x48>
			break;
 8000e92:	bf00      	nop
		}
	}
	uint8_t DEBUG_DATA_TX_FLAG = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
	uint32_t tickstart_ = HAL_GetTick();
 8000e98:	f00b ff40 	bl	800cd1c <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit_IT(&DEBUG_STREAM, (uint8_t*) temp, len);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	490b      	ldr	r1, [pc, #44]	; (8000ed4 <myprintf+0x88>)
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <myprintf+0x8c>)
 8000ea8:	f010 fb4d 	bl	8011546 <HAL_UART_Transmit_IT>

	while (DEBUG_DATA_TX_FLAG != 1 && (HAL_GetTick() - tickstart_ < 200)) {
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d006      	beq.n	8000ec0 <myprintf+0x74>
 8000eb2:	f00b ff33 	bl	800cd1c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2bc7      	cmp	r3, #199	; 0xc7
 8000ebe:	d9f5      	bls.n	8000eac <myprintf+0x60>
	}
	DEBUG_DATA_TX_FLAG = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
#endif
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ece:	b004      	add	sp, #16
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000024c 	.word	0x2000024c
 8000ed8:	20000888 	.word	0x20000888

08000edc <ADC_Enable>:
 *
 * @retval 		null
 *
 * @param 		null
 */
void ADC_Enable() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ADC_Enable+0x1c>)
 8000ee8:	f00d f9e2 	bl	800e2b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f00b ff21 	bl	800cd34 <HAL_Delay>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <ADC1_Enable>:
 *
 * @retval 		null
 *
 * @param 		null
 */
void ADC1_Enable() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <ADC1_Enable+0x1c>)
 8000f08:	f00d f9d2 	bl	800e2b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f00b ff11 	bl	800cd34 <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <ADC_Disable>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC_Disable() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <ADC_Disable+0x1c>)
 8000f28:	f00d f9c2 	bl	800e2b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f00b ff01 	bl	800cd34 <HAL_Delay>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <ADC1_Disable>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC1_Disable() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <ADC1_Disable+0x1c>)
 8000f48:	f00d f9b2 	bl	800e2b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f00b fef1 	bl	800cd34 <HAL_Delay>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <MANUAL_Select>:
 *
 * @retval		null
 *
 * @param		null
 */
void MANUAL_Select() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af02      	add	r7, sp, #8
	uint8_t command[2];
	uint16_t temp;

	temp = MANUAL_MODE;
 8000f62:	f44f 53d6 	mov.w	r3, #6848	; 0x1ac0
 8000f66:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	717b      	strb	r3, [r7, #5]

	ADC1_Enable();
 8000f78:	f7ff ffc0 	bl	8000efc <ADC1_Enable>
	HAL_Delay(1);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f00b fed9 	bl	800cd34 <HAL_Delay>
	HAL_SPI_TransmitReceive(&E_ADC, command, adc_data, 2, 1000);
 8000f82:	1d39      	adds	r1, r7, #4
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <MANUAL_Select+0x50>)
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MANUAL_Select+0x54>)
 8000f90:	f00f fa48 	bl	8010424 <HAL_SPI_TransmitReceive>
	HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f00b fecd 	bl	800cd34 <HAL_Delay>
	ADC1_Disable();
 8000f9a:	f7ff ffcf 	bl	8000f3c <ADC1_Disable>
	HAL_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f00b fec8 	bl	800cd34 <HAL_Delay>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000059c 	.word	0x2000059c
 8000fb0:	20000e38 	.word	0x20000e38

08000fb4 <AUTO_2_Select_ADC>:
 *
 * @retval 		null
 *
 * @param		null
 */
void AUTO_2_Select_ADC(operation_modes mode) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint16_t temp;
	HAL_StatusTypeDef ret;
	switch (mode) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <AUTO_2_Select_ADC+0x16>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d023      	beq.n	8001010 <AUTO_2_Select_ADC+0x5c>
		HAL_Delay(1);
		ADC_Disable();
		HAL_Delay(1);
		break;
	default:
		break;
 8000fc8:	e047      	b.n	800105a <AUTO_2_Select_ADC+0xa6>
		temp = AUTO_2_MODE;
 8000fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000fce:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	723b      	strb	r3, [r7, #8]
		command[1] = temp & 0xff;
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	727b      	strb	r3, [r7, #9]
		ADC_Enable();
 8000fe0:	f7ff ff7c 	bl	8000edc <ADC_Enable>
		HAL_Delay(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f00b fea5 	bl	800cd34 <HAL_Delay>
		ret = HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8000fea:	f107 0108 	add.w	r1, r7, #8
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	481b      	ldr	r0, [pc, #108]	; (8001064 <AUTO_2_Select_ADC+0xb0>)
 8000ff6:	f00e ffc8 	bl	800ff8a <HAL_SPI_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	737b      	strb	r3, [r7, #13]
		HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f00b fe98 	bl	800cd34 <HAL_Delay>
		ADC_Disable();
 8001004:	f7ff ff8a 	bl	8000f1c <ADC_Disable>
		HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f00b fe93 	bl	800cd34 <HAL_Delay>
		break;
 800100e:	e024      	b.n	800105a <AUTO_2_Select_ADC+0xa6>
		temp = AUTO_2_MODE2;
 8001010:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001014:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	723b      	strb	r3, [r7, #8]
		command[1] = temp & 0xff;
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	727b      	strb	r3, [r7, #9]
		ADC_Enable();
 8001026:	f7ff ff59 	bl	8000edc <ADC_Enable>
		HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f00b fe82 	bl	800cd34 <HAL_Delay>
		ret = HAL_SPI_TransmitReceive(&E_ADC, command, adc_data, 2, 1000);
 8001030:	f107 0108 	add.w	r1, r7, #8
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2302      	movs	r3, #2
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <AUTO_2_Select_ADC+0xb4>)
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <AUTO_2_Select_ADC+0xb0>)
 8001040:	f00f f9f0 	bl	8010424 <HAL_SPI_TransmitReceive>
 8001044:	4603      	mov	r3, r0
 8001046:	737b      	strb	r3, [r7, #13]
		HAL_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f00b fe73 	bl	800cd34 <HAL_Delay>
		ADC_Disable();
 800104e:	f7ff ff65 	bl	8000f1c <ADC_Disable>
		HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f00b fe6e 	bl	800cd34 <HAL_Delay>
		break;
 8001058:	bf00      	nop
	}

}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000e38 	.word	0x20000e38
 8001068:	2000059c 	.word	0x2000059c

0800106c <AUTO_2_Select_ADC1>:
 *
 * @retval 		null
 *
 * @param		null
 */
void AUTO_2_Select_ADC1(operation_modes mode) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t command[2];
	uint16_t temp;
	switch (mode) {
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d002      	beq.n	8001082 <AUTO_2_Select_ADC1+0x16>
 800107c:	2b02      	cmp	r3, #2
 800107e:	d021      	beq.n	80010c4 <AUTO_2_Select_ADC1+0x58>
		HAL_Delay(1);
		ADC1_Disable();
		HAL_Delay(1);
		break;
	default:
		break;
 8001080:	e043      	b.n	800110a <AUTO_2_Select_ADC1+0x9e>
		temp = AUTO_2_MODE;
 8001082:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001086:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	733b      	strb	r3, [r7, #12]
		command[1] = temp & 0xff;
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	737b      	strb	r3, [r7, #13]
		ADC1_Enable();
 8001098:	f7ff ff30 	bl	8000efc <ADC1_Enable>
		HAL_Delay(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f00b fe49 	bl	800cd34 <HAL_Delay>
		HAL_SPI_Transmit(&E_ADC, command, 2, 1000);	//(to ask) 8 bit ko data type ma change garyo vane data loss hunxa?
 80010a2:	f107 010c 	add.w	r1, r7, #12
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	2202      	movs	r2, #2
 80010ac:	4819      	ldr	r0, [pc, #100]	; (8001114 <AUTO_2_Select_ADC1+0xa8>)
 80010ae:	f00e ff6c 	bl	800ff8a <HAL_SPI_Transmit>
		HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f00b fe3e 	bl	800cd34 <HAL_Delay>
		ADC1_Disable();
 80010b8:	f7ff ff40 	bl	8000f3c <ADC1_Disable>
		HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f00b fe39 	bl	800cd34 <HAL_Delay>
		break;
 80010c2:	e022      	b.n	800110a <AUTO_2_Select_ADC1+0x9e>
		temp = AUTO_2_MODE2;
 80010c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010c8:	81fb      	strh	r3, [r7, #14]
		command[0] = temp >> 8;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	733b      	strb	r3, [r7, #12]
		command[1] = temp & 0xff;
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	737b      	strb	r3, [r7, #13]
		ADC1_Enable();
 80010da:	f7ff ff0f 	bl	8000efc <ADC1_Enable>
		HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f00b fe28 	bl	800cd34 <HAL_Delay>
		HAL_SPI_TransmitReceive(&E_ADC, command, adc1_data, 2, 1000);
 80010e4:	f107 010c 	add.w	r1, r7, #12
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2302      	movs	r3, #2
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <AUTO_2_Select_ADC1+0xac>)
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <AUTO_2_Select_ADC1+0xa8>)
 80010f4:	f00f f996 	bl	8010424 <HAL_SPI_TransmitReceive>
		HAL_Delay(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f00b fe1b 	bl	800cd34 <HAL_Delay>
		ADC1_Disable();
 80010fe:	f7ff ff1d 	bl	8000f3c <ADC1_Disable>
		HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f00b fe16 	bl	800cd34 <HAL_Delay>
		break;
 8001108:	bf00      	nop
	}
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000e38 	.word	0x20000e38
 8001118:	20000598 	.word	0x20000598

0800111c <ADC_AUTO_2_Program>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC_AUTO_2_Program() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	uint8_t command[2];
	uint16_t temp;

	temp = ADC_AUTO_2_PROGRAM;
 8001122:	f249 13c0 	movw	r3, #37312	; 0x91c0
 8001126:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	717b      	strb	r3, [r7, #5]

	ADC_Enable();
 8001138:	f7ff fed0 	bl	8000edc <ADC_Enable>
	HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f00b fdf9 	bl	800cd34 <HAL_Delay>
	HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8001142:	1d39      	adds	r1, r7, #4
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	2202      	movs	r2, #2
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <ADC_AUTO_2_Program+0x4c>)
 800114c:	f00e ff1d 	bl	800ff8a <HAL_SPI_Transmit>
	HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f00b fdef 	bl	800cd34 <HAL_Delay>
	ADC_Disable();
 8001156:	f7ff fee1 	bl	8000f1c <ADC_Disable>
	HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f00b fdea 	bl	800cd34 <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000e38 	.word	0x20000e38

0800116c <ADC1_AUTO_2_Program>:
 *
 * @retval		null
 *
 * @param		null
 */
void ADC1_AUTO_2_Program() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	uint8_t command[2];
	uint16_t temp;

	temp = ADC1_AUTO_2_PROGRAM;
 8001172:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8001176:	80fb      	strh	r3, [r7, #6]
	command[0] = temp >> 8;
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	713b      	strb	r3, [r7, #4]
	command[1] = temp & 0xff;
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	717b      	strb	r3, [r7, #5]

	ADC1_Enable();
 8001188:	f7ff feb8 	bl	8000efc <ADC1_Enable>
	HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f00b fdd1 	bl	800cd34 <HAL_Delay>
	HAL_SPI_Transmit(&E_ADC, command, 2, 1000);
 8001192:	1d39      	adds	r1, r7, #4
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	2202      	movs	r2, #2
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <ADC1_AUTO_2_Program+0x4c>)
 800119c:	f00e fef5 	bl	800ff8a <HAL_SPI_Transmit>
	HAL_Delay(1);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f00b fdc7 	bl	800cd34 <HAL_Delay>
	ADC1_Disable();
 80011a6:	f7ff fec9 	bl	8000f3c <ADC1_Disable>
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f00b fdc2 	bl	800cd34 <HAL_Delay>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000e38 	.word	0x20000e38

080011bc <ADC_CombineData>:
 *
 * @retval		null
 *
 * @param		float pointer to the buffer where the converted data is to be stored
 */
void ADC_CombineData(uint16_t *adc_channels, uint16_t *adc1_channels) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	 int i = 0, j = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]

	if (i < E_ADC_DATA_LEN) {
 80011ce:	2310      	movs	r3, #16
 80011d0:	461a      	mov	r2, r3
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	da3a      	bge.n	800124e <ADC_CombineData+0x92>
		adc_channels[i] = ((adc_data[0] << 8) | adc_data[1]);
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <ADC_CombineData+0x9c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <ADC_CombineData+0x9c>)
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b219      	sxth	r1, r3
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	b28a      	uxth	r2, r1
 80011f4:	801a      	strh	r2, [r3, #0]
		i++;
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	3301      	adds	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
		if (i == E_ADC_DATA_LEN) {
 80011fc:	2310      	movs	r3, #16
 80011fe:	461a      	mov	r2, r3
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	4293      	cmp	r3, r2
 8001204:	d123      	bne.n	800124e <ADC_CombineData+0x92>
			char uart_buf[20] ;
			for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e01b      	b.n	8001244 <ADC_CombineData+0x88>
				adc_channels[x] = adc_channels[x] & 0x0fff;
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	440b      	add	r3, r1
 800121e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001222:	b292      	uxth	r2, r2
 8001224:	801a      	strh	r2, [r3, #0]
				sprintf(uart_buf, "%d \0", adc_channels[x]);
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4909      	ldr	r1, [pc, #36]	; (800125c <ADC_CombineData+0xa0>)
 8001238:	4618      	mov	r0, r3
 800123a:	f015 fc1f 	bl	8016a7c <siprintf>
			for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	3301      	adds	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
 8001244:	2310      	movs	r3, #16
 8001246:	461a      	mov	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	4293      	cmp	r3, r2
 800124c:	dbde      	blt.n	800120c <ADC_CombineData+0x50>
//			}
//			i = 0;
//			j = 0;
//		}
//	}
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000059c 	.word	0x2000059c
 800125c:	08017718 	.word	0x08017718

08001260 <ADC_Conv_Data>:
 * @retval		null
 *
 * @param		floating pointer to the buffer where the converted data is to be stored,
 * 				uint16_t pointer to the buffer which contains the raw data
 */
void ADC_Conv_Data(float *adc_conv_buf, uint16_t *adc_buf) {
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
//		adc_conv_buf[x] = (2.5 * adc_buf[x]) / 4095.0;
//	}
	float dummy;
		float root;

		for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e1ac      	b.n	80015ca <ADC_Conv_Data+0x36a>

		  if (x < 8) adc_conv_buf[x] = (2.5 * adc_buf[x]) / 4095.0;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b07      	cmp	r3, #7
 8001274:	dc22      	bgt.n	80012bc <ADC_Conv_Data+0x5c>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f96f 	bl	8000564 <__aeabi_i2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4bab      	ldr	r3, [pc, #684]	; (8001538 <ADC_Conv_Data+0x2d8>)
 800128c:	f7ff f9d4 	bl	8000638 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	a399      	add	r3, pc, #612	; (adr r3, 8001500 <ADC_Conv_Data+0x2a0>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff faf5 	bl	800088c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	18d4      	adds	r4, r2, r3
 80012b2:	f7ff fbd3 	bl	8000a5c <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	e183      	b.n	80015c4 <ADC_Conv_Data+0x364>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3b08      	subs	r3, #8
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	f200 8143 	bhi.w	800154c <ADC_Conv_Data+0x2ec>
 80012c6:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <ADC_Conv_Data+0x6c>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	08001367 	.word	0x08001367
 80012d4:	080013f1 	.word	0x080013f1
 80012d8:	080014df 	.word	0x080014df

	//	for (int x = number_of_current_channel; x < E_ADC_DATA_LEN; x++) {
			  else{
					switch (x) {
							case 8:		// Solar Panel Total Current
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f93c 	bl	8000564 <__aeabi_i2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b91      	ldr	r3, [pc, #580]	; (8001538 <ADC_Conv_Data+0x2d8>)
 80012f2:	f7ff f9a1 	bl	8000638 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	a380      	add	r3, pc, #512	; (adr r3, 8001500 <ADC_Conv_Data+0x2a0>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff fac2 	bl	800088c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fba4 	bl	8000a5c <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = ((dummy - 1.65) / 264) * 1000;//converting voltage to current. In actual code need to keep separate variable for current
 8001318:	6938      	ldr	r0, [r7, #16]
 800131a:	f7ff f935 	bl	8000588 <__aeabi_f2d>
 800131e:	a37a      	add	r3, pc, #488	; (adr r3, 8001508 <ADC_Conv_Data+0x2a8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ffd0 	bl	80002c8 <__aeabi_dsub>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <ADC_Conv_Data+0x2dc>)
 8001336:	f7ff faa9 	bl	800088c <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b7e      	ldr	r3, [pc, #504]	; (8001540 <ADC_Conv_Data+0x2e0>)
 8001348:	f7ff f976 	bl	8000638 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	18d4      	adds	r4, r2, r3
 800135c:	f7ff fb7e 	bl	8000a5c <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	6023      	str	r3, [r4, #0]
								break;
 8001364:	e12e      	b.n	80015c4 <ADC_Conv_Data+0x364>
							case 9:		// Battery current
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8f7 	bl	8000564 <__aeabi_i2d>
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <ADC_Conv_Data+0x2d8>)
 800137c:	f7ff f95c 	bl	8000638 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	a35d      	add	r3, pc, #372	; (adr r3, 8001500 <ADC_Conv_Data+0x2a0>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff fa7d 	bl	800088c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fb5f 	bl	8000a5c <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = ((dummy - 1.65) / 264) * 1000;//converting voltage to current. In actual code need to keep separate variable for current
 80013a2:	6938      	ldr	r0, [r7, #16]
 80013a4:	f7ff f8f0 	bl	8000588 <__aeabi_f2d>
 80013a8:	a357      	add	r3, pc, #348	; (adr r3, 8001508 <ADC_Conv_Data+0x2a8>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7fe ff8b 	bl	80002c8 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <ADC_Conv_Data+0x2dc>)
 80013c0:	f7ff fa64 	bl	800088c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <ADC_Conv_Data+0x2e0>)
 80013d2:	f7ff f931 	bl	8000638 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	18d4      	adds	r4, r2, r3
 80013e6:	f7ff fb39 	bl	8000a5c <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	6023      	str	r3, [r4, #0]

								break;
 80013ee:	e0e9      	b.n	80015c4 <ADC_Conv_Data+0x364>
							case 10:  // COM Board Temp data
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8b2 	bl	8000564 <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <ADC_Conv_Data+0x2d8>)
 8001406:	f7ff f917 	bl	8000638 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	a33b      	add	r3, pc, #236	; (adr r3, 8001500 <ADC_Conv_Data+0x2a0>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa38 	bl	800088c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb1a 	bl	8000a5c <__aeabi_d2f>
 8001428:	4603      	mov	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
								root = sqrtf(
										(5.506 * 5.506) + (4 * 0.00176 * (870.6 - (dummy * 1000))));
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001544 <ADC_Conv_Data+0x2e4>
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f8a4 	bl	8000588 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	a132      	add	r1, pc, #200	; (adr r1, 8001510 <ADC_Conv_Data+0x2b0>)
 8001446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800144a:	f7fe ff3d 	bl	80002c8 <__aeabi_dsub>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	a330      	add	r3, pc, #192	; (adr r3, 8001518 <ADC_Conv_Data+0x2b8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8ec 	bl	8000638 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a32d      	add	r3, pc, #180	; (adr r3, 8001520 <ADC_Conv_Data+0x2c0>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe ff2d 	bl	80002cc <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
								root = sqrtf(
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff faef 	bl	8000a5c <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	ee00 3a10 	vmov	s0, r3
 8001484:	f016 f912 	bl	80176ac <sqrtf>
 8001488:	ed87 0a03 	vstr	s0, [r7, #12]
								adc_conv_buf[x] = ((5.506 - root) / (2 * (-0.00176))) + 30;
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff f87b 	bl	8000588 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	a124      	add	r1, pc, #144	; (adr r1, 8001528 <ADC_Conv_Data+0x2c8>)
 8001498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800149c:	f7fe ff14 	bl	80002c8 <__aeabi_dsub>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	a321      	add	r3, pc, #132	; (adr r3, 8001530 <ADC_Conv_Data+0x2d0>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f9ed 	bl	800088c <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <ADC_Conv_Data+0x2e8>)
 80014c0:	f7fe ff04 	bl	80002cc <__adddf3>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	18d4      	adds	r4, r2, r3
 80014d4:	f7ff fac2 	bl	8000a5c <__aeabi_d2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	6023      	str	r3, [r4, #0]
								break;
 80014dc:	e072      	b.n	80015c4 <ADC_Conv_Data+0x364>
							case 11:	// COM RSSI analog data
								adc_conv_buf[x] = adc_buf[x];
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	8819      	ldrh	r1, [r3, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	ee07 1a90 	vmov	s15, r1
 80014f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f8:	edc3 7a00 	vstr	s15, [r3]
								break;
 80014fc:	e062      	b.n	80015c4 <ADC_Conv_Data+0x364>
 80014fe:	bf00      	nop
 8001500:	00000000 	.word	0x00000000
 8001504:	40affe00 	.word	0x40affe00
 8001508:	66666666 	.word	0x66666666
 800150c:	3ffa6666 	.word	0x3ffa6666
 8001510:	cccccccd 	.word	0xcccccccd
 8001514:	408b34cc 	.word	0x408b34cc
 8001518:	9c38b04b 	.word	0x9c38b04b
 800151c:	3f7cd5f9 	.word	0x3f7cd5f9
 8001520:	bc3c5bd2 	.word	0xbc3c5bd2
 8001524:	403e50e7 	.word	0x403e50e7
 8001528:	dd2f1aa0 	.word	0xdd2f1aa0
 800152c:	40160624 	.word	0x40160624
 8001530:	9c38b04b 	.word	0x9c38b04b
 8001534:	bf6cd5f9 	.word	0xbf6cd5f9
 8001538:	40040000 	.word	0x40040000
 800153c:	40708000 	.word	0x40708000
 8001540:	408f4000 	.word	0x408f4000
 8001544:	447a0000 	.word	0x447a0000
 8001548:	403e0000 	.word	0x403e0000
							default:		// baki sabai
								dummy = (2.5 * adc_buf[x]) / 4095.0;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	4413      	add	r3, r2
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f804 	bl	8000564 <__aeabi_i2d>
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <ADC_Conv_Data+0x398>)
 8001562:	f7ff f869 	bl	8000638 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a31c      	add	r3, pc, #112	; (adr r3, 80015e0 <ADC_Conv_Data+0x380>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f98a 	bl	800088c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa6c 	bl	8000a5c <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	613b      	str	r3, [r7, #16]
								adc_conv_buf[x] = (dummy * (1100.0 + 931.0)) / 931.0;
 8001588:	6938      	ldr	r0, [r7, #16]
 800158a:	f7fe fffd 	bl	8000588 <__aeabi_f2d>
 800158e:	a316      	add	r3, pc, #88	; (adr r3, 80015e8 <ADC_Conv_Data+0x388>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f850 	bl	8000638 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	a313      	add	r3, pc, #76	; (adr r3, 80015f0 <ADC_Conv_Data+0x390>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f971 	bl	800088c <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	18d4      	adds	r4, r2, r3
 80015ba:	f7ff fa4f 	bl	8000a5c <__aeabi_d2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	6023      	str	r3, [r4, #0]
								break;
 80015c2:	bf00      	nop
		for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	2310      	movs	r3, #16
 80015cc:	461a      	mov	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	f6ff ae4d 	blt.w	8001270 <ADC_Conv_Data+0x10>
							}
			  }
			}
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40affe00 	.word	0x40affe00
 80015e8:	00000000 	.word	0x00000000
 80015ec:	409fbc00 	.word	0x409fbc00
 80015f0:	00000000 	.word	0x00000000
 80015f4:	408d1800 	.word	0x408d1800
 80015f8:	40040000 	.word	0x40040000

080015fc <ADC_Operate>:
 *
 * @param		floating pointers to the buffer which stores the converted data.
 *
 * @retval		null
 */
void ADC_Operate(uint16_t *adc_channels, uint16_t *adc1_channels) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	MANUAL_Select();
 8001606:	f7ff fca9 	bl	8000f5c <MANUAL_Select>
	AUTO_2_Select_ADC(ADC_SELECT); // programming cycle of ADC 0
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff fcd2 	bl	8000fb4 <AUTO_2_Select_ADC>
	ADC_AUTO_2_Program();
 8001610:	f7ff fd84 	bl	800111c <ADC_AUTO_2_Program>
	AUTO_2_Select_ADC1(ADC_SELECT); // programming cycle of ADC 1
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fd29 	bl	800106c <AUTO_2_Select_ADC1>
	ADC1_AUTO_2_Program();
 800161a:	f7ff fda7 	bl	800116c <ADC1_AUTO_2_Program>

	for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e00e      	b.n	8001642 <ADC_Operate+0x46>
		if (x < E_ADC_DATA_LEN) {
 8001624:	2310      	movs	r3, #16
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4293      	cmp	r3, r2
 800162c:	da02      	bge.n	8001634 <ADC_Operate+0x38>
			AUTO_2_Select_ADC(ADC_READ);			// Data read cycle of ADC 0
 800162e:	2002      	movs	r0, #2
 8001630:	f7ff fcc0 	bl	8000fb4 <AUTO_2_Select_ADC>

		}
		 			// Data  Read cycle from ADC 1
		ADC_CombineData(adc_channels, adc1_channels);
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fdc0 	bl	80011bc <ADC_CombineData>
	for (int x = 0; x < E_ADC_DATA_LEN; x++) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	2310      	movs	r3, #16
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4293      	cmp	r3, r2
 800164a:	dbeb      	blt.n	8001624 <ADC_Operate+0x28>
//			}				// Data  Read cycle from ADC 1
//			ADC_CombineData(adc_channels, adc1_channels);
//	//		ADC1_Conv_Data((float*)adc_channels, adc1_channels);
//		}

}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x98>)
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <MX_ADC1_Init+0x9c>)
 800166e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_ADC1_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_ADC1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_ADC1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_ADC1_Init+0x98>)
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <MX_ADC1_Init+0xa0>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016ba:	f00b fb5f 	bl	800cd7c <HAL_ADC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016c4:	f009 fc24 	bl	800af10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC1_Init+0x98>)
 80016da:	f00b fcf1 	bl	800d0c0 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016e4:	f009 fc14 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000648 	.word	0x20000648
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_ADC2_Init+0x98>)
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <MX_ADC2_Init+0x9c>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_ADC2_Init+0x98>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_ADC2_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_ADC2_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_ADC2_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_ADC2_Init+0x98>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_ADC2_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_ADC2_Init+0x98>)
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <MX_ADC2_Init+0xa0>)
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_ADC2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_ADC2_Init+0x98>)
 800174a:	2201      	movs	r2, #1
 800174c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_ADC2_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_ADC2_Init+0x98>)
 8001758:	2201      	movs	r2, #1
 800175a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_ADC2_Init+0x98>)
 800175e:	f00b fb0d 	bl	800cd7c <HAL_ADC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001768:	f009 fbd2 	bl	800af10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800176c:	2303      	movs	r3, #3
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_ADC2_Init+0x98>)
 800177e:	f00b fc9f 	bl	800d0c0 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001788:	f009 fbc2 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200005a0 	.word	0x200005a0
 8001798:	40012100 	.word	0x40012100
 800179c:	0f000001 	.word	0x0f000001

080017a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_ADC3_Init+0x98>)
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <MX_ADC3_Init+0x9c>)
 80017b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_ADC3_Init+0x98>)
 80017ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_ADC3_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_ADC3_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_ADC3_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_ADC3_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_ADC3_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_ADC3_Init+0x98>)
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <MX_ADC3_Init+0xa0>)
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_ADC3_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_ADC3_Init+0x98>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_ADC3_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_ADC3_Init+0x98>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <MX_ADC3_Init+0x98>)
 8001802:	f00b fabb 	bl	800cd7c <HAL_ADC_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800180c:	f009 fb80 	bl	800af10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001810:	230e      	movs	r3, #14
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_ADC3_Init+0x98>)
 8001822:	f00b fc4d 	bl	800d0c0 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800182c:	f009 fb70 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000690 	.word	0x20000690
 800183c:	40012200 	.word	0x40012200
 8001840:	0f000001 	.word	0x0f000001

08001844 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a99      	ldr	r2, [pc, #612]	; (8001ac8 <HAL_ADC_MspInit+0x284>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f040 8094 	bne.w	8001990 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
 800186c:	4b97      	ldr	r3, [pc, #604]	; (8001acc <HAL_ADC_MspInit+0x288>)
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_ADC_MspInit+0x288>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6453      	str	r3, [r2, #68]	; 0x44
 8001878:	4b94      	ldr	r3, [pc, #592]	; (8001acc <HAL_ADC_MspInit+0x288>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
 8001888:	4b90      	ldr	r3, [pc, #576]	; (8001acc <HAL_ADC_MspInit+0x288>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4a8f      	ldr	r2, [pc, #572]	; (8001acc <HAL_ADC_MspInit+0x288>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6313      	str	r3, [r2, #48]	; 0x30
 8001894:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <HAL_ADC_MspInit+0x288>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
 80018a4:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a88      	ldr	r2, [pc, #544]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b86      	ldr	r3, [pc, #536]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	4b82      	ldr	r3, [pc, #520]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a81      	ldr	r2, [pc, #516]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b7f      	ldr	r3, [pc, #508]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PC5     ------> ADC1_IN15
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018d8:	233f      	movs	r3, #63	; 0x3f
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018dc:	2303      	movs	r3, #3
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018e8:	4619      	mov	r1, r3
 80018ea:	4879      	ldr	r0, [pc, #484]	; (8001ad0 <HAL_ADC_MspInit+0x28c>)
 80018ec:	f00c fb34 	bl	800df58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018f0:	23ff      	movs	r3, #255	; 0xff
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f4:	2303      	movs	r3, #3
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001900:	4619      	mov	r1, r3
 8001902:	4874      	ldr	r0, [pc, #464]	; (8001ad4 <HAL_ADC_MspInit+0x290>)
 8001904:	f00c fb28 	bl	800df58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001908:	2303      	movs	r3, #3
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190c:	2303      	movs	r3, #3
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001918:	4619      	mov	r1, r3
 800191a:	486f      	ldr	r0, [pc, #444]	; (8001ad8 <HAL_ADC_MspInit+0x294>)
 800191c:	f00c fb1c 	bl	800df58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001920:	4b6e      	ldr	r3, [pc, #440]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001922:	4a6f      	ldr	r2, [pc, #444]	; (8001ae0 <HAL_ADC_MspInit+0x29c>)
 8001924:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <HAL_ADC_MspInit+0x298>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_ADC_MspInit+0x298>)
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001946:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <HAL_ADC_MspInit+0x298>)
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001950:	4b62      	ldr	r3, [pc, #392]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800195c:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <HAL_ADC_MspInit+0x298>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001962:	485e      	ldr	r0, [pc, #376]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001964:	f00b fef6 	bl	800d754 <HAL_DMA_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800196e:	f009 facf 	bl	800af10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a59      	ldr	r2, [pc, #356]	; (8001adc <HAL_ADC_MspInit+0x298>)
 8001976:	639a      	str	r2, [r3, #56]	; 0x38
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_ADC_MspInit+0x298>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2012      	movs	r0, #18
 8001984:	f00b feaf 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001988:	2012      	movs	r0, #18
 800198a:	f00b fec8 	bl	800d71e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800198e:	e149      	b.n	8001c24 <HAL_ADC_MspInit+0x3e0>
  else if(adcHandle->Instance==ADC2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a53      	ldr	r2, [pc, #332]	; (8001ae4 <HAL_ADC_MspInit+0x2a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	f040 80aa 	bne.w	8001af0 <HAL_ADC_MspInit+0x2ac>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6453      	str	r3, [r2, #68]	; 0x44
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6313      	str	r3, [r2, #48]	; 0x30
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <HAL_ADC_MspInit+0x288>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <HAL_ADC_MspInit+0x288>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a0c:	233f      	movs	r3, #63	; 0x3f
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	482c      	ldr	r0, [pc, #176]	; (8001ad0 <HAL_ADC_MspInit+0x28c>)
 8001a20:	f00c fa9a 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <HAL_ADC_MspInit+0x290>)
 8001a38:	f00c fa8e 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a40:	2303      	movs	r3, #3
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4822      	ldr	r0, [pc, #136]	; (8001ad8 <HAL_ADC_MspInit+0x294>)
 8001a50:	f00c fa82 	bl	800df58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <HAL_ADC_MspInit+0x2a8>)
 8001a58:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a60:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a74:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001a9a:	f00b fe5b 	bl	800d754 <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8001aa4:	f009 fa34 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_ADC_MspInit+0x2a4>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2012      	movs	r0, #18
 8001aba:	f00b fe14 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001abe:	2012      	movs	r0, #18
 8001ac0:	f00b fe2d 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 8001ac4:	e0ae      	b.n	8001c24 <HAL_ADC_MspInit+0x3e0>
 8001ac6:	bf00      	nop
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	200006d8 	.word	0x200006d8
 8001ae0:	40026470 	.word	0x40026470
 8001ae4:	40012100 	.word	0x40012100
 8001ae8:	20000738 	.word	0x20000738
 8001aec:	40026440 	.word	0x40026440
  else if(adcHandle->Instance==ADC3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_ADC_MspInit+0x3e8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f040 8094 	bne.w	8001c24 <HAL_ADC_MspInit+0x3e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0c:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a43      	ldr	r2, [pc, #268]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	6313      	str	r3, [r2, #48]	; 0x30
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_ADC_MspInit+0x3ec>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b70:	2303      	movs	r3, #3
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482d      	ldr	r0, [pc, #180]	; (8001c34 <HAL_ADC_MspInit+0x3f0>)
 8001b80:	f00c f9ea 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b84:	2307      	movs	r3, #7
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b94:	4619      	mov	r1, r3
 8001b96:	4828      	ldr	r0, [pc, #160]	; (8001c38 <HAL_ADC_MspInit+0x3f4>)
 8001b98:	f00c f9de 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bac:	4619      	mov	r1, r3
 8001bae:	4823      	ldr	r0, [pc, #140]	; (8001c3c <HAL_ADC_MspInit+0x3f8>)
 8001bb0:	f00c f9d2 	bl	800df58 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_ADC_MspInit+0x400>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bc0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bdc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001bfa:	f00b fdab 	bl	800d754 <HAL_DMA_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_ADC_MspInit+0x3c4>
      Error_Handler();
 8001c04:	f009 f984 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_ADC_MspInit+0x3fc>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f00b fd64 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c1e:	2012      	movs	r0, #18
 8001c20:	f00b fd7d 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 8001c24:	bf00      	nop
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40012200 	.word	0x40012200
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	200005e8 	.word	0x200005e8
 8001c44:	40026410 	.word	0x40026410

08001c48 <truncate_text_file>:
/*
@brief :
The function performs truncate operation
*/
void truncate_text_file( struct FILE_OPERATIONS *file_operations, lfs_t lfs, lfs_file_t file)
{
 8001c48:	b084      	sub	sp, #16
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	f107 001c 	add.w	r0, r7, #28
 8001c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  int fd = lfs_file_open(&lfs, &file, file_operations->filepath, LFS_O_TRUNC | LFS_O_CREAT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1d5a      	adds	r2, r3, #5
 8001c5e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001c62:	f107 001c 	add.w	r0, r7, #28
 8001c66:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001c6a:	f008 fa1d 	bl	800a0a8 <lfs_file_open>
 8001c6e:	60f8      	str	r0, [r7, #12]
  if (fd >= 0)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db06      	blt.n	8001c84 <truncate_text_file+0x3c>
  {
    myprintf( "File named %s has been truncated successfully.\n", file_operations->filepath);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <truncate_text_file+0x68>)
 8001c7e:	f7ff f8e5 	bl	8000e4c <myprintf>
 8001c82:	e005      	b.n	8001c90 <truncate_text_file+0x48>
  }
  else
  {
    myprintf("Error opening file: %s\n", file_operations->filepath);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3305      	adds	r3, #5
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <truncate_text_file+0x6c>)
 8001c8c:	f7ff f8de 	bl	8000e4c <myprintf>
  }
  lfs_file_close(&lfs, &file);
 8001c90:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f008 fa38 	bl	800a110 <lfs_file_close>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001caa:	b004      	add	sp, #16
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	0801797c 	.word	0x0801797c
 8001cb4:	08017770 	.word	0x08017770

08001cb8 <truncate_text_file1>:
void truncate_text_file1(lfs_t Lfs, lfs_file_t File)
{
 8001cb8:	b084      	sub	sp, #16
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	f107 0c10 	add.w	ip, r7, #16
 8001cc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

  int fd;
  fd = lfs_file_open(&Lfs, &File, "flags.txt", LFS_O_TRUNC );// |LFS_O_APPEND |LFS_O_APPEND
 8001cc8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd0:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <truncate_text_file1+0x40>)
 8001cd2:	f107 0010 	add.w	r0, r7, #16
 8001cd6:	f008 f9e7 	bl	800a0a8 <lfs_file_open>
 8001cda:	6078      	str	r0, [r7, #4]
  		  lfs_file_close(&Lfs, &File);
 8001cdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f107 0010 	add.w	r0, r7, #16
 8001ce6:	f008 fa13 	bl	800a110 <lfs_file_close>

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf4:	b004      	add	sp, #16
 8001cf6:	4770      	bx	lr
 8001cf8:	080179ac 	.word	0x080179ac

08001cfc <track_read_seek_pointer>:



void track_read_seek_pointer(struct FILE_OPERATIONS *file_pointer, int8_t seek_pointer[16])
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0ee      	sub	sp, #440	; 0x1b8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	6018      	str	r0, [r3, #0]
 8001d06:	463b      	mov	r3, r7
 8001d08:	6019      	str	r1, [r3, #0]
  myprintf("track read seek pointer called \n");
 8001d0a:	4867      	ldr	r0, [pc, #412]	; (8001ea8 <track_read_seek_pointer+0x1ac>)
 8001d0c:	f7ff f89e 	bl	8000e4c <myprintf>
  // SEEK_POINTER seek_pointer;
   int index = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   lfs_t lfs, lfs2;
   lfs_file_t file, file2;
   int fd;
   fd = lfs_file_open(&lfs, &file, file_pointer->filepath, LFS_O_RDONLY);
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1d5a      	adds	r2, r3, #5
 8001d1c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d20:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001d24:	2301      	movs	r3, #1
 8001d26:	f008 f9bf 	bl	800a0a8 <lfs_file_open>
 8001d2a:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
   uint32_t address = file_pointer->address[3] << 24 | file_pointer->address[2] << 16 | file_pointer->address[1] << 8 | file_pointer->address[0] & 0xff;
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001d36:	061a      	lsls	r2, r3, #24
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8001d40:	041b      	lsls	r3, r3, #16
 8001d42:	431a      	orrs	r2, r3
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	1d3a      	adds	r2, r7, #4
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

  // if (readBytes > 0)
  {
    if (file_pointer->filepath == "satHealth.txt")
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3305      	adds	r3, #5
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <track_read_seek_pointer+0x1b0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d103      	bne.n	8001d72 <track_read_seek_pointer+0x76>
      index = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d70:	e020      	b.n	8001db4 <track_read_seek_pointer+0xb8>
    else if (file_pointer->filepath == "cam.txt")
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3305      	adds	r3, #5
 8001d78:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <track_read_seek_pointer+0x1b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d103      	bne.n	8001d86 <track_read_seek_pointer+0x8a>
      index = 4;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d84:	e016      	b.n	8001db4 <track_read_seek_pointer+0xb8>

    else if (file_pointer->filepath == "epdm.txt")
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3305      	adds	r3, #5
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <track_read_seek_pointer+0x1b8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d103      	bne.n	8001d9a <track_read_seek_pointer+0x9e>
      index = 4 * 2;
 8001d92:	2308      	movs	r3, #8
 8001d94:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001d98:	e00c      	b.n	8001db4 <track_read_seek_pointer+0xb8>

    else if (file_pointer->filepath == "adcs.txt")
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3305      	adds	r3, #5
 8001da0:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <track_read_seek_pointer+0x1bc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d103      	bne.n	8001dae <track_read_seek_pointer+0xb2>
      index = 3 * 4;
 8001da6:	230c      	movs	r3, #12
 8001da8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001dac:	e002      	b.n	8001db4 <track_read_seek_pointer+0xb8>

    else
      myprintf( "Some error while updating flags data\n");
 8001dae:	4843      	ldr	r0, [pc, #268]	; (8001ebc <track_read_seek_pointer+0x1c0>)
 8001db0:	f7ff f84c 	bl	8000e4c <myprintf>
  }
  seek_pointer[index] = file_pointer->address[0];
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
 8001dbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b24a      	sxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 1] = file_pointer->address[1];
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f893 10ce 	ldrb.w	r1, [r3, #206]	; 0xce
 8001dd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	463a      	mov	r2, r7
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b24a      	sxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 2] = file_pointer->address[2];
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f893 10cf 	ldrb.w	r1, [r3, #207]	; 0xcf
 8001dea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dee:	3302      	adds	r3, #2
 8001df0:	463a      	mov	r2, r7
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b24a      	sxtb	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
  seek_pointer[index + 3] = file_pointer->address[3];
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
 8001e02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e06:	3303      	adds	r3, #3
 8001e08:	463a      	mov	r2, r7
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b24a      	sxtb	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
  ssize_t writeBytes = lfs_file_write(&lfs, &file , seek_pointer, sizeof(seek_pointer));
 8001e12:	463a      	mov	r2, r7
 8001e14:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001e18:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	f008 f9d2 	bl	800a1c8 <lfs_file_write>
 8001e24:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
  if (writeBytes > 0)
 8001e28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	dd2d      	ble.n	8001e8c <track_read_seek_pointer+0x190>
  {
    myprintf( "Updated seek pointer data saved to mfm\n");
 8001e30:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <track_read_seek_pointer+0x1c4>)
 8001e32:	f7ff f80b 	bl	8000e4c <myprintf>
    lfs_file_close(&lfs, &file);
 8001e36:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e3a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f008 f965 	bl	800a110 <lfs_file_close>
    fd = lfs_file_open(&lfs, &file, file_pointer->filepath, LFS_O_CREAT | LFS_O_WRONLY);
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1d5a      	adds	r2, r3, #5
 8001e4c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001e50:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001e54:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001e58:	f008 f926 	bl	800a0a8 <lfs_file_open>
 8001e5c:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
    if (fd > 0)
 8001e60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	dd11      	ble.n	8001e8c <track_read_seek_pointer+0x190>
    {
      writeBytes = lfs_file_write(&lfs, &file, seek_pointer, sizeof(seek_pointer));
 8001e68:	463a      	mov	r2, r7
 8001e6a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001e6e:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001e72:	2304      	movs	r3, #4
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	f008 f9a7 	bl	800a1c8 <lfs_file_write>
 8001e7a:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
      if (writeBytes > 0)
 8001e7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd02      	ble.n	8001e8c <track_read_seek_pointer+0x190>
      {
        myprintf( "updated seek pointer data to sfm\n");
 8001e86:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <track_read_seek_pointer+0x1c8>)
 8001e88:	f7fe ffe0 	bl	8000e4c <myprintf>
      }
    }
  }
  lfs_file_close(&lfs,&file);
 8001e8c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e90:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f008 f93a 	bl	800a110 <lfs_file_close>
}
 8001e9c:	bf00      	nop
 8001e9e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	080179b8 	.word	0x080179b8
 8001eac:	080179dc 	.word	0x080179dc
 8001eb0:	080179ec 	.word	0x080179ec
 8001eb4:	080179f4 	.word	0x080179f4
 8001eb8:	08017a00 	.word	0x08017a00
 8001ebc:	08017a0c 	.word	0x08017a0c
 8001ec0:	08017a34 	.word	0x08017a34
 8001ec4:	08017a5c 	.word	0x08017a5c

08001ec8 <download_file_from_flash>:

void download_file_from_flash(struct FILE_OPERATIONS *file_operations, uint8_t *data_retrieved, uint8_t size_of_buffer,  lfs_t lfs, lfs_file_t file)
{
 8001ec8:	b082      	sub	sp, #8
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b0a8      	sub	sp, #160	; 0xa0
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71fb      	strb	r3, [r7, #7]

  int fd;
  int8_t seek_pointer[16];

  uint8_t update_address = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t address = file_operations->address[3] << 24 | file_operations->address[2] << 16 | file_operations->address[1] << 8 | file_operations->address[0] & 0xff;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001ee8:	061a      	lsls	r2, r3, #24
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	4313      	orrs	r3, r2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint16_t number_of_packets = file_operations->number_of_packets[1] << 8 | file_operations->number_of_packets[0] & 0xff;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  ssize_t read_bytes;
  if (address == 0)
 8001f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d137      	bne.n	8001f9c <download_file_from_flash+0xd4>
     {
       update_address = 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
       // todo read the address from the text file
       lfs_file_t fl1;
       int fd2 =  lfs_file_open(&lfs, &file, "seek_pointer.txt", LFS_O_CREAT | LFS_O_RDONLY);
 8001f32:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001f36:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f3a:	f240 1301 	movw	r3, #257	; 0x101
 8001f3e:	4a7f      	ldr	r2, [pc, #508]	; (800213c <download_file_from_flash+0x274>)
 8001f40:	f008 f8b2 	bl	800a0a8 <lfs_file_open>
 8001f44:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
       if (fd2 >= 0)
 8001f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db1a      	blt.n	8001f86 <download_file_from_flash+0xbe>
       {
         ssize_t readBytes2 = lfs_file_read(&lfs, &file, seek_pointer, sizeof(seek_pointer));
 8001f50:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001f54:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001f58:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	f008 f903 	bl	800a168 <lfs_file_read>
 8001f62:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
         if (readBytes2 < 0)
 8001f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	da16      	bge.n	8001f9c <download_file_from_flash+0xd4>
         {
           myprintf( "Error while reading the seek_pointer.txt in mfm\n");
 8001f6e:	4874      	ldr	r0, [pc, #464]	; (8002140 <download_file_from_flash+0x278>)
 8001f70:	f7fe ff6c 	bl	8000e4c <myprintf>
          lfs_file_close(&lfs, &file);
 8001f74:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001f78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f008 f8c6 	bl	800a110 <lfs_file_close>
 8001f84:	e00a      	b.n	8001f9c <download_file_from_flash+0xd4>
         }
       }
       else{
    	   myprintf( "Error while opening the seek_pointer.txt in mfm\n");
 8001f86:	486f      	ldr	r0, [pc, #444]	; (8002144 <download_file_from_flash+0x27c>)
 8001f88:	f7fe ff60 	bl	8000e4c <myprintf>
		   lfs_file_close(&lfs, &file);
 8001f8c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001f90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 f8ba 	bl	800a110 <lfs_file_close>
       }
     }
  fd = lfs_file_open(&lfs, &file, file_operations->filepath, LFS_O_RDONLY);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1d5a      	adds	r2, r3, #5
 8001fa0:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001fa4:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f008 f87d 	bl	800a0a8 <lfs_file_open>
 8001fae:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if (fd < 0)
 8001fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da08      	bge.n	8001fcc <download_file_from_flash+0x104>
  {
    myprintf( "File named %s reading mode failed fd:%d\n", file_operations->filepath, fd);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3305      	adds	r3, #5
 8001fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4860      	ldr	r0, [pc, #384]	; (8002148 <download_file_from_flash+0x280>)
 8001fc6:	f7fe ff41 	bl	8000e4c <myprintf>
 8001fca:	e0b1      	b.n	8002130 <download_file_from_flash+0x268>
    return;
  }
  else
  {

    int size_of_file = lfs_file_seek(&lfs, &file, 0, LFS_SEEK_END);
 8001fcc:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001fd0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f008 f926 	bl	800a228 <lfs_file_seek>
 8001fdc:	67f8      	str	r0, [r7, #124]	; 0x7c
    int off; //= lfs_file_seek(&lfs, &file, address, SEEK_SET);
    myprintf("\nSize of file is %d %d\n", size_of_file, address);
 8001fde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fe2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fe4:	4859      	ldr	r0, [pc, #356]	; (800214c <download_file_from_flash+0x284>)
 8001fe6:	f7fe ff31 	bl	8000e4c <myprintf>
    int loop1 = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    do
    {
      if (size_of_file > 0 & size_of_file > address)
 8001ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bfcc      	ite	gt
 8001ff6:	2301      	movgt	r3, #1
 8001ff8:	2300      	movle	r3, #0
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ffe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002002:	4299      	cmp	r1, r3
 8002004:	bf34      	ite	cc
 8002006:	2301      	movcc	r3, #1
 8002008:	2300      	movcs	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4013      	ands	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d061      	beq.n	80020d8 <download_file_from_flash+0x210>
      {
        off = lfs_file_seek(&lfs, &file, address, LFS_SEEK_SET); // Set file pointer to the calculated address
 8002014:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002018:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800201c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002020:	2300      	movs	r3, #0
 8002022:	f008 f901 	bl	800a228 <lfs_file_seek>
 8002026:	67b8      	str	r0, [r7, #120]	; 0x78
        read_bytes = lfs_file_read(&lfs, &file, data_retrieved, size_of_buffer);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800202e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f008 f898 	bl	800a168 <lfs_file_read>
 8002038:	6778      	str	r0, [r7, #116]	; 0x74
        if (read_bytes >= 0)
 800203a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203c:	2b00      	cmp	r3, #0
 800203e:	db3d      	blt.n	80020bc <download_file_from_flash+0x1f4>
        {
          myprintf( "Data retrieved from the flash address %d\n", address);
 8002040:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002044:	4842      	ldr	r0, [pc, #264]	; (8002150 <download_file_from_flash+0x288>)
 8002046:	f7fe ff01 	bl	8000e4c <myprintf>

          myprintf("\n--------------------**************Read size = %zd\n", read_bytes);
 800204a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800204c:	4841      	ldr	r0, [pc, #260]	; (8002154 <download_file_from_flash+0x28c>)
 800204e:	f7fe fefd 	bl	8000e4c <myprintf>
          myprintf("\n\n--------------------------Data received----\n");
 8002052:	4841      	ldr	r0, [pc, #260]	; (8002158 <download_file_from_flash+0x290>)
 8002054:	f7fe fefa 	bl	8000e4c <myprintf>
          for (int j = 0; j < size_of_buffer; j++)
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800205e:	e013      	b.n	8002088 <download_file_from_flash+0x1c0>
          {
            myprintf("%02x|%c ", data_retrieved[j], data_retrieved[j]); // Print in hexadecimal format
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4838      	ldr	r0, [pc, #224]	; (800215c <download_file_from_flash+0x294>)
 800207a:	f7fe fee7 	bl	8000e4c <myprintf>
          for (int j = 0; j < size_of_buffer; j++)
 800207e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002082:	3301      	adds	r3, #1
 8002084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800208e:	429a      	cmp	r2, r3
 8002090:	dbe6      	blt.n	8002060 <download_file_from_flash+0x198>
          }
          if (number_of_packets > 0)
 8002092:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <download_file_from_flash+0x1dc>
            number_of_packets -= 1;
 800209a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800209e:	3b01      	subs	r3, #1
 80020a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
          loop1 += 1;
 80020a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020a8:	3301      	adds	r3, #1
 80020aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          address += size_of_buffer;
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020b4:	4413      	add	r3, r2
 80020b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020ba:	e00d      	b.n	80020d8 <download_file_from_flash+0x210>
//          lfs_file_close(&lfs,&file);
        }
        else
        {
          myprintf( "Failed to read data from the flash address %d\n", address);
 80020bc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80020c0:	4827      	ldr	r0, [pc, #156]	; (8002160 <download_file_from_flash+0x298>)
 80020c2:	f7fe fec3 	bl	8000e4c <myprintf>
          lfs_file_close(&lfs,&file);
 80020c6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80020ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 f81d 	bl	800a110 <lfs_file_close>
          break;
 80020d6:	e003      	b.n	80020e0 <download_file_from_flash+0x218>
        }
      }
    } while (number_of_packets > 1); // loop1 < number_of_packets |
 80020d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d887      	bhi.n	8001ff0 <download_file_from_flash+0x128>
    // todo : add seekpointer read index in internal and external flash memories
    if (update_address == 1)
 80020e0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d117      	bne.n	8002118 <download_file_from_flash+0x250>
    {
      file_operations->address[3] = (uint8_t)address >> 24 & 0xff;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      file_operations->address[2] = (uint8_t)address >> 16 & 0xff;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
      file_operations->address[1] = (uint8_t)address >> 8 & 0xff;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      file_operations->address[0] = (uint8_t)address & 0xff;
 8002100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
      track_read_seek_pointer(file_operations, seek_pointer);
 800210c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002110:	4619      	mov	r1, r3
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff fdf2 	bl	8001cfc <track_read_seek_pointer>
    }
  }
  lfs_file_close(&lfs, &file);
 8002118:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800211c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f007 fff4 	bl	800a110 <lfs_file_close>
  // myprintf("\n\n--------------------------Data received----\n");
  // for (int j = 0; j < sizeof(data_retrieved); j++)
  // {
  //   myprintf("%02x|%c ", data_retrieved[j],data_retrieved1[j]); // Print in hexadecimal format
  // }
  myprintf("\n--------------------**************Size = %zu\n", sizeof(data_retrieved));
 8002128:	2104      	movs	r1, #4
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <download_file_from_flash+0x29c>)
 800212c:	f7fe fe8e 	bl	8000e4c <myprintf>
}
 8002130:	37a0      	adds	r7, #160	; 0xa0
 8002132:	46bd      	mov	sp, r7
 8002134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002138:	b002      	add	sp, #8
 800213a:	4770      	bx	lr
 800213c:	08017a80 	.word	0x08017a80
 8002140:	08017a94 	.word	0x08017a94
 8002144:	08017ac8 	.word	0x08017ac8
 8002148:	08017afc 	.word	0x08017afc
 800214c:	08017b28 	.word	0x08017b28
 8002150:	08017b40 	.word	0x08017b40
 8002154:	08017b6c 	.word	0x08017b6c
 8002158:	08017ba0 	.word	0x08017ba0
 800215c:	08017bd0 	.word	0x08017bd0
 8002160:	08017bdc 	.word	0x08017bdc
 8002164:	08017c0c 	.word	0x08017c0c

08002168 <perform_file_operations>:
filepath: the full path to the textfile: MOUNT_POINT/TEXT_FILENAME
address: 4 byte of adress data here it might be the data download counter
number of packets: may be DNC(0x00,0x00) or number of packets in 2 bytes.
*/
void perform_file_operations(struct FILE_OPERATIONS *file_operations, lfs_t Lfs, lfs_file_t File)
{
 8002168:	b084      	sub	sp, #16
 800216a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216c:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8002170:	af34      	add	r7, sp, #208	; 0xd0
 8002172:	f107 040c 	add.w	r4, r7, #12
 8002176:	6020      	str	r0, [r4, #0]
 8002178:	f507 7005 	add.w	r0, r7, #532	; 0x214
 800217c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int data_retrieved[122] = {'\0'};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 800218a:	461a      	mov	r2, r3
 800218c:	2100      	movs	r1, #0
 800218e:	f014 f803 	bl	8016198 <memset>
  myprintf("*********************perform file operations has been called******\n");
 8002192:	4854      	ldr	r0, [pc, #336]	; (80022e4 <perform_file_operations+0x17c>)
 8002194:	f7fe fe5a 	bl	8000e4c <myprintf>

  switch (file_operations->cmd)
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b1d      	cmp	r3, #29
 80021a2:	d01c      	beq.n	80021de <perform_file_operations+0x76>
 80021a4:	2bca      	cmp	r3, #202	; 0xca
 80021a6:	f040 808b 	bne.w	80022c0 <perform_file_operations+0x158>
  {
  case 0xca:
    truncate_text_file(file_operations, Lfs, File);
 80021aa:	f107 040c 	add.w	r4, r7, #12
 80021ae:	a81c      	add	r0, sp, #112	; 0x70
 80021b0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021b4:	2254      	movs	r2, #84	; 0x54
 80021b6:	4619      	mov	r1, r3
 80021b8:	f013 ffe0 	bl	801617c <memcpy>
 80021bc:	4668      	mov	r0, sp
 80021be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021c2:	2270      	movs	r2, #112	; 0x70
 80021c4:	4619      	mov	r1, r3
 80021c6:	f013 ffd9 	bl	801617c <memcpy>
 80021ca:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80021ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d0:	6820      	ldr	r0, [r4, #0]
 80021d2:	f7ff fd39 	bl	8001c48 <truncate_text_file>
    myprintf("-----Trucate text file called \n");
 80021d6:	4844      	ldr	r0, [pc, #272]	; (80022e8 <perform_file_operations+0x180>)
 80021d8:	f7fe fe38 	bl	8000e4c <myprintf>
    break;
 80021dc:	e071      	b.n	80022c2 <perform_file_operations+0x15a>
  case 0x1d:
    download_file_from_flash(file_operations, data_retrieved, 112, Lfs, File);
 80021de:	f107 0510 	add.w	r5, r7, #16
 80021e2:	f107 040c 	add.w	r4, r7, #12
 80021e6:	a81e      	add	r0, sp, #120	; 0x78
 80021e8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021ec:	2254      	movs	r2, #84	; 0x54
 80021ee:	4619      	mov	r1, r3
 80021f0:	f013 ffc4 	bl	801617c <memcpy>
 80021f4:	4668      	mov	r0, sp
 80021f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80021fa:	2278      	movs	r2, #120	; 0x78
 80021fc:	4619      	mov	r1, r3
 80021fe:	f013 ffbd 	bl	801617c <memcpy>
 8002202:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002206:	2270      	movs	r2, #112	; 0x70
 8002208:	4629      	mov	r1, r5
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	f7ff fe5c 	bl	8001ec8 <download_file_from_flash>
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	781b      	ldrb	r3, [r3, #0]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002218:	469c      	mov	ip, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	789b      	ldrb	r3, [r3, #2]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002222:	469e      	mov	lr, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	785b      	ldrb	r3, [r3, #1]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 800222c:	4619      	mov	r1, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	791b      	ldrb	r3, [r3, #4]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002236:	4618      	mov	r0, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	78db      	ldrb	r3, [r3, #3]
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002240:	461c      	mov	r4, r3
           sizeof(data_retrieved), file_operations->cmd, file_operations->select_flash, file_operations->select_file, file_operations->rsv_table[1], file_operations->rsv_table[0], file_operations->filepath,
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3305      	adds	r3, #5
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 800224a:	f107 020c 	add.w	r2, r7, #12
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002254:	4615      	mov	r5, r2
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 8002256:	f107 020c 	add.w	r2, r7, #12
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	f892 20cf 	ldrb.w	r2, [r2, #207]	; 0xcf
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002260:	4616      	mov	r6, r2
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	f892 20ce 	ldrb.w	r2, [r2, #206]	; 0xce
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 800226c:	60ba      	str	r2, [r7, #8]
           file_operations->address[3], file_operations->address[2], file_operations->address[1], file_operations->address[0],
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	f892 20cd 	ldrb.w	r2, [r2, #205]	; 0xcd
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002278:	607a      	str	r2, [r7, #4]
           file_operations->number_of_packets[0], file_operations->number_of_packets[1]);
 800227a:	f107 020c 	add.w	r2, r7, #12
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f892 20d1 	ldrb.w	r2, [r2, #209]	; 0xd1
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002284:	603a      	str	r2, [r7, #0]
           file_operations->number_of_packets[0], file_operations->number_of_packets[1]);
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f892 20d2 	ldrb.w	r2, [r2, #210]	; 0xd2
    myprintf("*******************\nsize:%d\n***********************\ncmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
 8002290:	9209      	str	r2, [sp, #36]	; 0x24
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	9208      	str	r2, [sp, #32]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	9207      	str	r2, [sp, #28]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	9206      	str	r2, [sp, #24]
 800229e:	9605      	str	r6, [sp, #20]
 80022a0:	9504      	str	r5, [sp, #16]
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	9402      	str	r4, [sp, #8]
 80022a6:	9001      	str	r0, [sp, #4]
 80022a8:	9100      	str	r1, [sp, #0]
 80022aa:	4673      	mov	r3, lr
 80022ac:	4662      	mov	r2, ip
 80022ae:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80022b2:	480e      	ldr	r0, [pc, #56]	; (80022ec <perform_file_operations+0x184>)
 80022b4:	f7fe fdca 	bl	8000e4c <myprintf>

    myprintf("-------Data download function has been called\n");
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <perform_file_operations+0x188>)
 80022ba:	f7fe fdc7 	bl	8000e4c <myprintf>

    break;
 80022be:	e000      	b.n	80022c2 <perform_file_operations+0x15a>
  default:
    break;
 80022c0:	bf00      	nop
  }
  myprintf("\n**************----\nhey filepath is %s\n***********\n", file_operations->filepath);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3305      	adds	r3, #5
 80022ca:	4619      	mov	r1, r3
 80022cc:	4809      	ldr	r0, [pc, #36]	; (80022f4 <perform_file_operations+0x18c>)
 80022ce:	f7fe fdbd 	bl	8000e4c <myprintf>
}
 80022d2:	bf00      	nop
 80022d4:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 80022d8:	46bd      	mov	sp, r7
 80022da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80022de:	b004      	add	sp, #16
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	08017c3c 	.word	0x08017c3c
 80022e8:	08017c80 	.word	0x08017c80
 80022ec:	08017ca0 	.word	0x08017ca0
 80022f0:	08017d4c 	.word	0x08017d4c
 80022f4:	08017d7c 	.word	0x08017d7c

080022f8 <parse_command>:


void parse_command(uint8_t COM_RX_DATA[30], lfs_t Lfs1, lfs_file_t File1)
{
 80022f8:	b084      	sub	sp, #16
 80022fa:	b5b0      	push	{r4, r5, r7, lr}
 80022fc:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8002300:	af32      	add	r7, sp, #200	; 0xc8
 8002302:	1d3c      	adds	r4, r7, #4
 8002304:	6020      	str	r0, [r4, #0]
 8002306:	f507 7065 	add.w	r0, r7, #916	; 0x394
 800230a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  myprintf("parse command starting\n");
 800230e:	4887      	ldr	r0, [pc, #540]	; (800252c <parse_command+0x234>)
 8002310:	f7fe fd9c 	bl	8000e4c <myprintf>
  for (int j = 0; j < 25; j++)
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800231a:	e015      	b.n	8002348 <parse_command+0x50>
  {
    myprintf("%02x|%c ,", COM_RX_DATA[j], COM_RX_DATA[j]);
 800231c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002320:	1d3a      	adds	r2, r7, #4
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800232e:	1d3a      	adds	r2, r7, #4
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	487d      	ldr	r0, [pc, #500]	; (8002530 <parse_command+0x238>)
 800233a:	f7fe fd87 	bl	8000e4c <myprintf>
  for (int j = 0; j < 25; j++)
 800233e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002342:	3301      	adds	r3, #1
 8002344:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8002348:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 800234c:	2b18      	cmp	r3, #24
 800234e:	dde5      	ble.n	800231c <parse_command+0x24>
  }

  uint8_t HEADER = 0, MCU_ID = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
 8002356:	2300      	movs	r3, #0
 8002358:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
  if (COM_RX_DATA[16] >= 0x01 && COM_RX_DATA[16] <= 0x05)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3310      	adds	r3, #16
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d011      	beq.n	800238c <parse_command+0x94>
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3310      	adds	r3, #16
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d80b      	bhi.n	800238c <parse_command+0x94>
  {
    HEADER = 16;
 8002374:	2310      	movs	r3, #16
 8002376:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
    MCU_ID = COM_RX_DATA[HEADER];
 800237a:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800237e:	1d3a      	adds	r2, r7, #4
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
 800238a:	e016      	b.n	80023ba <parse_command+0xc2>
  }
  else if (COM_RX_DATA[17] >= 0x01 && COM_RX_DATA[17] <= 0x05)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3311      	adds	r3, #17
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <parse_command+0xc2>
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3311      	adds	r3, #17
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b05      	cmp	r3, #5
 80023a2:	d80a      	bhi.n	80023ba <parse_command+0xc2>
  {
    HEADER = 17;
 80023a4:	2311      	movs	r3, #17
 80023a6:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
    MCU_ID = COM_RX_DATA[HEADER];
 80023aa:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023ae:	1d3a      	adds	r2, r7, #4
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
  }

  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023ba:	f897 137b 	ldrb.w	r1, [r7, #891]	; 0x37b
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 80023be:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023c2:	1d3a      	adds	r2, r7, #4
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023ca:	4618      	mov	r0, r3
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 80023cc:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023d0:	3301      	adds	r3, #1
 80023d2:	1d3a      	adds	r2, r7, #4
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023da:	461c      	mov	r4, r3
         HEADER, COM_RX_DATA[HEADER], COM_RX_DATA[HEADER + 1], COM_RX_DATA[HEADER + 2]);
 80023dc:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80023e0:	3302      	adds	r3, #2
 80023e2:	1d3a      	adds	r2, r7, #4
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4623      	mov	r3, r4
 80023ee:	4602      	mov	r2, r0
 80023f0:	4850      	ldr	r0, [pc, #320]	; (8002534 <parse_command+0x23c>)
 80023f2:	f7fe fd2b 	bl	8000e4c <myprintf>
  uint8_t ack[85] = {0x53, 0xac, 0x04, 0x01, 0x62, 0x63, 0x7e};
 80023f6:	4a50      	ldr	r2, [pc, #320]	; (8002538 <parse_command+0x240>)
 80023f8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80023fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002400:	e883 0003 	stmia.w	r3, {r0, r1}
 8002404:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8002408:	224d      	movs	r2, #77	; 0x4d
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f013 fec3 	bl	8016198 <memset>
  ack[83] = 0x7e;
 8002412:	237e      	movs	r3, #126	; 0x7e
 8002414:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
  ack[82] = 0x7e;
 8002418:	237e      	movs	r3, #126	; 0x7e
 800241a:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e

  uint8_t cmds[3];

  cmds[0] = (uint8_t)COM_RX_DATA[HEADER + 1];
 800241e:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002422:	3301      	adds	r3, #1
 8002424:	1d3a      	adds	r2, r7, #4
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f887 3308 	strb.w	r3, [r7, #776]	; 0x308
  cmds[1] = (uint8_t)COM_RX_DATA[HEADER + 2];
 8002430:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002434:	3302      	adds	r3, #2
 8002436:	1d3a      	adds	r2, r7, #4
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f887 3309 	strb.w	r3, [r7, #777]	; 0x309
  cmds[2] = (uint8_t)COM_RX_DATA[HEADER + 3];
 8002442:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002446:	3303      	adds	r3, #3
 8002448:	1d3a      	adds	r2, r7, #4
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f887 330a 	strb.w	r3, [r7, #778]	; 0x30a
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002454:	f897 137b 	ldrb.w	r1, [r7, #891]	; 0x37b
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 8002458:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 800245c:	461a      	mov	r2, r3
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 800245e:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002462:	4618      	mov	r0, r3
         HEADER, cmds[0], cmds[0 + 1], cmds[0 + 2]);
 8002464:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
  myprintf("**********\n*************\nHere the com rx data is %02x,%02x,%02x,%02x\n********************\n********************\n",
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4603      	mov	r3, r0
 800246c:	4831      	ldr	r0, [pc, #196]	; (8002534 <parse_command+0x23c>)
 800246e:	f7fe fced 	bl	8000e4c <myprintf>

  if (cmds[0] == 0xfd & cmds[1] == 0xba & cmds[2] == 0xd0)
 8002472:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002476:	2bfd      	cmp	r3, #253	; 0xfd
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2da      	uxtb	r2, r3
 8002480:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002484:	2bba      	cmp	r3, #186	; 0xba
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4013      	ands	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002498:	2bd0      	cmp	r3, #208	; 0xd0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <parse_command+0x1be>
  {
    // HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_SET);
    myprintf("\n ********************Digipeater mode turned on********************\n");
 80024a8:	4824      	ldr	r0, [pc, #144]	; (800253c <parse_command+0x244>)
 80024aa:	f7fe fccf 	bl	8000e4c <myprintf>
    digipeating = 1;
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <parse_command+0x248>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
    // //sleep(3);
    // HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_RESET);

    return 33;
 80024b4:	e3aa      	b.n	8002c0c <parse_command+0x914>
  }
  else if (cmds[0] == 0xdf & cmds[1] == 0xab & cmds[2] == 0xd1)
 80024b6:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80024ba:	2bdf      	cmp	r3, #223	; 0xdf
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 80024c8:	2bab      	cmp	r3, #171	; 0xab
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4013      	ands	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80024dc:	2bd1      	cmp	r3, #209	; 0xd1
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <parse_command+0x202>
  {
    myprintf("\n ********************Digipeater mode turned off********************\n");
 80024ec:	4815      	ldr	r0, [pc, #84]	; (8002544 <parse_command+0x24c>)
 80024ee:	f7fe fcad 	bl	8000e4c <myprintf>
    digipeating = 0;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <parse_command+0x248>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
    return 33;
 80024f8:	e388      	b.n	8002c0c <parse_command+0x914>
  }
  myprintf("MCU ID %d |%02x\n", cmds[0]);
 80024fa:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80024fe:	4619      	mov	r1, r3
 8002500:	4811      	ldr	r0, [pc, #68]	; (8002548 <parse_command+0x250>)
 8002502:	f7fe fca3 	bl	8000e4c <myprintf>
  switch (MCU_ID)
 8002506:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 800250a:	3b01      	subs	r3, #1
 800250c:	2b04      	cmp	r3, #4
 800250e:	f200 8356 	bhi.w	8002bbe <parse_command+0x8c6>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <parse_command+0x220>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	0800254d 	.word	0x0800254d
 800251c:	08002a71 	.word	0x08002a71
 8002520:	08002abb 	.word	0x08002abb
 8002524:	08002b03 	.word	0x08002b03
 8002528:	08002b7d 	.word	0x08002b7d
 800252c:	08017db0 	.word	0x08017db0
 8002530:	08017dc8 	.word	0x08017dc8
 8002534:	08017dd4 	.word	0x08017dd4
 8002538:	08018234 	.word	0x08018234
 800253c:	08017e44 	.word	0x08017e44
 8002540:	20000868 	.word	0x20000868
 8002544:	08017e8c 	.word	0x08017e8c
 8002548:	08017ed4 	.word	0x08017ed4
  case OBC_MCU: /*
                Command to perform flash operations by the OBC
                */

  { // __file_operations.cmd = COM_RX_DATA[HEADER + 1];
    myprintf("OBC MCU ID has been received\n");
 800254c:	4891      	ldr	r0, [pc, #580]	; (8002794 <parse_command+0x49c>)
 800254e:	f7fe fc7d 	bl	8000e4c <myprintf>
    // break; // TO remove this later
    if (cmds[0] == 0xCA | cmds[0] == 0x1D)
 8002552:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002556:	2bca      	cmp	r3, #202	; 0xca
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2da      	uxtb	r2, r3
 8002560:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002564:	2b1d      	cmp	r3, #29
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 823d 	beq.w	80029f2 <parse_command+0x6fa>
    {
      struct FILE_OPERATIONS __file_operations = {
 8002578:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800257c:	4618      	mov	r0, r3
 800257e:	23d3      	movs	r3, #211	; 0xd3
 8002580:	461a      	mov	r2, r3
 8002582:	2100      	movs	r1, #0
 8002584:	f013 fe08 	bl	8016198 <memset>
          .filepath = {'\0'},       // Initialize as an empty string
          .address = {0},           // Initialize all elements to 0
          .rsv_table = {0}          // Initialize all elements to 0
      };

      __file_operations.cmd = cmds[0];
 8002588:	f897 2308 	ldrb.w	r2, [r7, #776]	; 0x308
 800258c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002590:	701a      	strb	r2, [r3, #0]
      // __file_operations.select_file = ;
      if ((COM_RX_DATA[HEADER + 2] == 0xD1) || (COM_RX_DATA[HEADER + 2] == 0xD2))
 8002592:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002596:	3302      	adds	r3, #2
 8002598:	1d3a      	adds	r2, r7, #4
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2bd1      	cmp	r3, #209	; 0xd1
 80025a2:	d008      	beq.n	80025b6 <parse_command+0x2be>
 80025a4:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80025a8:	3302      	adds	r3, #2
 80025aa:	1d3a      	adds	r2, r7, #4
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2bd2      	cmp	r3, #210	; 0xd2
 80025b4:	d103      	bne.n	80025be <parse_command+0x2c6>
      {
        __file_operations.select_flash = MAIN_FLASH_MEMORY;
 80025b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025ba:	2200      	movs	r2, #0
 80025bc:	709a      	strb	r2, [r3, #2]
//        if ((COM_RX_DATA[HEADER + 2] == 0xD2))
//          strcpy(__file_operations.filepath, MFM_MSN_STRPATH);
//        else
//          strcpy(__file_operations.filepath, MFM_MAIN_STRPATH);
      }
      if ((COM_RX_DATA[HEADER + 2] == 0xD3) || (COM_RX_DATA[HEADER + 2] == 0xD4))
 80025be:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80025c2:	3302      	adds	r3, #2
 80025c4:	1d3a      	adds	r2, r7, #4
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2bd3      	cmp	r3, #211	; 0xd3
 80025ce:	d008      	beq.n	80025e2 <parse_command+0x2ea>
 80025d0:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80025d4:	3302      	adds	r3, #2
 80025d6:	1d3a      	adds	r2, r7, #4
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2bd4      	cmp	r3, #212	; 0xd4
 80025e0:	d103      	bne.n	80025ea <parse_command+0x2f2>
      {
        __file_operations.select_flash = SHARED_FLASH_MEMORY;
 80025e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025e6:	2201      	movs	r2, #1
 80025e8:	709a      	strb	r2, [r3, #2]
//        if ((COM_RX_DATA[HEADER + 2] == 0xD3))
//          strcpy(__file_operations.filepath, SFM_MAIN_STRPATH);
//        else
//          strcpy(__file_operations.filepath, SFM_MSN_STRPATH);
      }
      char filename[7][30] = {"flags.txt", "satHealth.txt", "satellite_Logs.txt", "reservation_table.txt", "cam.txt", "epdm.txt", "adcs.txt"};
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4a6a      	ldr	r2, [pc, #424]	; (8002798 <parse_command+0x4a0>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	4611      	mov	r1, r2
 80025f4:	23d2      	movs	r3, #210	; 0xd2
 80025f6:	461a      	mov	r2, r3
 80025f8:	f013 fdc0 	bl	801617c <memcpy>
      myprintf("Cmd[0]: %02x Cmd[1]: %02x Cmd[2]: %02x\n",cmds[0],cmds[1],cmds[2]);
 80025fc:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002600:	4619      	mov	r1, r3
 8002602:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002606:	461a      	mov	r2, r3
 8002608:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 800260c:	4863      	ldr	r0, [pc, #396]	; (800279c <parse_command+0x4a4>)
 800260e:	f7fe fc1d 	bl	8000e4c <myprintf>
      if ((cmds[2] == 0xF1))
 8002612:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002616:	2bf1      	cmp	r3, #241	; 0xf1
 8002618:	d11f      	bne.n	800265a <parse_command+0x362>
      {
        __file_operations.select_file = FLAGS;
 800261a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800261e:	2200      	movs	r2, #0
 8002620:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "flags.txt");
 8002622:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002626:	3305      	adds	r3, #5
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd fdeb 	bl	8000204 <strlen>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002636:	3305      	adds	r3, #5
 8002638:	4413      	add	r3, r2
 800263a:	4959      	ldr	r1, [pc, #356]	; (80027a0 <parse_command+0x4a8>)
 800263c:	461a      	mov	r2, r3
 800263e:	460b      	mov	r3, r1
 8002640:	cb03      	ldmia	r3!, {r0, r1}
 8002642:	6010      	str	r0, [r2, #0]
 8002644:	6051      	str	r1, [r2, #4]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	8113      	strh	r3, [r2, #8]
        myprintf("Selected file is %s\n", __file_operations.select_file);
 800264a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	4619      	mov	r1, r3
 8002652:	4854      	ldr	r0, [pc, #336]	; (80027a4 <parse_command+0x4ac>)
 8002654:	f7fe fbfa 	bl	8000e4c <myprintf>
 8002658:	e0ca      	b.n	80027f0 <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF2))
 800265a:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 800265e:	2bf2      	cmp	r3, #242	; 0xf2
 8002660:	d120      	bne.n	80026a4 <parse_command+0x3ac>
      {
        __file_operations.select_file = SATELLITE_HEALTH;
 8002662:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002666:	2201      	movs	r2, #1
 8002668:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "satHealth.txt");
 800266a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800266e:	3305      	adds	r3, #5
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fdc7 	bl	8000204 <strlen>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800267e:	3305      	adds	r3, #5
 8002680:	4413      	add	r3, r2
 8002682:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <parse_command+0x4b0>)
 8002684:	461c      	mov	r4, r3
 8002686:	4613      	mov	r3, r2
 8002688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800268a:	6020      	str	r0, [r4, #0]
 800268c:	6061      	str	r1, [r4, #4]
 800268e:	60a2      	str	r2, [r4, #8]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	81a3      	strh	r3, [r4, #12]
        myprintf("Selected file is %s\n", __file_operations.select_file);
 8002694:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	4619      	mov	r1, r3
 800269c:	4841      	ldr	r0, [pc, #260]	; (80027a4 <parse_command+0x4ac>)
 800269e:	f7fe fbd5 	bl	8000e4c <myprintf>
 80026a2:	e0a5      	b.n	80027f0 <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF3))
 80026a4:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80026a8:	2bf3      	cmp	r3, #243	; 0xf3
 80026aa:	d119      	bne.n	80026e0 <parse_command+0x3e8>
      {
        __file_operations.select_file = SATELLITE_LOG;
 80026ac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026b0:	2202      	movs	r2, #2
 80026b2:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "satHealth.txt");
 80026b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026b8:	3305      	adds	r3, #5
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd fda2 	bl	8000204 <strlen>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026c8:	3305      	adds	r3, #5
 80026ca:	4413      	add	r3, r2
 80026cc:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <parse_command+0x4b0>)
 80026ce:	461c      	mov	r4, r3
 80026d0:	4613      	mov	r3, r2
 80026d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026d4:	6020      	str	r0, [r4, #0]
 80026d6:	6061      	str	r1, [r4, #4]
 80026d8:	60a2      	str	r2, [r4, #8]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	81a3      	strh	r3, [r4, #12]
 80026de:	e087      	b.n	80027f0 <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF4))
 80026e0:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80026e4:	2bf4      	cmp	r3, #244	; 0xf4
 80026e6:	d11c      	bne.n	8002722 <parse_command+0x42a>
      {
        __file_operations.select_file = RESERVATION_TABLE;
 80026e8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026ec:	2203      	movs	r2, #3
 80026ee:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "reservation_table.txt");
 80026f0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026f4:	3305      	adds	r3, #5
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd84 	bl	8000204 <strlen>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002704:	3305      	adds	r3, #5
 8002706:	4413      	add	r3, r2
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <parse_command+0x4b4>)
 800270a:	461d      	mov	r5, r3
 800270c:	4614      	mov	r4, r2
 800270e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002710:	6028      	str	r0, [r5, #0]
 8002712:	6069      	str	r1, [r5, #4]
 8002714:	60aa      	str	r2, [r5, #8]
 8002716:	60eb      	str	r3, [r5, #12]
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	6128      	str	r0, [r5, #16]
 800271c:	88a3      	ldrh	r3, [r4, #4]
 800271e:	82ab      	strh	r3, [r5, #20]
 8002720:	e066      	b.n	80027f0 <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF5))
 8002722:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002726:	2bf5      	cmp	r3, #245	; 0xf5
 8002728:	d116      	bne.n	8002758 <parse_command+0x460>
      {
        strcat(__file_operations.filepath, "cam.txt");
 800272a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800272e:	3305      	adds	r3, #5
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fd67 	bl	8000204 <strlen>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800273e:	3305      	adds	r3, #5
 8002740:	4413      	add	r3, r2
 8002742:	491b      	ldr	r1, [pc, #108]	; (80027b0 <parse_command+0x4b8>)
 8002744:	461a      	mov	r2, r3
 8002746:	460b      	mov	r3, r1
 8002748:	cb03      	ldmia	r3!, {r0, r1}
 800274a:	6010      	str	r0, [r2, #0]
 800274c:	6051      	str	r1, [r2, #4]

        __file_operations.select_file = CAMERA_TXT;
 800274e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002752:	2204      	movs	r2, #4
 8002754:	705a      	strb	r2, [r3, #1]
 8002756:	e04b      	b.n	80027f0 <parse_command+0x4f8>
      }
      else if ((cmds[2] == 0xF6))
 8002758:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 800275c:	2bf6      	cmp	r3, #246	; 0xf6
 800275e:	d12b      	bne.n	80027b8 <parse_command+0x4c0>
      {
        __file_operations.select_file = EPDM_TXT;
 8002760:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002764:	2205      	movs	r2, #5
 8002766:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "epdm.txt");
 8002768:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800276c:	3305      	adds	r3, #5
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd48 	bl	8000204 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800277c:	3305      	adds	r3, #5
 800277e:	4413      	add	r3, r2
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <parse_command+0x4bc>)
 8002782:	461a      	mov	r2, r3
 8002784:	460b      	mov	r3, r1
 8002786:	cb03      	ldmia	r3!, {r0, r1}
 8002788:	6010      	str	r0, [r2, #0]
 800278a:	6051      	str	r1, [r2, #4]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	7213      	strb	r3, [r2, #8]
 8002790:	e02e      	b.n	80027f0 <parse_command+0x4f8>
 8002792:	bf00      	nop
 8002794:	08017ee8 	.word	0x08017ee8
 8002798:	0801828c 	.word	0x0801828c
 800279c:	08017f08 	.word	0x08017f08
 80027a0:	080179ac 	.word	0x080179ac
 80027a4:	08017f30 	.word	0x08017f30
 80027a8:	080179dc 	.word	0x080179dc
 80027ac:	08017f48 	.word	0x08017f48
 80027b0:	080179ec 	.word	0x080179ec
 80027b4:	080179f4 	.word	0x080179f4
      }
      else if ((cmds[2] == 0xF7))
 80027b8:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80027bc:	2bf7      	cmp	r3, #247	; 0xf7
 80027be:	d117      	bne.n	80027f0 <parse_command+0x4f8>
      {
        __file_operations.select_file = ADCS_TXT;
 80027c0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027c4:	2206      	movs	r2, #6
 80027c6:	705a      	strb	r2, [r3, #1]
        strcat(__file_operations.filepath, "adcs.txt");
 80027c8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027cc:	3305      	adds	r3, #5
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd fd18 	bl	8000204 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027dc:	3305      	adds	r3, #5
 80027de:	4413      	add	r3, r2
 80027e0:	49d1      	ldr	r1, [pc, #836]	; (8002b28 <parse_command+0x830>)
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	cb03      	ldmia	r3!, {r0, r1}
 80027e8:	6010      	str	r0, [r2, #0]
 80027ea:	6051      	str	r1, [r2, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	7213      	strb	r3, [r2, #8]
      }

      __file_operations.rsv_table[0] = COM_RX_DATA[HEADER + 4];
 80027f0:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 80027f4:	3304      	adds	r3, #4
 80027f6:	1d3a      	adds	r2, r7, #4
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002802:	70da      	strb	r2, [r3, #3]
      __file_operations.rsv_table[1] = COM_RX_DATA[HEADER + 5];
 8002804:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002808:	3305      	adds	r3, #5
 800280a:	1d3a      	adds	r2, r7, #4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4413      	add	r3, r2
 8002810:	781a      	ldrb	r2, [r3, #0]
 8002812:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002816:	711a      	strb	r2, [r3, #4]

      __file_operations.address[0] = COM_RX_DATA[HEADER + 6];
 8002818:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800281c:	3306      	adds	r3, #6
 800281e:	1d3a      	adds	r2, r7, #4
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4413      	add	r3, r2
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800282a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
      __file_operations.address[1] = COM_RX_DATA[HEADER + 7];
 800282e:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002832:	3307      	adds	r3, #7
 8002834:	1d3a      	adds	r2, r7, #4
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002840:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
      __file_operations.address[2] = COM_RX_DATA[HEADER + 8];
 8002844:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 8002848:	3308      	adds	r3, #8
 800284a:	1d3a      	adds	r2, r7, #4
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	4413      	add	r3, r2
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002856:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
      __file_operations.address[3] = COM_RX_DATA[HEADER + 9];
 800285a:	f897 337b 	ldrb.w	r3, [r7, #891]	; 0x37b
 800285e:	3309      	adds	r3, #9
 8002860:	1d3a      	adds	r2, r7, #4
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800286c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      // myprintf("cmd : %d, select_file:%d, select_flash: %d, rsv_table:%d, filepath:%s,address :%d %d %d %d, number_of packets:%d %d\n",
      //    __file_operations.cmd, __file_operations.select_flash, __file_operations.select_file, __file_operations.rsv_table[1], __file_operations.rsv_table[0], __file_operations.filepath,
      //    __file_operations.address[3], __file_operations.address[2], __file_operations.address[1], __file_operations.address[0],
      //    __file_operations.number_of_packets[0], __file_operations.number_of_packets[1]);
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002870:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002878:	2255      	movs	r2, #85	; 0x55
 800287a:	48ac      	ldr	r0, [pc, #688]	; (8002b2c <parse_command+0x834>)
 800287c:	f00e fd2f 	bl	80112de <HAL_UART_Transmit>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <parse_command+0x594>
 8002886:	48aa      	ldr	r0, [pc, #680]	; (8002b30 <parse_command+0x838>)
 8002888:	f7fe fae0 	bl	8000e4c <myprintf>
      perform_file_operations(&__file_operations, Lfs1, File1);
 800288c:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8002890:	a81c      	add	r0, sp, #112	; 0x70
 8002892:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002896:	2254      	movs	r2, #84	; 0x54
 8002898:	4619      	mov	r1, r3
 800289a:	f013 fc6f 	bl	801617c <memcpy>
 800289e:	4668      	mov	r0, sp
 80028a0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80028a4:	2270      	movs	r2, #112	; 0x70
 80028a6:	4619      	mov	r1, r3
 80028a8:	f013 fc68 	bl	801617c <memcpy>
 80028ac:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80028b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff fc58 	bl	8002168 <perform_file_operations>
     if (cmds[0] == 0x1e)//can be used inside perform_file_operation looking at values of file_operation.select_file
 80028b8:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80028bc:	2b1e      	cmp	r3, #30
 80028be:	f040 819c 	bne.w	8002bfa <parse_command+0x902>
      {
        int x, ack[85], fd, ret;
        myprintf("Data download command received\n"); // if reservation command is received then store the reservation command (do not execute)
 80028c2:	489c      	ldr	r0, [pc, #624]	; (8002b34 <parse_command+0x83c>)
 80028c4:	f7fe fac2 	bl	8000e4c <myprintf>

        ack[0] = 0x53;
 80028c8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028cc:	2253      	movs	r2, #83	; 0x53
 80028ce:	601a      	str	r2, [r3, #0]
        // ack[1] = 0x0e;
        if (cmds[2] == 0xf6)
 80028d0:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80028d4:	2bf6      	cmp	r3, #246	; 0xf6
 80028d6:	d104      	bne.n	80028e2 <parse_command+0x5ea>
        {
          ack[1] = 0x0b;
 80028d8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028dc:	220b      	movs	r2, #11
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	e010      	b.n	8002904 <parse_command+0x60c>
        }
        else if (cmds[2] == 0xf7)
 80028e2:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80028e6:	2bf7      	cmp	r3, #247	; 0xf7
 80028e8:	d104      	bne.n	80028f4 <parse_command+0x5fc>
        {
          ack[1] = 0x0d;
 80028ea:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80028ee:	220d      	movs	r2, #13
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e007      	b.n	8002904 <parse_command+0x60c>
        }
        else if (cmds[2] == 0xf5)
 80028f4:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 80028f8:	2bf5      	cmp	r3, #245	; 0xf5
 80028fa:	d103      	bne.n	8002904 <parse_command+0x60c>
        {
          ack[1] = 0x0c;
 80028fc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002900:	220c      	movs	r2, #12
 8002902:	605a      	str	r2, [r3, #4]
        }

        ack[2] = 0x51;
 8002904:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002908:	2251      	movs	r2, #81	; 0x51
 800290a:	609a      	str	r2, [r3, #8]
        for (int i = 3; i < 83; i++)
 800290c:	2303      	movs	r3, #3
 800290e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8002912:	e00c      	b.n	800292e <parse_command+0x636>
        {
          ack[i] = i;
 8002914:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002918:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800291c:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8002920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int i = 3; i < 83; i++)
 8002924:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8002928:	3301      	adds	r3, #1
 800292a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800292e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8002932:	2b52      	cmp	r3, #82	; 0x52
 8002934:	ddee      	ble.n	8002914 <parse_command+0x61c>
        }
        ack[83] = 0x7e;
 8002936:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800293a:	227e      	movs	r2, #126	; 0x7e
 800293c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        int j;
        // //sleep(2);

        for (j = 0; j < 10; j++)
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8002946:	e04f      	b.n	80029e8 <parse_command+0x6f0>
        {
          myprintf("\n  Data download packet no %d\n", j + 1);
 8002948:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800294c:	3301      	adds	r3, #1
 800294e:	4619      	mov	r1, r3
 8002950:	4879      	ldr	r0, [pc, #484]	; (8002b38 <parse_command+0x840>)
 8002952:	f7fe fa7b 	bl	8000e4c <myprintf>
          ack[82] = j + 1;
 8002956:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002960:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
          ack[81] = j + 1;
 8002964:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800296e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144


         HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT, GPIO_COM_4V_EN_PIN, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002978:	4870      	ldr	r0, [pc, #448]	; (8002b3c <parse_command+0x844>)
 800297a:	f00b fc99 	bl	800e2b0 <HAL_GPIO_WritePin>
          myprintf("Turning on 4V dcdc  line..\n");
 800297e:	4870      	ldr	r0, [pc, #448]	; (8002b40 <parse_command+0x848>)
 8002980:	f7fe fa64 	bl	8000e4c <myprintf>
//          gpio_write(GPIO_DCDC_4V_EN, 1);
          HAL_GPIO_WritePin(GPIO_DCDC_4V_EN_PORT, GPIO_DCDC_4V_EN_PIN, GPIO_PIN_SET);
 8002984:	2201      	movs	r2, #1
 8002986:	2110      	movs	r1, #16
 8002988:	486e      	ldr	r0, [pc, #440]	; (8002b44 <parse_command+0x84c>)
 800298a:	f00b fc91 	bl	800e2b0 <HAL_GPIO_WritePin>

          myprintf("Turning on 4v RF line..\n");
 800298e:	486e      	ldr	r0, [pc, #440]	; (8002b48 <parse_command+0x850>)
 8002990:	f7fe fa5c 	bl	8000e4c <myprintf>
          //sleep(1);
          ret = write(fd, ack, BEACON_DATA_SIZE);
 8002994:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8002998:	2255      	movs	r2, #85	; 0x55
 800299a:	4619      	mov	r1, r3
 800299c:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 80029a0:	f014 f8ba 	bl	8016b18 <write>
 80029a4:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
          x = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
//          for (int i = 0; i < 85; i++)
//          {
//            myprintf("%02x ", ack[i]);
//          }
         //close(fd);
          myprintf("Turning off 4v RF line..\n");
 80029ae:	4867      	ldr	r0, [pc, #412]	; (8002b4c <parse_command+0x854>)
 80029b0:	f7fe fa4c 	bl	8000e4c <myprintf>
          HAL_GPIO_WritePin(GPIO_COM_4V_EN_PORT,GPIO_COM_4V_EN_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ba:	4860      	ldr	r0, [pc, #384]	; (8002b3c <parse_command+0x844>)
 80029bc:	f00b fc78 	bl	800e2b0 <HAL_GPIO_WritePin>
          myprintf("Turning off 4v dcdc EN line..\n");
 80029c0:	4863      	ldr	r0, [pc, #396]	; (8002b50 <parse_command+0x858>)
 80029c2:	f7fe fa43 	bl	8000e4c <myprintf>
          HAL_GPIO_WritePin(GPIO_DCDC_4V_EN_PORT, GPIO_DCDC_4V_EN_PIN, GPIO_PIN_RESET);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2110      	movs	r1, #16
 80029ca:	485e      	ldr	r0, [pc, #376]	; (8002b44 <parse_command+0x84c>)
 80029cc:	f00b fc70 	bl	800e2b0 <HAL_GPIO_WritePin>
          myprintf("\n EPDM data o %d sent success\n ******//sleeping *******\n ", j + 1);
 80029d0:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80029d4:	3301      	adds	r3, #1
 80029d6:	4619      	mov	r1, r3
 80029d8:	485e      	ldr	r0, [pc, #376]	; (8002b54 <parse_command+0x85c>)
 80029da:	f7fe fa37 	bl	8000e4c <myprintf>
        for (j = 0; j < 10; j++)
 80029de:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80029e2:	3301      	adds	r3, #1
 80029e4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80029e8:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	ddab      	ble.n	8002948 <parse_command+0x650>

      myprintf("---------Disable  kill switch\n");
    }
  }
  /* code */
  break;
 80029f0:	e103      	b.n	8002bfa <parse_command+0x902>
    else if (cmds[0] == 0xee && cmds[1] == 0xaa && cmds[2] == 0xaa)
 80029f2:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 80029f6:	2bee      	cmp	r3, #238	; 0xee
 80029f8:	d119      	bne.n	8002a2e <parse_command+0x736>
 80029fa:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 80029fe:	2baa      	cmp	r3, #170	; 0xaa
 8002a00:	d115      	bne.n	8002a2e <parse_command+0x736>
 8002a02:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a06:	2baa      	cmp	r3, #170	; 0xaa
 8002a08:	d111      	bne.n	8002a2e <parse_command+0x736>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002a0a:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a12:	2255      	movs	r2, #85	; 0x55
 8002a14:	4845      	ldr	r0, [pc, #276]	; (8002b2c <parse_command+0x834>)
 8002a16:	f00e fc62 	bl	80112de <HAL_UART_Transmit>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <parse_command+0x72e>
 8002a20:	4843      	ldr	r0, [pc, #268]	; (8002b30 <parse_command+0x838>)
 8002a22:	f7fe fa13 	bl	8000e4c <myprintf>
      myprintf("---------Enable kill switch\n");
 8002a26:	484c      	ldr	r0, [pc, #304]	; (8002b58 <parse_command+0x860>)
 8002a28:	f7fe fa10 	bl	8000e4c <myprintf>
  break;
 8002a2c:	e0e5      	b.n	8002bfa <parse_command+0x902>
    else if (cmds[0] == 0xee && cmds[1] == 0xee && cmds[2] == 0xee)
 8002a2e:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a32:	2bee      	cmp	r3, #238	; 0xee
 8002a34:	f040 80e1 	bne.w	8002bfa <parse_command+0x902>
 8002a38:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002a3c:	2bee      	cmp	r3, #238	; 0xee
 8002a3e:	f040 80dc 	bne.w	8002bfa <parse_command+0x902>
 8002a42:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a46:	2bee      	cmp	r3, #238	; 0xee
 8002a48:	f040 80d7 	bne.w	8002bfa <parse_command+0x902>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002a4c:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a54:	2255      	movs	r2, #85	; 0x55
 8002a56:	4835      	ldr	r0, [pc, #212]	; (8002b2c <parse_command+0x834>)
 8002a58:	f00e fc41 	bl	80112de <HAL_UART_Transmit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <parse_command+0x770>
 8002a62:	4833      	ldr	r0, [pc, #204]	; (8002b30 <parse_command+0x838>)
 8002a64:	f7fe f9f2 	bl	8000e4c <myprintf>
      myprintf("---------Disable  kill switch\n");
 8002a68:	483c      	ldr	r0, [pc, #240]	; (8002b5c <parse_command+0x864>)
 8002a6a:	f7fe f9ef 	bl	8000e4c <myprintf>
  break;
 8002a6e:	e0c4      	b.n	8002bfa <parse_command+0x902>

  case COM_MCU:
    // Command to ENABLE Digipeater misison
    {
      myprintf("COM MCU ID has been received\n");
 8002a70:	483b      	ldr	r0, [pc, #236]	; (8002b60 <parse_command+0x868>)
 8002a72:	f7fe f9eb 	bl	8000e4c <myprintf>
      if (cmds[0] == 0xDF && cmds[1] == 0xAB && cmds[2] == 0xD1)
 8002a76:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a7a:	2bdf      	cmp	r3, #223	; 0xdf
 8002a7c:	d10a      	bne.n	8002a94 <parse_command+0x79c>
 8002a7e:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002a82:	2bab      	cmp	r3, #171	; 0xab
 8002a84:	d106      	bne.n	8002a94 <parse_command+0x79c>
 8002a86:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002a8a:	2bd1      	cmp	r3, #209	; 0xd1
 8002a8c:	d102      	bne.n	8002a94 <parse_command+0x79c>
      {

        myprintf("--------Disable  digipeater mission\n");
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <parse_command+0x86c>)
 8002a90:	f7fe f9dc 	bl	8000e4c <myprintf>
      }

      // Command to DISABLE Digipeater misison
      if (cmds[0] == 0xFD && cmds[1] == 0xBA && cmds[2] == 0xD0)
 8002a94:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002a98:	2bfd      	cmp	r3, #253	; 0xfd
 8002a9a:	f040 80b0 	bne.w	8002bfe <parse_command+0x906>
 8002a9e:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002aa2:	2bba      	cmp	r3, #186	; 0xba
 8002aa4:	f040 80ab 	bne.w	8002bfe <parse_command+0x906>
 8002aa8:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002aac:	2bd0      	cmp	r3, #208	; 0xd0
 8002aae:	f040 80a6 	bne.w	8002bfe <parse_command+0x906>
      {
        myprintf("-----------------------Enable  digipeater mission\n");
 8002ab2:	482d      	ldr	r0, [pc, #180]	; (8002b68 <parse_command+0x870>)
 8002ab4:	f7fe f9ca 	bl	8000e4c <myprintf>
      }
    }
    /* code */
    break;
 8002ab8:	e0a1      	b.n	8002bfe <parse_command+0x906>

  case ADCS_MCU:
    // Command to DISABLE adcs(MSN1) misison
    {
      myprintf("ADCS MCU ID has been received\n");
 8002aba:	482c      	ldr	r0, [pc, #176]	; (8002b6c <parse_command+0x874>)
 8002abc:	f7fe f9c6 	bl	8000e4c <myprintf>
      if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002ac0:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac8:	2255      	movs	r2, #85	; 0x55
 8002aca:	4818      	ldr	r0, [pc, #96]	; (8002b2c <parse_command+0x834>)
 8002acc:	f00e fc07 	bl	80112de <HAL_UART_Transmit>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <parse_command+0x7e4>
 8002ad6:	4816      	ldr	r0, [pc, #88]	; (8002b30 <parse_command+0x838>)
 8002ad8:	f7fe f9b8 	bl	8000e4c <myprintf>

      if (cmds[0] == 0xFD && cmds[1] == 0xBA && cmds[2] == 0xD0)
 8002adc:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002ae0:	2bfd      	cmp	r3, #253	; 0xfd
 8002ae2:	f040 808e 	bne.w	8002c02 <parse_command+0x90a>
 8002ae6:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002aea:	2bba      	cmp	r3, #186	; 0xba
 8002aec:	f040 8089 	bne.w	8002c02 <parse_command+0x90a>
 8002af0:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002af4:	2bd0      	cmp	r3, #208	; 0xd0
 8002af6:	f040 8084 	bne.w	8002c02 <parse_command+0x90a>
      {
        myprintf("------------ENable  adcs mission\n");
 8002afa:	481d      	ldr	r0, [pc, #116]	; (8002b70 <parse_command+0x878>)
 8002afc:	f7fe f9a6 	bl	8000e4c <myprintf>
      }
    }
    /* code */
    break;
 8002b00:	e07f      	b.n	8002c02 <parse_command+0x90a>

  case CAM_MCU:
    // Command to ENABLE/DISABLE or run camera(MSN2) mission
    {
      myprintf("CAM MCU ID has been received\n");
 8002b02:	481c      	ldr	r0, [pc, #112]	; (8002b74 <parse_command+0x87c>)
 8002b04:	f7fe f9a2 	bl	8000e4c <myprintf>
      if (cmds[0] == 0xCC && cmds[1] == 0x5E && cmds[2] == 0xBD)
 8002b08:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002b0c:	2bcc      	cmp	r3, #204	; 0xcc
 8002b0e:	d17a      	bne.n	8002c06 <parse_command+0x90e>
 8002b10:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002b14:	2b5e      	cmp	r3, #94	; 0x5e
 8002b16:	d176      	bne.n	8002c06 <parse_command+0x90e>
 8002b18:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002b1c:	2bbd      	cmp	r3, #189	; 0xbd
 8002b1e:	d172      	bne.n	8002c06 <parse_command+0x90e>
      {
        myprintf("------------------------Enable  cam mission\n");
 8002b20:	4815      	ldr	r0, [pc, #84]	; (8002b78 <parse_command+0x880>)
 8002b22:	f7fe f993 	bl	8000e4c <myprintf>
      }
    }
    /* code */
    break;
 8002b26:	e06e      	b.n	8002c06 <parse_command+0x90e>
 8002b28:	08017a00 	.word	0x08017a00
 8002b2c:	20000978 	.word	0x20000978
 8002b30:	08017f60 	.word	0x08017f60
 8002b34:	08017f80 	.word	0x08017f80
 8002b38:	08017fa0 	.word	0x08017fa0
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	08017fc0 	.word	0x08017fc0
 8002b44:	40022000 	.word	0x40022000
 8002b48:	08017fdc 	.word	0x08017fdc
 8002b4c:	08017ff8 	.word	0x08017ff8
 8002b50:	08018014 	.word	0x08018014
 8002b54:	08018034 	.word	0x08018034
 8002b58:	08018070 	.word	0x08018070
 8002b5c:	08018090 	.word	0x08018090
 8002b60:	080180b0 	.word	0x080180b0
 8002b64:	080180d0 	.word	0x080180d0
 8002b68:	080180f8 	.word	0x080180f8
 8002b6c:	0801812c 	.word	0x0801812c
 8002b70:	0801814c 	.word	0x0801814c
 8002b74:	08018170 	.word	0x08018170
 8002b78:	08018190 	.word	0x08018190

  case EPDM_MCU:
    // Command to ENABLE/DISABLE or run epdm(MSN3) mission
    {
      myprintf("EPDM MCU ID has been received\n");
 8002b7c:	4827      	ldr	r0, [pc, #156]	; (8002c1c <parse_command+0x924>)
 8002b7e:	f7fe f965 	bl	8000e4c <myprintf>
      if (cmds[0] == 0xAC && cmds[1] == 0xCF && cmds[2] == 0xCF)
 8002b82:	f897 3308 	ldrb.w	r3, [r7, #776]	; 0x308
 8002b86:	2bac      	cmp	r3, #172	; 0xac
 8002b88:	d13f      	bne.n	8002c0a <parse_command+0x912>
 8002b8a:	f897 3309 	ldrb.w	r3, [r7, #777]	; 0x309
 8002b8e:	2bcf      	cmp	r3, #207	; 0xcf
 8002b90:	d13b      	bne.n	8002c0a <parse_command+0x912>
 8002b92:	f897 330a 	ldrb.w	r3, [r7, #778]	; 0x30a
 8002b96:	2bcf      	cmp	r3, #207	; 0xcf
 8002b98:	d137      	bne.n	8002c0a <parse_command+0x912>
      {
        if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002b9a:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba2:	2255      	movs	r2, #85	; 0x55
 8002ba4:	481e      	ldr	r0, [pc, #120]	; (8002c20 <parse_command+0x928>)
 8002ba6:	f00e fb9a 	bl	80112de <HAL_UART_Transmit>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <parse_command+0x8be>
 8002bb0:	481c      	ldr	r0, [pc, #112]	; (8002c24 <parse_command+0x92c>)
 8002bb2:	f7fe f94b 	bl	8000e4c <myprintf>

        myprintf("----------------EPDM MCU ID has been activated\n");
 8002bb6:	481c      	ldr	r0, [pc, #112]	; (8002c28 <parse_command+0x930>)
 8002bb8:	f7fe f948 	bl	8000e4c <myprintf>
      }
    }
    /* code */
    break;
 8002bbc:	e025      	b.n	8002c0a <parse_command+0x912>

  default:
    ack[1] = 0xac;
 8002bbe:	23ac      	movs	r3, #172	; 0xac
 8002bc0:	f887 330d 	strb.w	r3, [r7, #781]	; 0x30d
    ack[2] = 0x04;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	f887 330e 	strb.w	r3, [r7, #782]	; 0x30e
    ack[4] = 0x63;
 8002bca:	2363      	movs	r3, #99	; 0x63
 8002bcc:	f887 3310 	strb.w	r3, [r7, #784]	; 0x310
    ack[5] = 0x62;
 8002bd0:	2362      	movs	r3, #98	; 0x62
 8002bd2:	f887 3311 	strb.w	r3, [r7, #785]	; 0x311
    if (HAL_UART_Transmit(&COM_uart, ack, sizeof(ack), 1000 ) == HAL_OK){myprintf("Acknowledge sent successfully\n");}
 8002bd6:	f507 7143 	add.w	r1, r7, #780	; 0x30c
 8002bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bde:	2255      	movs	r2, #85	; 0x55
 8002be0:	480f      	ldr	r0, [pc, #60]	; (8002c20 <parse_command+0x928>)
 8002be2:	f00e fb7c 	bl	80112de <HAL_UART_Transmit>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <parse_command+0x8fa>
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <parse_command+0x92c>)
 8002bee:	f7fe f92d 	bl	8000e4c <myprintf>
    myprintf("The supplied command is incorrect");
 8002bf2:	480e      	ldr	r0, [pc, #56]	; (8002c2c <parse_command+0x934>)
 8002bf4:	f7fe f92a 	bl	8000e4c <myprintf>
    return;
 8002bf8:	e008      	b.n	8002c0c <parse_command+0x914>
  break;
 8002bfa:	bf00      	nop
 8002bfc:	e006      	b.n	8002c0c <parse_command+0x914>
    break;
 8002bfe:	bf00      	nop
 8002c00:	e004      	b.n	8002c0c <parse_command+0x914>
    break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <parse_command+0x914>
    break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <parse_command+0x914>
    break;
 8002c0a:	bf00      	nop
  // for (int i = 0; i < BEACON_DATA_SIZE; i++)
  // {
  //     send_data_uart(COM_UART, ack[i], 1);
  //     myprintf("%02x ",ack[i]);
  // }
}
 8002c0c:	f507 7760 	add.w	r7, r7, #896	; 0x380
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002c16:	b004      	add	sp, #16
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	080181c0 	.word	0x080181c0
 8002c20:	20000978 	.word	0x20000978
 8002c24:	08017f60 	.word	0x08017f60
 8002c28:	080181e0 	.word	0x080181e0
 8002c2c:	08018210 	.word	0x08018210

08002c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <MX_DMA_Init+0x148>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	200b      	movs	r0, #11
 8002c74:	f00a fd37 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c78:	200b      	movs	r0, #11
 8002c7a:	f00a fd50 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	200c      	movs	r0, #12
 8002c84:	f00a fd2f 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c88:	200c      	movs	r0, #12
 8002c8a:	f00a fd48 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	200d      	movs	r0, #13
 8002c94:	f00a fd27 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c98:	200d      	movs	r0, #13
 8002c9a:	f00a fd40 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	200e      	movs	r0, #14
 8002ca4:	f00a fd1f 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ca8:	200e      	movs	r0, #14
 8002caa:	f00a fd38 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	200f      	movs	r0, #15
 8002cb4:	f00a fd17 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002cb8:	200f      	movs	r0, #15
 8002cba:	f00a fd30 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2010      	movs	r0, #16
 8002cc4:	f00a fd0f 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cc8:	2010      	movs	r0, #16
 8002cca:	f00a fd28 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2011      	movs	r0, #17
 8002cd4:	f00a fd07 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002cd8:	2011      	movs	r0, #17
 8002cda:	f00a fd20 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	202f      	movs	r0, #47	; 0x2f
 8002ce4:	f00a fcff 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002ce8:	202f      	movs	r0, #47	; 0x2f
 8002cea:	f00a fd18 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2038      	movs	r0, #56	; 0x38
 8002cf4:	f00a fcf7 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cf8:	2038      	movs	r0, #56	; 0x38
 8002cfa:	f00a fd10 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	2039      	movs	r0, #57	; 0x39
 8002d04:	f00a fcef 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002d08:	2039      	movs	r0, #57	; 0x39
 8002d0a:	f00a fd08 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	203a      	movs	r0, #58	; 0x3a
 8002d14:	f00a fce7 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d18:	203a      	movs	r0, #58	; 0x3a
 8002d1a:	f00a fd00 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	203b      	movs	r0, #59	; 0x3b
 8002d24:	f00a fcdf 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002d28:	203b      	movs	r0, #59	; 0x3b
 8002d2a:	f00a fcf8 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	203c      	movs	r0, #60	; 0x3c
 8002d34:	f00a fcd7 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002d38:	203c      	movs	r0, #60	; 0x3c
 8002d3a:	f00a fcf0 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2044      	movs	r0, #68	; 0x44
 8002d44:	f00a fccf 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002d48:	2044      	movs	r0, #68	; 0x44
 8002d4a:	f00a fce8 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2045      	movs	r0, #69	; 0x45
 8002d54:	f00a fcc7 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002d58:	2045      	movs	r0, #69	; 0x45
 8002d5a:	f00a fce0 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2046      	movs	r0, #70	; 0x46
 8002d64:	f00a fcbf 	bl	800d6e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002d68:	2046      	movs	r0, #70	; 0x46
 8002d6a:	f00a fcd8 	bl	800d71e <HAL_NVIC_EnableIRQ>

}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002db8:	f043 0310 	orr.w	r3, r3, #16
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a64      	ldr	r2, [pc, #400]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a5d      	ldr	r2, [pc, #372]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a41      	ldr	r2, [pc, #260]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <MX_GPIO_Init+0x1e8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin, GPIO_PIN_RESET);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	21d0      	movs	r1, #208	; 0xd0
 8002e92:	4835      	ldr	r0, [pc, #212]	; (8002f68 <MX_GPIO_Init+0x1ec>)
 8002e94:	f00b fa0c 	bl	800e2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MAIN_FM_CS_Pin|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f249 2108 	movw	r1, #37384	; 0x9208
 8002e9e:	4833      	ldr	r0, [pc, #204]	; (8002f6c <MX_GPIO_Init+0x1f0>)
 8002ea0:	f00b fa06 	bl	800e2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|MUX_EN_Pin|GPIO_PIN_7|GPIO_PIN_5
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f240 11f5 	movw	r1, #501	; 0x1f5
 8002eaa:	4831      	ldr	r0, [pc, #196]	; (8002f70 <MX_GPIO_Init+0x1f4>)
 8002eac:	f00b fa00 	bl	800e2b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_2|MPU_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f641 4108 	movw	r1, #7176	; 0x1c08
 8002eb6:	482f      	ldr	r0, [pc, #188]	; (8002f74 <MX_GPIO_Init+0x1f8>)
 8002eb8:	f00b f9fa 	bl	800e2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MAG_INT_Pin|CS_MAG_Pin, GPIO_PIN_RESET);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002ec2:	482d      	ldr	r0, [pc, #180]	; (8002f78 <MX_GPIO_Init+0x1fc>)
 8002ec4:	f00b f9f4 	bl	800e2b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin;
 8002ec8:	23d0      	movs	r3, #208	; 0xd0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	4822      	ldr	r0, [pc, #136]	; (8002f68 <MX_GPIO_Init+0x1ec>)
 8002ee0:	f00b f83a 	bl	800df58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD15 PD12 PD9 */
  GPIO_InitStruct.Pin = MAIN_FM_CS_Pin|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_9;
 8002ee4:	f249 2308 	movw	r3, #37384	; 0x9208
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	481b      	ldr	r0, [pc, #108]	; (8002f6c <MX_GPIO_Init+0x1f0>)
 8002efe:	f00b f82b 	bl	800df58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 PGPin PG7 PG5
                           PG4 PG2 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|MUX_EN_Pin|GPIO_PIN_7|GPIO_PIN_5
 8002f02:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_2|MPU_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4815      	ldr	r0, [pc, #84]	; (8002f70 <MX_GPIO_Init+0x1f4>)
 8002f1c:	f00b f81c 	bl	800df58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin;
 8002f20:	f641 4308 	movw	r3, #7176	; 0x1c08
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f36:	4619      	mov	r1, r3
 8002f38:	480e      	ldr	r0, [pc, #56]	; (8002f74 <MX_GPIO_Init+0x1f8>)
 8002f3a:	f00b f80d 	bl	800df58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|CS_MAG_Pin;
 8002f3e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4619      	mov	r1, r3
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <MX_GPIO_Init+0x1fc>)
 8002f58:	f00a fffe 	bl	800df58 <HAL_GPIO_Init>

}
 8002f5c:	bf00      	nop
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40021c00 	.word	0x40021c00
 8002f78:	40021400 	.word	0x40021400

08002f7c <buffersize1>:
		uint16_t mx, my, mz;
	} mag;

} lis3mdl;

int buffersize1(char *buff) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8002f88:	e002      	b.n	8002f90 <buffersize1+0x14>
		i++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f6      	bne.n	8002f8a <buffersize1+0xe>
	return i;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <myDebug>:
void myDebug(const char *fmt, ...) {
 8002fac:	b40f      	push	{r0, r1, r2, r3}
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	2164      	movs	r1, #100	; 0x64
 8002fc0:	480a      	ldr	r0, [pc, #40]	; (8002fec <myDebug+0x40>)
 8002fc2:	f013 fddf 	bl	8016b84 <vsniprintf>
	va_end(args);
	int len = buffersize1(temp);
 8002fc6:	4809      	ldr	r0, [pc, #36]	; (8002fec <myDebug+0x40>)
 8002fc8:	f7ff ffd8 	bl	8002f7c <buffersize1>
 8002fcc:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart7, (uint8_t*) temp, len,1000);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	4905      	ldr	r1, [pc, #20]	; (8002fec <myDebug+0x40>)
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <myDebug+0x44>)
 8002fda:	f00e f980 	bl	80112de <HAL_UART_Transmit>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe8:	b004      	add	sp, #16
 8002fea:	4770      	bx	lr
 8002fec:	200002b0 	.word	0x200002b0
 8002ff0:	20000888 	.word	0x20000888

08002ff4 <LIS3MDL_ReadReg>:
 * @brief  Read data from Specific Register address of LIS3MDL
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LIS3MDL_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003006:	b2db      	uxtb	r3, r3
 8003008:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <LIS3MDL_ReadReg+0x54>)
 8003012:	f00b f94d 	bl	800e2b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8003016:	1cf9      	adds	r1, r7, #3
 8003018:	2364      	movs	r3, #100	; 0x64
 800301a:	2201      	movs	r2, #1
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f00c ffb4 	bl	800ff8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8003022:	f107 010f 	add.w	r1, r7, #15
 8003026:	2364      	movs	r3, #100	; 0x64
 8003028:	2201      	movs	r2, #1
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f00d f8e9 	bl	8010202 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8003030:	2201      	movs	r2, #1
 8003032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003036:	4804      	ldr	r0, [pc, #16]	; (8003048 <LIS3MDL_ReadReg+0x54>)
 8003038:	f00b f93a 	bl	800e2b0 <HAL_GPIO_WritePin>
	return val;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021400 	.word	0x40021400

0800304c <MPU_CS>:
	} else {
		return 0;
	}
}

void MPU_CS(uint8_t state) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, state);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	461a      	mov	r2, r3
 800305a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305e:	4803      	ldr	r0, [pc, #12]	; (800306c <MPU_CS+0x20>)
 8003060:	f00b f926 	bl	800e2b0 <HAL_GPIO_WritePin>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021c00 	.word	0x40021c00

08003070 <MPU6500_ReadReg>:
		writeRegister(addr, val);
		break;
	}
}

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003082:	b2db      	uxtb	r3, r3
 8003084:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 8003086:	2000      	movs	r0, #0
 8003088:	f7ff ffe0 	bl	800304c <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 800308c:	1cf9      	adds	r1, r7, #3
 800308e:	2364      	movs	r3, #100	; 0x64
 8003090:	2201      	movs	r2, #1
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f00c ff79 	bl	800ff8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8003098:	f107 010f 	add.w	r1, r7, #15
 800309c:	2364      	movs	r3, #100	; 0x64
 800309e:	2201      	movs	r2, #1
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f00d f8ae 	bl	8010202 <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7ff ffd0 	bl	800304c <MPU_CS>
	return val;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <IMU_Data>:
	HAL_Delay(1000);
	myDebug("Calibration  Complete");

}

void IMU_Data() {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b09a      	sub	sp, #104	; 0x68
 80030bc:	af00      	add	r7, sp, #0

	//Gyro, Accel and Mag register data
//    uint8_t SAT_IMU[18];
	SAT_IMU1[0] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_H);
 80030be:	213b      	movs	r1, #59	; 0x3b
 80030c0:	4859      	ldr	r0, [pc, #356]	; (8003228 <IMU_Data+0x170>)
 80030c2:	f7ff ffd5 	bl	8003070 <MPU6500_ReadReg>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b58      	ldr	r3, [pc, #352]	; (800322c <IMU_Data+0x174>)
 80030cc:	701a      	strb	r2, [r3, #0]
	SAT_IMU1[1] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_L);
 80030ce:	213c      	movs	r1, #60	; 0x3c
 80030d0:	4855      	ldr	r0, [pc, #340]	; (8003228 <IMU_Data+0x170>)
 80030d2:	f7ff ffcd 	bl	8003070 <MPU6500_ReadReg>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <IMU_Data+0x174>)
 80030dc:	705a      	strb	r2, [r3, #1]
	SAT_IMU1[2] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_H);
 80030de:	213d      	movs	r1, #61	; 0x3d
 80030e0:	4851      	ldr	r0, [pc, #324]	; (8003228 <IMU_Data+0x170>)
 80030e2:	f7ff ffc5 	bl	8003070 <MPU6500_ReadReg>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b50      	ldr	r3, [pc, #320]	; (800322c <IMU_Data+0x174>)
 80030ec:	709a      	strb	r2, [r3, #2]
	SAT_IMU1[3] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_L);
 80030ee:	213e      	movs	r1, #62	; 0x3e
 80030f0:	484d      	ldr	r0, [pc, #308]	; (8003228 <IMU_Data+0x170>)
 80030f2:	f7ff ffbd 	bl	8003070 <MPU6500_ReadReg>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b4c      	ldr	r3, [pc, #304]	; (800322c <IMU_Data+0x174>)
 80030fc:	70da      	strb	r2, [r3, #3]
	SAT_IMU1[4] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_H);
 80030fe:	213f      	movs	r1, #63	; 0x3f
 8003100:	4849      	ldr	r0, [pc, #292]	; (8003228 <IMU_Data+0x170>)
 8003102:	f7ff ffb5 	bl	8003070 <MPU6500_ReadReg>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <IMU_Data+0x174>)
 800310c:	711a      	strb	r2, [r3, #4]
	SAT_IMU1[5] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_L);
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	4845      	ldr	r0, [pc, #276]	; (8003228 <IMU_Data+0x170>)
 8003112:	f7ff ffad 	bl	8003070 <MPU6500_ReadReg>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <IMU_Data+0x174>)
 800311c:	715a      	strb	r2, [r3, #5]

	SAT_IMU1[6] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_H);
 800311e:	2143      	movs	r1, #67	; 0x43
 8003120:	4841      	ldr	r0, [pc, #260]	; (8003228 <IMU_Data+0x170>)
 8003122:	f7ff ffa5 	bl	8003070 <MPU6500_ReadReg>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	4b40      	ldr	r3, [pc, #256]	; (800322c <IMU_Data+0x174>)
 800312c:	719a      	strb	r2, [r3, #6]
	SAT_IMU1[7] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_L);
 800312e:	2144      	movs	r1, #68	; 0x44
 8003130:	483d      	ldr	r0, [pc, #244]	; (8003228 <IMU_Data+0x170>)
 8003132:	f7ff ff9d 	bl	8003070 <MPU6500_ReadReg>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <IMU_Data+0x174>)
 800313c:	71da      	strb	r2, [r3, #7]
	SAT_IMU1[8] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_H);
 800313e:	2145      	movs	r1, #69	; 0x45
 8003140:	4839      	ldr	r0, [pc, #228]	; (8003228 <IMU_Data+0x170>)
 8003142:	f7ff ff95 	bl	8003070 <MPU6500_ReadReg>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	4b38      	ldr	r3, [pc, #224]	; (800322c <IMU_Data+0x174>)
 800314c:	721a      	strb	r2, [r3, #8]
	SAT_IMU1[9] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_L);
 800314e:	2146      	movs	r1, #70	; 0x46
 8003150:	4835      	ldr	r0, [pc, #212]	; (8003228 <IMU_Data+0x170>)
 8003152:	f7ff ff8d 	bl	8003070 <MPU6500_ReadReg>
 8003156:	4603      	mov	r3, r0
 8003158:	461a      	mov	r2, r3
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <IMU_Data+0x174>)
 800315c:	725a      	strb	r2, [r3, #9]
	SAT_IMU1[10] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_H);
 800315e:	2147      	movs	r1, #71	; 0x47
 8003160:	4831      	ldr	r0, [pc, #196]	; (8003228 <IMU_Data+0x170>)
 8003162:	f7ff ff85 	bl	8003070 <MPU6500_ReadReg>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <IMU_Data+0x174>)
 800316c:	729a      	strb	r2, [r3, #10]
	SAT_IMU1[11] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_L);
 800316e:	2148      	movs	r1, #72	; 0x48
 8003170:	482d      	ldr	r0, [pc, #180]	; (8003228 <IMU_Data+0x170>)
 8003172:	f7ff ff7d 	bl	8003070 <MPU6500_ReadReg>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <IMU_Data+0x174>)
 800317c:	72da      	strb	r2, [r3, #11]

	SAT_IMU1[12]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_L);
 800317e:	2128      	movs	r1, #40	; 0x28
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <IMU_Data+0x170>)
 8003182:	f7ff ff37 	bl	8002ff4 <LIS3MDL_ReadReg>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <IMU_Data+0x174>)
 800318c:	731a      	strb	r2, [r3, #12]
	SAT_IMU1[13]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_H);
 800318e:	2129      	movs	r1, #41	; 0x29
 8003190:	4825      	ldr	r0, [pc, #148]	; (8003228 <IMU_Data+0x170>)
 8003192:	f7ff ff2f 	bl	8002ff4 <LIS3MDL_ReadReg>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <IMU_Data+0x174>)
 800319c:	735a      	strb	r2, [r3, #13]
	SAT_IMU1[14]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_L);
 800319e:	212a      	movs	r1, #42	; 0x2a
 80031a0:	4821      	ldr	r0, [pc, #132]	; (8003228 <IMU_Data+0x170>)
 80031a2:	f7ff ff27 	bl	8002ff4 <LIS3MDL_ReadReg>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <IMU_Data+0x174>)
 80031ac:	739a      	strb	r2, [r3, #14]
	SAT_IMU1[15] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_H);
 80031ae:	212b      	movs	r1, #43	; 0x2b
 80031b0:	481d      	ldr	r0, [pc, #116]	; (8003228 <IMU_Data+0x170>)
 80031b2:	f7ff ff1f 	bl	8002ff4 <LIS3MDL_ReadReg>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <IMU_Data+0x174>)
 80031bc:	73da      	strb	r2, [r3, #15]
	SAT_IMU1[16] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_L);
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	4819      	ldr	r0, [pc, #100]	; (8003228 <IMU_Data+0x170>)
 80031c2:	f7ff ff17 	bl	8002ff4 <LIS3MDL_ReadReg>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <IMU_Data+0x174>)
 80031cc:	741a      	strb	r2, [r3, #16]
	SAT_IMU1[17] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_H);
 80031ce:	212d      	movs	r1, #45	; 0x2d
 80031d0:	4815      	ldr	r0, [pc, #84]	; (8003228 <IMU_Data+0x170>)
 80031d2:	f7ff ff0f 	bl	8002ff4 <LIS3MDL_ReadReg>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <IMU_Data+0x174>)
 80031dc:	745a      	strb	r2, [r3, #17]
	char str[100];
	for(int i = 0; i< sizeof(SAT_IMU1); i++){
 80031de:	2300      	movs	r3, #0
 80031e0:	667b      	str	r3, [r7, #100]	; 0x64
 80031e2:	e017      	b.n	8003214 <IMU_Data+0x15c>
		sprintf(str, "%02x |\0",SAT_IMU1[i]);
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <IMU_Data+0x174>)
 80031e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e8:	4413      	add	r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	463b      	mov	r3, r7
 80031f0:	490f      	ldr	r1, [pc, #60]	; (8003230 <IMU_Data+0x178>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f013 fc42 	bl	8016a7c <siprintf>
		HAL_UART_Transmit(&huart7, str,strlen(str), 100);
 80031f8:	463b      	mov	r3, r7
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f802 	bl	8000204 <strlen>
 8003200:	4603      	mov	r3, r0
 8003202:	b29a      	uxth	r2, r3
 8003204:	4639      	mov	r1, r7
 8003206:	2364      	movs	r3, #100	; 0x64
 8003208:	480a      	ldr	r0, [pc, #40]	; (8003234 <IMU_Data+0x17c>)
 800320a:	f00e f868 	bl	80112de <HAL_UART_Transmit>
	for(int i = 0; i< sizeof(SAT_IMU1); i++){
 800320e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003210:	3301      	adds	r3, #1
 8003212:	667b      	str	r3, [r7, #100]	; 0x64
 8003214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003216:	2b10      	cmp	r3, #16
 8003218:	d9e4      	bls.n	80031e4 <IMU_Data+0x12c>
//		myDebug("%f * %d * %02x *****",SAT_IMU[i],SAT_IMU[i],SAT_IMU[i]);
	}
	myDebug("\n******************Data completed************************\n");
 800321a:	4807      	ldr	r0, [pc, #28]	; (8003238 <IMU_Data+0x180>)
 800321c:	f7ff fec6 	bl	8002fac <myDebug>
}
 8003220:	bf00      	nop
 8003222:	3768      	adds	r7, #104	; 0x68
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000e90 	.word	0x20000e90
 800322c:	20000870 	.word	0x20000870
 8003230:	08018538 	.word	0x08018538
 8003234:	20000888 	.word	0x20000888
 8003238:	08018540 	.word	0x08018540

0800323c <HK_IMU>:
//		FM[i * 4 + 3] = test.u8[3];
//	}
//
//}

void HK_IMU(){
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
//IMU_Setup();
IMU_Data();
 8003240:	f7ff ff3a 	bl	80030b8 <IMU_Data>

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4293      	cmp	r3, r2
 8003258:	bf38      	it	cc
 800325a:	4613      	movcc	r3, r2
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4293      	cmp	r3, r2
 8003278:	bf28      	it	cs
 800327a:	4613      	movcs	r3, r2
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	fbb3 f2f2 	udiv	r2, r3, r2
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	fb01 f202 	mul.w	r2, r1, r2
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	1ad3      	subs	r3, r2, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	3b01      	subs	r3, #1
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ffde 	bl	8003288 <lfs_aligndown>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd fc05 	bl	8000b2c <__popcountsi2>
 8003322:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003350:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffee 	bl	8003348 <lfs_fromle32>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffed 	bl	8003376 <lfs_frombe32>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f012 fec6 	bl	8016140 <malloc>
 80033b4:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f012 fec2 	bl	8016150 <free>
#else
    (void)p;
#endif
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	601a      	str	r2, [r3, #0]
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68d8      	ldr	r0, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	461a      	mov	r2, r3
 8003408:	21ff      	movs	r1, #255	; 0xff
 800340a:	f012 fec5 	bl	8016198 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	601a      	str	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8003432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	441a      	add	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	429a      	cmp	r2, r3
 8003440:	d80a      	bhi.n	8003458 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8124 	beq.w	8003694 <lfs_bd_read+0x274>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	429a      	cmp	r2, r3
 8003454:	f0c0 811e 	bcc.w	8003694 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8003458:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800345c:	e11f      	b.n	800369e <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d03f      	beq.n	80034e8 <lfs_bd_read+0xc8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	429a      	cmp	r2, r3
 8003470:	d13a      	bne.n	80034e8 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800347c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347e:	429a      	cmp	r2, r3
 8003480:	d232      	bcs.n	80034e8 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003488:	429a      	cmp	r2, r3
 800348a:	d324      	bcc.n	80034d6 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	1acb      	subs	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	4619      	mov	r1, r3
 800349c:	69b8      	ldr	r0, [r7, #24]
 800349e:	f7ff fee3 	bl	8003268 <lfs_min>
 80034a2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034ae:	1acb      	subs	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4619      	mov	r1, r3
 80034b6:	69f8      	ldr	r0, [r7, #28]
 80034b8:	f012 fe60 	bl	801617c <memcpy>

                data += diff;
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]
                off += diff;
 80034c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4413      	add	r3, r2
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80034cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80034d4:	e0de      	b.n	8003694 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	4619      	mov	r1, r3
 80034e0:	69b8      	ldr	r0, [r7, #24]
 80034e2:	f7ff fec1 	bl	8003268 <lfs_min>
 80034e6:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d13a      	bne.n	8003568 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4413      	add	r3, r2
        if (block == rcache->block &&
 80034fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034fe:	429a      	cmp	r2, r3
 8003500:	d232      	bcs.n	8003568 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003508:	429a      	cmp	r2, r3
 800350a:	d324      	bcc.n	8003556 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	1acb      	subs	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	4619      	mov	r1, r3
 800351c:	69b8      	ldr	r0, [r7, #24]
 800351e:	f7ff fea3 	bl	8003268 <lfs_min>
 8003522:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800352e:	1acb      	subs	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4619      	mov	r1, r3
 8003536:	69f8      	ldr	r0, [r7, #28]
 8003538:	f012 fe20 	bl	801617c <memcpy>

                data += diff;
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800354c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003554:	e09e      	b.n	8003694 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4619      	mov	r1, r3
 8003560:	69b8      	ldr	r0, [r7, #24]
 8003562:	f7ff fe81 	bl	8003268 <lfs_min>
 8003566:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d336      	bcc.n	80035de <lfs_bd_read+0x1be>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	fbb3 f1f2 	udiv	r1, r3, r2
 800357c:	fb02 f201 	mul.w	r2, r2, r1
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d12b      	bne.n	80035de <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	429a      	cmp	r2, r3
 8003590:	d325      	bcc.n	80035de <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4619      	mov	r1, r3
 800359a:	69b8      	ldr	r0, [r7, #24]
 800359c:	f7ff fe74 	bl	8003288 <lfs_aligndown>
 80035a0:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a6:	685c      	ldr	r4, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035b6:	47a0      	blx	r4
 80035b8:	6178      	str	r0, [r7, #20]
            if (err) {
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <lfs_bd_read+0x1a4>
                return err;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	e06c      	b.n	800369e <lfs_bd_read+0x27e>
            }

            data += diff;
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
            off += diff;
 80035cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4413      	add	r3, r2
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80035d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80035dc:	e05a      	b.n	8003694 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <lfs_bd_read+0x1dc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d305      	bcc.n	80035fc <lfs_bd_read+0x1dc>
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <lfs_bd_read+0x288>)
 80035f2:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <lfs_bd_read+0x28c>)
 80035f4:	216b      	movs	r1, #107	; 0x6b
 80035f6:	482e      	ldr	r0, [pc, #184]	; (80036b0 <lfs_bd_read+0x290>)
 80035f8:	f012 fd48 	bl	801608c <__assert_func>
        rcache->block = block;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4619      	mov	r1, r3
 800360a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800360c:	f7ff fe3c 	bl	8003288 <lfs_aligndown>
 8003610:	4602      	mov	r2, r0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8003616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff fe44 	bl	80032b2 <lfs_alignup>
 800362a:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7ff fe17 	bl	8003268 <lfs_min>
 800363a:	4602      	mov	r2, r0
                - rcache->off,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8003640:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f7ff fe0c 	bl	8003268 <lfs_min>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365a:	685c      	ldr	r4, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	462b      	mov	r3, r5
 8003674:	47a0      	blx	r4
 8003676:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	dd05      	ble.n	800368a <lfs_bd_read+0x26a>
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <lfs_bd_read+0x294>)
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <lfs_bd_read+0x28c>)
 8003682:	2176      	movs	r1, #118	; 0x76
 8003684:	480a      	ldr	r0, [pc, #40]	; (80036b0 <lfs_bd_read+0x290>)
 8003686:	f012 fd01 	bl	801608c <__assert_func>
        if (err) {
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <lfs_bd_read+0x274>
            return err;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	e004      	b.n	800369e <lfs_bd_read+0x27e>
    while (size > 0) {
 8003694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003696:	2b00      	cmp	r3, #0
 8003698:	f47f aee1 	bne.w	800345e <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bdb0      	pop	{r4, r5, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	0801857c 	.word	0x0801857c
 80036ac:	08019380 	.word	0x08019380
 80036b0:	080185ac 	.word	0x080185ac
 80036b4:	080185c0 	.word	0x080185c0

080036b8 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b090      	sub	sp, #64	; 0x40
 80036bc:	af04      	add	r7, sp, #16
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	e039      	b.n	8003748 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80036d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2108      	movs	r1, #8
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fdc3 	bl	8003268 <lfs_min>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	1ad1      	subs	r1, r2, r3
 80036ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	9203      	str	r2, [sp, #12]
 80036f4:	f107 0214 	add.w	r2, r7, #20
 80036f8:	9202      	str	r2, [sp, #8]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	460b      	mov	r3, r1
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff fe8a 	bl	8003420 <lfs_bd_read>
 800370c:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <lfs_bd_cmp+0x60>
            return err;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	e01c      	b.n	8003752 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8003718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	18d1      	adds	r1, r2, r3
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4618      	mov	r0, r3
 8003726:	f012 fd1b 	bl	8016160 <memcmp>
 800372a:	61f8      	str	r0, [r7, #28]
        if (res) {
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da01      	bge.n	800373c <lfs_bd_cmp+0x84>
 8003738:	2301      	movs	r3, #1
 800373a:	e00a      	b.n	8003752 <lfs_bd_cmp+0x9a>
 800373c:	2302      	movs	r3, #2
 800373e:	e008      	b.n	8003752 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	4413      	add	r3, r2
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374c:	429a      	cmp	r2, r3
 800374e:	d3c1      	bcc.n	80036d4 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800375a:	b580      	push	{r7, lr}
 800375c:	b08e      	sub	sp, #56	; 0x38
 800375e:	af04      	add	r7, sp, #16
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e030      	b.n	80037d4 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8003772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2108      	movs	r1, #8
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fd74 	bl	8003268 <lfs_min>
 8003780:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	1ad1      	subs	r1, r2, r3
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	4413      	add	r3, r2
 800378e:	6a3a      	ldr	r2, [r7, #32]
 8003790:	9203      	str	r2, [sp, #12]
 8003792:	f107 0214 	add.w	r2, r7, #20
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	460b      	mov	r3, r1
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fe3b 	bl	8003420 <lfs_bd_read>
 80037aa:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <lfs_bd_crc+0x5c>
            return err;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	e013      	b.n	80037de <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80037b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f107 0114 	add.w	r1, r7, #20
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f006 fdc1 	bl	800a348 <lfs_crc>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 80037cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	4413      	add	r3, r2
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3ca      	bcc.n	8003772 <lfs_bd_crc+0x18>
    }

    return 0;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fe:	d060      	beq.n	80038c2 <lfs_bd_flush+0xda>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f113 0f02 	cmn.w	r3, #2
 8003808:	d05b      	beq.n	80038c2 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003812:	429a      	cmp	r2, r3
 8003814:	d305      	bcc.n	8003822 <lfs_bd_flush+0x3a>
 8003816:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <lfs_bd_flush+0xe4>)
 8003818:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <lfs_bd_flush+0xe8>)
 800381a:	21b3      	movs	r1, #179	; 0xb3
 800381c:	482d      	ldr	r0, [pc, #180]	; (80038d4 <lfs_bd_flush+0xec>)
 800381e:	f012 fc35 	bl	801608c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7ff fd3f 	bl	80032b2 <lfs_alignup>
 8003834:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800383a:	689c      	ldr	r4, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	462b      	mov	r3, r5
 8003852:	47a0      	blx	r4
 8003854:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dd05      	ble.n	8003868 <lfs_bd_flush+0x80>
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <lfs_bd_flush+0xf0>)
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <lfs_bd_flush+0xe8>)
 8003860:	21b7      	movs	r1, #183	; 0xb7
 8003862:	481c      	ldr	r0, [pc, #112]	; (80038d4 <lfs_bd_flush+0xec>)
 8003864:	f012 fc12 	bl	801608c <__assert_func>
        if (err) {
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <lfs_bd_flush+0x8a>
            return err;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	e028      	b.n	80038c4 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff fdaa 	bl	80033d4 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800388c:	69f8      	ldr	r0, [r7, #28]
 800388e:	9003      	str	r0, [sp, #12]
 8003890:	9102      	str	r1, [sp, #8]
 8003892:	9201      	str	r2, [sp, #4]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	2100      	movs	r1, #0
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff ff0b 	bl	80036b8 <lfs_bd_cmp>
 80038a2:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da01      	bge.n	80038ae <lfs_bd_flush+0xc6>
                return res;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	e00a      	b.n	80038c4 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80038b4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80038b8:	e004      	b.n	80038c4 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff fd98 	bl	80033f2 <lfs_cache_zero>
    }

    return 0;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdb0      	pop	{r4, r5, r7, pc}
 80038cc:	080185cc 	.word	0x080185cc
 80038d0:	0801938c 	.word	0x0801938c
 80038d4:	080185ac 	.word	0x080185ac
 80038d8:	080185c0 	.word	0x080185c0

080038dc <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fd71 	bl	80033d4 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff ff75 	bl	80037e8 <lfs_bd_flush>
 80038fe:	6178      	str	r0, [r7, #20]
    if (err) {
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <lfs_bd_sync+0x2e>
        return err;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e011      	b.n	800392e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3
 8003918:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dd05      	ble.n	800392c <lfs_bd_sync+0x50>
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <lfs_bd_sync+0x5c>)
 8003922:	4a06      	ldr	r2, [pc, #24]	; (800393c <lfs_bd_sync+0x60>)
 8003924:	21dd      	movs	r1, #221	; 0xdd
 8003926:	4806      	ldr	r0, [pc, #24]	; (8003940 <lfs_bd_sync+0x64>)
 8003928:	f012 fbb0 	bl	801608c <__assert_func>
    return err;
 800392c:	697b      	ldr	r3, [r7, #20]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	080185c0 	.word	0x080185c0
 800393c:	0801939c 	.word	0x0801939c
 8003940:	080185ac 	.word	0x080185ac

08003944 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	f113 0f02 	cmn.w	r3, #2
 800395c:	d00a      	beq.n	8003974 <lfs_bd_prog+0x30>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003964:	429a      	cmp	r2, r3
 8003966:	d305      	bcc.n	8003974 <lfs_bd_prog+0x30>
 8003968:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <lfs_bd_prog+0x144>)
 800396a:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <lfs_bd_prog+0x148>)
 800396c:	21e8      	movs	r1, #232	; 0xe8
 800396e:	4848      	ldr	r0, [pc, #288]	; (8003a90 <lfs_bd_prog+0x14c>)
 8003970:	f012 fb8c 	bl	801608c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	d978      	bls.n	8003a76 <lfs_bd_prog+0x132>
 8003984:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <lfs_bd_prog+0x150>)
 8003986:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <lfs_bd_prog+0x148>)
 8003988:	21e9      	movs	r1, #233	; 0xe9
 800398a:	4841      	ldr	r0, [pc, #260]	; (8003a90 <lfs_bd_prog+0x14c>)
 800398c:	f012 fb7e 	bl	801608c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003996:	429a      	cmp	r2, r3
 8003998:	d151      	bne.n	8003a3e <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800399e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d34c      	bcc.n	8003a3e <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	4413      	add	r3, r2
                off >= pcache->off &&
 80039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d243      	bcs.n	8003a3e <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80039c4:	4413      	add	r3, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ca:	f7ff fc4d 	bl	8003268 <lfs_min>
 80039ce:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039da:	1acb      	subs	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	69f9      	ldr	r1, [r7, #28]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f012 fbca 	bl	801617c <memcpy>

            data += diff;
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
            off += diff;
 80039f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80039f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6898      	ldr	r0, [r3, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7ff fc1b 	bl	8003248 <lfs_max>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d127      	bne.n	8003a76 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fedb 	bl	80037e8 <lfs_bd_flush>
 8003a32:	6178      	str	r0, [r7, #20]
                if (err) {
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01d      	beq.n	8003a76 <lfs_bd_prog+0x132>
                    return err;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	e01f      	b.n	8003a7e <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d006      	beq.n	8003a56 <lfs_bd_prog+0x112>
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <lfs_bd_prog+0x154>)
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <lfs_bd_prog+0x148>)
 8003a4c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003a50:	480f      	ldr	r0, [pc, #60]	; (8003a90 <lfs_bd_prog+0x14c>)
 8003a52:	f012 fb1b 	bl	801608c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	4619      	mov	r1, r3
 8003a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a66:	f7ff fc0f 	bl	8003288 <lfs_aligndown>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d189      	bne.n	8003990 <lfs_bd_prog+0x4c>
    }

    return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	080185f0 	.word	0x080185f0
 8003a8c:	080193a8 	.word	0x080193a8
 8003a90:	080185ac 	.word	0x080185ac
 8003a94:	08018628 	.word	0x08018628
 8003a98:	0801864c 	.word	0x0801864c

08003a9c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d306      	bcc.n	8003abe <lfs_bd_erase+0x22>
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <lfs_bd_erase+0x54>)
 8003ab2:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <lfs_bd_erase+0x58>)
 8003ab4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003ab8:	480f      	ldr	r0, [pc, #60]	; (8003af8 <lfs_bd_erase+0x5c>)
 8003aba:	f012 fae7 	bl	801608c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	4610      	mov	r0, r2
 8003acc:	4798      	blx	r3
 8003ace:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	dd06      	ble.n	8003ae4 <lfs_bd_erase+0x48>
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <lfs_bd_erase+0x60>)
 8003ad8:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <lfs_bd_erase+0x58>)
 8003ada:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <lfs_bd_erase+0x5c>)
 8003ae0:	f012 fad4 	bl	801608c <__assert_func>
    return err;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	08018670 	.word	0x08018670
 8003af4:	080193b4 	.word	0x080193b4
 8003af8:	080185ac 	.word	0x080185ac
 8003afc:	080185c0 	.word	0x080185c0

08003b00 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d005      	beq.n	8003b48 <lfs_pair_isnull+0x1e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d101      	bne.n	8003b4c <lfs_pair_isnull+0x22>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <lfs_pair_isnull+0x24>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d017      	beq.n	8003ba6 <lfs_pair_cmp+0x46>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d00f      	beq.n	8003ba6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d008      	beq.n	8003ba6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <lfs_pair_cmp+0x46>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <lfs_pair_cmp+0x48>
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d107      	bne.n	8003bda <lfs_pair_issync+0x26>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d00d      	beq.n	8003bf6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	3304      	adds	r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d108      	bne.n	8003bfa <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d101      	bne.n	8003bfa <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <lfs_pair_issync+0x48>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8003c0e:	b590      	push	{r4, r7, lr}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fb94 	bl	8003348 <lfs_fromle32>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1d1c      	adds	r4, r3, #4
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7ff fb89 	bl	8003348 <lfs_fromle32>
 8003c36:	4603      	mov	r3, r0
 8003c38:	6023      	str	r3, [r4, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}

08003c42 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8003c42:	b590      	push	{r4, r7, lr}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fb85 	bl	800335e <lfs_tole32>
 8003c54:	4602      	mov	r2, r0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1d1c      	adds	r4, r3, #4
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7ff fb7a 	bl	800335e <lfs_tole32>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6023      	str	r3, [r4, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}

08003c76 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	0fdb      	lsrs	r3, r3, #31
 8003c84:	b2db      	uxtb	r3, r3
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	059b      	lsls	r3, r3, #22
 8003c9e:	159b      	asrs	r3, r3, #22
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0d1b      	lsrs	r3, r3, #20
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cca:	b29b      	uxth	r3, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8003cea:	b29b      	uxth	r3, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0a:	b29b      	uxth	r3, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0d1b      	lsrs	r3, r3, #20
 8003d24:	b2db      	uxtb	r3, r3
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffec 	bl	8003d18 <lfs_tag_chunk>
 8003d40:	4603      	mov	r3, r0
 8003d42:	b25b      	sxtb	r3, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	b29b      	uxth	r3, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff7f 	bl	8003c92 <lfs_tag_isdelete>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ffe5 	bl	8003d6c <lfs_tag_size>
 8003da2:	4603      	mov	r3, r0
 8003da4:	3304      	adds	r3, #4
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e012      	b.n	8003de4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4403      	add	r3, r0
 8003dda:	404a      	eors	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	dde9      	ble.n	8003dbe <lfs_gstate_xor+0x10>
    }
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e00b      	b.n	8003e1e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <lfs_gstate_iszero+0x20>
            return false;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e006      	b.n	8003e26 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	ddf0      	ble.n	8003e06 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff94 	bl	8003d6c <lfs_tag_size>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff81 	bl	8003d6c <lfs_tag_size>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	b2db      	uxtb	r3, r3
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff18 	bl	8003cb8 <lfs_tag_type1>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5f 	bl	8003d6c <lfs_tag_size>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	0a5b      	lsrs	r3, r3, #9
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fef0 	bl	8003cb8 <lfs_tag_type1>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <lfs_gstate_hasmovehere+0x30>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fe3b 	bl	8003b60 <lfs_pair_cmp>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <lfs_gstate_hasmovehere+0x30>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <lfs_gstate_hasmovehere+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fa19 	bl	8003348 <lfs_fromle32>
 8003f16:	4602      	mov	r2, r0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fa11 	bl	8003348 <lfs_fromle32>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fa09 	bl	8003348 <lfs_fromle32>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fa04 	bl	800335e <lfs_tole32>
 8003f56:	4602      	mov	r2, r0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff f9fc 	bl	800335e <lfs_tole32>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff f9f4 	bl	800335e <lfs_tole32>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f9d9 	bl	8003348 <lfs_fromle32>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff f9d1 	bl	8003348 <lfs_fromle32>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff f9cc 	bl	800335e <lfs_tole32>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f9c4 	bl	800335e <lfs_tole32>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	605a      	str	r2, [r3, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff f9a9 	bl	8003348 <lfs_fromle32>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff f9a1 	bl	8003348 <lfs_fromle32>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	605a      	str	r2, [r3, #4]
}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff f99c 	bl	800335e <lfs_tole32>
 8004026:	4602      	mov	r2, r0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f994 	bl	800335e <lfs_tole32>
 8004036:	4602      	mov	r2, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	605a      	str	r2, [r3, #4]
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff f979 	bl	8003348 <lfs_fromle32>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff f971 	bl	8003348 <lfs_fromle32>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f969 	bl	8003348 <lfs_fromle32>
 8004076:	4602      	mov	r2, r0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f961 	bl	8003348 <lfs_fromle32>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f959 	bl	8003348 <lfs_fromle32>
 8004096:	4602      	mov	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff f951 	bl	8003348 <lfs_fromle32>
 80040a6:	4602      	mov	r2, r0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	615a      	str	r2, [r3, #20]
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff f94c 	bl	800335e <lfs_tole32>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff f944 	bl	800335e <lfs_tole32>
 80040d6:	4602      	mov	r2, r0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f93c 	bl	800335e <lfs_tole32>
 80040e6:	4602      	mov	r2, r0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f934 	bl	800335e <lfs_tole32>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f92c 	bl	800335e <lfs_tole32>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f924 	bl	800335e <lfs_tole32>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	615a      	str	r2, [r3, #20]
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e009      	b.n	8004148 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d101      	bne.n	8004142 <lfs_mlist_isopen+0x1e>
            return true;
 800413e:	2301      	movs	r3, #1
 8004140:	e007      	b.n	8004152 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f1      	bne.n	8004134 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3328      	adds	r3, #40	; 0x28
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e00d      	b.n	800418c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d105      	bne.n	8004186 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]
            break;
 8004184:	e007      	b.n	8004196 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ed      	bne.n	8004170 <lfs_mlist_remove+0x12>
        }
    }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <lfs_fs_disk_version+0x18>)
    }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	00020001 	.word	0x00020001

080041e4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ffeb 	bl	80041c8 <lfs_fs_disk_version>
 80041f2:	4603      	mov	r3, r0
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	b29b      	uxth	r3, r3

}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffdd 	bl	80041c8 <lfs_fs_disk_version>
 800420e:	4603      	mov	r3, r0
 8004210:	b29b      	uxth	r3, r3
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004234:	4413      	add	r3, r2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 800423a:	fbb3 f1f2 	udiv	r1, r3, r2
 800423e:	fb02 f201 	mul.w	r2, r2, r1
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d212      	bcs.n	8004276 <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	009a      	lsls	r2, r3, #2
 800425a:	440a      	add	r2, r1
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4403      	add	r3, r0
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ffe5 	bl	8004284 <lfs_alloc_ack>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	4413      	add	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80042da:	fbb3 f1f2 	udiv	r1, r3, r2
 80042de:	fb02 f201 	mul.w	r2, r2, r1
 80042e2:	1a9a      	subs	r2, r3, r2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	00da      	lsls	r2, r3, #3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f7fe ffb6 	bl	8003268 <lfs_min>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	461a      	mov	r2, r3
 8004314:	2100      	movs	r1, #0
 8004316:	f011 ff3f 	bl	8016198 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800431a:	2301      	movs	r3, #1
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4909      	ldr	r1, [pc, #36]	; (8004344 <lfs_fs_rawgc+0x80>)
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f005 f885 	bl	8009430 <lfs_fs_rawtraverse>
 8004326:	60f8      	str	r0, [r7, #12]
    if (err) {
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffb6 	bl	80042a0 <lfs_alloc_drop>
        return err;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e000      	b.n	800433a <lfs_fs_rawgc+0x76>
    }

    return 0;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	0800421b 	.word	0x0800421b

08004348 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8004352:	e04e      	b.n	80043f2 <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d131      	bne.n	80043f2 <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800439a:	fbb3 f1f2 	udiv	r1, r3, r2
 800439e:	fb02 f201 	mul.w	r2, r2, r1
 80043a2:	1a9a      	subs	r2, r3, r2
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80043a8:	e009      	b.n	80043be <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	1e5a      	subs	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d011      	beq.n	80043ee <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	2101      	movs	r1, #1
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1dd      	bne.n	80043aa <lfs_alloc+0x62>
                }

                return 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e021      	b.n	8004436 <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d1aa      	bne.n	8004354 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	4413      	add	r3, r2
 8004410:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <lfs_alloc+0xf8>)
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8004418:	490a      	ldr	r1, [pc, #40]	; (8004444 <lfs_alloc+0xfc>)
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <lfs_alloc+0x100>)
 800441c:	f012 fa5c 	bl	80168d8 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8004420:	f06f 031b 	mvn.w	r3, #27
 8004424:	e007      	b.n	8004436 <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff4c 	bl	80042c4 <lfs_fs_rawgc>
 800442c:	60f8      	str	r0, [r7, #12]
        if(err) {
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d08e      	beq.n	8004352 <lfs_alloc+0xa>
            return err;
 8004434:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	080186b4 	.word	0x080186b4
 8004444:	080185ac 	.word	0x080185ac
 8004448:	0801868c 	.word	0x0801868c

0800444c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b08f      	sub	sp, #60	; 0x3c
 8004450:	af04      	add	r7, sp, #16
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	333c      	adds	r3, #60	; 0x3c
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fd26 	bl	8003ec4 <lfs_gstate_hasmovehere>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80b9 	beq.w	80045f2 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fc63 	bl	8003d4c <lfs_tag_id>
 8004486:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80b2 	beq.w	80045f2 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fc5a 	bl	8003d4c <lfs_tag_id>
 8004498:	4603      	mov	r3, r0
 800449a:	461c      	mov	r4, r3
 800449c:	6838      	ldr	r0, [r7, #0]
 800449e:	f7ff fc55 	bl	8003d4c <lfs_tag_id>
 80044a2:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80044a4:	429c      	cmp	r4, r3
 80044a6:	f200 80a4 	bhi.w	80045f2 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80044b0:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80044b2:	e09e      	b.n	80045f2 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fc65 	bl	8003d86 <lfs_tag_dsize>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2204      	movs	r2, #4
 80044d0:	9203      	str	r2, [sp, #12]
 80044d2:	f107 0210 	add.w	r2, r7, #16
 80044d6:	9202      	str	r2, [sp, #8]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	9201      	str	r2, [sp, #4]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2304      	movs	r3, #4
 80044e0:	460a      	mov	r2, r1
 80044e2:	2100      	movs	r1, #0
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7fe ff9b 	bl	8003420 <lfs_bd_read>
 80044ea:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <lfs_dir_getslice+0xaa>
            return err;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	e089      	b.n	800460a <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe ff3c 	bl	8003376 <lfs_frombe32>
 80044fe:	4602      	mov	r2, r0
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4053      	eors	r3, r2
 8004504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004508:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fc1e 	bl	8003d4c <lfs_tag_id>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02b      	beq.n	800456e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004516:	69f8      	ldr	r0, [r7, #28]
 8004518:	f7ff fbce 	bl	8003cb8 <lfs_tag_type1>
 800451c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d124      	bne.n	800456e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8004524:	69f8      	ldr	r0, [r7, #28]
 8004526:	f7ff fc11 	bl	8003d4c <lfs_tag_id>
 800452a:	4603      	mov	r3, r0
 800452c:	461c      	mov	r4, r3
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fc09 	bl	8003d4c <lfs_tag_id>
 800453a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800453c:	429c      	cmp	r4, r3
 800453e:	d816      	bhi.n	800456e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	4b33      	ldr	r3, [pc, #204]	; (8004614 <lfs_dir_getslice+0x1c8>)
 8004548:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800454a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800454e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	429a      	cmp	r2, r3
 8004556:	d102      	bne.n	800455e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8004558:	f06f 0301 	mvn.w	r3, #1
 800455c:	e055      	b.n	800460a <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800455e:	69f8      	ldr	r0, [r7, #28]
 8004560:	f7ff fbe7 	bl	8003d32 <lfs_tag_splice>
 8004564:	4603      	mov	r3, r0
 8004566:	029a      	lsls	r2, r3, #10
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	4413      	add	r3, r2
 800456c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	405a      	eors	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d138      	bne.n	80045f2 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8004580:	69f8      	ldr	r0, [r7, #28]
 8004582:	f7ff fb86 	bl	8003c92 <lfs_tag_isdelete>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 800458c:	f06f 0301 	mvn.w	r3, #1
 8004590:	e03b      	b.n	800460a <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8004592:	69f8      	ldr	r0, [r7, #28]
 8004594:	f7ff fbea 	bl	8003d6c <lfs_tag_size>
 8004598:	4603      	mov	r3, r0
 800459a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fe63 	bl	8003268 <lfs_min>
 80045a2:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80045aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ae:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80045b0:	3204      	adds	r2, #4
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	9103      	str	r1, [sp, #12]
 80045b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045b8:	9102      	str	r1, [sp, #8]
 80045ba:	9201      	str	r2, [sp, #4]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4602      	mov	r2, r0
 80045c2:	2100      	movs	r1, #0
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7fe ff2b 	bl	8003420 <lfs_bd_read>
 80045ca:	61b8      	str	r0, [r7, #24]
            if (err) {
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <lfs_dir_getslice+0x18a>
                return err;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	e019      	b.n	800460a <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80045d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	18d0      	adds	r0, r2, r3
 80045dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	2100      	movs	r1, #0
 80045e6:	f011 fdd7 	bl	8016198 <memset>

            return tag + gdiff;
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	e00b      	b.n	800460a <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fbc6 	bl	8003d86 <lfs_tag_dsize>
 80045fa:	4603      	mov	r3, r0
 80045fc:	3304      	adds	r3, #4
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	429a      	cmp	r2, r3
 8004602:	f4bf af57 	bcs.w	80044b4 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8004606:	f06f 0301 	mvn.w	r3, #1
}
 800460a:	4618      	mov	r0, r3
 800460c:	372c      	adds	r7, #44	; 0x2c
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}
 8004612:	bf00      	nop
 8004614:	000ffc00 	.word	0x000ffc00

08004618 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af04      	add	r7, sp, #16
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f7ff fba0 	bl	8003d6c <lfs_tag_size>
 800462c:	4603      	mov	r3, r0
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ff04 	bl	800444c <lfs_dir_getslice>
 8004644:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800464e:	b580      	push	{r7, lr}
 8004650:	b08c      	sub	sp, #48	; 0x30
 8004652:	af04      	add	r7, sp, #16
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8004660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	429a      	cmp	r2, r3
 800466e:	f240 80c0 	bls.w	80047f2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8004672:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004676:	e0c1      	b.n	80047fc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d03f      	beq.n	8004702 <lfs_dir_getread+0xb4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f113 0f02 	cmn.w	r3, #2
 800468a:	d13a      	bne.n	8004702 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8004696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004698:	429a      	cmp	r2, r3
 800469a:	d232      	bcs.n	8004702 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d324      	bcc.n	80046f0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	1acb      	subs	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	69b8      	ldr	r0, [r7, #24]
 80046b8:	f7fe fdd6 	bl	8003268 <lfs_min>
 80046bc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046c8:	1acb      	subs	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4619      	mov	r1, r3
 80046d0:	69f8      	ldr	r0, [r7, #28]
 80046d2:	f011 fd53 	bl	801617c <memcpy>

                data += diff;
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	61fb      	str	r3, [r7, #28]
                off += diff;
 80046de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	4413      	add	r3, r2
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80046e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80046ee:	e080      	b.n	80047f2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	69b8      	ldr	r0, [r7, #24]
 80046fc:	f7fe fdb4 	bl	8003268 <lfs_min>
 8004700:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f113 0f02 	cmn.w	r3, #2
 800470a:	d13a      	bne.n	8004782 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8004716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004718:	429a      	cmp	r2, r3
 800471a:	d232      	bcs.n	8004782 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004722:	429a      	cmp	r2, r3
 8004724:	d324      	bcc.n	8004770 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004730:	1acb      	subs	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	4619      	mov	r1, r3
 8004736:	69b8      	ldr	r0, [r7, #24]
 8004738:	f7fe fd96 	bl	8003268 <lfs_min>
 800473c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004748:	1acb      	subs	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4619      	mov	r1, r3
 8004750:	69f8      	ldr	r0, [r7, #28]
 8004752:	f011 fd13 	bl	801617c <memcpy>

                data += diff;
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800475e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	4413      	add	r3, r2
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800476e:	e040      	b.n	80047f2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	4619      	mov	r1, r3
 800477a:	69b8      	ldr	r0, [r7, #24]
 800477c:	f7fe fd74 	bl	8003268 <lfs_min>
 8004780:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f06f 0201 	mvn.w	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4619      	mov	r1, r3
 8004792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004794:	f7fe fd78 	bl	8003288 <lfs_aligndown>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800479e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	441a      	add	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe fd80 	bl	80032b2 <lfs_alignup>
 80047b2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fe fd53 	bl	8003268 <lfs_min>
 80047c2:	4602      	mov	r2, r0
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	6889      	ldr	r1, [r1, #8]
 80047d4:	9102      	str	r1, [sp, #8]
 80047d6:	9201      	str	r2, [sp, #4]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fe33 	bl	800444c <lfs_dir_getslice>
 80047e6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da01      	bge.n	80047f2 <lfs_dir_getread+0x1a4>
            return err;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	e004      	b.n	80047fc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f af3f 	bne.w	8004678 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <lfs_dir_traverse_filter+0x1e>
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <lfs_dir_traverse_filter+0xac>)
 8004820:	e000      	b.n	8004824 <lfs_dir_traverse_filter+0x20>
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004824:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	405a      	eors	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fa29 	bl	8003c92 <lfs_tag_isdelete>
 8004840:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <lfs_dir_traverse_filter+0xac>)
 800484a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <lfs_dir_traverse_filter+0xb4>)
 8004852:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004854:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004858:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d104      	bne.n	800486a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
        return true;
 8004866:	2301      	movs	r3, #1
 8004868:	e01e      	b.n	80048a8 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800486a:	68b8      	ldr	r0, [r7, #8]
 800486c:	f7ff fa24 	bl	8003cb8 <lfs_tag_type1>
 8004870:	4603      	mov	r3, r0
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d116      	bne.n	80048a6 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8004878:	68b8      	ldr	r0, [r7, #8]
 800487a:	f7ff fa67 	bl	8003d4c <lfs_tag_id>
 800487e:	4603      	mov	r3, r0
 8004880:	461c      	mov	r4, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fa60 	bl	8003d4c <lfs_tag_id>
 800488c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800488e:	429c      	cmp	r4, r3
 8004890:	d809      	bhi.n	80048a6 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f7ff fa4d 	bl	8003d32 <lfs_tag_splice>
 8004898:	4603      	mov	r3, r0
 800489a:	029a      	lsls	r2, r3, #10
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	441a      	add	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	601a      	str	r2, [r3, #0]
    }

    return false;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}
 80048b0:	7ffffc00 	.word	0x7ffffc00
 80048b4:	700ffc00 	.word	0x700ffc00
 80048b8:	000ffc00 	.word	0x000ffc00

080048bc <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b0c1      	sub	sp, #260	; 0x104
 80048c0:	af04      	add	r7, sp, #16
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80048d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80048da:	6838      	ldr	r0, [r7, #0]
 80048dc:	f7ff fa53 	bl	8003d86 <lfs_tag_dsize>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d237      	bcs.n	800495e <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80048ee:	6838      	ldr	r0, [r7, #0]
 80048f0:	f7ff fa49 	bl	8003d86 <lfs_tag_dsize>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2204      	movs	r2, #4
 8004904:	9203      	str	r2, [sp, #12]
 8004906:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800490a:	9202      	str	r2, [sp, #8]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	9201      	str	r2, [sp, #4]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2304      	movs	r3, #4
 8004914:	460a      	mov	r2, r1
 8004916:	2100      	movs	r1, #0
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7fe fd81 	bl	8003420 <lfs_bd_read>
 800491e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <lfs_dir_traverse+0x74>
                    return err;
 800492a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492e:	e3d0      	b.n	80050d2 <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8004930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fd1f 	bl	8003376 <lfs_frombe32>
 8004938:	4602      	mov	r2, r0
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4053      	eors	r3, r2
 800493e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8004950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8004958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	e01b      	b.n	8004996 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800495e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd13      	ble.n	800498e <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8004966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 800496e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8004978:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800497c:	3308      	adds	r3, #8
 800497e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8004982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004986:	3b01      	subs	r3, #1
 8004988:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800498c:	e003      	b.n	8004996 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8004994:	e2bd      	b.n	8004f12 <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8004996:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <lfs_dir_traverse+0x2f4>)
 8004998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800499c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	405a      	eors	r2, r3
 80049a4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80049a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ac:	400b      	ands	r3, r1
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 82a1 	bne.w	8004ef8 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80049b6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80049ba:	f7ff f9c7 	bl	8003d4c <lfs_tag_id>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80ff 	beq.w	8004bc4 <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80049c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d906      	bls.n	80049dc <lfs_dir_traverse+0x120>
 80049ce:	4b79      	ldr	r3, [pc, #484]	; (8004bb4 <lfs_dir_traverse+0x2f8>)
 80049d0:	4a79      	ldr	r2, [pc, #484]	; (8004bb8 <lfs_dir_traverse+0x2fc>)
 80049d2:	f240 319f 	movw	r1, #927	; 0x39f
 80049d6:	4879      	ldr	r0, [pc, #484]	; (8004bbc <lfs_dir_traverse+0x300>)
 80049d8:	f011 fb58 	bl	801608c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80049dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80049ee:	4413      	add	r3, r2
 80049f0:	3b98      	subs	r3, #152	; 0x98
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a06:	4413      	add	r3, r2
 8004a08:	3b94      	subs	r3, #148	; 0x94
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a1e:	4413      	add	r3, r2
 8004a20:	3b90      	subs	r3, #144	; 0x90
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a36:	4413      	add	r3, r2
 8004a38:	3b8c      	subs	r3, #140	; 0x8c
 8004a3a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a50:	4413      	add	r3, r2
 8004a52:	3b88      	subs	r3, #136	; 0x88
 8004a54:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3b84      	subs	r3, #132	; 0x84
 8004a6e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a84:	4413      	add	r3, r2
 8004a86:	3b80      	subs	r3, #128	; 0x80
 8004a88:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004a92:	4613      	mov	r3, r2
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3b7c      	subs	r3, #124	; 0x7c
 8004aa2:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004ab8:	4413      	add	r3, r2
 8004aba:	3b7a      	subs	r3, #122	; 0x7a
 8004abc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3b78      	subs	r3, #120	; 0x78
 8004ad6:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8004ada:	801a      	strh	r2, [r3, #0]
 8004adc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004aec:	4413      	add	r3, r2
 8004aee:	3b74      	subs	r3, #116	; 0x74
 8004af0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004afa:	4613      	mov	r3, r2
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004b06:	4413      	add	r3, r2
 8004b08:	3b70      	subs	r3, #112	; 0x70
 8004b0a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004b20:	4413      	add	r3, r2
 8004b22:	3b6c      	subs	r3, #108	; 0x6c
 8004b24:	6019      	str	r1, [r3, #0]
 8004b26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004b36:	4413      	add	r3, r2
 8004b38:	3b68      	subs	r3, #104	; 0x68
 8004b3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004b50:	4413      	add	r3, r2
 8004b52:	3b68      	subs	r3, #104	; 0x68
 8004b54:	3304      	adds	r3, #4
 8004b56:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b5e:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8004b62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b66:	3301      	adds	r3, #1
 8004b68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <lfs_dir_traverse+0x304>)
 8004b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8004b90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3328      	adds	r3, #40	; 0x28
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bac:	e695      	b.n	80048da <lfs_dir_traverse+0x1e>
 8004bae:	bf00      	nop
 8004bb0:	7ff00000 	.word	0x7ff00000
 8004bb4:	080186b8 	.word	0x080186b8
 8004bb8:	080193c4 	.word	0x080193c4
 8004bbc:	080185ac 	.word	0x080185ac
 8004bc0:	08004805 	.word	0x08004805
                continue;
            }
        }

popped:
 8004bc4:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8004bc6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8004bca:	f7ff f8bf 	bl	8003d4c <lfs_tag_id>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f8b8 	bl	8003d4c <lfs_tag_id>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8004be0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f200 8189 	bhi.w	8004efc <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8004bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff f8ad 	bl	8003d4c <lfs_tag_id>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f240 817e 	bls.w	8004efc <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8004c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f878 	bl	8003cf8 <lfs_tag_type3>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f43f ae65 	beq.w	80048da <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8004c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f870 	bl	8003cf8 <lfs_tag_type3>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f240 1301 	movw	r3, #257	; 0x101
 8004c20:	429a      	cmp	r2, r3
 8004c22:	f040 80ed 	bne.w	8004e00 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8004c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c2a:	4ab7      	ldr	r2, [pc, #732]	; (8004f08 <lfs_dir_traverse+0x64c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	f000 8167 	beq.w	8004f00 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8004c32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004c42:	4413      	add	r3, r2
 8004c44:	3b98      	subs	r3, #152	; 0x98
 8004c46:	4618      	mov	r0, r3
 8004c48:	233c      	movs	r3, #60	; 0x3c
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f011 faa3 	bl	8016198 <memset>
 8004c52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004c62:	4413      	add	r3, r2
 8004c64:	3b98      	subs	r3, #152	; 0x98
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3b94      	subs	r3, #148	; 0x94
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004c92:	4413      	add	r3, r2
 8004c94:	3b90      	subs	r3, #144	; 0x90
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004caa:	4413      	add	r3, r2
 8004cac:	3b8c      	subs	r3, #140	; 0x8c
 8004cae:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3b88      	subs	r3, #136	; 0x88
 8004cc8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004cde:	4413      	add	r3, r2
 8004ce0:	3b84      	subs	r3, #132	; 0x84
 8004ce2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3b80      	subs	r3, #128	; 0x80
 8004cfc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004d12:	4413      	add	r3, r2
 8004d14:	3b7c      	subs	r3, #124	; 0x7c
 8004d16:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004d20:	4613      	mov	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3b7a      	subs	r3, #122	; 0x7a
 8004d30:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004d46:	4413      	add	r3, r2
 8004d48:	3b78      	subs	r3, #120	; 0x78
 8004d4a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004d60:	4413      	add	r3, r2
 8004d62:	3b74      	subs	r3, #116	; 0x74
 8004d64:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b70      	subs	r3, #112	; 0x70
 8004d7e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004d82:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8004d84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe ffeb 	bl	8003d6c <lfs_tag_size>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8004d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe ffd4 	bl	8003d4c <lfs_tag_id>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	60bb      	str	r3, [r7, #8]
            off = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8004db4:	f04f 33ff 	mov.w	r3, #4294967295
 8004db8:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8004dc6:	4b51      	ldr	r3, [pc, #324]	; (8004f0c <lfs_dir_traverse+0x650>)
 8004dc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8004dcc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004dd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8004dd4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004dd8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8004ddc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004de0:	3301      	adds	r3, #1
 8004de2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8004de6:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8004dea:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8004df6:	4413      	add	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8004dfe:	e56c      	b.n	80048da <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe ff78 	bl	8003cf8 <lfs_tag_type3>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004e0e:	d159      	bne.n	8004ec4 <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e16:	e04b      	b.n	8004eb0 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8004e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004e20:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e24:	4613      	mov	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004e3a:	051c      	lsls	r4, r3, #20
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe ff84 	bl	8003d4c <lfs_tag_id>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004e4c:	4413      	add	r3, r2
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	ea44 0103 	orr.w	r1, r4, r3
 8004e54:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	461a      	mov	r2, r3
 8004e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e66:	4413      	add	r3, r2
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8004e6c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7e:	4413      	add	r3, r2
 8004e80:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e86:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004e8a:	4798      	blx	r3
 8004e8c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8004e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da02      	bge.n	8004e9e <lfs_dir_traverse+0x5e2>
                    return res;
 8004e98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e9c:	e119      	b.n	80050d2 <lfs_dir_traverse+0x816>
                }

                if (res) {
 8004e9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d12e      	bne.n	8004f04 <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe ff5a 	bl	8003d6c <lfs_tag_size>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d3aa      	bcc.n	8004e18 <lfs_dir_traverse+0x55c>
 8004ec2:	e50a      	b.n	80048da <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8004ec4:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004ec8:	029a      	lsls	r2, r3, #10
 8004eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ecc:	18d1      	adds	r1, r2, r3
 8004ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ed2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ed6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004eda:	4798      	blx	r3
 8004edc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8004ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	da02      	bge.n	8004eee <lfs_dir_traverse+0x632>
                return res;
 8004ee8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eec:	e0f1      	b.n	80050d2 <lfs_dir_traverse+0x816>
            }

            if (res) {
 8004eee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10c      	bne.n	8004f10 <lfs_dir_traverse+0x654>
 8004ef6:	e4f0      	b.n	80048da <lfs_dir_traverse+0x1e>
                continue;
 8004ef8:	bf00      	nop
 8004efa:	e4ee      	b.n	80048da <lfs_dir_traverse+0x1e>
            continue;
 8004efc:	bf00      	nop
 8004efe:	e4ec      	b.n	80048da <lfs_dir_traverse+0x1e>
                continue;
 8004f00:	bf00      	nop
 8004f02:	e4ea      	b.n	80048da <lfs_dir_traverse+0x1e>
                    break;
 8004f04:	bf00      	nop
        {
 8004f06:	e4e8      	b.n	80048da <lfs_dir_traverse+0x1e>
 8004f08:	08004805 	.word	0x08004805
 8004f0c:	600ffc00 	.word	0x600ffc00
                break;
 8004f10:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8004f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80d9 	beq.w	80050ce <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8004f1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004f2e:	4413      	add	r3, r2
 8004f30:	3b98      	subs	r3, #152	; 0x98
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8004f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004f48:	4413      	add	r3, r2
 8004f4a:	3b94      	subs	r3, #148	; 0x94
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8004f50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004f62:	4413      	add	r3, r2
 8004f64:	3b90      	subs	r3, #144	; 0x90
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8004f6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f6e:	1e5a      	subs	r2, r3, #1
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3b8c      	subs	r3, #140	; 0x8c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8004f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f8a:	1e5a      	subs	r2, r3, #1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004f98:	4413      	add	r3, r2
 8004f9a:	3b88      	subs	r3, #136	; 0x88
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8004fa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3b84      	subs	r3, #132	; 0x84
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8004fbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3b80      	subs	r3, #128	; 0x80
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8004fda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004fec:	4413      	add	r3, r2
 8004fee:	3b7c      	subs	r3, #124	; 0x7c
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8004ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005008:	4413      	add	r3, r2
 800500a:	3b7a      	subs	r3, #122	; 0x7a
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8005012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	4613      	mov	r3, r2
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005024:	4413      	add	r3, r2
 8005026:	3b78      	subs	r3, #120	; 0x78
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005040:	4413      	add	r3, r2
 8005042:	3b74      	subs	r3, #116	; 0x74
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800504a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	4613      	mov	r3, r2
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800505c:	4413      	add	r3, r2
 800505e:	3b70      	subs	r3, #112	; 0x70
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8005066:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	4613      	mov	r3, r2
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005078:	4413      	add	r3, r2
 800507a:	3b6c      	subs	r3, #108	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8005080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005084:	1e5a      	subs	r2, r3, #1
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8005092:	4413      	add	r3, r2
 8005094:	3b68      	subs	r3, #104	; 0x68
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 800509c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80050ae:	4413      	add	r3, r2
 80050b0:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80050b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050b8:	3204      	adds	r2, #4
 80050ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050be:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80050c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80050cc:	e57b      	b.n	8004bc6 <lfs_dir_traverse+0x30a>
    } else {
        return res;
 80050ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	37f4      	adds	r7, #244	; 0xf4
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd90      	pop	{r4, r7, pc}
 80050da:	bf00      	nop

080050dc <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	b0a5      	sub	sp, #148	; 0x94
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	6178      	str	r0, [r7, #20]
 80050e4:	6139      	str	r1, [r7, #16]
 80050e6:	60fa      	str	r2, [r7, #12]
 80050e8:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00f      	beq.n	8005118 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005100:	429a      	cmp	r2, r3
 8005102:	d206      	bcs.n	8005112 <lfs_dir_fetchmatch+0x36>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3304      	adds	r3, #4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8005112:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005116:	e39d      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005118:	2300      	movs	r3, #0
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	2300      	movs	r3, #0
 800511e:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8005124:	2300      	movs	r3, #0
 8005126:	677b      	str	r3, [r7, #116]	; 0x74
 8005128:	e056      	b.n	80051d8 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 800512a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800512c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8005134:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005136:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800513a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800513c:	0092      	lsls	r2, r2, #2
 800513e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8005140:	2104      	movs	r1, #4
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	9202      	str	r2, [sp, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	9201      	str	r2, [sp, #4]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2304      	movs	r3, #4
 800514e:	4602      	mov	r2, r0
 8005150:	2100      	movs	r1, #0
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f7fe f964 	bl	8003420 <lfs_bd_read>
 8005158:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005162:	4413      	add	r3, r2
 8005164:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe f8ed 	bl	8003348 <lfs_fromle32>
 800516e:	4602      	mov	r2, r0
 8005170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8005178:	440b      	add	r3, r1
 800517a:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <lfs_dir_fetchmatch+0xb4>
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800518a:	d001      	beq.n	8005190 <lfs_dir_fetchmatch+0xb4>
            return err;
 800518c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518e:	e361      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8005190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005192:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005196:	d01c      	beq.n	80051d2 <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8005198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80051a0:	4413      	add	r3, r2
 80051a2:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80051a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a8:	3301      	adds	r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	bfb8      	it	lt
 80051b2:	425b      	neglt	r3, r3
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80051ba:	440b      	add	r3, r1
 80051bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fe f8b2 	bl	800332c <lfs_scmp>
 80051c8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd01      	ble.n	80051d2 <lfs_dir_fetchmatch+0xf6>
            r = i;
 80051ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d0:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80051d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d4:	3301      	adds	r3, #1
 80051d6:	677b      	str	r3, [r7, #116]	; 0x74
 80051d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051da:	2b01      	cmp	r3, #1
 80051dc:	dda5      	ble.n	800512a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80051de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	bfb8      	it	lt
 80051e8:	425b      	neglt	r3, r3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80051f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f8:	3301      	adds	r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	bfb8      	it	lt
 8005202:	425b      	neglt	r3, r3
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	bfb8      	it	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005222:	4413      	add	r3, r2
 8005224:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005232:	2300      	movs	r3, #0
 8005234:	673b      	str	r3, [r7, #112]	; 0x70
 8005236:	e2f9      	b.n	800582c <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005248:	4aa8      	ldr	r2, [pc, #672]	; (80054ec <lfs_dir_fetchmatch+0x410>)
 800524a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800524e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005252:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 800525c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800525e:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe f874 	bl	800335e <lfs_tole32>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3308      	adds	r3, #8
 8005280:	2204      	movs	r2, #4
 8005282:	4619      	mov	r1, r3
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	f005 f85e 	bl	800a348 <lfs_crc>
 800528c:	4603      	mov	r3, r0
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe f857 	bl	8003348 <lfs_fromle32>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80052a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80052a2:	f7fe fd70 	bl	8003d86 <lfs_tag_dsize>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	4413      	add	r3, r2
 80052ac:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 80052ae:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80052b4:	69d8      	ldr	r0, [r3, #28]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2204      	movs	r2, #4
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80052c2:	9202      	str	r2, [sp, #8]
 80052c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052c6:	9201      	str	r2, [sp, #4]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4603      	mov	r3, r0
 80052cc:	460a      	mov	r2, r1
 80052ce:	2100      	movs	r1, #0
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f7fe f8a5 	bl	8003420 <lfs_bd_read>
 80052d6:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80052d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 80052de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80052e4:	f000 81d5 	beq.w	8005692 <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 80052e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ea:	e2b3      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80052f2:	2204      	movs	r2, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f005 f827 	bl	800a348 <lfs_crc>
 80052fa:	4603      	mov	r3, r0
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe f838 	bl	8003376 <lfs_frombe32>
 8005306:	4602      	mov	r2, r0
 8005308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800530a:	4053      	eors	r3, r2
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe fcb0 	bl	8003c76 <lfs_tag_isvalid>
 8005316:	4603      	mov	r3, r0
 8005318:	f083 0301 	eor.w	r3, r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005322:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005324:	f7fe fcd8 	bl	8003cd8 <lfs_tag_type2>
 8005328:	4603      	mov	r3, r0
 800532a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8005338:	e1ba      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe fd22 	bl	8003d86 <lfs_tag_dsize>
 8005342:	4602      	mov	r2, r0
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	441a      	add	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	429a      	cmp	r2, r3
 8005350:	f200 81a1 	bhi.w	8005696 <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fcbc 	bl	8003cd8 <lfs_tag_type2>
 8005360:	4603      	mov	r3, r0
 8005362:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005366:	d15e      	bne.n	8005426 <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8005368:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800536e:	69dc      	ldr	r4, [r3, #28]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005376:	3204      	adds	r2, #4
 8005378:	2104      	movs	r1, #4
 800537a:	9103      	str	r1, [sp, #12]
 800537c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005380:	9102      	str	r1, [sp, #8]
 8005382:	9201      	str	r2, [sp, #4]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4623      	mov	r3, r4
 8005388:	4602      	mov	r2, r0
 800538a:	2100      	movs	r1, #0
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f7fe f847 	bl	8003420 <lfs_bd_read>
 8005392:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 800539a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800539c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80053a0:	f000 817b 	beq.w	800569a <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 80053a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80053a6:	e255      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fd ffcc 	bl	8003348 <lfs_fromle32>
 80053b0:	4603      	mov	r3, r0
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 80053b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	429a      	cmp	r2, r3
 80053ba:	f040 8170 	bne.w	800569e <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fca9 	bl	8003d18 <lfs_tag_chunk>
 80053c6:	4603      	mov	r3, r0
 80053c8:	07db      	lsls	r3, r3, #31
 80053ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053cc:	4053      	eors	r3, r2
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80053d8:	2204      	movs	r2, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f004 ffb4 	bl	800a348 <lfs_crc>
 80053e0:	4602      	mov	r2, r0
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80053e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e8:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fcca 	bl	8003d86 <lfs_tag_dsize>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f6:	441a      	add	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005400:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005408:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800540a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800541c:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
 8005424:	e73c      	b.n	80052a0 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005426:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	681c      	ldr	r4, [r3, #0]
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fca3 	bl	8003d86 <lfs_tag_dsize>
 8005440:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005442:	3b04      	subs	r3, #4
 8005444:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005448:	9203      	str	r2, [sp, #12]
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	9501      	str	r5, [sp, #4]
 800544e:	9400      	str	r4, [sp, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4632      	mov	r2, r6
 8005454:	2100      	movs	r1, #0
 8005456:	6978      	ldr	r0, [r7, #20]
 8005458:	f7fe f97f 	bl	800375a <lfs_bd_crc>
 800545c:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 800545e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8005464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005466:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800546a:	f000 811a 	beq.w	80056a2 <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 800546e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005470:	e1f0      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fc1f 	bl	8003cb8 <lfs_tag_type1>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d113      	bne.n	80054a8 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fc62 	bl	8003d4c <lfs_tag_id>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005490:	4293      	cmp	r3, r2
 8005492:	f200 80b5 	bhi.w	8005600 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe fc57 	bl	8003d4c <lfs_tag_id>
 800549e:	4603      	mov	r3, r0
 80054a0:	3301      	adds	r3, #1
 80054a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80054a6:	e0ab      	b.n	8005600 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fc04 	bl	8003cb8 <lfs_tag_type1>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b6:	d139      	bne.n	800552c <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fc39 	bl	8003d32 <lfs_tag_splice>
 80054c0:	4603      	mov	r3, r0
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80054c8:	4413      	add	r3, r2
 80054ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80054ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <lfs_dir_fetchmatch+0x414>)
 80054d2:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80054d4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80054d8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80054dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 80054e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	663b      	str	r3, [r7, #96]	; 0x60
 80054ea:	e089      	b.n	8005600 <lfs_dir_fetchmatch+0x524>
 80054ec:	080186f8 	.word	0x080186f8
 80054f0:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 80054f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	f000 8081 	beq.w	8005600 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fc23 	bl	8003d4c <lfs_tag_id>
 8005506:	4603      	mov	r3, r0
 8005508:	461c      	mov	r4, r3
 800550a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fc1d 	bl	8003d4c <lfs_tag_id>
 8005512:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8005514:	429c      	cmp	r4, r3
 8005516:	d873      	bhi.n	8005600 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fc09 	bl	8003d32 <lfs_tag_splice>
 8005520:	4603      	mov	r3, r0
 8005522:	029a      	lsls	r2, r3, #10
 8005524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005526:	4413      	add	r3, r2
 8005528:	663b      	str	r3, [r7, #96]	; 0x60
 800552a:	e069      	b.n	8005600 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fbc2 	bl	8003cb8 <lfs_tag_type1>
 8005534:	4603      	mov	r3, r0
 8005536:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800553a:	d132      	bne.n	80055a2 <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fbea 	bl	8003d18 <lfs_tag_chunk>
 8005544:	4603      	mov	r3, r0
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8005556:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800555c:	69dc      	ldr	r4, [r3, #28]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005564:	3204      	adds	r2, #4
 8005566:	2108      	movs	r1, #8
 8005568:	9103      	str	r1, [sp, #12]
 800556a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800556e:	9102      	str	r1, [sp, #8]
 8005570:	9201      	str	r2, [sp, #4]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	4623      	mov	r3, r4
 8005576:	4602      	mov	r2, r0
 8005578:	2100      	movs	r1, #0
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7fd ff50 	bl	8003420 <lfs_bd_read>
 8005580:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8005582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8005588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800558a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800558e:	f000 808a 	beq.w	80056a6 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8005592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005594:	e15e      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 8005596:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fb37 	bl	8003c0e <lfs_pair_fromle32>
 80055a0:	e02e      	b.n	8005600 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe fba7 	bl	8003cf8 <lfs_tag_type3>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d124      	bne.n	8005600 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 80055b6:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80055bc:	69dc      	ldr	r4, [r3, #28]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055c4:	3204      	adds	r2, #4
 80055c6:	2108      	movs	r1, #8
 80055c8:	9103      	str	r1, [sp, #12]
 80055ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80055ce:	9102      	str	r1, [sp, #8]
 80055d0:	9201      	str	r2, [sp, #4]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	4623      	mov	r3, r4
 80055d6:	4602      	mov	r2, r0
 80055d8:	2100      	movs	r1, #0
 80055da:	6978      	ldr	r0, [r7, #20]
 80055dc:	f7fd ff20 	bl	8003420 <lfs_bd_read>
 80055e0:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 80055e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 80055e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055ee:	d05c      	beq.n	80056aa <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80055f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe fcc5 	bl	8003f84 <lfs_fcrc_fromle32>
                hasfcrc = true;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8005600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005606:	405a      	eors	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f ae47 	bne.w	80052a0 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005618:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	f107 0220 	add.w	r2, r7, #32
 8005624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005628:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800562c:	4798      	blx	r3
 800562e:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	2b00      	cmp	r3, #0
 8005634:	da05      	bge.n	8005642 <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 8005636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005638:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800563c:	d037      	beq.n	80056ae <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8005640:	e108      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8005642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	663b      	str	r3, [r7, #96]	; 0x60
 800564c:	e628      	b.n	80052a0 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800564e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005652:	405a      	eors	r2, r3
 8005654:	4b81      	ldr	r3, [pc, #516]	; (800585c <lfs_dir_fetchmatch+0x780>)
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
 8005662:	e61d      	b.n	80052a0 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 8005664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005666:	2b02      	cmp	r3, #2
 8005668:	f47f ae1a 	bne.w	80052a0 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fb6c 	bl	8003d4c <lfs_tag_id>
 8005674:	4603      	mov	r3, r0
 8005676:	461c      	mov	r4, r3
 8005678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fb66 	bl	8003d4c <lfs_tag_id>
 8005680:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8005682:	429c      	cmp	r4, r3
 8005684:	f63f ae0c 	bhi.w	80052a0 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800568e:	663b      	str	r3, [r7, #96]	; 0x60
 8005690:	e606      	b.n	80052a0 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8005692:	bf00      	nop
 8005694:	e00c      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                break;
 8005696:	bf00      	nop
 8005698:	e00a      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                        break;
 800569a:	bf00      	nop
 800569c:	e008      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                    break;
 800569e:	bf00      	nop
 80056a0:	e006      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80056a2:	bf00      	nop
 80056a4:	e004      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80056a6:	bf00      	nop
 80056a8:	e002      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80056ae:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d000      	beq.n	80056ba <lfs_dir_fetchmatch+0x5de>
 80056b8:	e016      	b.n	80056e8 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe fa1f 	bl	8003b00 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 80056c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c4:	3301      	adds	r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	bfb8      	it	lt
 80056ce:	425b      	neglt	r3, r3
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80056d6:	4413      	add	r3, r2
 80056d8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80056e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e2:	3301      	adds	r3, #1
 80056e4:	673b      	str	r3, [r7, #112]	; 0x70
 80056e6:	e0a1      	b.n	800582c <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2200      	movs	r2, #0
 80056ec:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d03a      	beq.n	800576c <lfs_dir_fetchmatch+0x690>
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056fe:	6992      	ldr	r2, [r2, #24]
 8005700:	fbb3 f1f2 	udiv	r1, r3, r2
 8005704:	fb02 f201 	mul.w	r2, r2, r1
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d12e      	bne.n	800576c <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800570e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02a      	beq.n	800576c <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800571c:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8005722:	69dd      	ldr	r5, [r3, #28]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	68d2      	ldr	r2, [r2, #12]
 800572c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800572e:	f107 001c 	add.w	r0, r7, #28
 8005732:	9003      	str	r0, [sp, #12]
 8005734:	9102      	str	r1, [sp, #8]
 8005736:	9201      	str	r2, [sp, #4]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	462b      	mov	r3, r5
 800573c:	4622      	mov	r2, r4
 800573e:	2100      	movs	r1, #0
 8005740:	6978      	ldr	r0, [r7, #20]
 8005742:	f7fe f80a 	bl	800375a <lfs_bd_crc>
 8005746:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <lfs_dir_fetchmatch+0x67e>
 800574e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005750:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005754:	d001      	beq.n	800575a <lfs_dir_fetchmatch+0x67e>
                    return err;
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	e07c      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800575a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2da      	uxtb	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	333c      	adds	r3, #60	; 0x3c
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fba5 	bl	8003ec4 <lfs_gstate_hasmovehere>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d028      	beq.n	80057d2 <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005784:	4618      	mov	r0, r3
 8005786:	f7fe fae1 	bl	8003d4c <lfs_tag_id>
 800578a:	4603      	mov	r3, r0
 800578c:	461c      	mov	r4, r3
 800578e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fadb 	bl	8003d4c <lfs_tag_id>
 8005796:	4603      	mov	r3, r0
 8005798:	429c      	cmp	r4, r3
 800579a:	d104      	bne.n	80057a6 <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 800579c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800579e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057a4:	e015      	b.n	80057d2 <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 80057a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d011      	beq.n	80057d2 <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe faca 	bl	8003d4c <lfs_tag_id>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461c      	mov	r4, r3
 80057bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fac4 	bl	8003d4c <lfs_tag_id>
 80057c4:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d203      	bcs.n	80057d2 <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 80057ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80057d0:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 80057d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80057da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe fab5 	bl	8003d4c <lfs_tag_id>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	8a9b      	ldrh	r3, [r3, #20]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7fd fd3b 	bl	8003268 <lfs_min>
 80057f2:	4603      	mov	r3, r0
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057fa:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 80057fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fa39 	bl	8003c76 <lfs_tag_isvalid>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <lfs_dir_fetchmatch+0x732>
            return besttag;
 800580a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800580c:	e022      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800580e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe fa9b 	bl	8003d4c <lfs_tag_id>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	8a9b      	ldrh	r3, [r3, #20]
 800581e:	429a      	cmp	r2, r3
 8005820:	d202      	bcs.n	8005828 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8005822:	f06f 0301 	mvn.w	r3, #1
 8005826:	e015      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8005828:	2300      	movs	r3, #0
 800582a:	e013      	b.n	8005854 <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 800582c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800582e:	2b01      	cmp	r3, #1
 8005830:	f77f ad02 	ble.w	8005238 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4908      	ldr	r1, [pc, #32]	; (8005860 <lfs_dir_fetchmatch+0x784>)
 800583e:	9101      	str	r1, [sp, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	f240 5242 	movw	r2, #1346	; 0x542
 8005848:	4906      	ldr	r1, [pc, #24]	; (8005864 <lfs_dir_fetchmatch+0x788>)
 800584a:	4807      	ldr	r0, [pc, #28]	; (8005868 <lfs_dir_fetchmatch+0x78c>)
 800584c:	f011 f844 	bl	80168d8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8005850:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8005854:	4618      	mov	r0, r3
 8005856:	3784      	adds	r7, #132	; 0x84
 8005858:	46bd      	mov	sp, r7
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585c:	7ffffc00 	.word	0x7ffffc00
 8005860:	080186b4 	.word	0x080186b4
 8005864:	080185ac 	.word	0x080185ac
 8005868:	080186c0 	.word	0x080186c0

0800586c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af04      	add	r7, sp, #16
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8005878:	2300      	movs	r3, #0
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	2300      	movs	r3, #0
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	2300      	movs	r3, #0
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fc22 	bl	80050dc <lfs_dir_fetchmatch>
 8005898:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <lfs_dir_getgstate+0x5c>)
 80058b8:	4a12      	ldr	r2, [pc, #72]	; (8005904 <lfs_dir_getgstate+0x60>)
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7fe feab 	bl	8004618 <lfs_dir_get>
 80058c2:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da05      	bge.n	80058d6 <lfs_dir_getgstate+0x32>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f113 0f02 	cmn.w	r3, #2
 80058d0:	d001      	beq.n	80058d6 <lfs_dir_getgstate+0x32>
        return res;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	e00f      	b.n	80058f6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f113 0f02 	cmn.w	r3, #2
 80058dc:	d00a      	beq.n	80058f4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fb0e 	bl	8003f04 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fe fa5d 	bl	8003dae <lfs_gstate_xor>
    }

    return 0;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	7ff0000c 	.word	0x7ff0000c
 8005904:	7ff00000 	.word	0x7ff00000

08005908 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800591e:	4293      	cmp	r3, r2
 8005920:	d10b      	bne.n	800593a <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	4932      	ldr	r1, [pc, #200]	; (80059f0 <lfs_dir_getinfo+0xe8>)
 8005928:	461a      	mov	r2, r3
 800592a:	460b      	mov	r3, r1
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2202      	movs	r2, #2
 8005934:	701a      	strb	r2, [r3, #0]
        return 0;
 8005936:	2300      	movs	r3, #0
 8005938:	e055      	b.n	80059e6 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	029a      	lsls	r2, r3, #10
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8005944:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	4a29      	ldr	r2, [pc, #164]	; (80059f4 <lfs_dir_getinfo+0xec>)
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7fe fe60 	bl	8004618 <lfs_dir_get>
 8005958:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	da01      	bge.n	8005964 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	e040      	b.n	80059e6 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe f9c6 	bl	8003cf8 <lfs_tag_type3>
 800596c:	4603      	mov	r3, r0
 800596e:	b2da      	uxtb	r2, r3
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800597c:	f043 0308 	orr.w	r3, r3, #8
 8005980:	f107 0214 	add.w	r2, r7, #20
 8005984:	9200      	str	r2, [sp, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <lfs_dir_getinfo+0xf0>)
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7fe fe44 	bl	8004618 <lfs_dir_get>
 8005990:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da01      	bge.n	800599c <lfs_dir_getinfo+0x94>
        return (int)tag;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	e024      	b.n	80059e6 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fb1f 	bl	8003fe4 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe f9a5 	bl	8003cf8 <lfs_tag_type3>
 80059ae:	4603      	mov	r3, r0
 80059b0:	461a      	mov	r2, r3
 80059b2:	f240 2302 	movw	r3, #514	; 0x202
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d103      	bne.n	80059c2 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	e010      	b.n	80059e4 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe f997 	bl	8003cf8 <lfs_tag_type3>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	f240 2301 	movw	r3, #513	; 0x201
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d106      	bne.n	80059e4 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fe f9c7 	bl	8003d6c <lfs_tag_size>
 80059de:	4602      	mov	r2, r0
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
    }

    return 0;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	08018700 	.word	0x08018700
 80059f4:	780ffc00 	.word	0x780ffc00
 80059f8:	700ffc00 	.word	0x700ffc00

080059fc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b08f      	sub	sp, #60	; 0x3c
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	689c      	ldr	r4, [r3, #8]
 8005a1a:	68b8      	ldr	r0, [r7, #8]
 8005a1c:	f7fe f9a6 	bl	8003d6c <lfs_tag_size>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4619      	mov	r1, r3
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7fd fc1f 	bl	8003268 <lfs_min>
 8005a2a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8005a2c:	6a3c      	ldr	r4, [r7, #32]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	6852      	ldr	r2, [r2, #4]
 8005a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	69b8      	ldr	r0, [r7, #24]
 8005a3c:	9003      	str	r0, [sp, #12]
 8005a3e:	9102      	str	r1, [sp, #8]
 8005a40:	9201      	str	r2, [sp, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	4622      	mov	r2, r4
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6a38      	ldr	r0, [r7, #32]
 8005a4c:	f7fd fe34 	bl	80036b8 <lfs_bd_cmp>
 8005a50:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <lfs_dir_find_match+0x60>
        return res;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	e014      	b.n	8005a86 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	689c      	ldr	r4, [r3, #8]
 8005a60:	68b8      	ldr	r0, [r7, #8]
 8005a62:	f7fe f983 	bl	8003d6c <lfs_tag_size>
 8005a66:	4603      	mov	r3, r0
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d00b      	beq.n	8005a84 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	689c      	ldr	r4, [r3, #8]
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f7fe f97b 	bl	8003d6c <lfs_tag_size>
 8005a76:	4603      	mov	r3, r0
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d201      	bcs.n	8005a80 <lfs_dir_find_match+0x84>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e002      	b.n	8005a86 <lfs_dir_find_match+0x8a>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e000      	b.n	8005a86 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	372c      	adds	r7, #44	; 0x2c
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}
	...

08005a90 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b093      	sub	sp, #76	; 0x4c
 8005a94:	af04      	add	r7, sp, #16
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005ab0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8005ab2:	4b6e      	ldr	r3, [pc, #440]	; (8005c6c <lfs_dir_find+0x1dc>)
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8005ac6:	496a      	ldr	r1, [pc, #424]	; (8005c70 <lfs_dir_find+0x1e0>)
 8005ac8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005aca:	f011 f815 	bl	8016af8 <strspn>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	4413      	add	r3, r2
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8005ad6:	4966      	ldr	r1, [pc, #408]	; (8005c70 <lfs_dir_find+0x1e0>)
 8005ad8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ada:	f010 fffc 	bl	8016ad6 <strcspn>
 8005ade:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d105      	bne.n	8005af2 <lfs_dir_find+0x62>
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	781a      	ldrb	r2, [r3, #0]
 8005aea:	4b62      	ldr	r3, [pc, #392]	; (8005c74 <lfs_dir_find+0x1e4>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d00a      	beq.n	8005b08 <lfs_dir_find+0x78>
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d10c      	bne.n	8005b12 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8005af8:	2202      	movs	r2, #2
 8005afa:	495f      	ldr	r1, [pc, #380]	; (8005c78 <lfs_dir_find+0x1e8>)
 8005afc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005afe:	f010 fb2f 	bl	8016160 <memcmp>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <lfs_dir_find+0x82>
            name += namelen;
 8005b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	4413      	add	r3, r2
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8005b10:	e7d9      	b.n	8005ac6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8005b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	4413      	add	r3, r2
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8005b1e:	4954      	ldr	r1, [pc, #336]	; (8005c70 <lfs_dir_find+0x1e0>)
 8005b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b22:	f010 ffe9 	bl	8016af8 <strspn>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	4413      	add	r3, r2
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8005b2e:	4950      	ldr	r1, [pc, #320]	; (8005c70 <lfs_dir_find+0x1e0>)
 8005b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b32:	f010 ffd0 	bl	8016ad6 <strcspn>
 8005b36:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01d      	beq.n	8005b7a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d112      	bne.n	8005b6a <lfs_dir_find+0xda>
 8005b44:	2202      	movs	r2, #2
 8005b46:	494c      	ldr	r1, [pc, #304]	; (8005c78 <lfs_dir_find+0x1e8>)
 8005b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4a:	f010 fb09 	bl	8016160 <memcmp>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <lfs_dir_find+0xda>
                depth -= 1;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d107      	bne.n	8005b70 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8005b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4413      	add	r3, r2
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8005b68:	e7ad      	b.n	8005ac6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8005b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	4413      	add	r3, r2
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8005b78:	e7d1      	b.n	8005b1e <lfs_dir_find+0x8e>
                break;
 8005b7a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <lfs_dir_find+0xf8>
            return tag;
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	e06c      	b.n	8005c62 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe f8b1 	bl	8003cf8 <lfs_tag_type3>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d002      	beq.n	8005ba2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8005b9c:	f06f 0313 	mvn.w	r3, #19
 8005ba0:	e05f      	b.n	8005c62 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe f8d1 	bl	8003d4c <lfs_tag_id>
 8005baa:	4603      	mov	r3, r0
 8005bac:	461a      	mov	r2, r3
 8005bae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d01c      	beq.n	8005bf0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe f8c7 	bl	8003d4c <lfs_tag_id>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bc6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005bce:	9200      	str	r2, [sp, #0]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <lfs_dir_find+0x1ec>)
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7fe fd1f 	bl	8004618 <lfs_dir_get>
 8005bda:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da01      	bge.n	8005be6 <lfs_dir_find+0x156>
                return res;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	e03d      	b.n	8005c62 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3318      	adds	r3, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f80f 	bl	8003c0e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8005bf6:	212f      	movs	r1, #47	; 0x2f
 8005bf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bfa:	f010 ff5f 	bl	8016abc <strchr>
 8005bfe:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <lfs_dir_find+0x178>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	e000      	b.n	8005c0a <lfs_dir_find+0x17a>
 8005c08:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	613a      	str	r2, [r7, #16]
 8005c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c10:	617a      	str	r2, [r7, #20]
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005c16:	f107 0210 	add.w	r2, r7, #16
 8005c1a:	9203      	str	r2, [sp, #12]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <lfs_dir_find+0x1f0>)
 8005c1e:	9202      	str	r2, [sp, #8]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fa54 	bl	80050dc <lfs_dir_fetchmatch>
 8005c34:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da01      	bge.n	8005c40 <lfs_dir_find+0x1b0>
                return tag;
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	e010      	b.n	8005c62 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8005c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	4413      	add	r3, r2
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8005c4e:	e73a      	b.n	8005ac6 <lfs_dir_find+0x36>
            if (!dir->split) {
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	7ddb      	ldrb	r3, [r3, #23]
 8005c54:	f083 0301 	eor.w	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c8      	beq.n	8005bf0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8005c5e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	373c      	adds	r7, #60	; 0x3c
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	002ffc00 	.word	0x002ffc00
 8005c70:	08018700 	.word	0x08018700
 8005c74:	08018704 	.word	0x08018704
 8005c78:	08018708 	.word	0x08018708
 8005c7c:	700ffc00 	.word	0x700ffc00
 8005c80:	080059fd 	.word	0x080059fd

08005c84 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f103 0010 	add.w	r0, r3, #16
 8005c98:	68fc      	ldr	r4, [r7, #12]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	6852      	ldr	r2, [r2, #4]
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	9103      	str	r1, [sp, #12]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	9102      	str	r1, [sp, #8]
 8005caa:	9201      	str	r2, [sp, #4]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fd fe45 	bl	8003944 <lfs_bd_prog>
 8005cba:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <lfs_dir_commitprog+0x42>
        return err;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	e010      	b.n	8005ce8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f004 fb3a 	bl	800a348 <lfs_crc>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	605a      	str	r2, [r3, #4]
    return 0;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd90      	pop	{r4, r7, pc}

08005cf0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b08f      	sub	sp, #60	; 0x3c
 8005cf4:	af04      	add	r7, sp, #16
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe f841 	bl	8003d86 <lfs_tag_dsize>
 8005d04:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d902      	bls.n	8005d1c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8005d16:	f06f 031b 	mvn.w	r3, #27
 8005d1a:	e065      	b.n	8005de8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	4053      	eors	r3, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd fb30 	bl	800338e <lfs_tobe32>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8005d32:	f107 0214 	add.w	r2, r7, #20
 8005d36:	2304      	movs	r3, #4
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff ffa2 	bl	8005c84 <lfs_dir_commitprog>
 8005d40:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <lfs_dir_commitattr+0x5c>
        return err;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	e04d      	b.n	8005de8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	db0c      	blt.n	8005d6c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff ff92 	bl	8005c84 <lfs_dir_commitprog>
 8005d60:	61f8      	str	r0, [r7, #28]
        if (err) {
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d039      	beq.n	8005ddc <lfs_dir_commitattr+0xec>
            return err;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	e03d      	b.n	8005de8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	e02d      	b.n	8005dd2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8005d76:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8005d7e:	1f1c      	subs	r4, r3, #4
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	440a      	add	r2, r1
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	9103      	str	r1, [sp, #12]
 8005d90:	f107 0113 	add.w	r1, r7, #19
 8005d94:	9102      	str	r1, [sp, #8]
 8005d96:	9201      	str	r2, [sp, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7fd fb3d 	bl	8003420 <lfs_bd_read>
 8005da6:	61f8      	str	r0, [r7, #28]
            if (err) {
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <lfs_dir_commitattr+0xc2>
                return err;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	e01a      	b.n	8005de8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8005db2:	f107 0213 	add.w	r2, r7, #19
 8005db6:	2301      	movs	r3, #1
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff ff62 	bl	8005c84 <lfs_dir_commitprog>
 8005dc0:	61f8      	str	r0, [r7, #28]
            if (err) {
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <lfs_dir_commitattr+0xdc>
                return err;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	e00d      	b.n	8005de8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	3301      	adds	r3, #1
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d3cc      	bcc.n	8005d76 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	609a      	str	r2, [r3, #8]
    return 0;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	372c      	adds	r7, #44	; 0x2c
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd90      	pop	{r4, r7, pc}

08005df0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b097      	sub	sp, #92	; 0x5c
 8005df4:	af04      	add	r7, sp, #16
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8005dfe:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fd fa2c 	bl	8003268 <lfs_min>
 8005e10:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fd fa49 	bl	80032b2 <lfs_alignup>
 8005e20:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8005e2a:	e0fe      	b.n	800602a <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	3b04      	subs	r3, #4
 8005e36:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fa14 	bl	8003268 <lfs_min>
 8005e40:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4413      	add	r3, r2
        lfs_off_t noff = (
 8005e48:	3304      	adds	r3, #4
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8005e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d206      	bcs.n	8005e62 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	3b14      	subs	r3, #20
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005e5c:	f7fd fa04 	bl	8003268 <lfs_min>
 8005e60:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8005e62:	23ff      	movs	r3, #255	; 0xff
 8005e64:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8005e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d35f      	bcc.n	8005f2e <lfs_dir_commitcrc+0x13e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d855      	bhi.n	8005f2e <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8005e82:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005e88:	6998      	ldr	r0, [r3, #24]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	9203      	str	r2, [sp, #12]
 8005e92:	f107 021b 	add.w	r2, r7, #27
 8005e96:	9202      	str	r2, [sp, #8]
 8005e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e9a:	9201      	str	r2, [sp, #4]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	460a      	mov	r2, r1
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fd fabb 	bl	8003420 <lfs_bd_read>
 8005eaa:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <lfs_dir_commitcrc+0xce>
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005eb8:	d001      	beq.n	8005ebe <lfs_dir_commitcrc+0xce>
                return err;
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	e101      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec2:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8005ecc:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 8005ed2:	699c      	ldr	r4, [r3, #24]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	f107 0108 	add.w	r1, r7, #8
 8005ede:	3104      	adds	r1, #4
 8005ee0:	9103      	str	r1, [sp, #12]
 8005ee2:	9202      	str	r2, [sp, #8]
 8005ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ee6:	9201      	str	r2, [sp, #4]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4623      	mov	r3, r4
 8005eec:	4602      	mov	r2, r0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fd fc32 	bl	800375a <lfs_bd_crc>
 8005ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <lfs_dir_commitcrc+0x11a>
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005f04:	d001      	beq.n	8005f0a <lfs_dir_commitcrc+0x11a>
                    return err;
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	e0db      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe f850 	bl	8003fb4 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4a6c      	ldr	r2, [pc, #432]	; (80060cc <lfs_dir_commitcrc+0x2dc>)
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fee7 	bl	8005cf0 <lfs_dir_commitattr>
 8005f22:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <lfs_dir_commitcrc+0x13e>
                    return err;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	e0c9      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8005f2e:	7efb      	ldrb	r3, [r7, #27]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3c:	051a      	lsls	r2, r3, #20
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f44:	1acb      	subs	r3, r1, r3
 8005f46:	3b04      	subs	r3, #4
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8005f4e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	4053      	eors	r3, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fd fa16 	bl	800338e <lfs_tobe32>
 8005f62:	4603      	mov	r3, r0
 8005f64:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f107 0110 	add.w	r1, r7, #16
 8005f6e:	2204      	movs	r2, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f004 f9e9 	bl	800a348 <lfs_crc>
 8005f76:	4602      	mov	r2, r0
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fd f9ec 	bl	800335e <lfs_tole32>
 8005f86:	4603      	mov	r3, r0
 8005f88:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f103 0010 	add.w	r0, r3, #16
 8005f90:	687c      	ldr	r4, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	9103      	str	r1, [sp, #12]
 8005f9e:	f107 0110 	add.w	r1, r7, #16
 8005fa2:	9102      	str	r1, [sp, #8]
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4622      	mov	r2, r4
 8005fac:	4601      	mov	r1, r0
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fd fcc8 	bl	8003944 <lfs_bd_prog>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <lfs_dir_commitcrc+0x1d0>
            return err;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	e080      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8005fda:	7efb      	ldrb	r3, [r7, #27]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	405a      	eors	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8005ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d208      	bcs.n	800600e <lfs_dir_commitcrc+0x21e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	4413      	add	r3, r2
 8006008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800600a:	429a      	cmp	r2, r3
 800600c:	d30d      	bcc.n	800602a <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 0110 	add.w	r1, r3, #16
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	2300      	movs	r3, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fd fc5f 	bl	80038dc <lfs_bd_sync>
 800601e:	6238      	str	r0, [r7, #32]
            if (err) {
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <lfs_dir_commitcrc+0x23a>
                return err;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	e04b      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006030:	429a      	cmp	r2, r3
 8006032:	f63f aefb 	bhi.w	8005e2c <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 800603c:	f04f 33ff 	mov.w	r3, #4294967295
 8006040:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006046:	1d1c      	adds	r4, r3, #4
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800604e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006050:	1a8a      	subs	r2, r1, r2
 8006052:	f107 011c 	add.w	r1, r7, #28
 8006056:	9103      	str	r1, [sp, #12]
 8006058:	9202      	str	r2, [sp, #8]
 800605a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605c:	9201      	str	r2, [sp, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4623      	mov	r3, r4
 8006062:	4602      	mov	r2, r0
 8006064:	2100      	movs	r1, #0
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fd fb77 	bl	800375a <lfs_bd_crc>
 800606c:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <lfs_dir_commitcrc+0x288>
        return err;
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	e024      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607c:	429a      	cmp	r2, r3
 800607e:	d002      	beq.n	8006086 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8006080:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006084:	e01d      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f107 021c 	add.w	r2, r7, #28
 8006090:	9203      	str	r2, [sp, #12]
 8006092:	2204      	movs	r2, #4
 8006094:	9202      	str	r2, [sp, #8]
 8006096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2304      	movs	r3, #4
 800609e:	460a      	mov	r2, r1
 80060a0:	2100      	movs	r1, #0
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fd fb59 	bl	800375a <lfs_bd_crc>
 80060a8:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <lfs_dir_commitcrc+0x2c4>
        return err;
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	e006      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80060ba:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80060be:	e000      	b.n	80060c2 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	374c      	adds	r7, #76	; 0x4c
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd90      	pop	{r4, r7, pc}
 80060ca:	bf00      	nop
 80060cc:	5ffffc08 	.word	0x5ffffc08

080060d0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e016      	b.n	800610e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	3301      	adds	r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	bfb8      	it	lt
 80060ec:	425b      	neglt	r3, r3
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	4413      	add	r3, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fe f926 	bl	8004348 <lfs_alloc>
 80060fc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <lfs_dir_alloc+0x38>
            return err;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	e058      	b.n	80061ba <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3301      	adds	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b01      	cmp	r3, #1
 8006112:	dde5      	ble.n	80060e0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006124:	2004      	movs	r0, #4
 8006126:	9003      	str	r0, [sp, #12]
 8006128:	9202      	str	r2, [sp, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	9201      	str	r2, [sp, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2304      	movs	r3, #4
 8006132:	460a      	mov	r2, r1
 8006134:	2100      	movs	r1, #0
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fd f972 	bl	8003420 <lfs_bd_read>
 800613c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd f900 	bl	8003348 <lfs_fromle32>
 8006148:	4602      	mov	r2, r0
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <lfs_dir_alloc+0x90>
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800615a:	d001      	beq.n	8006160 <lfs_dir_alloc+0x90>
        return err;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	e02c      	b.n	80061ba <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	dd0e      	ble.n	8006188 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	3301      	adds	r3, #1
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	4619      	mov	r1, r3
 800617c:	4610      	mov	r0, r2
 800617e:	f7fd f898 	bl	80032b2 <lfs_alignup>
 8006182:	4602      	mov	r2, r0
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2204      	movs	r2, #4
 800618c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f04f 32ff 	mov.w	r2, #4294967295
 80061a2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b092      	sub	sp, #72	; 0x48
 80061c6:	af04      	add	r7, sp, #16
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80061d0:	f107 0310 	add.w	r3, r7, #16
 80061d4:	4619      	mov	r1, r3
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff7a 	bl	80060d0 <lfs_dir_alloc>
 80061dc:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <lfs_dir_split+0x26>
        return err;
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	e03c      	b.n	8006262 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	7ddb      	ldrb	r3, [r3, #23]
 80061ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80061fc:	f107 0110 	add.w	r1, r7, #16
 8006200:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f879 	bl	800630c <lfs_dir_compact>
 800621a:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b00      	cmp	r3, #0
 8006220:	da01      	bge.n	8006226 <lfs_dir_split+0x64>
        return res;
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	e01d      	b.n	8006262 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2201      	movs	r2, #1
 8006236:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3320      	adds	r3, #32
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7fd fc8d 	bl	8003b60 <lfs_pair_cmp>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <lfs_dir_split+0x9e>
 800624c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3738      	adds	r7, #56	; 0x38
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800627a:	68b8      	ldr	r0, [r7, #8]
 800627c:	f7fd fd83 	bl	8003d86 <lfs_tag_dsize>
 8006280:	4602      	mov	r2, r0
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	441a      	add	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	601a      	str	r2, [r3, #0]
    return 0;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f7ff fd1d 	bl	8005cf0 <lfs_dir_commitattr>
 80062b6:	4603      	mov	r3, r0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dd11      	ble.n	80062f8 <lfs_dir_needsrelocation+0x38>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	3301      	adds	r3, #1
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e0:	3201      	adds	r2, #1
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80062ea:	fb02 f201 	mul.w	r2, r2, r1
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <lfs_dir_needsrelocation+0x38>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <lfs_dir_needsrelocation+0x3a>
 80062f8:	2300      	movs	r3, #0
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b0a4      	sub	sp, #144	; 0x90
 8006310:	af0a      	add	r7, sp, #40	; 0x28
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800631a:	2300      	movs	r3, #0
 800631c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff ffcc 	bl	80062c0 <lfs_dir_needsrelocation>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8006338:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00e      	beq.n	800635e <lfs_dir_compact+0x52>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	657a      	str	r2, [r7, #84]	; 0x54
 8006346:	2201      	movs	r2, #1
 8006348:	65ba      	str	r2, [r7, #88]	; 0x58
 800634a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800634e:	4611      	mov	r1, r2
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd fc05 	bl	8003b60 <lfs_pair_cmp>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8155 	bne.w	8006608 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	2300      	movs	r3, #0
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
 800636e:	f04f 33ff 	mov.w	r3, #4294967295
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48
 8006374:	2300      	movs	r3, #0
 8006376:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <lfs_dir_compact+0x80>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	3b08      	subs	r3, #8
 800638a:	e003      	b.n	8006394 <lfs_dir_compact+0x88>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006394:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4619      	mov	r1, r3
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7fd fb7d 	bl	8003a9c <lfs_bd_erase>
 80063a2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80063a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d006      	beq.n	80063b8 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80063aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80063b0:	f000 812c 	beq.w	800660c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80063b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b6:	e187      	b.n	80066c8 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fc ffce 	bl	800335e <lfs_tole32>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80063ce:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80063d2:	2304      	movs	r3, #4
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fc55 	bl	8005c84 <lfs_dir_commitprog>
 80063da:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fc ffb1 	bl	8003348 <lfs_fromle32>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
            if (err) {
 80063ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d006      	beq.n	8006400 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80063f8:	f000 810a 	beq.w	8006610 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80063fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fe:	e163      	b.n	80066c8 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8006400:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006404:	425b      	negs	r3, r3
 8006406:	b29b      	uxth	r3, r3
 8006408:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	637a      	str	r2, [r7, #52]	; 0x34
 800640e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006412:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8006414:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006418:	9208      	str	r2, [sp, #32]
 800641a:	4aad      	ldr	r2, [pc, #692]	; (80066d0 <lfs_dir_compact+0x3c4>)
 800641c:	9207      	str	r2, [sp, #28]
 800641e:	9306      	str	r3, [sp, #24]
 8006420:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	2300      	movs	r3, #0
 800642e:	9303      	str	r3, [sp, #12]
 8006430:	4ba8      	ldr	r3, [pc, #672]	; (80066d4 <lfs_dir_compact+0x3c8>)
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	2200      	movs	r2, #0
 8006442:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7fe fa39 	bl	80048bc <lfs_dir_traverse>
 800644a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 800644c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006454:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006458:	f000 80dc 	beq.w	8006614 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800645c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645e:	e133      	b.n	80066c8 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7fd fb60 	bl	8003b2a <lfs_pair_isnull>
 800646a:	4603      	mov	r3, r0
 800646c:	f083 0301 	eor.w	r3, r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d022      	beq.n	80064bc <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	3318      	adds	r3, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fbe1 	bl	8003c42 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	7ddb      	ldrb	r3, [r3, #23]
 8006484:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006488:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800648a:	4a93      	ldr	r2, [pc, #588]	; (80066d8 <lfs_dir_compact+0x3cc>)
 800648c:	431a      	orrs	r2, r3
                        dir->tail);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006492:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fc2a 	bl	8005cf0 <lfs_dir_commitattr>
 800649c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	3318      	adds	r3, #24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fbb3 	bl	8003c0e <lfs_pair_fromle32>
                if (err) {
 80064a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d006      	beq.n	80064bc <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80064ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80064b4:	f000 80b0 	beq.w	8006618 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80064b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ba:	e105      	b.n	80066c8 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80064bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	605a      	str	r2, [r3, #4]
 80064c6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80064c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80064dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fc63 	bl	8003dae <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd fc5a 	bl	8003dae <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006500:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f7fd fc51 	bl	8003dae <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800651c:	461a      	mov	r2, r3
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff f9bf 	bl	80058a4 <lfs_dir_getgstate>
 8006526:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <lfs_dir_compact+0x226>
                return err;
 800652e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006530:	e0ca      	b.n	80066c8 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd fc5e 	bl	8003df8 <lfs_gstate_iszero>
 800653c:	4603      	mov	r3, r0
 800653e:	f083 0301 	eor.w	r3, r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800654c:	4618      	mov	r0, r3
 800654e:	f7fd fcf9 	bl	8003f44 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006556:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800655a:	4a60      	ldr	r2, [pc, #384]	; (80066dc <lfs_dir_compact+0x3d0>)
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fbc7 	bl	8005cf0 <lfs_dir_commitattr>
 8006562:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800656a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006570:	d054      	beq.n	800661c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006574:	e0a8      	b.n	80066c8 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fc37 	bl	8005df0 <lfs_dir_commitcrc>
 8006582:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800658a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006590:	d046      	beq.n	8006620 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006594:	e098      	b.n	80066c8 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800659c:	6992      	ldr	r2, [r2, #24]
 800659e:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a2:	fb02 f201 	mul.w	r2, r2, r1
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <lfs_dir_compact+0x2ae>
 80065ac:	4b4c      	ldr	r3, [pc, #304]	; (80066e0 <lfs_dir_compact+0x3d4>)
 80065ae:	4a4d      	ldr	r2, [pc, #308]	; (80066e4 <lfs_dir_compact+0x3d8>)
 80065b0:	f240 71ef 	movw	r1, #2031	; 0x7ef
 80065b4:	484c      	ldr	r0, [pc, #304]	; (80066e8 <lfs_dir_compact+0x3dc>)
 80065b6:	f00f fd69 	bl	801608c <__assert_func>
            lfs_pair_swap(dir->pair);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fd fa9f 	bl	8003b00 <lfs_pair_swap>
            dir->count = end - begin;
 80065c2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80065c6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80065d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80065d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3348      	adds	r3, #72	; 0x48
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80065ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065ee:	f083 0301 	eor.w	r3, r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d064      	beq.n	80066c2 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	333c      	adds	r3, #60	; 0x3c
 80065fe:	3230      	adds	r2, #48	; 0x30
 8006600:	ca07      	ldmia	r2, {r0, r1, r2}
 8006602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8006606:	e05c      	b.n	80066c2 <lfs_dir_compact+0x3b6>
        goto relocate;
 8006608:	bf00      	nop
 800660a:	e00a      	b.n	8006622 <lfs_dir_compact+0x316>
                    goto relocate;
 800660c:	bf00      	nop
 800660e:	e008      	b.n	8006622 <lfs_dir_compact+0x316>
                    goto relocate;
 8006610:	bf00      	nop
 8006612:	e006      	b.n	8006622 <lfs_dir_compact+0x316>
                    goto relocate;
 8006614:	bf00      	nop
 8006616:	e004      	b.n	8006622 <lfs_dir_compact+0x316>
                        goto relocate;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <lfs_dir_compact+0x316>
                        goto relocate;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <lfs_dir_compact+0x316>
                    goto relocate;
 8006620:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3310      	adds	r3, #16
 800662c:	4619      	mov	r1, r3
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7fc fed0 	bl	80033d4 <lfs_cache_drop>
        if (!tired) {
 8006634:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4a29      	ldr	r2, [pc, #164]	; (80066ec <lfs_dir_compact+0x3e0>)
 8006648:	9200      	str	r2, [sp, #0]
 800664a:	f640 0201 	movw	r2, #2049	; 0x801
 800664e:	4926      	ldr	r1, [pc, #152]	; (80066e8 <lfs_dir_compact+0x3dc>)
 8006650:	4827      	ldr	r0, [pc, #156]	; (80066f0 <lfs_dir_compact+0x3e4>)
 8006652:	f010 f941 	bl	80168d8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	617a      	str	r2, [r7, #20]
 800665c:	2201      	movs	r2, #1
 800665e:	61ba      	str	r2, [r7, #24]
 8006660:	f107 0214 	add.w	r2, r7, #20
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7fd fa7a 	bl	8003b60 <lfs_pair_cmp>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <lfs_dir_compact+0x3e0>)
 8006678:	9200      	str	r2, [sp, #0]
 800667a:	f640 0206 	movw	r2, #2054	; 0x806
 800667e:	491a      	ldr	r1, [pc, #104]	; (80066e8 <lfs_dir_compact+0x3dc>)
 8006680:	481c      	ldr	r0, [pc, #112]	; (80066f4 <lfs_dir_compact+0x3e8>)
 8006682:	f010 f929 	bl	80168d8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8006686:	f06f 031b 	mvn.w	r3, #27
 800668a:	e01d      	b.n	80066c8 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7fd fe58 	bl	8004348 <lfs_alloc>
 8006698:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800669a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <lfs_dir_compact+0x3ae>
 80066a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a2:	f113 0f1c 	cmn.w	r3, #28
 80066a6:	d106      	bne.n	80066b6 <lfs_dir_compact+0x3aa>
 80066a8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066ac:	f083 0301 	eor.w	r3, r3, #1
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <lfs_dir_compact+0x3ae>
            return err;
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	e006      	b.n	80066c8 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 80066ba:	2300      	movs	r3, #0
 80066bc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80066c0:	e64d      	b.n	800635e <lfs_dir_compact+0x52>
        break;
 80066c2:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80066c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3768      	adds	r7, #104	; 0x68
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	08006297 	.word	0x08006297
 80066d4:	400ffc00 	.word	0x400ffc00
 80066d8:	000ffc08 	.word	0x000ffc08
 80066dc:	7ffffc0c 	.word	0x7ffffc0c
 80066e0:	0801870c 	.word	0x0801870c
 80066e4:	080193d8 	.word	0x080193d8
 80066e8:	080185ac 	.word	0x080185ac
 80066ec:	080186b4 	.word	0x080186b4
 80066f0:	08018734 	.word	0x08018734
 80066f4:	08018758 	.word	0x08018758

080066f8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80066f8:	b590      	push	{r4, r7, lr}
 80066fa:	b097      	sub	sp, #92	; 0x5c
 80066fc:	af0a      	add	r7, sp, #40	; 0x28
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8006706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800670c:	e058      	b.n	80067c0 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	b29b      	uxth	r3, r3
 8006716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006718:	b292      	uxth	r2, r2
 800671a:	4252      	negs	r2, r2
 800671c:	b292      	uxth	r2, r2
 800671e:	b212      	sxth	r2, r2
 8006720:	f107 0118 	add.w	r1, r7, #24
 8006724:	9108      	str	r1, [sp, #32]
 8006726:	4978      	ldr	r1, [pc, #480]	; (8006908 <lfs_dir_splittingcompact+0x210>)
 8006728:	9107      	str	r1, [sp, #28]
 800672a:	9206      	str	r2, [sp, #24]
 800672c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006730:	9205      	str	r2, [sp, #20]
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	2300      	movs	r3, #0
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	4b74      	ldr	r3, [pc, #464]	; (800690c <lfs_dir_splittingcompact+0x214>)
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	2200      	movs	r2, #0
 800674a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7fe f8b5 	bl	80048bc <lfs_dir_traverse>
 8006752:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <lfs_dir_splittingcompact+0x66>
                return err;
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	e0d0      	b.n	8006900 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 800675e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2bfe      	cmp	r3, #254	; 0xfe
 8006768:	d822      	bhi.n	80067b0 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676e:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006770:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	e003      	b.n	8006790 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 800678e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8006794:	6992      	ldr	r2, [r2, #24]
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7fc fd8a 	bl	80032b2 <lfs_alignup>
 800679e:	4603      	mov	r3, r0
 80067a0:	4619      	mov	r1, r3
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7fc fd60 	bl	8003268 <lfs_min>
 80067a8:	4602      	mov	r2, r0
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d20e      	bcs.n	80067ce <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80067b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067bc:	4413      	add	r3, r2
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80067c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d8a0      	bhi.n	800670e <lfs_dir_splittingcompact+0x16>
 80067cc:	e000      	b.n	80067d0 <lfs_dir_splittingcompact+0xd8>
                break;
 80067ce:	bf00      	nop
        }

        if (split == begin) {
 80067d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d02d      	beq.n	8006836 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80067e2:	9202      	str	r2, [sp, #8]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fce6 	bl	80061c2 <lfs_dir_split>
 80067f6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <lfs_dir_splittingcompact+0x112>
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	f113 0f1c 	cmn.w	r3, #28
 8006804:	d001      	beq.n	800680a <lfs_dir_splittingcompact+0x112>
            return err;
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	e07a      	b.n	8006900 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	493d      	ldr	r1, [pc, #244]	; (8006910 <lfs_dir_splittingcompact+0x218>)
 800681a:	9101      	str	r1, [sp, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	f640 0259 	movw	r2, #2137	; 0x859
 8006824:	493b      	ldr	r1, [pc, #236]	; (8006914 <lfs_dir_splittingcompact+0x21c>)
 8006826:	483c      	ldr	r0, [pc, #240]	; (8006918 <lfs_dir_splittingcompact+0x220>)
 8006828:	f010 f856 	bl	80168d8 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800682c:	e004      	b.n	8006838 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8006834:	e767      	b.n	8006706 <lfs_dir_splittingcompact+0xe>
            break;
 8006836:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fd40 	bl	80062c0 <lfs_dir_needsrelocation>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d04d      	beq.n	80068e2 <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	613a      	str	r2, [r7, #16]
 800684c:	2201      	movs	r2, #1
 800684e:	617a      	str	r2, [r7, #20]
 8006850:	f107 0210 	add.w	r2, r7, #16
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7fd f982 	bl	8003b60 <lfs_pair_cmp>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d13f      	bne.n	80068e2 <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f003 fbda 	bl	800a01c <lfs_fs_rawsize>
 8006868:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	2b00      	cmp	r3, #0
 800686e:	da01      	bge.n	8006874 <lfs_dir_splittingcompact+0x17c>
            return size;
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	e045      	b.n	8006900 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	085a      	lsrs	r2, r3, #1
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	429a      	cmp	r2, r3
 800687e:	d930      	bls.n	80068e2 <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <lfs_dir_splittingcompact+0x218>)
 8006886:	9200      	str	r2, [sp, #0]
 8006888:	f640 026d 	movw	r2, #2157	; 0x86d
 800688c:	4921      	ldr	r1, [pc, #132]	; (8006914 <lfs_dir_splittingcompact+0x21c>)
 800688e:	4823      	ldr	r0, [pc, #140]	; (800691c <lfs_dir_splittingcompact+0x224>)
 8006890:	f010 f822 	bl	80168d8 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff fc89 	bl	80061c2 <lfs_dir_split>
 80068b0:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <lfs_dir_splittingcompact+0x1cc>
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f113 0f1c 	cmn.w	r3, #28
 80068be:	d001      	beq.n	80068c4 <lfs_dir_splittingcompact+0x1cc>
                return err;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	e01d      	b.n	8006900 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 80068ca:	4b11      	ldr	r3, [pc, #68]	; (8006910 <lfs_dir_splittingcompact+0x218>)
 80068cc:	f640 0277 	movw	r2, #2167	; 0x877
 80068d0:	4910      	ldr	r1, [pc, #64]	; (8006914 <lfs_dir_splittingcompact+0x21c>)
 80068d2:	4813      	ldr	r0, [pc, #76]	; (8006920 <lfs_dir_splittingcompact+0x228>)
 80068d4:	f010 f800 	bl	80168d8 <iprintf>
 80068d8:	e003      	b.n	80068e2 <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 80068da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80068e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff fd07 	bl	800630c <lfs_dir_compact>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3734      	adds	r7, #52	; 0x34
 8006904:	46bd      	mov	sp, r7
 8006906:	bd90      	pop	{r4, r7, pc}
 8006908:	0800626b 	.word	0x0800626b
 800690c:	400ffc00 	.word	0x400ffc00
 8006910:	080186b4 	.word	0x080186b4
 8006914:	080185ac 	.word	0x080185ac
 8006918:	08018790 	.word	0x08018790
 800691c:	080187c0 	.word	0x080187c0
 8006920:	080187f0 	.word	0x080187f0

08006924 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8006924:	b5b0      	push	{r4, r5, r7, lr}
 8006926:	b0a6      	sub	sp, #152	; 0x98
 8006928:	af0a      	add	r7, sp, #40	; 0x28
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
    int state = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 800693c:	2300      	movs	r3, #0
 800693e:	667b      	str	r3, [r7, #100]	; 0x64
 8006940:	e06d      	b.n	8006a1e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8006942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4413      	add	r3, r2
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd f9d3 	bl	8003cf8 <lfs_tag_type3>
 8006952:	4603      	mov	r3, r0
 8006954:	461a      	mov	r2, r3
 8006956:	f240 4301 	movw	r3, #1025	; 0x401
 800695a:	429a      	cmp	r2, r3
 800695c:	d106      	bne.n	800696c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	8a9b      	ldrh	r3, [r3, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	829a      	strh	r2, [r3, #20]
 800696a:	e055      	b.n	8006a18 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	4413      	add	r3, r2
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd f9be 	bl	8003cf8 <lfs_tag_type3>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006984:	429a      	cmp	r2, r3
 8006986:	d114      	bne.n	80069b2 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	8a9b      	ldrh	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d106      	bne.n	800699e <lfs_dir_relocatingcommit+0x7a>
 8006990:	4ba4      	ldr	r3, [pc, #656]	; (8006c24 <lfs_dir_relocatingcommit+0x300>)
 8006992:	4aa5      	ldr	r2, [pc, #660]	; (8006c28 <lfs_dir_relocatingcommit+0x304>)
 8006994:	f640 018f 	movw	r1, #2191	; 0x88f
 8006998:	48a4      	ldr	r0, [pc, #656]	; (8006c2c <lfs_dir_relocatingcommit+0x308>)
 800699a:	f00f fb77 	bl	801608c <__assert_func>
            dir->count -= 1;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	8a9b      	ldrh	r3, [r3, #20]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80069aa:	2301      	movs	r3, #1
 80069ac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80069b0:	e032      	b.n	8006a18 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80069b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4413      	add	r3, r2
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fd f97b 	bl	8003cb8 <lfs_tag_type1>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069c8:	d126      	bne.n	8006a18 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80069ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4413      	add	r3, r2
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80069da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4413      	add	r3, r2
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80069ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fd f98f 	bl	8003d18 <lfs_tag_chunk>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	3318      	adds	r3, #24
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd f8fb 	bl	8003c0e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8006a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a24:	429a      	cmp	r2, r3
 8006a26:	db8c      	blt.n	8006942 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8006a28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02b      	beq.n	8006a88 <lfs_dir_relocatingcommit+0x164>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	8a9b      	ldrh	r3, [r3, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d127      	bne.n	8006a88 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8006a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <lfs_dir_relocatingcommit+0x12a>
 8006a40:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <lfs_dir_relocatingcommit+0x30c>)
 8006a42:	4a79      	ldr	r2, [pc, #484]	; (8006c28 <lfs_dir_relocatingcommit+0x304>)
 8006a44:	f640 019c 	movw	r1, #2204	; 0x89c
 8006a48:	4878      	ldr	r0, [pc, #480]	; (8006c2c <lfs_dir_relocatingcommit+0x308>)
 8006a4a:	f00f fb1f 	bl	801608c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006a54:	4619      	mov	r1, r3
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f002 fe3c 	bl	80096d4 <lfs_fs_pred>
 8006a5c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8006a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <lfs_dir_relocatingcommit+0x14c>
 8006a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a66:	f113 0f02 	cmn.w	r3, #2
 8006a6a:	d001      	beq.n	8006a70 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8006a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a6e:	e203      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8006a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a72:	f113 0f02 	cmn.w	r3, #2
 8006a76:	d007      	beq.n	8006a88 <lfs_dir_relocatingcommit+0x164>
 8006a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a7c:	7ddb      	ldrb	r3, [r3, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8006a82:	2302      	movs	r3, #2
 8006a84:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8006a86:	e121      	b.n	8006ccc <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	7d9b      	ldrb	r3, [r3, #22]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80fb 	beq.w	8006c88 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <lfs_dir_relocatingcommit+0x1a0>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac0:	3b08      	subs	r3, #8
 8006ac2:	e003      	b.n	8006acc <lfs_dir_relocatingcommit+0x1a8>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8006acc:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fd f8b5 	bl	8003c42 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8006aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aee:	9308      	str	r3, [sp, #32]
 8006af0:	4b50      	ldr	r3, [pc, #320]	; (8006c34 <lfs_dir_relocatingcommit+0x310>)
 8006af2:	9307      	str	r3, [sp, #28]
 8006af4:	2300      	movs	r3, #0
 8006af6:	9306      	str	r3, [sp, #24]
 8006af8:	2300      	movs	r3, #0
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	2300      	movs	r3, #0
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	2300      	movs	r3, #0
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	2300      	movs	r3, #0
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	460b      	mov	r3, r1
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7fd fed0 	bl	80048bc <lfs_dir_traverse>
 8006b1c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3318      	adds	r3, #24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd f873 	bl	8003c0e <lfs_pair_fromle32>
        if (err) {
 8006b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b30:	f113 0f1c 	cmn.w	r3, #28
 8006b34:	f000 80aa 	beq.w	8006c8c <lfs_dir_relocatingcommit+0x368>
 8006b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b3e:	f000 80a5 	beq.w	8006c8c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8006b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b44:	e198      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8006b46:	f107 031c 	add.w	r3, r7, #28
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b58:	f107 031c 	add.w	r3, r7, #28
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd f925 	bl	8003dae <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006b6a:	f107 031c 	add.w	r3, r7, #28
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fd f91c 	bl	8003dae <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	4611      	mov	r1, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fd f913 	bl	8003dae <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fd f92d 	bl	8003df8 <lfs_gstate_iszero>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f083 0301 	eor.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d027      	beq.n	8006bfa <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006baa:	f107 031c 	add.w	r3, r7, #28
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7fe fe76 	bl	80058a4 <lfs_dir_getgstate>
 8006bb8:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8006bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8006bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc2:	e159      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8006bc4:	f107 031c 	add.w	r3, r7, #28
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fd f9bb 	bl	8003f44 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8006bce:	f107 031c 	add.w	r3, r7, #28
 8006bd2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <lfs_dir_relocatingcommit+0x314>)
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff f889 	bl	8005cf0 <lfs_dir_commitattr>
 8006bde:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8006be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be8:	f113 0f1c 	cmn.w	r3, #28
 8006bec:	d050      	beq.n	8006c90 <lfs_dir_relocatingcommit+0x36c>
 8006bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006bf4:	d04c      	beq.n	8006c90 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8006bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf8:	e13e      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8006bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff f8f5 	bl	8005df0 <lfs_dir_commitcrc>
 8006c06:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8006c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8006c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c10:	f113 0f1c 	cmn.w	r3, #28
 8006c14:	d03e      	beq.n	8006c94 <lfs_dir_relocatingcommit+0x370>
 8006c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c1c:	d03a      	beq.n	8006c94 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c20:	e12a      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
 8006c22:	bf00      	nop
 8006c24:	0801881c 	.word	0x0801881c
 8006c28:	080193e8 	.word	0x080193e8
 8006c2c:	080185ac 	.word	0x080185ac
 8006c30:	0801882c 	.word	0x0801882c
 8006c34:	08006297 	.word	0x08006297
 8006c38:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c42:	6992      	ldr	r2, [r2, #24]
 8006c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c48:	fb02 f201 	mul.w	r2, r2, r1
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <lfs_dir_relocatingcommit+0x33c>
 8006c52:	4b8b      	ldr	r3, [pc, #556]	; (8006e80 <lfs_dir_relocatingcommit+0x55c>)
 8006c54:	4a8b      	ldr	r2, [pc, #556]	; (8006e84 <lfs_dir_relocatingcommit+0x560>)
 8006c56:	f640 01e6 	movw	r1, #2278	; 0x8e6
 8006c5a:	488b      	ldr	r0, [pc, #556]	; (8006e88 <lfs_dir_relocatingcommit+0x564>)
 8006c5c:	f00f fa16 	bl	801608c <__assert_func>
        dir->off = commit.off;
 8006c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8006c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	333c      	adds	r3, #60	; 0x3c
 8006c72:	3230      	adds	r2, #48	; 0x30
 8006c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3348      	adds	r3, #72	; 0x48
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	605a      	str	r2, [r3, #4]
 8006c84:	609a      	str	r2, [r3, #8]
 8006c86:	e021      	b.n	8006ccc <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8006c88:	bf00      	nop
 8006c8a:	e004      	b.n	8006c96 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8006c8c:	bf00      	nop
 8006c8e:	e002      	b.n	8006c96 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8006c94:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7fc fb99 	bl	80033d4 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	8a9b      	ldrh	r3, [r3, #20]
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fd1d 	bl	80066f8 <lfs_dir_splittingcompact>
 8006cbe:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da01      	bge.n	8006cca <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8006cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc8:	e0d6      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8006cca:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8006cde:	e0c6      	b.n	8006e6e <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8006ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fc ff38 	bl	8003b60 <lfs_pair_cmp>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 80b8 	bne.w	8006e68 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8006cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	f103 0408 	add.w	r4, r3, #8
 8006d00:	4615      	mov	r5, r2
 8006d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8006d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d10:	3308      	adds	r3, #8
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	f000 809d 	beq.w	8006e54 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d1e:	e07b      	b.n	8006e18 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fc ffe4 	bl	8003cf8 <lfs_tag_type3>
 8006d30:	4603      	mov	r3, r0
 8006d32:	461a      	mov	r2, r3
 8006d34:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d115      	bne.n	8006d68 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8006d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d3e:	889c      	ldrh	r4, [r3, #4]
 8006d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fc fffe 	bl	8003d4c <lfs_tag_id>
 8006d50:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d108      	bne.n	8006d68 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8006d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d58:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5c:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8006d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d60:	f04f 32ff 	mov.w	r2, #4294967295
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	e054      	b.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc ffc0 	bl	8003cf8 <lfs_tag_type3>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d11c      	bne.n	8006dbe <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8006d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d86:	889c      	ldrh	r4, [r3, #4]
 8006d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fc ffda 	bl	8003d4c <lfs_tag_id>
 8006d98:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8006d9a:	429c      	cmp	r4, r3
 8006d9c:	d90f      	bls.n	8006dbe <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8006d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da0:	889b      	ldrh	r3, [r3, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8006daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dac:	799b      	ldrb	r3, [r3, #6]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d12f      	bne.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8006db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	1e5a      	subs	r2, r3, #1
 8006db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8006dbc:	e029      	b.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fc ff95 	bl	8003cf8 <lfs_tag_type3>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f240 4301 	movw	r3, #1025	; 0x401
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d11b      	bne.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8006dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ddc:	889c      	ldrh	r4, [r3, #4]
 8006dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fc ffaf 	bl	8003d4c <lfs_tag_id>
 8006dee:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8006df0:	429c      	cmp	r4, r3
 8006df2:	d30e      	bcc.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8006df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df6:	889b      	ldrh	r3, [r3, #4]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dfe:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8006e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e02:	799b      	ldrb	r3, [r3, #6]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d104      	bne.n	8006e12 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8006e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e10:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8006e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e14:	3301      	adds	r3, #1
 8006e16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f6ff af7e 	blt.w	8006d20 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8006e24:	e016      	b.n	8006e54 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8006e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e28:	889a      	ldrh	r2, [r3, #4]
 8006e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e2c:	8b9b      	ldrh	r3, [r3, #28]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e34:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8006e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e38:	f103 0108 	add.w	r1, r3, #8
 8006e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3e:	3320      	adds	r3, #32
 8006e40:	461a      	mov	r2, r3
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7fe fd12 	bl	800586c <lfs_dir_fetch>
 8006e48:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8006e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e52:	e011      	b.n	8006e78 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8006e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e56:	889a      	ldrh	r2, [r3, #4]
 8006e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5a:	8b9b      	ldrh	r3, [r3, #28]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d303      	bcc.n	8006e68 <lfs_dir_relocatingcommit+0x544>
 8006e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e62:	7fdb      	ldrb	r3, [r3, #31]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1de      	bne.n	8006e26 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f af35 	bne.w	8006ce0 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8006e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3770      	adds	r7, #112	; 0x70
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e80:	0801870c 	.word	0x0801870c
 8006e84:	080193e8 	.word	0x080193e8
 8006e88:	080185ac 	.word	0x080185ac

08006e8c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8006e8c:	b5b0      	push	{r4, r5, r7, lr}
 8006e8e:	b0bc      	sub	sp, #240	; 0xf0
 8006e90:	af04      	add	r7, sp, #16
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ea2:	e045      	b.n	8006f30 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8006ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d03a      	beq.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
 8006eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fc fe50 	bl	8003b60 <lfs_pair_cmp>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d12f      	bne.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8006ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eca:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d12a      	bne.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8006ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d023      	beq.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8006ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d91b      	bls.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8006eee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f001 f900 	bl	80080f8 <lfs_file_outline>
 8006ef8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8006efc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8006f04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f08:	e2ad      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8006f0a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f001 f914 	bl	800813c <lfs_file_flush>
 8006f14:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8006f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8006f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f24:	e29f      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1b5      	bne.n	8006ea4 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006f4e:	461d      	mov	r5, r3
 8006f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8006f62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fcd8 	bl	8006924 <lfs_dir_relocatingcommit>
 8006f74:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8006f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	da02      	bge.n	8006f86 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8006f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f84:	e26f      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fc fde6 	bl	8003b60 <lfs_pair_cmp>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006faa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8006fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d14a      	bne.n	800704c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3348      	adds	r3, #72	; 0x48
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7fe fc70 	bl	80058a4 <lfs_dir_getgstate>
 8006fc4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8006fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8006fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fd4:	e247      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8006fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8006fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fc fe2b 	bl	8003c42 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	7ddb      	ldrb	r3, [r3, #23]
 8006ff0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006ff4:	051a      	lsls	r2, r3, #20
 8006ff6:	4bc2      	ldr	r3, [pc, #776]	; (8007300 <lfs_dir_orphaningcommit+0x474>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3318      	adds	r3, #24
 8007000:	66bb      	str	r3, [r7, #104]	; 0x68
 8007002:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007006:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800700a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800700e:	2000      	movs	r0, #0
 8007010:	9001      	str	r0, [sp, #4]
 8007012:	2001      	movs	r0, #1
 8007014:	9000      	str	r0, [sp, #0]
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fc84 	bl	8006924 <lfs_dir_relocatingcommit>
 800701c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3318      	adds	r3, #24
 8007024:	4618      	mov	r0, r3
 8007026:	f7fc fdf2 	bl	8003c0e <lfs_pair_fromle32>
        if (state < 0) {
 800702a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800702e:	2b00      	cmp	r3, #0
 8007030:	da02      	bge.n	8007038 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8007032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007036:	e216      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8007038:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800703c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8007052:	e1fc      	b.n	800744e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8007054:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800705c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007060:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007064:	4ca7      	ldr	r4, [pc, #668]	; (8007304 <lfs_dir_orphaningcommit+0x478>)
 8007066:	9403      	str	r4, [sp, #12]
 8007068:	9102      	str	r1, [sp, #8]
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4603      	mov	r3, r0
 8007070:	f44f 6217 	mov.w	r2, #2416	; 0x970
 8007074:	49a4      	ldr	r1, [pc, #656]	; (8007308 <lfs_dir_orphaningcommit+0x47c>)
 8007076:	48a5      	ldr	r0, [pc, #660]	; (800730c <lfs_dir_orphaningcommit+0x480>)
 8007078:	f00f fc2e 	bl	80168d8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f103 0220 	add.w	r2, r3, #32
 8007088:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7fc fd66 	bl	8003b60 <lfs_pair_cmp>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d107      	bne.n	80070aa <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800709a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80070a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070b2:	e037      	b.n	8007124 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80070b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070b8:	f103 0208 	add.w	r2, r3, #8
 80070bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fc fd4c 	bl	8003b60 <lfs_pair_cmp>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d109      	bne.n	80070e2 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80070ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80070d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070d6:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80070d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80070dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070e0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80070e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070e6:	799b      	ldrb	r3, [r3, #6]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d116      	bne.n	800711a <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80070ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070f0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80070f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fc fd30 	bl	8003b60 <lfs_pair_cmp>
 8007100:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8007106:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800710a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8007110:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800711a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007124:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1c3      	bne.n	80070b4 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800712c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007130:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007134:	4619      	mov	r1, r3
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f002 fb7e 	bl	8009838 <lfs_fs_parent>
 800713c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007144:	2b00      	cmp	r3, #0
 8007146:	da07      	bge.n	8007158 <lfs_dir_orphaningcommit+0x2cc>
 8007148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800714c:	f113 0f02 	cmn.w	r3, #2
 8007150:	d002      	beq.n	8007158 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8007152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007156:	e186      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8007158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800715c:	f113 0f02 	cmn.w	r3, #2
 8007160:	bf14      	ite	ne
 8007162:	2301      	movne	r3, #1
 8007164:	2300      	moveq	r3, #0
 8007166:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800716a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800716e:	f113 0f02 	cmn.w	r3, #2
 8007172:	f000 809e 	beq.w	80072b2 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8007176:	2101      	movs	r1, #1
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f002 fbf5 	bl	8009968 <lfs_fs_preporphans>
 800717e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8007182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <lfs_dir_orphaningcommit+0x304>
                return err;
 800718a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800718e:	e16a      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007190:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007194:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3330      	adds	r3, #48	; 0x30
 800719c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fc fe8e 	bl	8003ec4 <lfs_gstate_hasmovehere>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02d      	beq.n	800720a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fdca 	bl	8003d4c <lfs_tag_id>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80071be:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80071c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071c2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80071c6:	484f      	ldr	r0, [pc, #316]	; (8007304 <lfs_dir_orphaningcommit+0x478>)
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	460b      	mov	r3, r1
 80071d0:	f640 129d 	movw	r2, #2461	; 0x99d
 80071d4:	494c      	ldr	r1, [pc, #304]	; (8007308 <lfs_dir_orphaningcommit+0x47c>)
 80071d6:	484e      	ldr	r0, [pc, #312]	; (8007310 <lfs_dir_orphaningcommit+0x484>)
 80071d8:	f00f fb7e 	bl	80168d8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80071dc:	2200      	movs	r2, #0
 80071de:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f002 fc10 	bl	8009a08 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80071e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fc fdad 	bl	8003d4c <lfs_tag_id>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d205      	bcs.n	800720a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80071fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007202:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800720a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720c:	657b      	str	r3, [r7, #84]	; 0x54
 800720e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007210:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8007212:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007216:	4618      	mov	r0, r3
 8007218:	f7fc fd13 	bl	8003c42 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800721c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007220:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007224:	4293      	cmp	r3, r2
 8007226:	d007      	beq.n	8007238 <lfs_dir_orphaningcommit+0x3ac>
 8007228:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007232:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007236:	e000      	b.n	800723a <lfs_dir_orphaningcommit+0x3ae>
 8007238:	2300      	movs	r3, #0
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	2300      	movs	r3, #0
 800723e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007246:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800724a:	653b      	str	r3, [r7, #80]	; 0x50
 800724c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007250:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007254:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007258:	2000      	movs	r0, #0
 800725a:	9001      	str	r0, [sp, #4]
 800725c:	2002      	movs	r0, #2
 800725e:	9000      	str	r0, [sp, #0]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fb5f 	bl	8006924 <lfs_dir_relocatingcommit>
 8007266:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800726a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800726e:	4618      	mov	r0, r3
 8007270:	f7fc fccd 	bl	8003c0e <lfs_pair_fromle32>
            if (state < 0) {
 8007274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007278:	2b00      	cmp	r3, #0
 800727a:	da02      	bge.n	8007282 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800727c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007280:	e0f1      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8007282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007286:	2b01      	cmp	r3, #1
 8007288:	d113      	bne.n	80072b2 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800728a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800728c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8007290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8007296:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800729a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800729e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80072a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80072b0:	e0cd      	b.n	800744e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80072b2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80072b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f002 fa09 	bl	80096d4 <lfs_fs_pred>
 80072c2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80072c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <lfs_dir_orphaningcommit+0x452>
 80072ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072d2:	f113 0f02 	cmn.w	r3, #2
 80072d6:	d002      	beq.n	80072de <lfs_dir_orphaningcommit+0x452>
            return err;
 80072d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072dc:	e0c3      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80072de:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01a      	beq.n	800731c <lfs_dir_orphaningcommit+0x490>
 80072e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ea:	f113 0f02 	cmn.w	r3, #2
 80072ee:	d115      	bne.n	800731c <lfs_dir_orphaningcommit+0x490>
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <lfs_dir_orphaningcommit+0x488>)
 80072f2:	4a09      	ldr	r2, [pc, #36]	; (8007318 <lfs_dir_orphaningcommit+0x48c>)
 80072f4:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 80072f8:	4803      	ldr	r0, [pc, #12]	; (8007308 <lfs_dir_orphaningcommit+0x47c>)
 80072fa:	f00e fec7 	bl	801608c <__assert_func>
 80072fe:	bf00      	nop
 8007300:	000ffc08 	.word	0x000ffc08
 8007304:	080186b4 	.word	0x080186b4
 8007308:	080185ac 	.word	0x080185ac
 800730c:	08018834 	.word	0x08018834
 8007310:	08018870 	.word	0x08018870
 8007314:	080188b4 	.word	0x080188b4
 8007318:	08019404 	.word	0x08019404

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800731c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007320:	f113 0f02 	cmn.w	r3, #2
 8007324:	f000 8093 	beq.w	800744e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3330      	adds	r3, #48	; 0x30
 800732c:	4618      	mov	r0, r3
 800732e:	f7fc fd80 	bl	8003e32 <lfs_gstate_hasorphans>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d011      	beq.n	800735c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8007338:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800733c:	425b      	negs	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	b25b      	sxtb	r3, r3
 8007342:	4619      	mov	r1, r3
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f002 fb0f 	bl	8009968 <lfs_fs_preporphans>
 800734a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800734e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8007356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800735a:	e084      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800735c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007360:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3330      	adds	r3, #48	; 0x30
 8007368:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fc fda8 	bl	8003ec4 <lfs_gstate_hasmovehere>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01c      	beq.n	80073b4 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	4618      	mov	r0, r3
 8007380:	f7fc fce4 	bl	8003d4c <lfs_tag_id>
 8007384:	4603      	mov	r3, r0
 8007386:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800738a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800738c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8007392:	4837      	ldr	r0, [pc, #220]	; (8007470 <lfs_dir_orphaningcommit+0x5e4>)
 8007394:	9002      	str	r0, [sp, #8]
 8007396:	9201      	str	r2, [sp, #4]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	460b      	mov	r3, r1
 800739c:	f640 12d1 	movw	r2, #2513	; 0x9d1
 80073a0:	4934      	ldr	r1, [pc, #208]	; (8007474 <lfs_dir_orphaningcommit+0x5e8>)
 80073a2:	4835      	ldr	r0, [pc, #212]	; (8007478 <lfs_dir_orphaningcommit+0x5ec>)
 80073a4:	f00f fa98 	bl	80168d8 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80073a8:	2200      	movs	r2, #0
 80073aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f002 fb2a 	bl	8009a08 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80073b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80073ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80073c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fc fc3c 	bl	8003c42 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80073ca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80073ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <lfs_dir_orphaningcommit+0x55a>
 80073d6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80073e0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80073e4:	e000      	b.n	80073e8 <lfs_dir_orphaningcommit+0x55c>
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	2300      	movs	r3, #0
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80073f2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80073f6:	051a      	lsls	r2, r3, #20
 80073f8:	4b20      	ldr	r3, [pc, #128]	; (800747c <lfs_dir_orphaningcommit+0x5f0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007402:	633b      	str	r3, [r7, #48]	; 0x30
 8007404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007408:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800740c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007410:	2000      	movs	r0, #0
 8007412:	9001      	str	r0, [sp, #4]
 8007414:	2002      	movs	r0, #2
 8007416:	9000      	str	r0, [sp, #0]
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f7ff fa83 	bl	8006924 <lfs_dir_relocatingcommit>
 800741e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007422:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc fbf1 	bl	8003c0e <lfs_pair_fromle32>
            if (state < 0) {
 800742c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007430:	2b00      	cmp	r3, #0
 8007432:	da02      	bge.n	800743a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8007434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007438:	e015      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800743a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800743e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007446:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800744a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800744e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007452:	2b01      	cmp	r3, #1
 8007454:	f43f adfe 	beq.w	8007054 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007458:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <lfs_dir_orphaningcommit+0x5d8>
 8007460:	2303      	movs	r3, #3
 8007462:	e000      	b.n	8007466 <lfs_dir_orphaningcommit+0x5da>
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	37e0      	adds	r7, #224	; 0xe0
 800746a:	46bd      	mov	sp, r7
 800746c:	bdb0      	pop	{r4, r5, r7, pc}
 800746e:	bf00      	nop
 8007470:	080186b4 	.word	0x080186b4
 8007474:	080185ac 	.word	0x080185ac
 8007478:	08018870 	.word	0x08018870
 800747c:	000ffc08 	.word	0x000ffc08

08007480 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff fcf9 	bl	8006e8c <lfs_dir_orphaningcommit>
 800749a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da01      	bge.n	80074a6 <lfs_dir_commit+0x26>
        return orphans;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	e00d      	b.n	80074c2 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80074ac:	2100      	movs	r1, #0
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f002 fbcc 	bl	8009c4c <lfs_fs_deorphan>
 80074b4:	6138      	str	r0, [r7, #16]
        if (err) {
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <lfs_dir_commit+0x40>
            return err;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	e000      	b.n	80074c2 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
	...

080074cc <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b08d      	sub	sp, #52	; 0x34
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f103 0108 	add.w	r1, r3, #8
 80074de:	1d3a      	adds	r2, r7, #4
 80074e0:	2300      	movs	r3, #0
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7fe fad4 	bl	8005a90 <lfs_dir_find>
 80074e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da01      	bge.n	80074f4 <lfs_dir_rawopen+0x28>
        return tag;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	e05e      	b.n	80075b2 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fc fbfe 	bl	8003cf8 <lfs_tag_type3>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d002      	beq.n	8007508 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8007502:	f06f 0313 	mvn.w	r3, #19
 8007506:	e054      	b.n	80075b2 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f7fc fc1e 	bl	8003d4c <lfs_tag_id>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007518:	429a      	cmp	r2, r3
 800751a:	d106      	bne.n	800752a <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e01f      	b.n	800756a <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fc fc0a 	bl	8003d4c <lfs_tag_id>
 8007538:	4603      	mov	r3, r0
 800753a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800753c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007540:	f043 0308 	orr.w	r3, r3, #8
 8007544:	f107 0214 	add.w	r2, r7, #20
 8007548:	9200      	str	r2, [sp, #0]
 800754a:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <lfs_dir_rawopen+0xf0>)
 800754c:	4621      	mov	r1, r4
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f7fd f862 	bl	8004618 <lfs_dir_get>
 8007554:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2b00      	cmp	r3, #0
 800755a:	da01      	bge.n	8007560 <lfs_dir_rawopen+0x94>
            return res;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	e028      	b.n	80075b2 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4618      	mov	r0, r3
 8007566:	f7fc fb52 	bl	8003c0e <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	3308      	adds	r3, #8
 800756e:	f107 0214 	add.w	r2, r7, #20
 8007572:	4619      	mov	r1, r3
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7fe f979 	bl	800586c <lfs_dir_fetch>
 800757a:	61f8      	str	r0, [r7, #28]
    if (err) {
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <lfs_dir_rawopen+0xba>
        return err;
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	e015      	b.n	80075b2 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2202      	movs	r2, #2
 80075a6:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7fc fdf9 	bl	80041a2 <lfs_mlist_append>

    return 0;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	372c      	adds	r7, #44	; 0x2c
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	bf00      	nop
 80075bc:	700ffc00 	.word	0x700ffc00

080075c0 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fc fdc6 	bl	800415e <lfs_mlist_remove>

    return 0;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80075e8:	f44f 7284 	mov.w	r2, #264	; 0x108
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f00e fdd2 	bl	8016198 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d110      	bne.n	800761e <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3308      	adds	r3, #8
 8007606:	4935      	ldr	r1, [pc, #212]	; (80076dc <lfs_dir_rawread+0x100>)
 8007608:	461a      	mov	r2, r3
 800760a:	460b      	mov	r3, r1
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800761a:	2301      	movs	r3, #1
 800761c:	e05a      	b.n	80076d4 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	2b01      	cmp	r3, #1
 8007624:	d110      	bne.n	8007648 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3308      	adds	r3, #8
 8007630:	4a2b      	ldr	r2, [pc, #172]	; (80076e0 <lfs_dir_rawread+0x104>)
 8007632:	8811      	ldrh	r1, [r2, #0]
 8007634:	7892      	ldrb	r2, [r2, #2]
 8007636:	8019      	strh	r1, [r3, #0]
 8007638:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8007644:	2301      	movs	r3, #1
 8007646:	e045      	b.n	80076d4 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	889a      	ldrh	r2, [r3, #4]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	8b9b      	ldrh	r3, [r3, #28]
 8007650:	429a      	cmp	r2, r3
 8007652:	d11a      	bne.n	800768a <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	7fdb      	ldrb	r3, [r3, #31]
 8007658:	f083 0301 	eor.w	r3, r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <lfs_dir_rawread+0x8a>
                return false;
 8007662:	2300      	movs	r3, #0
 8007664:	e036      	b.n	80076d4 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f103 0108 	add.w	r1, r3, #8
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	3320      	adds	r3, #32
 8007670:	461a      	mov	r2, r3
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7fe f8fa 	bl	800586c <lfs_dir_fetch>
 8007678:	6178      	str	r0, [r7, #20]
            if (err) {
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <lfs_dir_rawread+0xa8>
                return err;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	e027      	b.n	80076d4 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f103 0108 	add.w	r1, r3, #8
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	889a      	ldrh	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7fe f936 	bl	8005908 <lfs_dir_getinfo>
 800769c:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <lfs_dir_rawread+0xd4>
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f113 0f02 	cmn.w	r3, #2
 80076aa:	d001      	beq.n	80076b0 <lfs_dir_rawread+0xd4>
            return err;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	e011      	b.n	80076d4 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	889b      	ldrh	r3, [r3, #4]
 80076b4:	3301      	adds	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f113 0f02 	cmn.w	r3, #2
 80076c2:	d100      	bne.n	80076c6 <lfs_dir_rawread+0xea>
    while (true) {
 80076c4:	e7c0      	b.n	8007648 <lfs_dir_rawread+0x6c>
            break;
 80076c6:	bf00      	nop
        }
    }

    dir->pos += 1;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80076d2:	2301      	movs	r3, #1
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	08018704 	.word	0x08018704
 80076e0:	08018708 	.word	0x08018708

080076e4 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	3b08      	subs	r3, #8
 80076fc:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	fbb2 f3f3 	udiv	r3, r2, r3
 8007706:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <lfs_ctz_index+0x2e>
        return 0;
 800770e:	2300      	movs	r3, #0
 8007710:	e01c      	b.n	800774c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b01      	subs	r3, #1
 8007716:	4618      	mov	r0, r3
 8007718:	f7fb fdfc 	bl	8003314 <lfs_popc>
 800771c:	4603      	mov	r3, r0
 800771e:	3302      	adds	r3, #2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	1ad4      	subs	r4, r2, r3
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7fb fdea 	bl	8003314 <lfs_popc>
 8007740:	4603      	mov	r3, r0
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	1ae2      	subs	r2, r4, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	601a      	str	r2, [r3, #0]
    return i;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	4618      	mov	r0, r3
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd90      	pop	{r4, r7, pc}

08007754 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b08f      	sub	sp, #60	; 0x3c
 8007758:	af04      	add	r7, sp, #16
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d108      	bne.n	800777a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776a:	f04f 32ff 	mov.w	r2, #4294967295
 800776e:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
        return 0;
 8007776:	2300      	movs	r3, #0
 8007778:	e053      	b.n	8007822 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	3b01      	subs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	f107 0314 	add.w	r3, r7, #20
 8007784:	4619      	mov	r1, r3
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff ffac 	bl	80076e4 <lfs_ctz_index>
 800778c:	4603      	mov	r3, r0
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007790:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007794:	4619      	mov	r1, r3
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff ffa4 	bl	80076e4 <lfs_ctz_index>
 800779c:	4603      	mov	r3, r0
 800779e:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80077a0:	e034      	b.n	800780c <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	3301      	adds	r3, #1
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fb fd93 	bl	80032d6 <lfs_npw2>
 80077b0:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80077b2:	1e5c      	subs	r4, r3, #1
 80077b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077b6:	f7fb fd9e 	bl	80032f6 <lfs_ctz>
 80077ba:	4603      	mov	r3, r0
 80077bc:	4619      	mov	r1, r3
 80077be:	4620      	mov	r0, r4
 80077c0:	f7fb fd52 	bl	8003268 <lfs_min>
 80077c4:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	2104      	movs	r1, #4
 80077ce:	9103      	str	r1, [sp, #12]
 80077d0:	4639      	mov	r1, r7
 80077d2:	9102      	str	r1, [sp, #8]
 80077d4:	9201      	str	r2, [sp, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2304      	movs	r3, #4
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7fb fe1e 	bl	8003420 <lfs_bd_read>
 80077e4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fb fdad 	bl	8003348 <lfs_fromle32>
 80077ee:	4603      	mov	r3, r0
 80077f0:	603b      	str	r3, [r7, #0]
        if (err) {
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <lfs_ctz_find+0xa8>
            return err;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	e012      	b.n	8007822 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80077fc:	2201      	movs	r2, #1
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	461a      	mov	r2, r3
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	429a      	cmp	r2, r3
 8007812:	d8c6      	bhi.n	80077a2 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
    *off = pos;
 800781a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800781c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800781e:	601a      	str	r2, [r3, #0]
    return 0;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	372c      	adds	r7, #44	; 0x2c
 8007826:	46bd      	mov	sp, r7
 8007828:	bd90      	pop	{r4, r7, pc}
	...

0800782c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b092      	sub	sp, #72	; 0x48
 8007830:	af04      	add	r7, sp, #16
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800783a:	f107 0320 	add.w	r3, r7, #32
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7fc fd81 	bl	8004348 <lfs_alloc>
 8007846:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <lfs_ctz_extend+0x26>
            return err;
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	e0e9      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	4619      	mov	r1, r3
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7fc f920 	bl	8003a9c <lfs_bd_erase>
 800785c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800786a:	f000 80cb 	beq.w	8007a04 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	e0d9      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8007872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	d107      	bne.n	8007888 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787c:	601a      	str	r2, [r3, #0]
                *off = 0;
 800787e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
                return 0;
 8007884:	2300      	movs	r3, #0
 8007886:	e0ce      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8007888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788a:	3b01      	subs	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800788e:	f107 031c 	add.w	r3, r7, #28
 8007892:	4619      	mov	r1, r3
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff25 	bl	80076e4 <lfs_ctz_index>
 800789a:	4603      	mov	r3, r0
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a8:	69da      	ldr	r2, [r3, #28]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d044      	beq.n	800793a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80078b0:	2300      	movs	r3, #0
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
 80078b4:	e035      	b.n	8007922 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	2301      	movs	r3, #1
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	f107 0317 	add.w	r3, r7, #23
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	2100      	movs	r1, #0
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7fb fda3 	bl	8003420 <lfs_bd_read>
 80078da:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <lfs_ctz_extend+0xba>
                        return err;
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	e09f      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	2201      	movs	r2, #1
 80078ea:	9203      	str	r2, [sp, #12]
 80078ec:	f107 0217 	add.w	r2, r7, #23
 80078f0:	9202      	str	r2, [sp, #8]
 80078f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2301      	movs	r3, #1
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7fc f820 	bl	8003944 <lfs_bd_prog>
 8007904:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007912:	d101      	bne.n	8007918 <lfs_ctz_extend+0xec>
                            goto relocate;
 8007914:	bf00      	nop
                    goto relocate;
 8007916:	e075      	b.n	8007a04 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800791a:	e084      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	3301      	adds	r3, #1
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007926:	429a      	cmp	r2, r3
 8007928:	d3c5      	bcc.n	80078b6 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800792a:	6a3a      	ldr	r2, [r7, #32]
 800792c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800792e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007934:	601a      	str	r2, [r3, #0]
                return 0;
 8007936:	2300      	movs	r3, #0
 8007938:	e075      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	3301      	adds	r3, #1
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f7fb fcd8 	bl	80032f6 <lfs_ctz>
 8007946:	4603      	mov	r3, r0
 8007948:	3301      	adds	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8007950:	2300      	movs	r3, #0
 8007952:	633b      	str	r3, [r7, #48]	; 0x30
 8007954:	e049      	b.n	80079ea <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb fd00 	bl	800335e <lfs_tole32>
 800795e:	4603      	mov	r3, r0
 8007960:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	2104      	movs	r1, #4
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	f107 0118 	add.w	r1, r7, #24
 8007970:	9102      	str	r1, [sp, #8]
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2301      	movs	r3, #1
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7fb ffe1 	bl	8003944 <lfs_bd_prog>
 8007982:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fb fcde 	bl	8003348 <lfs_fromle32>
 800798c:	4603      	mov	r3, r0
 800798e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800799c:	d034      	beq.n	8007a08 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	e041      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	3b01      	subs	r3, #1
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d01b      	beq.n	80079e4 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b0:	0092      	lsls	r2, r2, #2
 80079b2:	2104      	movs	r1, #4
 80079b4:	9103      	str	r1, [sp, #12]
 80079b6:	f107 0118 	add.w	r1, r7, #24
 80079ba:	9102      	str	r1, [sp, #8]
 80079bc:	9201      	str	r2, [sp, #4]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2304      	movs	r3, #4
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	2100      	movs	r1, #0
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7fb fd2a 	bl	8003420 <lfs_bd_read>
 80079cc:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fb fcb9 	bl	8003348 <lfs_fromle32>
 80079d6:	4603      	mov	r3, r0
 80079d8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <lfs_ctz_extend+0x1b8>
                        return err;
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	e020      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	3301      	adds	r3, #1
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30
 80079ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d3b1      	bcc.n	8007956 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f6:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	009a      	lsls	r2, r3, #2
 80079fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fe:	601a      	str	r2, [r3, #0]
            return 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e010      	b.n	8007a26 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <lfs_ctz_extend+0x1de>
                        goto relocate;
 8007a08:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <lfs_ctz_extend+0x204>)
 8007a0e:	9200      	str	r2, [sp, #0]
 8007a10:	f640 328a 	movw	r2, #2954	; 0xb8a
 8007a14:	4907      	ldr	r1, [pc, #28]	; (8007a34 <lfs_ctz_extend+0x208>)
 8007a16:	4808      	ldr	r0, [pc, #32]	; (8007a38 <lfs_ctz_extend+0x20c>)
 8007a18:	f00e ff5e 	bl	80168d8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7fb fcd8 	bl	80033d4 <lfs_cache_drop>
    while (true) {
 8007a24:	e709      	b.n	800783a <lfs_ctz_extend+0xe>
    }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3738      	adds	r7, #56	; 0x38
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	080186b4 	.word	0x080186b4
 8007a34:	080185ac 	.word	0x080185ac
 8007a38:	08018734 	.word	0x08018734

08007a3c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b090      	sub	sp, #64	; 0x40
 8007a40:	af04      	add	r7, sp, #16
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <lfs_ctz_traverse+0x18>
        return 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e06d      	b.n	8007b30 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	3b01      	subs	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	f107 031c 	add.w	r3, r7, #28
 8007a5e:	4619      	mov	r1, r3
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fe3f 	bl	80076e4 <lfs_ctz_index>
 8007a66:	4603      	mov	r3, r0
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8007a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a70:	4798      	blx	r3
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <lfs_ctz_traverse+0x42>
            return err;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	e058      	b.n	8007b30 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <lfs_ctz_traverse+0x4c>
            return 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e053      	b.n	8007b30 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	f1c3 0302 	rsb	r3, r3, #2
 8007a92:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8007a94:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8007a96:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8007a98:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8007a9a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	f107 0314 	add.w	r3, r7, #20
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7fb fcb4 	bl	8003420 <lfs_bd_read>
 8007ab8:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fb fc43 	bl	8003348 <lfs_fromle32>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fb fc3d 	bl	8003348 <lfs_fromle32>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	61bb      	str	r3, [r7, #24]
        if (err) {
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <lfs_ctz_traverse+0xa0>
            return err;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	e029      	b.n	8007b30 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8007adc:	2300      	movs	r3, #0
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae0:	e013      	b.n	8007b0a <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007aea:	4413      	add	r3, r2
 8007aec:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8007af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af2:	4611      	mov	r1, r2
 8007af4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007af6:	4798      	blx	r3
 8007af8:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <lfs_ctz_traverse+0xc8>
                return err;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	e015      	b.n	8007b30 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	3301      	adds	r3, #1
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b10:	429a      	cmp	r2, r3
 8007b12:	dbe6      	blt.n	8007ae2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007b1e:	4413      	add	r3, r2
 8007b20:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007b24:	603b      	str	r3, [r7, #0]
        index -= count;
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8007b2e:	e79c      	b.n	8007a6a <lfs_ctz_traverse+0x2e>
    }
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3730      	adds	r7, #48	; 0x30
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8007b38:	b5b0      	push	{r4, r5, r7, lr}
 8007b3a:	b09a      	sub	sp, #104	; 0x68
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f002 fa2b 	bl	8009fac <lfs_fs_forceconsistency>
 8007b56:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8007b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <lfs_file_rawopencfg+0x2a>
            return err;
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b60:	e1b0      	b.n	8007ec4 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b66:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f103 0108 	add.w	r1, r3, #8
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	1d3a      	adds	r2, r7, #4
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7fd ff7f 	bl	8005a90 <lfs_dir_find>
 8007b92:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8007b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da0c      	bge.n	8007bb4 <lfs_file_rawopencfg+0x7c>
 8007b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b9c:	f113 0f02 	cmn.w	r3, #2
 8007ba0:	d105      	bne.n	8007bae <lfs_file_rawopencfg+0x76>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	889b      	ldrh	r3, [r3, #4]
 8007ba6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d102      	bne.n	8007bb4 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8007bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007bb2:	e17c      	b.n	8007eae <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7fc faf0 	bl	80041a2 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc4:	f113 0f02 	cmn.w	r3, #2
 8007bc8:	d14e      	bne.n	8007c68 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8007bd4:	f06f 0301 	mvn.w	r3, #1
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007bda:	e168      	b.n	8007eae <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7f8 fb10 	bl	8000204 <strlen>
 8007be4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d903      	bls.n	8007bf8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8007bf0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007bf6:	e15a      	b.n	8007eae <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f103 0108 	add.w	r1, r3, #8
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	889b      	ldrh	r3, [r3, #4]
 8007c02:	029b      	lsls	r3, r3, #10
 8007c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	2300      	movs	r3, #0
 8007c10:	633b      	str	r3, [r7, #48]	; 0x30
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	889b      	ldrh	r3, [r3, #4]
 8007c16:	029a      	lsls	r2, r3, #10
 8007c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	889b      	ldrh	r3, [r3, #4]
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c36:	2300      	movs	r3, #0
 8007c38:	643b      	str	r3, [r7, #64]	; 0x40
 8007c3a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007c3e:	2303      	movs	r3, #3
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fc1d 	bl	8007480 <lfs_dir_commit>
 8007c46:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8007c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4a:	f113 0f1c 	cmn.w	r3, #28
 8007c4e:	d001      	beq.n	8007c54 <lfs_file_rawopencfg+0x11c>
 8007c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c52:	e001      	b.n	8007c58 <lfs_file_rawopencfg+0x120>
 8007c54:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007c58:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 8125 	bne.w	8007eac <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8007c62:	4b9a      	ldr	r3, [pc, #616]	; (8007ecc <lfs_file_rawopencfg+0x394>)
 8007c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c66:	e044      	b.n	8007cf2 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8007c72:	f06f 0310 	mvn.w	r3, #16
 8007c76:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007c78:	e119      	b.n	8007eae <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8007c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fc f83b 	bl	8003cf8 <lfs_tag_type3>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d003      	beq.n	8007c90 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8007c88:	f06f 0314 	mvn.w	r3, #20
 8007c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007c8e:	e10e      	b.n	8007eae <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	029b      	lsls	r3, r3, #10
 8007ca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ca8:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb6:	e01c      	b.n	8007cf2 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	889b      	ldrh	r3, [r3, #4]
 8007cc2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cc8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8007cd0:	9200      	str	r2, [sp, #0]
 8007cd2:	4a7f      	ldr	r2, [pc, #508]	; (8007ed0 <lfs_file_rawopencfg+0x398>)
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7fc fc9f 	bl	8004618 <lfs_dir_get>
 8007cda:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8007cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da02      	bge.n	8007ce8 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8007ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007ce6:	e0e2      	b.n	8007eae <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	3328      	adds	r3, #40	; 0x28
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fc f979 	bl	8003fe4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8007cf6:	e063      	b.n	8007dc0 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d03c      	beq.n	8007d7e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0e:	6859      	ldr	r1, [r3, #4]
 8007d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d22:	051a      	lsls	r2, r3, #20
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	889b      	ldrh	r3, [r3, #4]
 8007d28:	029b      	lsls	r3, r3, #10
 8007d2a:	ea42 0103 	orr.w	r1, r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d32:	6858      	ldr	r0, [r3, #4]
 8007d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d36:	4613      	mov	r3, r2
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4403      	add	r3, r0
 8007d40:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d42:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4a:	6859      	ldr	r1, [r3, #4]
 8007d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d4e:	4613      	mov	r3, r2
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4a5d      	ldr	r2, [pc, #372]	; (8007ed4 <lfs_file_rawopencfg+0x39c>)
 8007d60:	4621      	mov	r1, r4
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7fc fc58 	bl	8004618 <lfs_dir_get>
 8007d68:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8007d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da06      	bge.n	8007d7e <lfs_file_rawopencfg+0x246>
 8007d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d72:	f113 0f02 	cmn.w	r3, #2
 8007d76:	d002      	beq.n	8007d7e <lfs_file_rawopencfg+0x246>
                err = res;
 8007d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007d7c:	e097      	b.n	8007eae <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d017      	beq.n	8007dba <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8e:	6859      	ldr	r1, [r3, #4]
 8007d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d92:	4613      	mov	r3, r2
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8007da6:	f06f 031b 	mvn.w	r3, #27
 8007daa:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007dac:	e07f      	b.n	8007eae <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8007dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d395      	bcc.n	8007cf8 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	64da      	str	r2, [r3, #76]	; 0x4c
 8007de0:	e010      	b.n	8007e04 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fb fadc 	bl	80033a6 <lfs_malloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8007dfc:	f06f 030b 	mvn.w	r3, #11
 8007e00:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007e02:	e054      	b.n	8007eae <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3340      	adds	r3, #64	; 0x40
 8007e08:	4619      	mov	r1, r3
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7fb faf1 	bl	80033f2 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8007e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fb ff70 	bl	8003cf8 <lfs_tag_type3>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f240 2301 	movw	r3, #513	; 0x201
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d141      	bne.n	8007ea8 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f06f 0201 	mvn.w	r2, #1
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8007e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fb ff9c 	bl	8003d6c <lfs_tag_size>
 8007e34:	4602      	mov	r2, r0
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d020      	beq.n	8007ea8 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	889b      	ldrh	r3, [r3, #4]
 8007e70:	029c      	lsls	r4, r3, #10
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e76:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb f9f4 	bl	8003268 <lfs_min>
 8007e80:	4603      	mov	r3, r0
 8007e82:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <lfs_file_rawopencfg+0x398>)
 8007e92:	4629      	mov	r1, r5
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7fc fbbf 	bl	8004618 <lfs_dir_get>
 8007e9a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8007e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da02      	bge.n	8007ea8 <lfs_file_rawopencfg+0x370>
                err = res;
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007ea6:	e002      	b.n	8007eae <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e00b      	b.n	8007ec4 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8007eac:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 f823 	bl	8007f08 <lfs_file_rawclose>
    return err;
 8007ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3760      	adds	r7, #96	; 0x60
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bdb0      	pop	{r4, r5, r7, pc}
 8007ecc:	20100000 	.word	0x20100000
 8007ed0:	700ffc00 	.word	0x700ffc00
 8007ed4:	7ffffc00 	.word	0x7ffffc00

08007ed8 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8007ee6:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <lfs_file_rawopen+0x2c>)
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff fe21 	bl	8007b38 <lfs_file_rawopencfg>
 8007ef6:	6178      	str	r0, [r7, #20]
    return err;
 8007ef8:	697b      	ldr	r3, [r7, #20]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	0801941c 	.word	0x0801941c

08007f08 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f9e5 	bl	80082e4 <lfs_file_rawsync>
 8007f1a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fc f91d 	bl	800415e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fb fa43 	bl	80033be <lfs_free>
    }

    return err;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b08d      	sub	sp, #52	; 0x34
 8007f48:	af06      	add	r7, sp, #24
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007f4e:	f107 030c 	add.w	r3, r7, #12
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fc f9f7 	bl	8004348 <lfs_alloc>
 8007f5a:	6138      	str	r0, [r7, #16]
        if (err) {
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <lfs_file_relocate+0x22>
            return err;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	e0bb      	b.n	80080de <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fb fd96 	bl	8003a9c <lfs_bd_erase>
 8007f70:	6138      	str	r0, [r7, #16]
        if (err) {
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007f7e:	f000 809b 	beq.w	80080b8 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	e0ab      	b.n	80080de <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e069      	b.n	8008060 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d027      	beq.n	8007fe8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f103 0008 	add.w	r0, r3, #8
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	889b      	ldrh	r3, [r3, #4]
 8007fb0:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8007fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fba:	2101      	movs	r1, #1
 8007fbc:	9105      	str	r1, [sp, #20]
 8007fbe:	f107 010b 	add.w	r1, r7, #11
 8007fc2:	9104      	str	r1, [sp, #16]
 8007fc4:	6979      	ldr	r1, [r7, #20]
 8007fc6:	9103      	str	r1, [sp, #12]
 8007fc8:	9302      	str	r3, [sp, #8]
 8007fca:	4b47      	ldr	r3, [pc, #284]	; (80080e8 <lfs_file_relocate+0x1a4>)
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fc fb39 	bl	800464e <lfs_dir_getread>
 8007fdc:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01e      	beq.n	8008022 <lfs_file_relocate+0xde>
                    return err;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	e07a      	b.n	80080de <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8007fee:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	1ad4      	subs	r4, r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	9203      	str	r2, [sp, #12]
 8008000:	f107 020b 	add.w	r2, r7, #11
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	9201      	str	r2, [sp, #4]
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4623      	mov	r3, r4
 800800e:	4602      	mov	r2, r0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fb fa05 	bl	8003420 <lfs_bd_read>
 8008016:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <lfs_file_relocate+0xde>
                    return err;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	e05d      	b.n	80080de <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f103 0110 	add.w	r1, r3, #16
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	9203      	str	r2, [sp, #12]
 8008030:	f107 020b 	add.w	r2, r7, #11
 8008034:	9202      	str	r2, [sp, #8]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	9201      	str	r2, [sp, #4]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2301      	movs	r3, #1
 800803e:	4602      	mov	r2, r0
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fb fc7f 	bl	8003944 <lfs_bd_prog>
 8008046:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008054:	d032      	beq.n	80080bc <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	e041      	b.n	80080de <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3301      	adds	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	429a      	cmp	r2, r3
 8008068:	d390      	bcc.n	8007f8c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69d9      	ldr	r1, [r3, #28]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	461a      	mov	r2, r3
 800807a:	f00e f87f 	bl	801617c <memcpy>
        file->cache.block = lfs->pcache.block;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3310      	adds	r3, #16
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fb f9a8 	bl	80033f2 <lfs_cache_zero>

        file->block = nblock;
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e012      	b.n	80080de <lfs_file_relocate+0x19a>
                goto relocate;
 80080b8:	bf00      	nop
 80080ba:	e000      	b.n	80080be <lfs_file_relocate+0x17a>
                    goto relocate;
 80080bc:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <lfs_file_relocate+0x1a8>)
 80080c2:	9200      	str	r2, [sp, #0]
 80080c4:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80080c8:	4909      	ldr	r1, [pc, #36]	; (80080f0 <lfs_file_relocate+0x1ac>)
 80080ca:	480a      	ldr	r0, [pc, #40]	; (80080f4 <lfs_file_relocate+0x1b0>)
 80080cc:	f00e fc04 	bl	80168d8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3310      	adds	r3, #16
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb f97c 	bl	80033d4 <lfs_cache_drop>
    while (true) {
 80080dc:	e737      	b.n	8007f4e <lfs_file_relocate+0xa>
    }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd90      	pop	{r4, r7, pc}
 80080e6:	bf00      	nop
 80080e8:	fff7fc00 	.word	0xfff7fc00
 80080ec:	080186b4 	.word	0x080186b4
 80080f0:	080185ac 	.word	0x080185ac
 80080f4:	08018734 	.word	0x08018734

080080f8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fc f8ba 	bl	8004284 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff16 	bl	8007f44 <lfs_file_relocate>
 8008118:	60f8      	str	r0, [r7, #12]
    if (err) {
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <lfs_file_outline+0x2c>
        return err;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	e006      	b.n	8008132 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b09f      	sub	sp, #124	; 0x7c
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3340      	adds	r3, #64	; 0x40
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7fb f935 	bl	80033d4 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80a4 	beq.w	80082cc <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d176      	bne.n	8008284 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	2254      	movs	r2, #84	; 0x54
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f00d fffa 	bl	8016198 <memset>
                .ctz.head = file->ctz.head,
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80081ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80081b0:	2301      	movs	r3, #1
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80081b8:	643b      	str	r3, [r7, #64]	; 0x40
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80081c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fb f902 	bl	80033d4 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80081d0:	e02b      	b.n	800822a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80081d2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80081d6:	f107 010c 	add.w	r1, r7, #12
 80081da:	2301      	movs	r3, #1
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f90d 	bl	80083fc <lfs_file_flushedread>
 80081e2:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80081e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	da01      	bge.n	80081ee <lfs_file_flush+0xb2>
                    return res;
 80081ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ec:	e06f      	b.n	80082ce <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80081ee:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80081f2:	2301      	movs	r3, #1
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa08 	bl	800860c <lfs_file_flushedwrite>
 80081fc:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80081fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008200:	2b00      	cmp	r3, #0
 8008202:	da01      	bge.n	8008208 <lfs_file_flush+0xcc>
                    return res;
 8008204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008206:	e062      	b.n	80082ce <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d00b      	beq.n	800822a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	3340      	adds	r3, #64	; 0x40
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7fb f8da 	bl	80033d4 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fb f8d5 	bl	80033d4 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d3cd      	bcc.n	80081d2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	2301      	movs	r3, #1
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fb fad1 	bl	80037e8 <lfs_bd_flush>
 8008246:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8008248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824a:	2b00      	cmp	r3, #0
 800824c:	d026      	beq.n	800829c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800824e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008250:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008254:	d001      	beq.n	800825a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8008256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008258:	e039      	b.n	80082ce <lfs_file_flush+0x192>
                        goto relocate;
 800825a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <lfs_file_flush+0x19c>)
 8008262:	9200      	str	r2, [sp, #0]
 8008264:	f640 520f 	movw	r2, #3343	; 0xd0f
 8008268:	491c      	ldr	r1, [pc, #112]	; (80082dc <lfs_file_flush+0x1a0>)
 800826a:	481d      	ldr	r0, [pc, #116]	; (80082e0 <lfs_file_flush+0x1a4>)
 800826c:	f00e fb34 	bl	80168d8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fe66 	bl	8007f44 <lfs_file_relocate>
 8008278:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800827a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0da      	beq.n	8008236 <lfs_file_flush+0xfa>
                    return err;
 8008280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008282:	e024      	b.n	80082ce <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7fa ffda 	bl	8003248 <lfs_max>
 8008294:	4602      	mov	r2, r0
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	635a      	str	r2, [r3, #52]	; 0x34
 800829a:	e000      	b.n	800829e <lfs_file_flush+0x162>
                break;
 800829c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082ca:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3774      	adds	r7, #116	; 0x74
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd90      	pop	{r4, r7, pc}
 80082d6:	bf00      	nop
 80082d8:	080186b4 	.word	0x080186b4
 80082dc:	080185ac 	.word	0x080185ac
 80082e0:	08018734 	.word	0x08018734

080082e4 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b090      	sub	sp, #64	; 0x40
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e07a      	b.n	80083f4 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff1b 	bl	800813c <lfs_file_flush>
 8008306:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	e06a      	b.n	80083f4 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d063      	beq.n	80083f2 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	4618      	mov	r0, r3
 8008330:	f7fb fbfb 	bl	8003b2a <lfs_pair_isnull>
 8008334:	4603      	mov	r3, r0
 8008336:	f083 0301 	eor.w	r3, r3, #1
 800833a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800833c:	2b00      	cmp	r3, #0
 800833e:	d058      	beq.n	80083f2 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800834c:	f240 2301 	movw	r3, #513	; 0x201
 8008350:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008356:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	e014      	b.n	800838a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008360:	f240 2302 	movw	r3, #514	; 0x202
 8008364:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800836c:	3228      	adds	r2, #40	; 0x28
 800836e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008372:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8008376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800837a:	4618      	mov	r0, r3
 800837c:	f7fb fe4a 	bl	8004014 <lfs_ctz_tole32>
            buffer = &ctz;
 8008380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8008386:	2308      	movs	r3, #8
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	f103 0108 	add.w	r1, r3, #8
 8008390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008392:	051a      	lsls	r2, r3, #20
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	889b      	ldrh	r3, [r3, #4]
 8008398:	029b      	lsls	r3, r3, #10
 800839a:	431a      	orrs	r2, r3
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	4313      	orrs	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	889b      	ldrh	r3, [r3, #4]
 80083aa:	029a      	lsls	r2, r3, #10
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80083b8:	623b      	str	r3, [r7, #32]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
 80083c2:	f107 0218 	add.w	r2, r7, #24
 80083c6:	2302      	movs	r3, #2
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff f859 	bl	8007480 <lfs_dir_commit>
 80083ce:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	e006      	b.n	80083f4 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3740      	adds	r7, #64	; 0x40
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80083fc:	b5b0      	push	{r4, r5, r7, lr}
 80083fe:	b090      	sub	sp, #64	; 0x40
 8008400:	af06      	add	r7, sp, #24
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d301      	bcc.n	8008422 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800841e:	2300      	movs	r3, #0
 8008420:	e0b7      	b.n	8008592 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	4619      	mov	r1, r3
 800842e:	6838      	ldr	r0, [r7, #0]
 8008430:	f7fa ff1a 	bl	8003268 <lfs_min>
 8008434:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800843a:	e0a5      	b.n	8008588 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d006      	beq.n	8008456 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008450:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008452:	429a      	cmp	r2, r3
 8008454:	d130      	bne.n	80084b8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d11c      	bne.n	800849c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	3138      	adds	r1, #56	; 0x38
 8008478:	68b8      	ldr	r0, [r7, #8]
 800847a:	303c      	adds	r0, #60	; 0x3c
 800847c:	9003      	str	r0, [sp, #12]
 800847e:	9102      	str	r1, [sp, #8]
 8008480:	9201      	str	r2, [sp, #4]
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462b      	mov	r3, r5
 8008486:	4622      	mov	r2, r4
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff f962 	bl	8007754 <lfs_ctz_find>
 8008490:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <lfs_file_flushedread+0xb0>
                    return err;
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	e07a      	b.n	8008592 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f06f 0201 	mvn.w	r2, #1
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	4619      	mov	r1, r3
 80084c6:	6a38      	ldr	r0, [r7, #32]
 80084c8:	f7fa fece 	bl	8003268 <lfs_min>
 80084cc:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d026      	beq.n	8008528 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f103 0408 	add.w	r4, r3, #8
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80084ea:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	889b      	ldrh	r3, [r3, #4]
 80084f0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80084f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80084fe:	69b8      	ldr	r0, [r7, #24]
 8008500:	9005      	str	r0, [sp, #20]
 8008502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008504:	9004      	str	r0, [sp, #16]
 8008506:	9103      	str	r1, [sp, #12]
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	4b24      	ldr	r3, [pc, #144]	; (800859c <lfs_file_flushedread+0x1a0>)
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	9200      	str	r2, [sp, #0]
 8008510:	462b      	mov	r3, r5
 8008512:	2200      	movs	r2, #0
 8008514:	4621      	mov	r1, r4
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7fc f899 	bl	800464e <lfs_dir_getread>
 800851c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01d      	beq.n	8008560 <lfs_file_flushedread+0x164>
                return err;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	e034      	b.n	8008592 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8008532:	69dc      	ldr	r4, [r3, #28]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800853c:	69b9      	ldr	r1, [r7, #24]
 800853e:	9103      	str	r1, [sp, #12]
 8008540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008542:	9102      	str	r1, [sp, #8]
 8008544:	9201      	str	r2, [sp, #4]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4623      	mov	r3, r4
 800854a:	4602      	mov	r2, r0
 800854c:	2100      	movs	r1, #0
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7fa ff66 	bl	8003420 <lfs_bd_read>
 8008554:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <lfs_file_flushedread+0x164>
                return err;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	e018      	b.n	8008592 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	441a      	add	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	441a      	add	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	4413      	add	r3, r2
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8008580:	6a3a      	ldr	r2, [r7, #32]
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f47f af56 	bne.w	800843c <lfs_file_flushedread+0x40>
    }

    return size;
 8008590:	683b      	ldr	r3, [r7, #0]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bdb0      	pop	{r4, r5, r7, pc}
 800859a:	bf00      	nop
 800859c:	fff7fc00 	.word	0xfff7fc00

080085a0 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <lfs_file_rawread+0x28>
 80085ba:	4b11      	ldr	r3, [pc, #68]	; (8008600 <lfs_file_rawread+0x60>)
 80085bc:	4a11      	ldr	r2, [pc, #68]	; (8008604 <lfs_file_rawread+0x64>)
 80085be:	f640 519a 	movw	r1, #3482	; 0xd9a
 80085c2:	4811      	ldr	r0, [pc, #68]	; (8008608 <lfs_file_rawread+0x68>)
 80085c4:	f00d fd62 	bl	801608c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fdb0 	bl	800813c <lfs_file_flush>
 80085dc:	6178      	str	r0, [r7, #20]
        if (err) {
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <lfs_file_rawread+0x48>
            return err;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	e006      	b.n	80085f6 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff ff04 	bl	80083fc <lfs_file_flushedread>
 80085f4:	4603      	mov	r3, r0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	080188dc 	.word	0x080188dc
 8008604:	08019428 	.word	0x08019428
 8008608:	080185ac 	.word	0x080185ac

0800860c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800860c:	b5b0      	push	{r4, r5, r7, lr}
 800860e:	b090      	sub	sp, #64	; 0x40
 8008610:	af04      	add	r7, sp, #16
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 810e 	beq.w	800884c <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	441a      	add	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7fa fe02 	bl	8003248 <lfs_max>
 8008644:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 800864a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800865a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800865c:	08db      	lsrs	r3, r3, #3
 800865e:	e003      	b.n	8008668 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008664:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f7fa fdfc 	bl	8003268 <lfs_min>
 8008670:	4603      	mov	r3, r0
 8008672:	4619      	mov	r1, r3
 8008674:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8008678:	f7fa fdf6 	bl	8003268 <lfs_min>
 800867c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800867e:	429c      	cmp	r4, r3
 8008680:	f240 80e4 	bls.w	800884c <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fd36 	bl	80080f8 <lfs_file_outline>
 800868c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80db 	beq.w	800884c <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	e0d7      	b.n	8008856 <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ba:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80086bc:	429a      	cmp	r2, r3
 80086be:	d16d      	bne.n	800879c <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d159      	bne.n	8008780 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d12f      	bne.n	8008738 <lfs_file_flushedwrite+0x12c>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d02b      	beq.n	8008738 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086f2:	3a01      	subs	r2, #1
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80086f8:	2000      	movs	r0, #0
 80086fa:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80086fc:	f107 0010 	add.w	r0, r7, #16
 8008700:	9003      	str	r0, [sp, #12]
 8008702:	9102      	str	r1, [sp, #8]
 8008704:	9201      	str	r2, [sp, #4]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	462b      	mov	r3, r5
 800870a:	4622      	mov	r2, r4
 800870c:	2100      	movs	r1, #0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff f820 	bl	8007754 <lfs_ctz_find>
 8008714:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	e094      	b.n	8008856 <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3340      	adds	r3, #64	; 0x40
 8008730:	4619      	mov	r1, r3
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7fa fe5d 	bl	80033f2 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7fb fda3 	bl	8004284 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008744:	68fc      	ldr	r4, [r7, #12]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	3238      	adds	r2, #56	; 0x38
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	313c      	adds	r1, #60	; 0x3c
 8008756:	9102      	str	r1, [sp, #8]
 8008758:	9201      	str	r2, [sp, #4]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	462b      	mov	r3, r5
 800875e:	4622      	mov	r2, r4
 8008760:	4601      	mov	r1, r0
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff f862 	bl	800782c <lfs_ctz_extend>
 8008768:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00f      	beq.n	8008790 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	e06a      	b.n	8008856 <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f06f 0201 	mvn.w	r2, #1
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a0:	69da      	ldr	r2, [r3, #28]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ac:	f7fa fd5c 	bl	8003268 <lfs_min>
 80087b0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80087b8:	68fc      	ldr	r4, [r7, #12]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	9103      	str	r1, [sp, #12]
 80087c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c8:	9102      	str	r1, [sp, #8]
 80087ca:	9201      	str	r2, [sp, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	2301      	movs	r3, #1
 80087d0:	4622      	mov	r2, r4
 80087d2:	4601      	mov	r1, r0
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7fb f8b5 	bl	8003944 <lfs_bd_prog>
 80087da:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01c      	beq.n	800881c <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80087e8:	d007      	beq.n	80087fa <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	e02d      	b.n	8008856 <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 80087fa:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7ff fba0 	bl	8007f44 <lfs_file_relocate>
 8008804:	6178      	str	r0, [r7, #20]
            if (err) {
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0d2      	beq.n	80087b2 <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	e01c      	b.n	8008856 <lfs_file_flushedwrite+0x24a>
            break;
 800881c:	bf00      	nop
            }
        }

        file->pos += diff;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	441a      	add	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	441a      	add	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	4413      	add	r3, r2
 800883c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7fb fd1c 	bl	8004284 <lfs_alloc_ack>
    while (nsize > 0) {
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	2b00      	cmp	r3, #0
 8008850:	f47f af29 	bne.w	80086a6 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8008854:	683b      	ldr	r3, [r7, #0]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3730      	adds	r7, #48	; 0x30
 800885a:	46bd      	mov	sp, r7
 800885c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008860 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <lfs_file_rawwrite+0x28>
 800887a:	4b38      	ldr	r3, [pc, #224]	; (800895c <lfs_file_rawwrite+0xfc>)
 800887c:	4a38      	ldr	r2, [pc, #224]	; (8008960 <lfs_file_rawwrite+0x100>)
 800887e:	f640 6105 	movw	r1, #3589	; 0xe05
 8008882:	4838      	ldr	r0, [pc, #224]	; (8008964 <lfs_file_rawwrite+0x104>)
 8008884:	f00d fc02 	bl	801608c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff fc50 	bl	800813c <lfs_file_flush>
 800889c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <lfs_file_rawwrite+0x48>
            return err;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	e055      	b.n	8008954 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <lfs_file_rawwrite+0x68>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d203      	bcs.n	80088c8 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	441a      	add	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d902      	bls.n	80088de <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80088d8:	f06f 031a 	mvn.w	r3, #26
 80088dc:	e03a      	b.n	8008954 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d121      	bne.n	800892e <lfs_file_rawwrite+0xce>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d91b      	bls.n	800892e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008904:	e00e      	b.n	8008924 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
 800890a:	f107 0217 	add.w	r2, r7, #23
 800890e:	2301      	movs	r3, #1
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fe7a 	bl	800860c <lfs_file_flushedwrite>
 8008918:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	da01      	bge.n	8008924 <lfs_file_rawwrite+0xc4>
                return res;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	e017      	b.n	8008954 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008928:	6a3a      	ldr	r2, [r7, #32]
 800892a:	429a      	cmp	r2, r3
 800892c:	d8eb      	bhi.n	8008906 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff fe69 	bl	800860c <lfs_file_flushedwrite>
 800893a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	da01      	bge.n	8008946 <lfs_file_rawwrite+0xe6>
        return nsize;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	e006      	b.n	8008954 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8008952:	69bb      	ldr	r3, [r7, #24]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3728      	adds	r7, #40	; 0x28
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	0801890c 	.word	0x0801890c
 8008960:	0801943c 	.word	0x0801943c
 8008964:	080185ac 	.word	0x080185ac

08008968 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b08c      	sub	sp, #48	; 0x30
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <lfs_file_rawseek+0x20>
        npos = off;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008986:	e025      	b.n	80089d4 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10f      	bne.n	80089ae <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	2b00      	cmp	r3, #0
 800899a:	da02      	bge.n	80089a2 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 800899c:	f06f 0315 	mvn.w	r3, #21
 80089a0:	e067      	b.n	8008a72 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4413      	add	r3, r2
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ac:	e012      	b.n	80089d4 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d10f      	bne.n	80089d4 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f85f 	bl	8008a7a <lfs_file_rawsize>
 80089bc:	4602      	mov	r2, r0
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4413      	add	r3, r2
 80089c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	da02      	bge.n	80089d0 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 80089ca:	f06f 0315 	mvn.w	r3, #21
 80089ce:	e050      	b.n	8008a72 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089da:	429a      	cmp	r2, r3
 80089dc:	d902      	bls.n	80089e4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80089de:	f06f 0315 	mvn.w	r3, #21
 80089e2:	e046      	b.n	8008a72 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d101      	bne.n	80089f2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	e03f      	b.n	8008a72 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d12b      	bne.n	8008a56 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	f107 0318 	add.w	r3, r7, #24
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7fe fe6a 	bl	80076e4 <lfs_ctz_index>
 8008a10:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8008a16:	f107 0314 	add.w	r3, r7, #20
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7fe fe61 	bl	80076e4 <lfs_ctz_index>
 8008a22:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8008a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d114      	bne.n	8008a56 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d80f      	bhi.n	8008a56 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a3e:	441a      	add	r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d907      	bls.n	8008a56 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a4a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	e00d      	b.n	8008a72 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fb6f 	bl	800813c <lfs_file_flush>
 8008a5e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <lfs_file_rawseek+0x102>
        return err;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	e003      	b.n	8008a72 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3730      	adds	r7, #48	; 0x30
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fa fbd4 	bl	8003248 <lfs_max>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	e001      	b.n	8008aa8 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	6a1a      	ldr	r2, [r3, #32]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d106      	bne.n	8008ae4 <lfs_init+0x34>
 8008ad6:	4b98      	ldr	r3, [pc, #608]	; (8008d38 <lfs_init+0x288>)
 8008ad8:	4a98      	ldr	r2, [pc, #608]	; (8008d3c <lfs_init+0x28c>)
 8008ada:	f241 0123 	movw	r1, #4131	; 0x1023
 8008ade:	4898      	ldr	r0, [pc, #608]	; (8008d40 <lfs_init+0x290>)
 8008ae0:	f00d fad4 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <lfs_init+0x4c>
 8008aee:	4b95      	ldr	r3, [pc, #596]	; (8008d44 <lfs_init+0x294>)
 8008af0:	4a92      	ldr	r2, [pc, #584]	; (8008d3c <lfs_init+0x28c>)
 8008af2:	f241 0124 	movw	r1, #4132	; 0x1024
 8008af6:	4892      	ldr	r0, [pc, #584]	; (8008d40 <lfs_init+0x290>)
 8008af8:	f00d fac8 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <lfs_init+0x64>
 8008b06:	4b90      	ldr	r3, [pc, #576]	; (8008d48 <lfs_init+0x298>)
 8008b08:	4a8c      	ldr	r2, [pc, #560]	; (8008d3c <lfs_init+0x28c>)
 8008b0a:	f241 0125 	movw	r1, #4133	; 0x1025
 8008b0e:	488c      	ldr	r0, [pc, #560]	; (8008d40 <lfs_init+0x290>)
 8008b10:	f00d fabc 	bl	801608c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b1e:	6952      	ldr	r2, [r2, #20]
 8008b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b24:	fb02 f201 	mul.w	r2, r2, r1
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <lfs_init+0x8c>
 8008b2e:	4b87      	ldr	r3, [pc, #540]	; (8008d4c <lfs_init+0x29c>)
 8008b30:	4a82      	ldr	r2, [pc, #520]	; (8008d3c <lfs_init+0x28c>)
 8008b32:	f241 0129 	movw	r1, #4137	; 0x1029
 8008b36:	4882      	ldr	r0, [pc, #520]	; (8008d40 <lfs_init+0x290>)
 8008b38:	f00d faa8 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b46:	6992      	ldr	r2, [r2, #24]
 8008b48:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b4c:	fb02 f201 	mul.w	r2, r2, r1
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d006      	beq.n	8008b64 <lfs_init+0xb4>
 8008b56:	4b7e      	ldr	r3, [pc, #504]	; (8008d50 <lfs_init+0x2a0>)
 8008b58:	4a78      	ldr	r2, [pc, #480]	; (8008d3c <lfs_init+0x28c>)
 8008b5a:	f241 012a 	movw	r1, #4138	; 0x102a
 8008b5e:	4878      	ldr	r0, [pc, #480]	; (8008d40 <lfs_init+0x290>)
 8008b60:	f00d fa94 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b74:	fb02 f201 	mul.w	r2, r2, r1
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d006      	beq.n	8008b8c <lfs_init+0xdc>
 8008b7e:	4b75      	ldr	r3, [pc, #468]	; (8008d54 <lfs_init+0x2a4>)
 8008b80:	4a6e      	ldr	r2, [pc, #440]	; (8008d3c <lfs_init+0x28c>)
 8008b82:	f241 012b 	movw	r1, #4139	; 0x102b
 8008b86:	486e      	ldr	r0, [pc, #440]	; (8008d40 <lfs_init+0x290>)
 8008b88:	f00d fa80 	bl	801608c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	2b7f      	cmp	r3, #127	; 0x7f
 8008b94:	d806      	bhi.n	8008ba4 <lfs_init+0xf4>
 8008b96:	4b70      	ldr	r3, [pc, #448]	; (8008d58 <lfs_init+0x2a8>)
 8008b98:	4a68      	ldr	r2, [pc, #416]	; (8008d3c <lfs_init+0x28c>)
 8008b9a:	f241 012e 	movw	r1, #4142	; 0x102e
 8008b9e:	4868      	ldr	r0, [pc, #416]	; (8008d40 <lfs_init+0x290>)
 8008ba0:	f00d fa74 	bl	801608c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	3b08      	subs	r3, #8
 8008bac:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fa fb8e 	bl	80032d6 <lfs_npw2>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	009a      	lsls	r2, r3, #2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d906      	bls.n	8008bd6 <lfs_init+0x126>
 8008bc8:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <lfs_init+0x2ac>)
 8008bca:	4a5c      	ldr	r2, [pc, #368]	; (8008d3c <lfs_init+0x28c>)
 8008bcc:	f241 0131 	movw	r1, #4145	; 0x1031
 8008bd0:	485b      	ldr	r0, [pc, #364]	; (8008d40 <lfs_init+0x290>)
 8008bd2:	f00d fa5b 	bl	801608c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <lfs_init+0x13e>
 8008be0:	4b5f      	ldr	r3, [pc, #380]	; (8008d60 <lfs_init+0x2b0>)
 8008be2:	4a56      	ldr	r2, [pc, #344]	; (8008d3c <lfs_init+0x28c>)
 8008be4:	f241 013a 	movw	r1, #4154	; 0x103a
 8008be8:	4855      	ldr	r0, [pc, #340]	; (8008d40 <lfs_init+0x290>)
 8008bea:	f00d fa4f 	bl	801608c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <lfs_init+0x154>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	e010      	b.n	8008c26 <lfs_init+0x176>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fa fbcb 	bl	80033a6 <lfs_malloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d103      	bne.n	8008c26 <lfs_init+0x176>
            err = LFS_ERR_NOMEM;
 8008c1e:	f06f 030b 	mvn.w	r3, #11
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008c24:	e0ff      	b.n	8008e26 <lfs_init+0x376>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <lfs_init+0x18c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	61da      	str	r2, [r3, #28]
 8008c3a:	e010      	b.n	8008c5e <lfs_init+0x1ae>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fa fbaf 	bl	80033a6 <lfs_malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d103      	bne.n	8008c5e <lfs_init+0x1ae>
            err = LFS_ERR_NOMEM;
 8008c56:	f06f 030b 	mvn.w	r3, #11
 8008c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008c5c:	e0e3      	b.n	8008e26 <lfs_init+0x376>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fa fbc5 	bl	80033f2 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3310      	adds	r3, #16
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fa fbbf 	bl	80033f2 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <lfs_init+0x1dc>
 8008c7e:	4b39      	ldr	r3, [pc, #228]	; (8008d64 <lfs_init+0x2b4>)
 8008c80:	4a2e      	ldr	r2, [pc, #184]	; (8008d3c <lfs_init+0x28c>)
 8008c82:	f241 0158 	movw	r1, #4184	; 0x1058
 8008c86:	482e      	ldr	r0, [pc, #184]	; (8008d40 <lfs_init+0x290>)
 8008c88:	f00d fa00 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <lfs_init+0x1f8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <lfs_init+0x206>
 8008ca8:	4b2f      	ldr	r3, [pc, #188]	; (8008d68 <lfs_init+0x2b8>)
 8008caa:	4a24      	ldr	r2, [pc, #144]	; (8008d3c <lfs_init+0x28c>)
 8008cac:	f241 0159 	movw	r1, #4185	; 0x1059
 8008cb0:	4823      	ldr	r0, [pc, #140]	; (8008d40 <lfs_init+0x290>)
 8008cb2:	f00d f9eb 	bl	801608c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <lfs_init+0x21c>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	665a      	str	r2, [r3, #100]	; 0x64
 8008cca:	e010      	b.n	8008cee <lfs_init+0x23e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fa fb67 	bl	80033a6 <lfs_malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <lfs_init+0x23e>
            err = LFS_ERR_NOMEM;
 8008ce6:	f06f 030b 	mvn.w	r3, #11
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008cec:	e09b      	b.n	8008e26 <lfs_init+0x376>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf4:	2bff      	cmp	r3, #255	; 0xff
 8008cf6:	d906      	bls.n	8008d06 <lfs_init+0x256>
 8008cf8:	4b1c      	ldr	r3, [pc, #112]	; (8008d6c <lfs_init+0x2bc>)
 8008cfa:	4a10      	ldr	r2, [pc, #64]	; (8008d3c <lfs_init+0x28c>)
 8008cfc:	f241 0166 	movw	r1, #4198	; 0x1066
 8008d00:	480f      	ldr	r0, [pc, #60]	; (8008d40 <lfs_init+0x290>)
 8008d02:	f00d f9c3 	bl	801608c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <lfs_init+0x26e>
        lfs->name_max = LFS_NAME_MAX;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	22ff      	movs	r2, #255	; 0xff
 8008d1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da25      	bge.n	8008d74 <lfs_init+0x2c4>
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <lfs_init+0x2c0>)
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <lfs_init+0x28c>)
 8008d2c:	f241 016c 	movw	r1, #4204	; 0x106c
 8008d30:	4803      	ldr	r0, [pc, #12]	; (8008d40 <lfs_init+0x290>)
 8008d32:	f00d f9ab 	bl	801608c <__assert_func>
 8008d36:	bf00      	nop
 8008d38:	0801893c 	.word	0x0801893c
 8008d3c:	08019450 	.word	0x08019450
 8008d40:	080185ac 	.word	0x080185ac
 8008d44:	08018958 	.word	0x08018958
 8008d48:	08018974 	.word	0x08018974
 8008d4c:	08018990 	.word	0x08018990
 8008d50:	080189c0 	.word	0x080189c0
 8008d54:	080189f0 	.word	0x080189f0
 8008d58:	08018a24 	.word	0x08018a24
 8008d5c:	08018a40 	.word	0x08018a40
 8008d60:	08018a8c 	.word	0x08018a8c
 8008d64:	08018aa8 	.word	0x08018aa8
 8008d68:	08018ac8 	.word	0x08018ac8
 8008d6c:	08018b1c 	.word	0x08018b1c
 8008d70:	08018b38 	.word	0x08018b38
    lfs->file_max = lfs->cfg->file_max;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <lfs_init+0x2de>
        lfs->file_max = LFS_FILE_MAX;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008d8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d94:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d906      	bls.n	8008daa <lfs_init+0x2fa>
 8008d9c:	4b26      	ldr	r3, [pc, #152]	; (8008e38 <lfs_init+0x388>)
 8008d9e:	4a27      	ldr	r2, [pc, #156]	; (8008e3c <lfs_init+0x38c>)
 8008da0:	f241 0172 	movw	r1, #4210	; 0x1072
 8008da4:	4826      	ldr	r0, [pc, #152]	; (8008e40 <lfs_init+0x390>)
 8008da6:	f00d f971 	bl	801608c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <lfs_init+0x314>
        lfs->attr_max = LFS_ATTR_MAX;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008dc2:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d906      	bls.n	8008de2 <lfs_init+0x332>
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <lfs_init+0x394>)
 8008dd6:	4a19      	ldr	r2, [pc, #100]	; (8008e3c <lfs_init+0x38c>)
 8008dd8:	f241 0178 	movw	r1, #4216	; 0x1078
 8008ddc:	4818      	ldr	r0, [pc, #96]	; (8008e40 <lfs_init+0x390>)
 8008dde:	f00d f955 	bl	801608c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295
 8008de8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	333c      	adds	r3, #60	; 0x3c
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	605a      	str	r2, [r3, #4]
 8008e08:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3330      	adds	r3, #48	; 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	605a      	str	r2, [r3, #4]
 8008e14:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3348      	adds	r3, #72	; 0x48
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
 8008e20:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e003      	b.n	8008e2e <lfs_init+0x37e>

cleanup:
    lfs_deinit(lfs);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f80e 	bl	8008e48 <lfs_deinit>
    return err;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3730      	adds	r7, #48	; 0x30
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	08018b5c 	.word	0x08018b5c
 8008e3c:	08019450 	.word	0x08019450
 8008e40:	080185ac 	.word	0x080185ac
 8008e44:	08018b78 	.word	0x08018b78

08008e48 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d104      	bne.n	8008e64 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fa faad 	bl	80033be <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fa faa3 	bl	80033be <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fa fa99 	bl	80033be <lfs_free>
    }

    return 0;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <lfs_rawformat>:



#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b0a0      	sub	sp, #128	; 0x80
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
    int err = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff fe01 	bl	8008ab0 <lfs_init>
 8008eae:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <lfs_rawformat+0x22>
            return err;
 8008eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eb8:	e08d      	b.n	8008fd6 <lfs_rawformat+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <lfs_rawformat+0x38>
 8008ec2:	4b47      	ldr	r3, [pc, #284]	; (8008fe0 <lfs_rawformat+0x148>)
 8008ec4:	4a47      	ldr	r2, [pc, #284]	; (8008fe4 <lfs_rawformat+0x14c>)
 8008ec6:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8008eca:	4847      	ldr	r0, [pc, #284]	; (8008fe8 <lfs_rawformat+0x150>)
 8008ecc:	f00d f8de 	bl	801608c <__assert_func>

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	461a      	mov	r2, r3
 8008edc:	2100      	movs	r1, #0
 8008ede:	f00d f95b 	bl	8016198 <memset>
        lfs->free.off = 0;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	00da      	lsls	r2, r3, #3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fa f9b6 	bl	8003268 <lfs_min>
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->free.i = 0;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fb f9bb 	bl	8004284 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8008f0e:	f107 030c 	add.w	r3, r7, #12
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fd f8db 	bl	80060d0 <lfs_dir_alloc>
 8008f1a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d150      	bne.n	8008fc4 <lfs_rawformat+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fb f950 	bl	80041c8 <lfs_fs_disk_version>
 8008f28:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8008f2a:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f30:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8008f32:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8008f38:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8008f3e:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8008f44:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8008f4a:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8008f4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fb f8af 	bl	80040b4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8008f56:	4b25      	ldr	r3, [pc, #148]	; (8008fec <lfs_rawformat+0x154>)
 8008f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f5e:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <lfs_rawformat+0x158>)
 8008f60:	657b      	str	r3, [r7, #84]	; 0x54
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <lfs_rawformat+0x15c>)
 8008f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f66:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <lfs_rawformat+0x160>)
 8008f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f70:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008f74:	f107 010c 	add.w	r1, r7, #12
 8008f78:	2303      	movs	r3, #3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe fa80 	bl	8007480 <lfs_dir_commit>
 8008f80:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8008f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11f      	bne.n	8008fc8 <lfs_rawformat+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8008f8e:	f107 010c 	add.w	r1, r7, #12
 8008f92:	2300      	movs	r3, #0
 8008f94:	2200      	movs	r2, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fe fa72 	bl	8007480 <lfs_dir_commit>
 8008f9c:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d113      	bne.n	8008fcc <lfs_rawformat+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa8:	2301      	movs	r3, #1
 8008faa:	633b      	str	r3, [r7, #48]	; 0x30
 8008fac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008fb0:	f107 030c 	add.w	r3, r7, #12
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fc fc58 	bl	800586c <lfs_dir_fetch>
 8008fbc:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8008fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	e004      	b.n	8008fce <lfs_rawformat+0x136>
            goto cleanup;
 8008fc4:	bf00      	nop
 8008fc6:	e002      	b.n	8008fce <lfs_rawformat+0x136>
            goto cleanup;
 8008fc8:	bf00      	nop
 8008fca:	e000      	b.n	8008fce <lfs_rawformat+0x136>
            goto cleanup;
 8008fcc:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff ff3a 	bl	8008e48 <lfs_deinit>
    return err;
 8008fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3780      	adds	r7, #128	; 0x80
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	08018ba8 	.word	0x08018ba8
 8008fe4:	0801945c 	.word	0x0801945c
 8008fe8:	080185ac 	.word	0x080185ac
 8008fec:	40100000 	.word	0x40100000
 8008ff0:	0ff00008 	.word	0x0ff00008
 8008ff4:	08018bc0 	.word	0x08018bc0
 8008ff8:	20100018 	.word	0x20100018

08008ffc <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b09f      	sub	sp, #124	; 0x7c
 8009000:	af04      	add	r7, sp, #16
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff fd51 	bl	8008ab0 <lfs_init>
 800900e:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8009010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <lfs_rawmount+0x1e>
        return err;
 8009016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009018:	e1f1      	b.n	80093fe <lfs_rawmount+0x402>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800901a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800901e:	2220      	movs	r2, #32
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f00d f8b8 	bl	8016198 <memset>
 8009028:	2301      	movs	r3, #1
 800902a:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800902c:	4aa6      	ldr	r2, [pc, #664]	; (80092c8 <lfs_rawmount+0x2cc>)
 800902e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009036:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800903a:	2301      	movs	r3, #1
 800903c:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 800903e:	2301      	movs	r3, #1
 8009040:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8009042:	e188      	b.n	8009356 <lfs_rawmount+0x35a>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009044:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009048:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800904c:	3318      	adds	r3, #24
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7fa fdaf 	bl	8003bb4 <lfs_pair_issync>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 800905c:	4b9b      	ldr	r3, [pc, #620]	; (80092cc <lfs_rawmount+0x2d0>)
 800905e:	f241 02f2 	movw	r2, #4338	; 0x10f2
 8009062:	499b      	ldr	r1, [pc, #620]	; (80092d0 <lfs_rawmount+0x2d4>)
 8009064:	489b      	ldr	r0, [pc, #620]	; (80092d4 <lfs_rawmount+0x2d8>)
 8009066:	f00d fc37 	bl	80168d8 <iprintf>
            err = LFS_ERR_CORRUPT;
 800906a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800906e:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8009070:	e1c1      	b.n	80093f6 <lfs_rawmount+0x3fa>
        }
        if (tortoise_i == tortoise_period) {
 8009072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009076:	429a      	cmp	r2, r3
 8009078:	d108      	bne.n	800908c <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 800907a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 800907e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009080:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8009086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 800908c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800908e:	3301      	adds	r3, #1
 8009090:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	623b      	str	r3, [r7, #32]
 8009096:	4b90      	ldr	r3, [pc, #576]	; (80092d8 <lfs_rawmount+0x2dc>)
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
 800909a:	2308      	movs	r3, #8
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800909e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090a2:	f103 0218 	add.w	r2, r3, #24
 80090a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80090aa:	f107 0320 	add.w	r3, r7, #32
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	4b8a      	ldr	r3, [pc, #552]	; (80092dc <lfs_rawmount+0x2e0>)
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	4b89      	ldr	r3, [pc, #548]	; (80092e0 <lfs_rawmount+0x2e4>)
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4b89      	ldr	r3, [pc, #548]	; (80092e4 <lfs_rawmount+0x2e8>)
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fc f80c 	bl	80050dc <lfs_dir_fetchmatch>
 80090c4:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80090c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	da02      	bge.n	80090d2 <lfs_rawmount+0xd6>
            err = tag;
 80090cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090ce:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80090d0:	e191      	b.n	80093f6 <lfs_rawmount+0x3fa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80090d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8131 	beq.w	800933c <lfs_rawmount+0x340>
 80090da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fa fdd8 	bl	8003c92 <lfs_tag_isdelete>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f083 0301 	eor.w	r3, r3, #1
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8126 	beq.w	800933c <lfs_rawmount+0x340>
            // update root
            lfs->root[0] = dir.pair[0];
 80090f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80090f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80090fc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	4b78      	ldr	r3, [pc, #480]	; (80092e8 <lfs_rawmount+0x2ec>)
 8009108:	4a76      	ldr	r2, [pc, #472]	; (80092e4 <lfs_rawmount+0x2e8>)
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fb fa84 	bl	8004618 <lfs_dir_get>
 8009110:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8009112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009114:	2b00      	cmp	r3, #0
 8009116:	da02      	bge.n	800911e <lfs_rawmount+0x122>
                err = tag;
 8009118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800911a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800911c:	e16b      	b.n	80093f6 <lfs_rawmount+0x3fa>
            }
            lfs_superblock_fromle32(&superblock);
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4618      	mov	r0, r3
 8009124:	f7fa ff8e 	bl	8004044 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fb f854 	bl	80041e4 <lfs_fs_disk_version_major>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009144:	4293      	cmp	r3, r2
 8009146:	d108      	bne.n	800915a <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fb f859 	bl	8004200 <lfs_fs_disk_version_minor>
 800914e:	4603      	mov	r3, r0
 8009150:	461a      	mov	r2, r3
 8009152:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009156:	4293      	cmp	r3, r2
 8009158:	d91d      	bls.n	8009196 <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 800915a:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 800915e:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fb f83e 	bl	80041e4 <lfs_fs_disk_version_major>
 8009168:	4603      	mov	r3, r0
 800916a:	461e      	mov	r6, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7fb f847 	bl	8004200 <lfs_fs_disk_version_minor>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	4b55      	ldr	r3, [pc, #340]	; (80092cc <lfs_rawmount+0x2d0>)
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	9202      	str	r2, [sp, #8]
 800917c:	9601      	str	r6, [sp, #4]
 800917e:	9400      	str	r4, [sp, #0]
 8009180:	462b      	mov	r3, r5
 8009182:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 8009186:	4952      	ldr	r1, [pc, #328]	; (80092d0 <lfs_rawmount+0x2d4>)
 8009188:	4858      	ldr	r0, [pc, #352]	; (80092ec <lfs_rawmount+0x2f0>)
 800918a:	f00d fba5 	bl	80168d8 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800918e:	f06f 0315 	mvn.w	r3, #21
 8009192:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009194:	e0d1      	b.n	800933a <lfs_rawmount+0x33e>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7fb f832 	bl	8004200 <lfs_fs_disk_version_minor>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d21d      	bcs.n	80091e4 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 80091a8:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80091ac:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7fb f817 	bl	80041e4 <lfs_fs_disk_version_major>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461e      	mov	r6, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7fb f820 	bl	8004200 <lfs_fs_disk_version_minor>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	4b41      	ldr	r3, [pc, #260]	; (80092cc <lfs_rawmount+0x2d0>)
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	9601      	str	r6, [sp, #4]
 80091cc:	9400      	str	r4, [sp, #0]
 80091ce:	462b      	mov	r3, r5
 80091d0:	f241 122e 	movw	r2, #4398	; 0x112e
 80091d4:	493e      	ldr	r1, [pc, #248]	; (80092d0 <lfs_rawmount+0x2d4>)
 80091d6:	4846      	ldr	r0, [pc, #280]	; (80092f0 <lfs_rawmount+0x2f4>)
 80091d8:	f00d fb7e 	bl	80168d8 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 80091dc:	2101      	movs	r1, #1
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fbac 	bl	800993c <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d018      	beq.n	800921c <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d910      	bls.n	8009216 <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	4934      	ldr	r1, [pc, #208]	; (80092cc <lfs_rawmount+0x2d0>)
 80091fc:	9101      	str	r1, [sp, #4]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4613      	mov	r3, r2
 8009202:	f241 123c 	movw	r2, #4412	; 0x113c
 8009206:	4932      	ldr	r1, [pc, #200]	; (80092d0 <lfs_rawmount+0x2d4>)
 8009208:	483a      	ldr	r0, [pc, #232]	; (80092f4 <lfs_rawmount+0x2f8>)
 800920a:	f00d fb65 	bl	80168d8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800920e:	f06f 0315 	mvn.w	r3, #21
 8009212:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009214:	e091      	b.n	800933a <lfs_rawmount+0x33e>
                }

                lfs->name_max = superblock.name_max;
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d018      	beq.n	8009254 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009228:	429a      	cmp	r2, r3
 800922a:	d910      	bls.n	800924e <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	4926      	ldr	r1, [pc, #152]	; (80092cc <lfs_rawmount+0x2d0>)
 8009234:	9101      	str	r1, [sp, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	f241 1247 	movw	r2, #4423	; 0x1147
 800923e:	4924      	ldr	r1, [pc, #144]	; (80092d0 <lfs_rawmount+0x2d4>)
 8009240:	482d      	ldr	r0, [pc, #180]	; (80092f8 <lfs_rawmount+0x2fc>)
 8009242:	f00d fb49 	bl	80168d8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8009246:	f06f 0315 	mvn.w	r3, #21
 800924a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 800924c:	e075      	b.n	800933a <lfs_rawmount+0x33e>
                }

                lfs->file_max = superblock.file_max;
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d018      	beq.n	800928c <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009260:	429a      	cmp	r2, r3
 8009262:	d910      	bls.n	8009286 <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926a:	4918      	ldr	r1, [pc, #96]	; (80092cc <lfs_rawmount+0x2d0>)
 800926c:	9101      	str	r1, [sp, #4]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	f241 1252 	movw	r2, #4434	; 0x1152
 8009276:	4916      	ldr	r1, [pc, #88]	; (80092d0 <lfs_rawmount+0x2d4>)
 8009278:	4820      	ldr	r0, [pc, #128]	; (80092fc <lfs_rawmount+0x300>)
 800927a:	f00d fb2d 	bl	80168d8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800927e:	f06f 0315 	mvn.w	r3, #21
 8009282:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009284:	e059      	b.n	800933a <lfs_rawmount+0x33e>
                }

                lfs->attr_max = superblock.attr_max;
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	679a      	str	r2, [r3, #120]	; 0x78
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d036      	beq.n	8009304 <lfs_rawmount+0x308>
                    && superblock.block_count != lfs->cfg->block_count) {
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d030      	beq.n	8009304 <lfs_rawmount+0x308>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	4908      	ldr	r1, [pc, #32]	; (80092cc <lfs_rawmount+0x2d0>)
 80092ac:	9101      	str	r1, [sp, #4]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	f241 125e 	movw	r2, #4446	; 0x115e
 80092b6:	4906      	ldr	r1, [pc, #24]	; (80092d0 <lfs_rawmount+0x2d4>)
 80092b8:	4811      	ldr	r0, [pc, #68]	; (8009300 <lfs_rawmount+0x304>)
 80092ba:	f00d fb0d 	bl	80168d8 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80092be:	f06f 0315 	mvn.w	r3, #21
 80092c2:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80092c4:	e039      	b.n	800933a <lfs_rawmount+0x33e>
 80092c6:	bf00      	nop
 80092c8:	080186f8 	.word	0x080186f8
 80092cc:	080186b4 	.word	0x080186b4
 80092d0:	080185ac 	.word	0x080185ac
 80092d4:	08018bcc 	.word	0x08018bcc
 80092d8:	08018bc0 	.word	0x08018bc0
 80092dc:	080059fd 	.word	0x080059fd
 80092e0:	0ff00008 	.word	0x0ff00008
 80092e4:	7ffffc00 	.word	0x7ffffc00
 80092e8:	20100018 	.word	0x20100018
 80092ec:	08018bf8 	.word	0x08018bf8
 80092f0:	08018c30 	.word	0x08018c30
 80092f4:	08018c70 	.word	0x08018c70
 80092f8:	08018ca4 	.word	0x08018ca4
 80092fc:	08018cd8 	.word	0x08018cd8
 8009300:	08018d0c 	.word	0x08018d0c
            }

            lfs->block_count = superblock.block_count;
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	429a      	cmp	r2, r3
 8009314:	d012      	beq.n	800933c <lfs_rawmount+0x340>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	493a      	ldr	r1, [pc, #232]	; (8009408 <lfs_rawmount+0x40c>)
 8009320:	9101      	str	r1, [sp, #4]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4613      	mov	r3, r2
 8009326:	f241 1267 	movw	r2, #4455	; 0x1167
 800932a:	4938      	ldr	r1, [pc, #224]	; (800940c <lfs_rawmount+0x410>)
 800932c:	4838      	ldr	r0, [pc, #224]	; (8009410 <lfs_rawmount+0x414>)
 800932e:	f00d fad3 	bl	80168d8 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8009332:	f06f 0315 	mvn.w	r3, #21
 8009336:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009338:	bf00      	nop
            goto cleanup;
 800933a:	e05c      	b.n	80093f6 <lfs_rawmount+0x3fa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009342:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7fc faab 	bl	80058a4 <lfs_dir_getgstate>
 800934e:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8009350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009352:	2b00      	cmp	r3, #0
 8009354:	d14e      	bne.n	80093f4 <lfs_rawmount+0x3f8>
    while (!lfs_pair_isnull(dir.tail)) {
 8009356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800935a:	3318      	adds	r3, #24
 800935c:	4618      	mov	r0, r3
 800935e:	f7fa fbe4 	bl	8003b2a <lfs_pair_isnull>
 8009362:	4603      	mov	r3, r0
 8009364:	f083 0301 	eor.w	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	f47f ae6a 	bne.w	8009044 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3330      	adds	r3, #48	; 0x30
 8009374:	4618      	mov	r0, r3
 8009376:	f7fa fd3f 	bl	8003df8 <lfs_gstate_iszero>
 800937a:	4603      	mov	r3, r0
 800937c:	f083 0301 	eor.w	r3, r3, #1
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d010      	beq.n	80093a8 <lfs_rawmount+0x3ac>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009392:	481d      	ldr	r0, [pc, #116]	; (8009408 <lfs_rawmount+0x40c>)
 8009394:	9002      	str	r0, [sp, #8]
 8009396:	9201      	str	r2, [sp, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	460b      	mov	r3, r1
 800939c:	f241 1277 	movw	r2, #4471	; 0x1177
 80093a0:	491a      	ldr	r1, [pc, #104]	; (800940c <lfs_rawmount+0x410>)
 80093a2:	481c      	ldr	r0, [pc, #112]	; (8009414 <lfs_rawmount+0x418>)
 80093a4:	f00d fa98 	bl	80168d8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fa fc62 	bl	8003c76 <lfs_tag_isvalid>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f083 0301 	eor.w	r3, r3, #1
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	441a      	add	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	333c      	adds	r3, #60	; 0x3c
 80093cc:	3230      	adds	r2, #48	; 0x30
 80093ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80093d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->block_count;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80093e0:	fb02 f201 	mul.w	r2, r2, r1
 80093e4:	1a9a      	subs	r2, r3, r2
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fa ff58 	bl	80042a0 <lfs_alloc_drop>

    return 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e004      	b.n	80093fe <lfs_rawmount+0x402>
            goto cleanup;
 80093f4:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f80e 	bl	8009418 <lfs_rawunmount>
    return err;
 80093fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80093fe:	4618      	mov	r0, r3
 8009400:	376c      	adds	r7, #108	; 0x6c
 8009402:	46bd      	mov	sp, r7
 8009404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009406:	bf00      	nop
 8009408:	080186b4 	.word	0x080186b4
 800940c:	080185ac 	.word	0x080185ac
 8009410:	08018d40 	.word	0x08018d40
 8009414:	08018d70 	.word	0x08018d70

08009418 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fd11 	bl	8008e48 <lfs_deinit>
 8009426:	4603      	mov	r3, r0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b0a1      	sub	sp, #132	; 0x84
 8009434:	af04      	add	r7, sp, #16
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800943e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009442:	2220      	movs	r2, #32
 8009444:	2100      	movs	r1, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f00c fea6 	bl	8016198 <memset>
 800944c:	2301      	movs	r3, #1
 800944e:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009450:	4a9b      	ldr	r2, [pc, #620]	; (80096c0 <lfs_fs_rawtraverse+0x290>)
 8009452:	f107 031c 	add.w	r3, r7, #28
 8009456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800945a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800945e:	2301      	movs	r3, #1
 8009460:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8009462:	2301      	movs	r3, #1
 8009464:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009466:	e0c1      	b.n	80095ec <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009468:	f107 021c 	add.w	r2, r7, #28
 800946c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009470:	3318      	adds	r3, #24
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fa fb9d 	bl	8003bb4 <lfs_pair_issync>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d009      	beq.n	8009494 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009480:	4b90      	ldr	r3, [pc, #576]	; (80096c4 <lfs_fs_rawtraverse+0x294>)
 8009482:	f241 12d2 	movw	r2, #4562	; 0x11d2
 8009486:	4990      	ldr	r1, [pc, #576]	; (80096c8 <lfs_fs_rawtraverse+0x298>)
 8009488:	4890      	ldr	r0, [pc, #576]	; (80096cc <lfs_fs_rawtraverse+0x29c>)
 800948a:	f00d fa25 	bl	80168d8 <iprintf>
            return LFS_ERR_CORRUPT;
 800948e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009492:	e110      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 8009494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009498:	429a      	cmp	r2, r3
 800949a:	d108      	bne.n	80094ae <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 800949c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80094a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a2:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80094a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80094ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b0:	3301      	adds	r3, #1
 80094b2:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 80094b4:	2300      	movs	r3, #0
 80094b6:	667b      	str	r3, [r7, #100]	; 0x64
 80094b8:	e014      	b.n	80094e4 <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 80094ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094bc:	3306      	adds	r3, #6
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80094c4:	4413      	add	r3, r2
 80094c6:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4611      	mov	r1, r2
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
 80094d2:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 80094d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <lfs_fs_rawtraverse+0xae>
                return err;
 80094da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094dc:	e0eb      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 80094de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e0:	3301      	adds	r3, #1
 80094e2:	667b      	str	r3, [r7, #100]	; 0x64
 80094e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	dde7      	ble.n	80094ba <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80094ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ee:	f103 0218 	add.w	r2, r3, #24
 80094f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094f6:	4619      	mov	r1, r3
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7fc f9b7 	bl	800586c <lfs_dir_fetch>
 80094fe:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <lfs_fs_rawtraverse+0xda>
            return err;
 8009506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009508:	e0d5      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800950a:	2300      	movs	r3, #0
 800950c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009510:	e067      	b.n	80095e2 <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009512:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009516:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800951c:	f043 0308 	orr.w	r3, r3, #8
 8009520:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009524:	f107 0214 	add.w	r2, r7, #20
 8009528:	9200      	str	r2, [sp, #0]
 800952a:	4a69      	ldr	r2, [pc, #420]	; (80096d0 <lfs_fs_rawtraverse+0x2a0>)
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7fb f873 	bl	8004618 <lfs_dir_get>
 8009532:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8009534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009536:	2b00      	cmp	r3, #0
 8009538:	da05      	bge.n	8009546 <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 800953a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953c:	f113 0f02 	cmn.w	r3, #2
 8009540:	d049      	beq.n	80095d6 <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 8009542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009544:	e0b7      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8009546:	f107 0314 	add.w	r3, r7, #20
 800954a:	4618      	mov	r0, r3
 800954c:	f7fa fd4a 	bl	8003fe4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009552:	4618      	mov	r0, r3
 8009554:	f7fa fbd0 	bl	8003cf8 <lfs_tag_type3>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	f240 2302 	movw	r3, #514	; 0x202
 8009560:	429a      	cmp	r2, r3
 8009562:	d113      	bne.n	800958c <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009564:	68f9      	ldr	r1, [r7, #12]
 8009566:	6978      	ldr	r0, [r7, #20]
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	9201      	str	r2, [sp, #4]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4603      	mov	r3, r0
 8009576:	460a      	mov	r2, r1
 8009578:	2100      	movs	r1, #0
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7fe fa5e 	bl	8007a3c <lfs_ctz_traverse>
 8009580:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d027      	beq.n	80095d8 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	e094      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d022      	beq.n	80095d8 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009594:	4618      	mov	r0, r3
 8009596:	f7fa fbaf 	bl	8003cf8 <lfs_tag_type3>
 800959a:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800959c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a0:	d11a      	bne.n	80095d8 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 80095a2:	2300      	movs	r3, #0
 80095a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095a6:	e012      	b.n	80095ce <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 80095a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	f107 0214 	add.w	r2, r7, #20
 80095b0:	4413      	add	r3, r2
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4611      	mov	r1, r2
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
 80095bc:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 80095be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <lfs_fs_rawtraverse+0x198>
                        return err;
 80095c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c6:	e076      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 80095c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ca:	3301      	adds	r3, #1
 80095cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	dde9      	ble.n	80095a8 <lfs_fs_rawtraverse+0x178>
 80095d4:	e000      	b.n	80095d8 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 80095d6:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80095d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80095dc:	3301      	adds	r3, #1
 80095de:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80095e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80095e4:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d392      	bcc.n	8009512 <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 80095ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095f0:	3318      	adds	r3, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fa fa99 	bl	8003b2a <lfs_pair_isnull>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f083 0301 	eor.w	r3, r3, #1
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	f47f af31 	bne.w	8009468 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	65bb      	str	r3, [r7, #88]	; 0x58
 800960c:	e04f      	b.n	80096ae <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800960e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009610:	799b      	ldrb	r3, [r3, #6]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d147      	bne.n	80096a6 <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d01d      	beq.n	800965e <lfs_fs_rawtraverse+0x22e>
 8009622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d117      	bne.n	800965e <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800962e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009630:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009638:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800963a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	9202      	str	r2, [sp, #8]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	9201      	str	r2, [sp, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4623      	mov	r3, r4
 800964a:	4602      	mov	r2, r0
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7fe f9f5 	bl	8007a3c <lfs_ctz_traverse>
 8009652:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <lfs_fs_rawtraverse+0x22e>
                return err;
 800965a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800965c:	e02b      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800965e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01e      	beq.n	80096a8 <lfs_fs_rawtraverse+0x278>
 800966a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d118      	bne.n	80096a8 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009678:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009680:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	9201      	str	r2, [sp, #4]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	4623      	mov	r3, r4
 8009692:	4602      	mov	r2, r0
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7fe f9d1 	bl	8007a3c <lfs_ctz_traverse>
 800969a:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 800969c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <lfs_fs_rawtraverse+0x278>
                return err;
 80096a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a4:	e007      	b.n	80096b6 <lfs_fs_rawtraverse+0x286>
            continue;
 80096a6:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80096a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1ac      	bne.n	800960e <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3774      	adds	r7, #116	; 0x74
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd90      	pop	{r4, r7, pc}
 80096be:	bf00      	nop
 80096c0:	080186f8 	.word	0x080186f8
 80096c4:	080186b4 	.word	0x080186b4
 80096c8:	080185ac 	.word	0x080185ac
 80096cc:	08018bcc 	.word	0x08018bcc
 80096d0:	700ffc00 	.word	0x700ffc00

080096d4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80096ec:	4a2d      	ldr	r2, [pc, #180]	; (80097a4 <lfs_fs_pred+0xd0>)
 80096ee:	f107 0314 	add.w	r3, r7, #20
 80096f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096f6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80096fa:	2301      	movs	r3, #1
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009702:	e03e      	b.n	8009782 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3318      	adds	r3, #24
 8009708:	f107 0214 	add.w	r2, r7, #20
 800970c:	4611      	mov	r1, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f7fa fa50 	bl	8003bb4 <lfs_pair_issync>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d009      	beq.n	800972e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800971a:	4b23      	ldr	r3, [pc, #140]	; (80097a8 <lfs_fs_pred+0xd4>)
 800971c:	f241 2230 	movw	r2, #4656	; 0x1230
 8009720:	4922      	ldr	r1, [pc, #136]	; (80097ac <lfs_fs_pred+0xd8>)
 8009722:	4823      	ldr	r0, [pc, #140]	; (80097b0 <lfs_fs_pred+0xdc>)
 8009724:	f00d f8d8 	bl	80168d8 <iprintf>
            return LFS_ERR_CORRUPT;
 8009728:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800972c:	e036      	b.n	800979c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800972e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	429a      	cmp	r2, r3
 8009734:	d10a      	bne.n	800974c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	3301      	adds	r3, #1
 8009750:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3318      	adds	r3, #24
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	4618      	mov	r0, r3
 800975a:	f7fa fa01 	bl	8003b60 <lfs_pair_cmp>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <lfs_fs_pred+0x94>
            return 0;
 8009764:	2300      	movs	r3, #0
 8009766:	e019      	b.n	800979c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3318      	adds	r3, #24
 800976c:	461a      	mov	r2, r3
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7fc f87b 	bl	800586c <lfs_dir_fetch>
 8009776:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <lfs_fs_pred+0xae>
            return err;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	e00c      	b.n	800979c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3318      	adds	r3, #24
 8009786:	4618      	mov	r0, r3
 8009788:	f7fa f9cf 	bl	8003b2a <lfs_pair_isnull>
 800978c:	4603      	mov	r3, r0
 800978e:	f083 0301 	eor.w	r3, r3, #1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1b5      	bne.n	8009704 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009798:	f06f 0301 	mvn.w	r3, #1
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	; 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	080186f8 	.word	0x080186f8
 80097a8:	080186b4 	.word	0x080186b4
 80097ac:	080185ac 	.word	0x080185ac
 80097b0:	08018bcc 	.word	0x08018bcc

080097b4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80097b4:	b5b0      	push	{r4, r5, r7, lr}
 80097b6:	b08e      	sub	sp, #56	; 0x38
 80097b8:	af04      	add	r7, sp, #16
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80097d4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 80097da:	69dd      	ldr	r5, [r3, #28]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	6852      	ldr	r2, [r2, #4]
 80097e4:	2108      	movs	r1, #8
 80097e6:	9103      	str	r1, [sp, #12]
 80097e8:	f107 0110 	add.w	r1, r7, #16
 80097ec:	9102      	str	r1, [sp, #8]
 80097ee:	9201      	str	r2, [sp, #4]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462b      	mov	r3, r5
 80097f4:	4622      	mov	r2, r4
 80097f6:	4601      	mov	r1, r0
 80097f8:	6a38      	ldr	r0, [r7, #32]
 80097fa:	f7f9 fe11 	bl	8003420 <lfs_bd_read>
 80097fe:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <lfs_fs_parent_match+0x56>
        return err;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	e012      	b.n	8009830 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800980a:	f107 0310 	add.w	r3, r7, #16
 800980e:	4618      	mov	r0, r3
 8009810:	f7fa f9fd 	bl	8003c0e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	f107 0310 	add.w	r3, r7, #16
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7fa f99e 	bl	8003b60 <lfs_pair_cmp>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2301      	movne	r3, #1
 800982c:	2300      	moveq	r3, #0
 800982e:	b2db      	uxtb	r3, r3
}
 8009830:	4618      	mov	r0, r3
 8009832:	3728      	adds	r7, #40	; 0x28
 8009834:	46bd      	mov	sp, r7
 8009836:	bdb0      	pop	{r4, r5, r7, pc}

08009838 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b090      	sub	sp, #64	; 0x40
 800983c:	af04      	add	r7, sp, #16
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009850:	4a33      	ldr	r2, [pc, #204]	; (8009920 <lfs_fs_parent+0xe8>)
 8009852:	f107 031c 	add.w	r3, r7, #28
 8009856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800985a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8009862:	2301      	movs	r3, #1
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8009866:	e049      	b.n	80098fc <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3318      	adds	r3, #24
 800986c:	f107 021c 	add.w	r2, r7, #28
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f7fa f99e 	bl	8003bb4 <lfs_pair_issync>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d009      	beq.n	8009892 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800987e:	4b29      	ldr	r3, [pc, #164]	; (8009924 <lfs_fs_parent+0xec>)
 8009880:	f241 2271 	movw	r2, #4721	; 0x1271
 8009884:	4928      	ldr	r1, [pc, #160]	; (8009928 <lfs_fs_parent+0xf0>)
 8009886:	4829      	ldr	r0, [pc, #164]	; (800992c <lfs_fs_parent+0xf4>)
 8009888:	f00d f826 	bl	80168d8 <iprintf>
            return LFS_ERR_CORRUPT;
 800988c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009890:	e041      	b.n	8009916 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 8009892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	429a      	cmp	r2, r3
 8009898:	d10a      	bne.n	80098b0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	69db      	ldr	r3, [r3, #28]
 80098a4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	3301      	adds	r3, #1
 80098b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80098c4:	617b      	str	r3, [r7, #20]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80098cc:	f107 0310 	add.w	r3, r7, #16
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	4b17      	ldr	r3, [pc, #92]	; (8009930 <lfs_fs_parent+0xf8>)
 80098d4:	9302      	str	r3, [sp, #8]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	4b16      	ldr	r3, [pc, #88]	; (8009934 <lfs_fs_parent+0xfc>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	4b16      	ldr	r3, [pc, #88]	; (8009938 <lfs_fs_parent+0x100>)
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7fb fbfa 	bl	80050dc <lfs_dir_fetchmatch>
 80098e8:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d005      	beq.n	80098fc <lfs_fs_parent+0xc4>
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	f113 0f02 	cmn.w	r3, #2
 80098f6:	d001      	beq.n	80098fc <lfs_fs_parent+0xc4>
            return tag;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	e00c      	b.n	8009916 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3318      	adds	r3, #24
 8009900:	4618      	mov	r0, r3
 8009902:	f7fa f912 	bl	8003b2a <lfs_pair_isnull>
 8009906:	4603      	mov	r3, r0
 8009908:	f083 0301 	eor.w	r3, r3, #1
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1aa      	bne.n	8009868 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009912:	f06f 0301 	mvn.w	r3, #1
}
 8009916:	4618      	mov	r0, r3
 8009918:	3730      	adds	r7, #48	; 0x30
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	080186f8 	.word	0x080186f8
 8009924:	080186b4 	.word	0x080186b4
 8009928:	080185ac 	.word	0x080185ac
 800992c:	08018bcc 	.word	0x08018bcc
 8009930:	080097b5 	.word	0x080097b5
 8009934:	20000008 	.word	0x20000008
 8009938:	7ff003ff 	.word	0x7ff003ff

0800993c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	025b      	lsls	r3, r3, #9
 8009954:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	4618      	mov	r0, r3
 800997a:	f7fa f9f7 	bl	8003d6c <lfs_tag_size>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <lfs_fs_preporphans+0x32>
 8009984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009988:	2b00      	cmp	r3, #0
 800998a:	da06      	bge.n	800999a <lfs_fs_preporphans+0x32>
 800998c:	4b1a      	ldr	r3, [pc, #104]	; (80099f8 <lfs_fs_preporphans+0x90>)
 800998e:	4a1b      	ldr	r2, [pc, #108]	; (80099fc <lfs_fs_preporphans+0x94>)
 8009990:	f241 2192 	movw	r1, #4754	; 0x1292
 8009994:	481a      	ldr	r0, [pc, #104]	; (8009a00 <lfs_fs_preporphans+0x98>)
 8009996:	f00c fb79 	bl	801608c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fa f9e4 	bl	8003d6c <lfs_tag_size>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80099aa:	d90a      	bls.n	80099c2 <lfs_fs_preporphans+0x5a>
 80099ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dd06      	ble.n	80099c2 <lfs_fs_preporphans+0x5a>
 80099b4:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <lfs_fs_preporphans+0x9c>)
 80099b6:	4a11      	ldr	r2, [pc, #68]	; (80099fc <lfs_fs_preporphans+0x94>)
 80099b8:	f241 2193 	movw	r1, #4755	; 0x1293
 80099bc:	4810      	ldr	r0, [pc, #64]	; (8009a00 <lfs_fs_preporphans+0x98>)
 80099be:	f00c fb65 	bl	801608c <__assert_func>
    lfs->gstate.tag += orphans;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099ca:	441a      	add	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3330      	adds	r3, #48	; 0x30
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fa fa28 	bl	8003e32 <lfs_gstate_hasorphans>
 80099e2:	4603      	mov	r3, r0
 80099e4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80099e6:	ea44 0203 	orr.w	r2, r4, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd90      	pop	{r4, r7, pc}
 80099f8:	08018da8 	.word	0x08018da8
 80099fc:	0801946c 	.word	0x0801946c
 8009a00:	080185ac 	.word	0x080185ac
 8009a04:	08018de0 	.word	0x08018de0

08009a08 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	460b      	mov	r3, r1
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1a:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <lfs_fs_prepmove+0x70>)
 8009a1c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8009a1e:	897b      	ldrh	r3, [r7, #10]
 8009a20:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009a24:	428b      	cmp	r3, r1
 8009a26:	d006      	beq.n	8009a36 <lfs_fs_prepmove+0x2e>
 8009a28:	897b      	ldrh	r3, [r7, #10]
 8009a2a:	029b      	lsls	r3, r3, #10
 8009a2c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009a30:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009a34:	e000      	b.n	8009a38 <lfs_fs_prepmove+0x30>
 8009a36:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8009a3e:	897b      	ldrh	r3, [r7, #10]
 8009a40:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d002      	beq.n	8009a4e <lfs_fs_prepmove+0x46>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	e000      	b.n	8009a50 <lfs_fs_prepmove+0x48>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8009a54:	897b      	ldrh	r3, [r7, #10]
 8009a56:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d003      	beq.n	8009a66 <lfs_fs_prepmove+0x5e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3304      	adds	r3, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	e000      	b.n	8009a68 <lfs_fs_prepmove+0x60>
 8009a66:	2300      	movs	r3, #0
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009a6c:	bf00      	nop
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	800003ff 	.word	0x800003ff

08009a7c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b098      	sub	sp, #96	; 0x60
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3330      	adds	r3, #48	; 0x30
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fa fa07 	bl	8003e9c <lfs_gstate_needssuperblock>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f083 0301 	eor.w	r3, r3, #1
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <lfs_fs_desuperblock+0x22>
        return 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e04e      	b.n	8009b3c <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1a      	ldr	r2, [r3, #32]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	4927      	ldr	r1, [pc, #156]	; (8009b44 <lfs_fs_desuperblock+0xc8>)
 8009aa8:	9101      	str	r1, [sp, #4]
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	f241 22ac 	movw	r2, #4780	; 0x12ac
 8009ab2:	4925      	ldr	r1, [pc, #148]	; (8009b48 <lfs_fs_desuperblock+0xcc>)
 8009ab4:	4825      	ldr	r0, [pc, #148]	; (8009b4c <lfs_fs_desuperblock+0xd0>)
 8009ab6:	f00c ff0f 	bl	80168d8 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f103 0220 	add.w	r2, r3, #32
 8009ac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fb fed0 	bl	800586c <lfs_dir_fetch>
 8009acc:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8009ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <lfs_fs_desuperblock+0x5c>
        return err;
 8009ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad6:	e031      	b.n	8009b3c <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7fa fb75 	bl	80041c8 <lfs_fs_disk_version>
 8009ade:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8009ae0:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae6:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8009ae8:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8009af4:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8009b00:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8009b02:	f107 031c 	add.w	r3, r7, #28
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa fad4 	bl	80040b4 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <lfs_fs_desuperblock+0xd4>)
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	f107 031c 	add.w	r3, r7, #28
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	f107 0214 	add.w	r2, r7, #20
 8009b1a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009b1e:	2301      	movs	r3, #1
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fd fcad 	bl	8007480 <lfs_dir_commit>
 8009b26:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <lfs_fs_desuperblock+0xb6>
        return err;
 8009b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b30:	e004      	b.n	8009b3c <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8009b32:	2100      	movs	r1, #0
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff ff01 	bl	800993c <lfs_fs_prepsuperblock>
    return 0;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3758      	adds	r7, #88	; 0x58
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	080186b4 	.word	0x080186b4
 8009b48:	080185ac 	.word	0x080185ac
 8009b4c:	08018e18 	.word	0x08018e18
 8009b50:	20100018 	.word	0x20100018

08009b54 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8009b54:	b5b0      	push	{r4, r5, r7, lr}
 8009b56:	b094      	sub	sp, #80	; 0x50
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	333c      	adds	r3, #60	; 0x3c
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fa f988 	bl	8003e76 <lfs_gstate_hasmove>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f083 0301 	eor.w	r3, r3, #1
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <lfs_fs_demove+0x22>
        return 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	e05b      	b.n	8009c2e <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fa f8e2 	bl	8003d4c <lfs_tag_id>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4b2a      	ldr	r3, [pc, #168]	; (8009c38 <lfs_fs_demove+0xe4>)
 8009b8e:	9302      	str	r3, [sp, #8]
 8009b90:	9201      	str	r2, [sp, #4]
 8009b92:	9400      	str	r4, [sp, #0]
 8009b94:	462b      	mov	r3, r5
 8009b96:	f241 22d4 	movw	r2, #4820	; 0x12d4
 8009b9a:	4928      	ldr	r1, [pc, #160]	; (8009c3c <lfs_fs_demove+0xe8>)
 8009b9c:	4828      	ldr	r0, [pc, #160]	; (8009c40 <lfs_fs_demove+0xec>)
 8009b9e:	f00c fe9b 	bl	80168d8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fa f8a6 	bl	8003cf8 <lfs_tag_type3>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d006      	beq.n	8009bc6 <lfs_fs_demove+0x72>
 8009bb8:	4b22      	ldr	r3, [pc, #136]	; (8009c44 <lfs_fs_demove+0xf0>)
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <lfs_fs_demove+0xf4>)
 8009bbc:	f241 21db 	movw	r1, #4827	; 0x12db
 8009bc0:	481e      	ldr	r0, [pc, #120]	; (8009c3c <lfs_fs_demove+0xe8>)
 8009bc2:	f00c fa63 	bl	801608c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009bcc:	f107 0318 	add.w	r3, r7, #24
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fb fe4a 	bl	800586c <lfs_dir_fetch>
 8009bd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8009bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <lfs_fs_demove+0x90>
        return err;
 8009be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be2:	e024      	b.n	8009c2e <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fa f8af 	bl	8003d4c <lfs_tag_id>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7ff ff05 	bl	8009a08 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8009bfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009c06:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009c0a:	613b      	str	r3, [r7, #16]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
 8009c10:	f107 0210 	add.w	r2, r7, #16
 8009c14:	f107 0118 	add.w	r1, r7, #24
 8009c18:	2301      	movs	r3, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7fd fc30 	bl	8007480 <lfs_dir_commit>
 8009c20:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8009c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <lfs_fs_demove+0xd8>
        return err;
 8009c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2a:	e000      	b.n	8009c2e <lfs_fs_demove+0xda>
    }

    return 0;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3740      	adds	r7, #64	; 0x40
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bdb0      	pop	{r4, r5, r7, pc}
 8009c36:	bf00      	nop
 8009c38:	080186b4 	.word	0x080186b4
 8009c3c:	080185ac 	.word	0x080185ac
 8009c40:	08018e4c 	.word	0x08018e4c
 8009c44:	08018e80 	.word	0x08018e80
 8009c48:	08019480 	.word	0x08019480

08009c4c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8009c4c:	b5b0      	push	{r4, r5, r7, lr}
 8009c4e:	b0b2      	sub	sp, #200	; 0xc8
 8009c50:	af04      	add	r7, sp, #16
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3330      	adds	r3, #48	; 0x30
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fa f8e8 	bl	8003e32 <lfs_gstate_hasorphans>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f083 0301 	eor.w	r3, r3, #1
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <lfs_fs_deorphan+0x26>
        return 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e187      	b.n	8009f82 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8009c78:	e170      	b.n	8009f5c <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8009c7a:	f107 0308 	add.w	r3, r7, #8
 8009c7e:	2220      	movs	r2, #32
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f00c fa88 	bl	8016198 <memset>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	77fb      	strb	r3, [r7, #31]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8009c96:	e149      	b.n	8009f2c <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	f103 0218 	add.w	r2, r3, #24
 8009ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fb fde0 	bl	800586c <lfs_dir_fetch>
 8009cac:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8009cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <lfs_fs_deorphan+0x72>
                return err;
 8009cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cbc:	e161      	b.n	8009f82 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	f083 0301 	eor.w	r3, r3, #1
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 8126 	beq.w	8009f18 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8009ccc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	3318      	adds	r3, #24
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fdad 	bl	8009838 <lfs_fs_parent>
 8009cde:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8009ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da07      	bge.n	8009cfa <lfs_fs_deorphan+0xae>
 8009cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cee:	f113 0f02 	cmn.w	r3, #2
 8009cf2:	d002      	beq.n	8009cfa <lfs_fs_deorphan+0xae>
                    return tag;
 8009cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cf8:	e143      	b.n	8009f82 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8009cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 80ac 	bne.w	8009e5c <lfs_fs_deorphan+0x210>
 8009d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d08:	f113 0f02 	cmn.w	r3, #2
 8009d0c:	f000 80a6 	beq.w	8009e5c <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8009d10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009d18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	4a9a      	ldr	r2, [pc, #616]	; (8009f8c <lfs_fs_deorphan+0x340>)
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7fa fc78 	bl	8004618 <lfs_dir_get>
 8009d28:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8009d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da02      	bge.n	8009d3a <lfs_fs_deorphan+0xee>
                        return state;
 8009d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d38:	e0eb      	b.n	8009f12 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8009d3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f9 ff65 	bl	8003c0e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8009d44:	f107 0308 	add.w	r3, r7, #8
 8009d48:	f103 0218 	add.w	r2, r3, #24
 8009d4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d50:	4611      	mov	r1, r2
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7f9 ff2e 	bl	8003bb4 <lfs_pair_issync>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f083 0301 	eor.w	r3, r3, #1
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d07b      	beq.n	8009e5c <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8009d64:	6a38      	ldr	r0, [r7, #32]
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d6c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009d70:	4c87      	ldr	r4, [pc, #540]	; (8009f90 <lfs_fs_deorphan+0x344>)
 8009d72:	9403      	str	r4, [sp, #12]
 8009d74:	9102      	str	r1, [sp, #8]
 8009d76:	9201      	str	r2, [sp, #4]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f241 3221 	movw	r2, #4897	; 0x1321
 8009d80:	4984      	ldr	r1, [pc, #528]	; (8009f94 <lfs_fs_deorphan+0x348>)
 8009d82:	4885      	ldr	r0, [pc, #532]	; (8009f98 <lfs_fs_deorphan+0x34c>)
 8009d84:	f00c fda8 	bl	80168d8 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8009d88:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8009d8c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3330      	adds	r3, #48	; 0x30
 8009d94:	f107 0208 	add.w	r2, r7, #8
 8009d98:	4611      	mov	r1, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fa f892 	bl	8003ec4 <lfs_gstate_hasmovehere>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01c      	beq.n	8009de0 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f9 ffce 	bl	8003d4c <lfs_tag_id>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8009dbe:	4874      	ldr	r0, [pc, #464]	; (8009f90 <lfs_fs_deorphan+0x344>)
 8009dc0:	9002      	str	r0, [sp, #8]
 8009dc2:	9201      	str	r2, [sp, #4]
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	f241 322c 	movw	r2, #4908	; 0x132c
 8009dcc:	4971      	ldr	r1, [pc, #452]	; (8009f94 <lfs_fs_deorphan+0x348>)
 8009dce:	4873      	ldr	r0, [pc, #460]	; (8009f9c <lfs_fs_deorphan+0x350>)
 8009dd0:	f00c fd82 	bl	80168d8 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fe14 	bl	8009a08 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8009de0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7f9 ff2c 	bl	8003c42 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8009dea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009dee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d007      	beq.n	8009e06 <lfs_fs_deorphan+0x1ba>
 8009df6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8009dfa:	029b      	lsls	r3, r3, #10
 8009dfc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009e00:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009e04:	e000      	b.n	8009e08 <lfs_fs_deorphan+0x1bc>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e12:	4b63      	ldr	r3, [pc, #396]	; (8009fa0 <lfs_fs_deorphan+0x354>)
 8009e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009e1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e20:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	2302      	movs	r3, #2
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fd f82e 	bl	8006e8c <lfs_dir_orphaningcommit>
 8009e30:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8009e34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f9 fee8 	bl	8003c0e <lfs_pair_fromle32>
                        if (state < 0) {
 8009e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da02      	bge.n	8009e4c <lfs_fs_deorphan+0x200>
                            return state;
 8009e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8009e4a:	e062      	b.n	8009f12 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8009e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d16b      	bne.n	8009f2c <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8009e5a:	e067      	b.n	8009f2c <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8009e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d159      	bne.n	8009f18 <lfs_fs_deorphan+0x2cc>
 8009e64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e68:	f113 0f02 	cmn.w	r3, #2
 8009e6c:	d154      	bne.n	8009f18 <lfs_fs_deorphan+0x2cc>
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d051      	beq.n	8009f18 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8009e74:	6a3a      	ldr	r2, [r7, #32]
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	4945      	ldr	r1, [pc, #276]	; (8009f90 <lfs_fs_deorphan+0x344>)
 8009e7a:	9101      	str	r1, [sp, #4]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	f241 324c 	movw	r2, #4940	; 0x134c
 8009e84:	4943      	ldr	r1, [pc, #268]	; (8009f94 <lfs_fs_deorphan+0x348>)
 8009e86:	4847      	ldr	r0, [pc, #284]	; (8009fa4 <lfs_fs_deorphan+0x358>)
 8009e88:	f00c fd26 	bl	80168d8 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8009e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fb fd03 	bl	80058a4 <lfs_dir_getgstate>
 8009e9e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8009ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <lfs_fs_deorphan+0x264>
                        return err;
 8009eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009eae:	e030      	b.n	8009f12 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8009eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eb4:	3318      	adds	r3, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7f9 fec3 	bl	8003c42 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8009ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ec0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8009ec4:	051a      	lsls	r2, r3, #20
 8009ec6:	4b38      	ldr	r3, [pc, #224]	; (8009fa8 <lfs_fs_deorphan+0x35c>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	673b      	str	r3, [r7, #112]	; 0x70
 8009ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ed0:	3318      	adds	r3, #24
 8009ed2:	677b      	str	r3, [r7, #116]	; 0x74
 8009ed4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	2301      	movs	r3, #1
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7fc ffd4 	bl	8006e8c <lfs_dir_orphaningcommit>
 8009ee4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8009ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eec:	3318      	adds	r3, #24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7f9 fe8d 	bl	8003c0e <lfs_pair_fromle32>
                    if (state < 0) {
 8009ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da02      	bge.n	8009f02 <lfs_fs_deorphan+0x2b6>
                        return state;
 8009efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8009f00:	e03f      	b.n	8009f82 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8009f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d104      	bne.n	8009f14 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8009f10:	e00c      	b.n	8009f2c <lfs_fs_deorphan+0x2e0>
                return err;
 8009f12:	e036      	b.n	8009f82 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8009f14:	bf00      	nop
 8009f16:	e009      	b.n	8009f2c <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8009f18:	f107 0408 	add.w	r4, r7, #8
 8009f1c:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8009f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	3318      	adds	r3, #24
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f9 fdf9 	bl	8003b2a <lfs_pair_isnull>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f083 0301 	eor.w	r3, r3, #1
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f47f aea9 	bne.w	8009c98 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8009f46:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <lfs_fs_deorphan+0x306>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e002      	b.n	8009f58 <lfs_fs_deorphan+0x30c>
 8009f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f56:	3301      	adds	r3, #1
 8009f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8009f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	f77f ae8a 	ble.w	8009c7a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3330      	adds	r3, #48	; 0x30
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7f9 ff74 	bl	8003e58 <lfs_gstate_getorphans>
 8009f70:	4603      	mov	r3, r0
 8009f72:	425b      	negs	r3, r3
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	b25b      	sxtb	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff fcf4 	bl	8009968 <lfs_fs_preporphans>
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	37b8      	adds	r7, #184	; 0xb8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	7ffffc00 	.word	0x7ffffc00
 8009f90:	080186b4 	.word	0x080186b4
 8009f94:	080185ac 	.word	0x080185ac
 8009f98:	08018eb4 	.word	0x08018eb4
 8009f9c:	08018ef8 	.word	0x08018ef8
 8009fa0:	600ffc08 	.word	0x600ffc08
 8009fa4:	08018f40 	.word	0x08018f40
 8009fa8:	000ffc08 	.word	0x000ffc08

08009fac <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fd61 	bl	8009a7c <lfs_fs_desuperblock>
 8009fba:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <lfs_fs_forceconsistency+0x1a>
        return err;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	e013      	b.n	8009fee <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fdc4 	bl	8009b54 <lfs_fs_demove>
 8009fcc:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <lfs_fs_forceconsistency+0x2c>
        return err;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	e00a      	b.n	8009fee <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8009fd8:	2101      	movs	r1, #1
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff fe36 	bl	8009c4c <lfs_fs_deorphan>
 8009fe0:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <lfs_fs_forceconsistency+0x40>
        return err;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	e000      	b.n	8009fee <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
    return 0;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800a028:	f107 0208 	add.w	r2, r7, #8
 800a02c:	2300      	movs	r3, #0
 800a02e:	4907      	ldr	r1, [pc, #28]	; (800a04c <lfs_fs_rawsize+0x30>)
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff f9fd 	bl	8009430 <lfs_fs_rawtraverse>
 800a036:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <lfs_fs_rawsize+0x26>
        return err;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	e000      	b.n	800a044 <lfs_fs_rawsize+0x28>
    }

    return size;
 800a042:	68bb      	ldr	r3, [r7, #8]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	08009ff7 	.word	0x08009ff7

0800a050 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <lfs_format+0x18>
        return err;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	e005      	b.n	800a074 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe ff14 	bl	8008e98 <lfs_rawformat>
 800a070:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a072:	68fb      	ldr	r3, [r7, #12]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <lfs_mount+0x18>
        return err;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	e005      	b.n	800a0a0 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe ffb0 	bl	8008ffc <lfs_rawmount>
 800a09c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a09e:	68fb      	ldr	r3, [r7, #12]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]
    if (err) {
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <lfs_file_open+0x1c>
        return err;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	e01a      	b.n	800a0fa <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fa f82a 	bl	8004124 <lfs_mlist_isopen>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f083 0301 	eor.w	r3, r3, #1
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d106      	bne.n	800a0ea <lfs_file_open+0x42>
 800a0dc:	4b09      	ldr	r3, [pc, #36]	; (800a104 <lfs_file_open+0x5c>)
 800a0de:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <lfs_file_open+0x60>)
 800a0e0:	f241 712a 	movw	r1, #5930	; 0x172a
 800a0e4:	4809      	ldr	r0, [pc, #36]	; (800a10c <lfs_file_open+0x64>)
 800a0e6:	f00b ffd1 	bl	801608c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7fd fef1 	bl	8007ed8 <lfs_file_rawopen>
 800a0f6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	08018f90 	.word	0x08018f90
 800a108:	08019490 	.word	0x08019490
 800a10c:	080185ac 	.word	0x080185ac

0800a110 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]


	int err = LFS_LOCK(lfs->cfg);
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <lfs_file_close+0x18>
        return err;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	e015      	b.n	800a154 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f9 fff8 	bl	8004124 <lfs_mlist_isopen>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <lfs_file_close+0x38>
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <lfs_file_close+0x4c>)
 800a13c:	4a08      	ldr	r2, [pc, #32]	; (800a160 <lfs_file_close+0x50>)
 800a13e:	f241 7150 	movw	r1, #5968	; 0x1750
 800a142:	4808      	ldr	r0, [pc, #32]	; (800a164 <lfs_file_close+0x54>)
 800a144:	f00b ffa2 	bl	801608c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fd fedc 	bl	8007f08 <lfs_file_rawclose>
 800a150:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a152:	68fb      	ldr	r3, [r7, #12]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08018fc8 	.word	0x08018fc8
 800a160:	080194a0 	.word	0x080194a0
 800a164:	080185ac 	.word	0x080185ac

0800a168 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
    if (err) {
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <lfs_file_read+0x1c>
        return err;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	e017      	b.n	800a1b4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7f9 ffca 	bl	8004124 <lfs_mlist_isopen>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <lfs_file_read+0x3c>
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <lfs_file_read+0x54>)
 800a198:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <lfs_file_read+0x58>)
 800a19a:	f241 7172 	movw	r1, #6002	; 0x1772
 800a19e:	4809      	ldr	r0, [pc, #36]	; (800a1c4 <lfs_file_read+0x5c>)
 800a1a0:	f00b ff74 	bl	801608c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	68b9      	ldr	r1, [r7, #8]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7fe f9f8 	bl	80085a0 <lfs_file_rawread>
 800a1b0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a1b2:	693b      	ldr	r3, [r7, #16]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	08018fc8 	.word	0x08018fc8
 800a1c0:	080194b0 	.word	0x080194b0
 800a1c4:	080185ac 	.word	0x080185ac

0800a1c8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
    if (err) {
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <lfs_file_write+0x1c>
        return err;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	e017      	b.n	800a214 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7f9 ff9a 	bl	8004124 <lfs_mlist_isopen>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <lfs_file_write+0x3c>
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <lfs_file_write+0x54>)
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <lfs_file_write+0x58>)
 800a1fa:	f241 7184 	movw	r1, #6020	; 0x1784
 800a1fe:	4809      	ldr	r0, [pc, #36]	; (800a224 <lfs_file_write+0x5c>)
 800a200:	f00b ff44 	bl	801608c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7fe fb28 	bl	8008860 <lfs_file_rawwrite>
 800a210:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a212:	693b      	ldr	r3, [r7, #16]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	08018fc8 	.word	0x08018fc8
 800a220:	080194c0 	.word	0x080194c0
 800a224:	080185ac 	.word	0x080185ac

0800a228 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]
    if (err) {
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <lfs_file_seek+0x1c>
        return err;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	e017      	b.n	800a274 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7f9 ff6a 	bl	8004124 <lfs_mlist_isopen>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <lfs_file_seek+0x3c>
 800a256:	4b09      	ldr	r3, [pc, #36]	; (800a27c <lfs_file_seek+0x54>)
 800a258:	4a09      	ldr	r2, [pc, #36]	; (800a280 <lfs_file_seek+0x58>)
 800a25a:	f241 7196 	movw	r1, #6038	; 0x1796
 800a25e:	4809      	ldr	r0, [pc, #36]	; (800a284 <lfs_file_seek+0x5c>)
 800a260:	f00b ff14 	bl	801608c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7fe fb7c 	bl	8008968 <lfs_file_rawseek>
 800a270:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a272:	693b      	ldr	r3, [r7, #16]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	08018fc8 	.word	0x08018fc8
 800a280:	080194d0 	.word	0x080194d0
 800a284:	080185ac 	.word	0x080185ac

0800a288 <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800a294:	2300      	movs	r3, #0
 800a296:	617b      	str	r3, [r7, #20]
    if (err) {
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <lfs_dir_open+0x1a>
        return err;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	e019      	b.n	800a2d6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7f9 ff3b 	bl	8004124 <lfs_mlist_isopen>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f083 0301 	eor.w	r3, r3, #1
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <lfs_dir_open+0x40>
 800a2ba:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <lfs_dir_open+0x58>)
 800a2bc:	4a09      	ldr	r2, [pc, #36]	; (800a2e4 <lfs_dir_open+0x5c>)
 800a2be:	f241 71f3 	movw	r1, #6131	; 0x17f3
 800a2c2:	4809      	ldr	r0, [pc, #36]	; (800a2e8 <lfs_dir_open+0x60>)
 800a2c4:	f00b fee2 	bl	801608c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7fd f8fd 	bl	80074cc <lfs_dir_rawopen>
 800a2d2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a2d4:	697b      	ldr	r3, [r7, #20]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	08019000 	.word	0x08019000
 800a2e4:	080194e0 	.word	0x080194e0
 800a2e8:	080185ac 	.word	0x080185ac

0800a2ec <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <lfs_dir_close+0x18>
        return err;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	e005      	b.n	800a310 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7fd f95a 	bl	80075c0 <lfs_dir_rawclose>
 800a30c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a30e:	68fb      	ldr	r3, [r7, #12]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
    if (err) {
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <lfs_dir_read+0x1a>
        return err;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	e006      	b.n	800a340 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	68b9      	ldr	r1, [r7, #8]
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7fd f950 	bl	80075dc <lfs_dir_rawread>
 800a33c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a33e:	697b      	ldr	r3, [r7, #20]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e024      	b.n	800a3a8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	091a      	lsrs	r2, r3, #4
 800a362:	6939      	ldr	r1, [r7, #16]
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	440b      	add	r3, r1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4619      	mov	r1, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	404b      	eors	r3, r1
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	4912      	ldr	r1, [pc, #72]	; (800a3c0 <lfs_crc+0x78>)
 800a376:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a37a:	4053      	eors	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	091a      	lsrs	r2, r3, #4
 800a382:	6939      	ldr	r1, [r7, #16]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	440b      	add	r3, r1
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	091b      	lsrs	r3, r3, #4
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	4619      	mov	r1, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	404b      	eors	r3, r1
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	4909      	ldr	r1, [pc, #36]	; (800a3c0 <lfs_crc+0x78>)
 800a39a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a39e:	4053      	eors	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d3d6      	bcc.n	800a35e <lfs_crc+0x16>
    }

    return crc;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	080194f0 	.word	0x080194f0

0800a3c4 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
//	}
//	__HAL_TIM_SET_COUNTER(&htim2, 0);
//	HAL_TIM_Base_Start(&htim2);
//	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
//	HAL_TIM_Base_Stop(&htim2);
	HAL_Delay(1000);
 800a3cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3d0:	f002 fcb0 	bl	800cd34 <HAL_Delay>
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <nor_cs_assert>:

void nor_cs_assert(){
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2108      	movs	r1, #8
 800a3e4:	4802      	ldr	r0, [pc, #8]	; (800a3f0 <nor_cs_assert+0x14>)
 800a3e6:	f003 ff63 	bl	800e2b0 <HAL_GPIO_WritePin>
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	40020c00 	.word	0x40020c00

0800a3f4 <nor_cs_deassert>:

void nor_cs_deassert(){
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	2108      	movs	r1, #8
 800a3fc:	4802      	ldr	r0, [pc, #8]	; (800a408 <nor_cs_deassert+0x14>)
 800a3fe:	f003 ff57 	bl	800e2b0 <HAL_GPIO_WritePin>
}
 800a402:	bf00      	nop
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	40020c00 	.word	0x40020c00

0800a40c <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Transmit(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 800a416:	4b07      	ldr	r3, [pc, #28]	; (800a434 <nor_spi_tx+0x28>)
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, pData, Size, 1000);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	4804      	ldr	r0, [pc, #16]	; (800a438 <nor_spi_tx+0x2c>)
 800a428:	f005 fdaf 	bl	800ff8a <HAL_SPI_Transmit>
//	while (DmaEnd == 0);
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000318 	.word	0x20000318
 800a438:	20000920 	.word	0x20000920

0800a43c <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
//	HAL_SPI_Receive(&hspi3, pData, Size, 100);
	DmaEnd = 0;
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <nor_spi_rx+0x28>)
 800a448:	2200      	movs	r2, #0
 800a44a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, pData, Size, 1000);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	b29a      	uxth	r2, r3
 800a450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	4804      	ldr	r0, [pc, #16]	; (800a468 <nor_spi_rx+0x2c>)
 800a458:	f005 fed3 	bl	8010202 <HAL_SPI_Receive>
//	DmaEnd =0;
//	while (DmaEnd == 0);
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000318 	.word	0x20000318
 800a468:	20000920 	.word	0x20000920

0800a46c <__init_nor>:

void __init_nor(){
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <__init_nor+0x38>)
 800a472:	4a0d      	ldr	r2, [pc, #52]	; (800a4a8 <__init_nor+0x3c>)
 800a474:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 800a476:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <__init_nor+0x38>)
 800a478:	4a0c      	ldr	r2, [pc, #48]	; (800a4ac <__init_nor+0x40>)
 800a47a:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 800a47c:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <__init_nor+0x38>)
 800a47e:	4a0c      	ldr	r2, [pc, #48]	; (800a4b0 <__init_nor+0x44>)
 800a480:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 800a482:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <__init_nor+0x38>)
 800a484:	4a0b      	ldr	r2, [pc, #44]	; (800a4b4 <__init_nor+0x48>)
 800a486:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 800a488:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <__init_nor+0x38>)
 800a48a:	4a0b      	ldr	r2, [pc, #44]	; (800a4b8 <__init_nor+0x4c>)
 800a48c:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 800a48e:	4805      	ldr	r0, [pc, #20]	; (800a4a4 <__init_nor+0x38>)
 800a490:	f000 fe6b 	bl	800b16a <NOR_Init>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <__init_nor+0x32>
		Error_Handler();
 800a49a:	f000 fd39 	bl	800af10 <Error_Handler>
	}
}
 800a49e:	bf00      	nop
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000cf0 	.word	0x20000cf0
 800a4a8:	0800a3dd 	.word	0x0800a3dd
 800a4ac:	0800a3f5 	.word	0x0800a3f5
 800a4b0:	0800a3c5 	.word	0x0800a3c5
 800a4b4:	0800a43d 	.word	0x0800a43d
 800a4b8:	0800a40d 	.word	0x0800a40d

0800a4bc <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	4806      	ldr	r0, [pc, #24]	; (800a4f0 <_fs_read+0x34>)
 800a4d6:	f001 f89b 	bl	800b610 <NOR_ReadSector>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <_fs_read+0x28>
		return 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e001      	b.n	800a4e8 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 800a4e4:	f06f 0304 	mvn.w	r3, #4
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000cf0 	.word	0x20000cf0

0800a4f4 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <_fs_write+0x34>)
 800a50e:	f000 ffd9 	bl	800b4c4 <NOR_WriteSector>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <_fs_write+0x28>
		return 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	e001      	b.n	800a520 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 800a51c:	f06f 0304 	mvn.w	r3, #4
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20000cf0 	.word	0x20000cf0

0800a52c <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	4806      	ldr	r0, [pc, #24]	; (800a554 <_fs_erase+0x28>)
 800a53a:	f000 ff2f 	bl	800b39c <NOR_EraseSector>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <_fs_erase+0x1c>
		return 0;
 800a544:	2300      	movs	r3, #0
 800a546:	e001      	b.n	800a54c <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 800a548:	f06f 0304 	mvn.w	r3, #4
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000cf0 	.word	0x20000cf0

0800a558 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
	return 0;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
	...

0800a570 <list_files>:

// Function to list all files and directories in the filesystem
void list_files(lfs_t *lfs) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b0ec      	sub	sp, #432	; 0x1b0
 800a574:	af00      	add	r7, sp, #0
 800a576:	1d3b      	adds	r3, r7, #4
 800a578:	6018      	str	r0, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the root directory
    int err = lfs_dir_open(lfs, &dir, "/");
 800a57a:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800a57e:	1d3b      	adds	r3, r7, #4
 800a580:	4a35      	ldr	r2, [pc, #212]	; (800a658 <list_files+0xe8>)
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	f7ff fe80 	bl	800a288 <lfs_dir_open>
 800a588:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if (err) {
 800a58c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <list_files+0x2c>
        printf("Failed to open directory\n");
 800a594:	4831      	ldr	r0, [pc, #196]	; (800a65c <list_files+0xec>)
 800a596:	f00c fa25 	bl	80169e4 <puts>
 800a59a:	e059      	b.n	800a650 <list_files+0xe0>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 800a59c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a5a0:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800a5a4:	1d3b      	adds	r3, r7, #4
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	f7ff feb6 	bl	800a318 <lfs_dir_read>
 800a5ac:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
        if (err < 0) {
 800a5b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da03      	bge.n	800a5c0 <list_files+0x50>
            printf("Failed to read directory\n");
 800a5b8:	4829      	ldr	r0, [pc, #164]	; (800a660 <list_files+0xf0>)
 800a5ba:	f00c fa13 	bl	80169e4 <puts>
            break;
 800a5be:	e040      	b.n	800a642 <list_files+0xd2>
        }

        // If no more files, break
        if (err == 0) {
 800a5c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d03b      	beq.n	800a640 <list_files+0xd0>
            break;
        }
        uint8_t dir[100];
        // Print the type and name of the file
        if (info.type == LFS_TYPE_REG) {
 800a5c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d118      	bne.n	800a604 <list_files+0x94>
            sprintf(dir,"File: %s\n\0", info.name);
 800a5d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a5d6:	f103 0208 	add.w	r2, r3, #8
 800a5da:	f107 030c 	add.w	r3, r7, #12
 800a5de:	4921      	ldr	r1, [pc, #132]	; (800a664 <list_files+0xf4>)
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f00c fa4b 	bl	8016a7c <siprintf>
            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 800a5e6:	f107 030c 	add.w	r3, r7, #12
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f5 fe0a 	bl	8000204 <strlen>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	f107 010c 	add.w	r1, r7, #12
 800a5f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5fc:	481a      	ldr	r0, [pc, #104]	; (800a668 <list_files+0xf8>)
 800a5fe:	f006 fe6e 	bl	80112de <HAL_UART_Transmit>
 800a602:	e7cb      	b.n	800a59c <list_files+0x2c>
        } else if (info.type == LFS_TYPE_DIR) {
 800a604:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d1c6      	bne.n	800a59c <list_files+0x2c>
        	sprintf(dir,"Directory: %s\n\0", info.name);
 800a60e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a612:	f103 0208 	add.w	r2, r3, #8
 800a616:	f107 030c 	add.w	r3, r7, #12
 800a61a:	4914      	ldr	r1, [pc, #80]	; (800a66c <list_files+0xfc>)
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00c fa2d 	bl	8016a7c <siprintf>

            HAL_UART_Transmit(&huart7, dir, strlen(dir),1000);
 800a622:	f107 030c 	add.w	r3, r7, #12
 800a626:	4618      	mov	r0, r3
 800a628:	f7f5 fdec 	bl	8000204 <strlen>
 800a62c:	4603      	mov	r3, r0
 800a62e:	b29a      	uxth	r2, r3
 800a630:	f107 010c 	add.w	r1, r7, #12
 800a634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a638:	480b      	ldr	r0, [pc, #44]	; (800a668 <list_files+0xf8>)
 800a63a:	f006 fe50 	bl	80112de <HAL_UART_Transmit>
    while (true) {
 800a63e:	e7ad      	b.n	800a59c <list_files+0x2c>
            break;
 800a640:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 800a642:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800a646:	1d3b      	adds	r3, r7, #4
 800a648:	4611      	mov	r1, r2
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	f7ff fe4e 	bl	800a2ec <lfs_dir_close>
}
 800a650:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	080190e0 	.word	0x080190e0
 800a65c:	080190e4 	.word	0x080190e4
 800a660:	08019100 	.word	0x08019100
 800a664:	0801911c 	.word	0x0801911c
 800a668:	20000888 	.word	0x20000888
 800a66c:	08019128 	.word	0x08019128

0800a670 <__init_littefs>:

void __init_littefs(){
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
	static struct lfs_config LfsConfig = {0};
		int Error;

		LfsConfig.read_size = 256;
 800a676:	4b22      	ldr	r3, [pc, #136]	; (800a700 <__init_littefs+0x90>)
 800a678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a67c:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 800a67e:	4b20      	ldr	r3, [pc, #128]	; (800a700 <__init_littefs+0x90>)
 800a680:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a684:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 800a686:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <__init_littefs+0x94>)
 800a688:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a68a:	461a      	mov	r2, r3
 800a68c:	4b1c      	ldr	r3, [pc, #112]	; (800a700 <__init_littefs+0x90>)
 800a68e:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <__init_littefs+0x90>)
 800a692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a696:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 800a698:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <__init_littefs+0x94>)
 800a69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69c:	461a      	mov	r2, r3
 800a69e:	4b18      	ldr	r3, [pc, #96]	; (800a700 <__init_littefs+0x90>)
 800a6a0:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 256;//Nor.info.u32SectorCount/8;
 800a6a2:	4b17      	ldr	r3, [pc, #92]	; (800a700 <__init_littefs+0x90>)
 800a6a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6a8:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 15000;
 800a6aa:	4b15      	ldr	r3, [pc, #84]	; (800a700 <__init_littefs+0x90>)
 800a6ac:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a6b0:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig.read = _fs_read;
 800a6b2:	4b13      	ldr	r3, [pc, #76]	; (800a700 <__init_littefs+0x90>)
 800a6b4:	4a14      	ldr	r2, [pc, #80]	; (800a708 <__init_littefs+0x98>)
 800a6b6:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 800a6b8:	4b11      	ldr	r3, [pc, #68]	; (800a700 <__init_littefs+0x90>)
 800a6ba:	4a14      	ldr	r2, [pc, #80]	; (800a70c <__init_littefs+0x9c>)
 800a6bc:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <__init_littefs+0x90>)
 800a6c0:	4a13      	ldr	r2, [pc, #76]	; (800a710 <__init_littefs+0xa0>)
 800a6c2:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <__init_littefs+0x90>)
 800a6c6:	4a13      	ldr	r2, [pc, #76]	; (800a714 <__init_littefs+0xa4>)
 800a6c8:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 800a6ca:	490d      	ldr	r1, [pc, #52]	; (800a700 <__init_littefs+0x90>)
 800a6cc:	4812      	ldr	r0, [pc, #72]	; (800a718 <__init_littefs+0xa8>)
 800a6ce:	f7ff fcd5 	bl	800a07c <lfs_mount>
 800a6d2:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00d      	beq.n	800a6f6 <__init_littefs+0x86>
			lfs_format(&Lfs, &LfsConfig);
 800a6da:	4909      	ldr	r1, [pc, #36]	; (800a700 <__init_littefs+0x90>)
 800a6dc:	480e      	ldr	r0, [pc, #56]	; (800a718 <__init_littefs+0xa8>)
 800a6de:	f7ff fcb7 	bl	800a050 <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 800a6e2:	4907      	ldr	r1, [pc, #28]	; (800a700 <__init_littefs+0x90>)
 800a6e4:	480c      	ldr	r0, [pc, #48]	; (800a718 <__init_littefs+0xa8>)
 800a6e6:	f7ff fcc9 	bl	800a07c <lfs_mount>
 800a6ea:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <__init_littefs+0x86>
				Error_Handler();
 800a6f2:	f000 fc0d 	bl	800af10 <Error_Handler>
			}
		}

}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	2000031c 	.word	0x2000031c
 800a704:	20000cf0 	.word	0x20000cf0
 800a708:	0800a4bd 	.word	0x0800a4bd
 800a70c:	0800a4f5 	.word	0x0800a4f5
 800a710:	0800a52d 	.word	0x0800a52d
 800a714:	0800a559 	.word	0x0800a559
 800a718:	20000da8 	.word	0x20000da8

0800a71c <list_files_with_size>:


#define PATH_MAX_LEN 256

// Recursive function to list files and directories with full paths
void list_files_with_size(lfs_t *lfs, const char *path) {
 800a71c:	b580      	push	{r7, lr}
 800a71e:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 800a722:	af02      	add	r7, sp, #8
 800a724:	1d3b      	adds	r3, r7, #4
 800a726:	6018      	str	r0, [r3, #0]
 800a728:	463b      	mov	r3, r7
 800a72a:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 800a72c:	463a      	mov	r2, r7
 800a72e:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800a732:	1d3b      	adds	r3, r7, #4
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	f7ff fda6 	bl	800a288 <lfs_dir_open>
 800a73c:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
    if (err) {
 800a740:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <list_files_with_size+0x38>
        printf("Failed to open directory: %s\n", path);
 800a748:	463b      	mov	r3, r7
 800a74a:	6819      	ldr	r1, [r3, #0]
 800a74c:	4844      	ldr	r0, [pc, #272]	; (800a860 <list_files_with_size+0x144>)
 800a74e:	f00c f8c3 	bl	80168d8 <iprintf>
 800a752:	e081      	b.n	800a858 <list_files_with_size+0x13c>
        return;
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 800a754:	f507 7240 	add.w	r2, r7, #768	; 0x300
 800a758:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800a75c:	1d3b      	adds	r3, r7, #4
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	f7ff fdda 	bl	800a318 <lfs_dir_read>
 800a764:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
        if (err < 0) {
 800a768:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	da05      	bge.n	800a77c <list_files_with_size+0x60>
            printf("Failed to read directory: %s\n", path);
 800a770:	463b      	mov	r3, r7
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	483b      	ldr	r0, [pc, #236]	; (800a864 <list_files_with_size+0x148>)
 800a776:	f00c f8af 	bl	80168d8 <iprintf>
            break;
 800a77a:	e066      	b.n	800a84a <list_files_with_size+0x12e>
        }

        // If no more files, break
        if (err == 0) {
 800a77c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d061      	beq.n	800a848 <list_files_with_size+0x12c>
            break;
        }

        // Build the full path for the current file/directory
        char full_path[PATH_MAX_LEN];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, info.name);
 800a784:	463b      	mov	r3, r7
 800a786:	f107 000c 	add.w	r0, r7, #12
 800a78a:	f507 7240 	add.w	r2, r7, #768	; 0x300
 800a78e:	3208      	adds	r2, #8
 800a790:	9200      	str	r2, [sp, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a34      	ldr	r2, [pc, #208]	; (800a868 <list_files_with_size+0x14c>)
 800a796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a79a:	f00c f93b 	bl	8016a14 <sniprintf>
        char pa[500];
        // Check if the entry is a file or directory
        if (info.type == LFS_TYPE_REG) {
 800a79e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d118      	bne.n	800a7da <list_files_with_size+0xbe>
            sprintf(pa,"File: %s, Size: %ld bytes\n", full_path, info.size);
 800a7a8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f107 020c 	add.w	r2, r7, #12
 800a7b2:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800a7b6:	492d      	ldr	r1, [pc, #180]	; (800a86c <list_files_with_size+0x150>)
 800a7b8:	f00c f960 	bl	8016a7c <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 800a7bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7f5 fd1f 	bl	8000204 <strlen>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800a7ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7d2:	4827      	ldr	r0, [pc, #156]	; (800a870 <list_files_with_size+0x154>)
 800a7d4:	f006 fd83 	bl	80112de <HAL_UART_Transmit>
 800a7d8:	e7bc      	b.n	800a754 <list_files_with_size+0x38>
        } else if (info.type == LFS_TYPE_DIR && strcmp(info.name, ".") != 0 && strcmp(info.name, "..") != 0) {
 800a7da:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d1b7      	bne.n	800a754 <list_files_with_size+0x38>
 800a7e4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	4922      	ldr	r1, [pc, #136]	; (800a874 <list_files_with_size+0x158>)
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f5 fcff 	bl	80001f0 <strcmp>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0ad      	beq.n	800a754 <list_files_with_size+0x38>
 800a7f8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	491e      	ldr	r1, [pc, #120]	; (800a878 <list_files_with_size+0x15c>)
 800a800:	4618      	mov	r0, r3
 800a802:	f7f5 fcf5 	bl	80001f0 <strcmp>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0a3      	beq.n	800a754 <list_files_with_size+0x38>
            sprintf(pa,"Directory: %s\n", full_path);
 800a80c:	f107 020c 	add.w	r2, r7, #12
 800a810:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a814:	4919      	ldr	r1, [pc, #100]	; (800a87c <list_files_with_size+0x160>)
 800a816:	4618      	mov	r0, r3
 800a818:	f00c f930 	bl	8016a7c <siprintf>
            HAL_UART_Transmit(&huart7, pa, strlen(pa),1000);
 800a81c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a820:	4618      	mov	r0, r3
 800a822:	f7f5 fcef 	bl	8000204 <strlen>
 800a826:	4603      	mov	r3, r0
 800a828:	b29a      	uxth	r2, r3
 800a82a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800a82e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a832:	480f      	ldr	r0, [pc, #60]	; (800a870 <list_files_with_size+0x154>)
 800a834:	f006 fd53 	bl	80112de <HAL_UART_Transmit>
            // Recursively list the contents of the directory
            list_files_with_size(lfs, full_path);
 800a838:	f107 020c 	add.w	r2, r7, #12
 800a83c:	1d3b      	adds	r3, r7, #4
 800a83e:	4611      	mov	r1, r2
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f7ff ff6b 	bl	800a71c <list_files_with_size>
    while (true) {
 800a846:	e785      	b.n	800a754 <list_files_with_size+0x38>
            break;
 800a848:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 800a84a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800a84e:	1d3b      	adds	r3, r7, #4
 800a850:	4611      	mov	r1, r2
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	f7ff fd4a 	bl	800a2ec <lfs_dir_close>
}
 800a858:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	08019138 	.word	0x08019138
 800a864:	08019158 	.word	0x08019158
 800a868:	08019178 	.word	0x08019178
 800a86c:	08019180 	.word	0x08019180
 800a870:	20000888 	.word	0x20000888
 800a874:	0801919c 	.word	0x0801919c
 800a878:	080191a0 	.word	0x080191a0
 800a87c:	080191a4 	.word	0x080191a4

0800a880 <__init_storage>:
void __init_storage(){
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
	__init_nor();
 800a884:	f7ff fdf2 	bl	800a46c <__init_nor>
	__init_littefs();
 800a888:	f7ff fef2 	bl	800a670 <__init_littefs>
}
 800a88c:	bf00      	nop
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a22      	ldr	r2, [pc, #136]	; (800a924 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d105      	bne.n	800a8ac <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
//    HAL_UART_Transmit(&huart7, "\nCounter is : ", sizeof("\nCounter is : "), 100);
    tim_val++;
 800a8a0:	4b21      	ldr	r3, [pc, #132]	; (800a928 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800a8aa:	801a      	strh	r2, [r3, #0]
//    char uart_buf[20] ;
//    sprintf(uart_buf, "%u us\0\r\n", tim_val);
//    HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);

  }
  if(htim == &htim7){
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d133      	bne.n	800a91c <HAL_TIM_PeriodElapsedCallback+0x8c>
	  hk_counter++;
 800a8b4:	4b1e      	ldr	r3, [pc, #120]	; (800a930 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	4b1c      	ldr	r3, [pc, #112]	; (800a930 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a8be:	701a      	strb	r2, [r3, #0]
	  if(hk_counter%30 == 0){ char uart_buf[20] ;
 800a8c0:	4b1b      	ldr	r3, [pc, #108]	; (800a930 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a8c2:	781a      	ldrb	r2, [r3, #0]
 800a8c4:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800a8c6:	fba3 1302 	umull	r1, r3, r3, r2
 800a8ca:	0919      	lsrs	r1, r3, #4
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	011b      	lsls	r3, r3, #4
 800a8d0:	1a5b      	subs	r3, r3, r1
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11f      	bne.n	800a91c <HAL_TIM_PeriodElapsedCallback+0x8c>
		  sprintf(uart_buf, "%u us\0\r\n", tim_val);
 800a8dc:	4b12      	ldr	r3, [pc, #72]	; (800a928 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f107 030c 	add.w	r3, r7, #12
 800a8e6:	4914      	ldr	r1, [pc, #80]	; (800a938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f00c f8c7 	bl	8016a7c <siprintf>
		  HAL_UART_Transmit(&huart7, uart_buf, sizeof(uart_buf), 100);
 800a8ee:	f107 010c 	add.w	r1, r7, #12
 800a8f2:	2364      	movs	r3, #100	; 0x64
 800a8f4:	2214      	movs	r2, #20
 800a8f6:	4811      	ldr	r0, [pc, #68]	; (800a93c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a8f8:	f006 fcf1 	bl	80112de <HAL_UART_Transmit>
		  HK_IMU();
 800a8fc:	f7f8 fc9e 	bl	800323c <HK_IMU>

		  HAL_UART_Transmit(&huart7, "\n-----------------------------Collected HK DATA-----------n", sizeof("\n-----------------------------Collected HK DATA-----------n"), 100);
 800a900:	2364      	movs	r3, #100	; 0x64
 800a902:	223c      	movs	r2, #60	; 0x3c
 800a904:	490e      	ldr	r1, [pc, #56]	; (800a940 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800a906:	480d      	ldr	r0, [pc, #52]	; (800a93c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800a908:	f006 fce9 	bl	80112de <HAL_UART_Transmit>
		  hk_counter=0;
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
		  RUN_ADC2();
 800a912:	f000 f817 	bl	800a944 <RUN_ADC2>
		  tim_val = 0 ;
 800a916:	4b04      	ldr	r3, [pc, #16]	; (800a928 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800a918:	2200      	movs	r2, #0
 800a91a:	801a      	strh	r2, [r3, #0]
	  }

  }
}
 800a91c:	bf00      	nop
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20001128 	.word	0x20001128
 800a928:	20000316 	.word	0x20000316
 800a92c:	20001170 	.word	0x20001170
 800a930:	20000315 	.word	0x20000315
 800a934:	88888889 	.word	0x88888889
 800a938:	080191b4 	.word	0x080191b4
 800a93c:	20000888 	.word	0x20000888
 800a940:	080191c0 	.word	0x080191c0

0800a944 <RUN_ADC2>:

void RUN_ADC2(){
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart7,"\n\n********************S2S ADC is starting ************\n", sizeof("********************S2S ADC is starting ************\n"),1000);
 800a94a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a94e:	2236      	movs	r2, #54	; 0x36
 800a950:	4918      	ldr	r1, [pc, #96]	; (800a9b4 <RUN_ADC2+0x70>)
 800a952:	4819      	ldr	r0, [pc, #100]	; (800a9b8 <RUN_ADC2+0x74>)
 800a954:	f006 fcc3 	bl	80112de <HAL_UART_Transmit>

			ADC_Operate(adc_channels, adc1_channels);
 800a958:	4918      	ldr	r1, [pc, #96]	; (800a9bc <RUN_ADC2+0x78>)
 800a95a:	4819      	ldr	r0, [pc, #100]	; (800a9c0 <RUN_ADC2+0x7c>)
 800a95c:	f7f6 fe4e 	bl	80015fc <ADC_Operate>
			 ADC_Conv_Data(adc_conv_buf, adc_buf);
 800a960:	4918      	ldr	r1, [pc, #96]	; (800a9c4 <RUN_ADC2+0x80>)
 800a962:	4819      	ldr	r0, [pc, #100]	; (800a9c8 <RUN_ADC2+0x84>)
 800a964:	f7f6 fc7c 	bl	8001260 <ADC_Conv_Data>
			for(int i =0; i<sizeof(adc_channels); i++)
 800a968:	2300      	movs	r3, #0
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	e00f      	b.n	800a98e <RUN_ADC2+0x4a>
			myprintf("%d | %d **", adc_channels[i],adc1_channels[i]);
 800a96e:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <RUN_ADC2+0x7c>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a976:	4619      	mov	r1, r3
 800a978:	4a10      	ldr	r2, [pc, #64]	; (800a9bc <RUN_ADC2+0x78>)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a980:	461a      	mov	r2, r3
 800a982:	4812      	ldr	r0, [pc, #72]	; (800a9cc <RUN_ADC2+0x88>)
 800a984:	f7f6 fa62 	bl	8000e4c <myprintf>
			for(int i =0; i<sizeof(adc_channels); i++)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3301      	adds	r3, #1
 800a98c:	607b      	str	r3, [r7, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b21      	cmp	r3, #33	; 0x21
 800a992:	d9ec      	bls.n	800a96e <RUN_ADC2+0x2a>
			//		HK_IMU();
			HAL_Delay(10000);
 800a994:	f242 7010 	movw	r0, #10000	; 0x2710
 800a998:	f002 f9cc 	bl	800cd34 <HAL_Delay>
			HAL_UART_Transmit(&huart7,"\n\n********************S2S ADC data collection complete ************\n", sizeof("********************S2S ADC data collection complete************\n"),1000);
 800a99c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9a0:	2242      	movs	r2, #66	; 0x42
 800a9a2:	490b      	ldr	r1, [pc, #44]	; (800a9d0 <RUN_ADC2+0x8c>)
 800a9a4:	4804      	ldr	r0, [pc, #16]	; (800a9b8 <RUN_ADC2+0x74>)
 800a9a6:	f006 fc9a 	bl	80112de <HAL_UART_Transmit>

}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	080191fc 	.word	0x080191fc
 800a9b8:	20000888 	.word	0x20000888
 800a9bc:	20000024 	.word	0x20000024
 800a9c0:	20000000 	.word	0x20000000
 800a9c4:	20000d40 	.word	0x20000d40
 800a9c8:	20000d64 	.word	0x20000d64
 800a9cc:	08019234 	.word	0x08019234
 800a9d0:	08019240 	.word	0x08019240

0800a9d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b0b5      	sub	sp, #212	; 0xd4
 800a9d8:	af32      	add	r7, sp, #200	; 0xc8
 800a9da:	6078      	str	r0, [r7, #4]
//			if(huart->Instance == &huart1)
			{
				printf("Data received on COM UART1\n");
 800a9dc:	480f      	ldr	r0, [pc, #60]	; (800aa1c <HAL_UART_RxCpltCallback+0x48>)
 800a9de:	f00c f801 	bl	80169e4 <puts>
				parse_command(&COM_RX_DATA,Lfs, File);
 800a9e2:	4c0f      	ldr	r4, [pc, #60]	; (800aa20 <HAL_UART_RxCpltCallback+0x4c>)
 800a9e4:	4a0f      	ldr	r2, [pc, #60]	; (800aa24 <HAL_UART_RxCpltCallback+0x50>)
 800a9e6:	ab1c      	add	r3, sp, #112	; 0x70
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2254      	movs	r2, #84	; 0x54
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f00b fbc5 	bl	801617c <memcpy>
 800a9f2:	4668      	mov	r0, sp
 800a9f4:	f104 030c 	add.w	r3, r4, #12
 800a9f8:	2270      	movs	r2, #112	; 0x70
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f00b fbbe 	bl	801617c <memcpy>
 800aa00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aa04:	4808      	ldr	r0, [pc, #32]	; (800aa28 <HAL_UART_RxCpltCallback+0x54>)
 800aa06:	f7f7 fc77 	bl	80022f8 <parse_command>

			    HAL_UART_Receive_DMA(&COM_uart, COM_RX_DATA, sizeof(COM_RX_DATA));
 800aa0a:	221e      	movs	r2, #30
 800aa0c:	4906      	ldr	r1, [pc, #24]	; (800aa28 <HAL_UART_RxCpltCallback+0x54>)
 800aa0e:	4807      	ldr	r0, [pc, #28]	; (800aa2c <HAL_UART_RxCpltCallback+0x58>)
 800aa10:	f006 fdde 	bl	80115d0 <HAL_UART_Receive_DMA>
			}
		}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd90      	pop	{r4, r7, pc}
 800aa1c:	08019288 	.word	0x08019288
 800aa20:	20000da8 	.word	0x20000da8
 800aa24:	200008cc 	.word	0x200008cc
 800aa28:	200009bc 	.word	0x200009bc
 800aa2c:	20000978 	.word	0x20000978

0800aa30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aa30:	b5b0      	push	{r4, r5, r7, lr}
 800aa32:	b0cc      	sub	sp, #304	; 0x130
 800aa34:	af32      	add	r7, sp, #200	; 0xc8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aa36:	f002 f90b 	bl	800cc50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aa3a:	f000 f9ff 	bl	800ae3c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aa3e:	f7f8 f99d 	bl	8002d7c <MX_GPIO_Init>
  MX_SPI3_Init();
 800aa42:	f000 fed5 	bl	800b7f0 <MX_SPI3_Init>
  MX_UART7_Init();
 800aa46:	f001 fcf3 	bl	800c430 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800aa4a:	f00a fe2b 	bl	80156a4 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 800aa4e:	f000 ff05 	bl	800b85c <MX_SPI4_Init>
  MX_ADC1_Init();
 800aa52:	f7f6 fe01 	bl	8001658 <MX_ADC1_Init>
  MX_DMA_Init();
 800aa56:	f7f8 f8eb 	bl	8002c30 <MX_DMA_Init>
  MX_TIM6_Init();
 800aa5a:	f001 fbcf 	bl	800c1fc <MX_TIM6_Init>
  MX_ADC3_Init();
 800aa5e:	f7f6 fe9f 	bl	80017a0 <MX_ADC3_Init>
  MX_TIM7_Init();
 800aa62:	f001 fc01 	bl	800c268 <MX_TIM7_Init>
  MX_ADC2_Init();
 800aa66:	f7f6 fe49 	bl	80016fc <MX_ADC2_Init>
  MX_UART8_Init();
 800aa6a:	f001 fd0b 	bl	800c484 <MX_UART8_Init>
  MX_USART6_UART_Init();
 800aa6e:	f001 fdb1 	bl	800c5d4 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 800aa72:	f001 fd85 	bl	800c580 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800aa76:	f001 fd2f 	bl	800c4d8 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 800aa7a:	f000 ff25 	bl	800b8c8 <MX_SPI5_Init>
  MX_SPI2_Init();
 800aa7e:	f000 fe81 	bl	800b784 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800aa82:	f001 fd53 	bl	800c52c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET);
 800aa86:	2200      	movs	r2, #0
 800aa88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa8c:	4826      	ldr	r0, [pc, #152]	; (800ab28 <main+0xf8>)
 800aa8e:	f003 fc0f 	bl	800e2b0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800aa92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa96:	f002 f94d 	bl	800cd34 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_SET);
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aaa0:	4821      	ldr	r0, [pc, #132]	; (800ab28 <main+0xf8>)
 800aaa2:	f003 fc05 	bl	800e2b0 <HAL_GPIO_WritePin>
        uint8_t HANDSHAKE[7] = {0x53,0xac,0x01,0x02,0x03,0x7e},ret_handshake[7]={'\0'};
 800aaa6:	4a21      	ldr	r2, [pc, #132]	; (800ab2c <main+0xfc>)
 800aaa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aab0:	6018      	str	r0, [r3, #0]
 800aab2:	3304      	adds	r3, #4
 800aab4:	8019      	strh	r1, [r3, #0]
 800aab6:	3302      	adds	r3, #2
 800aab8:	0c0a      	lsrs	r2, r1, #16
 800aaba:	701a      	strb	r2, [r3, #0]
 800aabc:	2300      	movs	r3, #0
 800aabe:	623b      	str	r3, [r7, #32]
 800aac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac4:	2100      	movs	r1, #0
 800aac6:	460a      	mov	r2, r1
 800aac8:	801a      	strh	r2, [r3, #0]
 800aaca:	460a      	mov	r2, r1
 800aacc:	709a      	strb	r2, [r3, #2]
        do{
        	HAL_Delay(1000);
 800aace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aad2:	f002 f92f 	bl	800cd34 <HAL_Delay>
     	   if(HAL_UART_Transmit(&COM_uart, HANDSHAKE, sizeof(HANDSHAKE),1000) == HAL_OK){
 800aad6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aade:	2207      	movs	r2, #7
 800aae0:	4813      	ldr	r0, [pc, #76]	; (800ab30 <main+0x100>)
 800aae2:	f006 fbfc 	bl	80112de <HAL_UART_Transmit>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d132      	bne.n	800ab52 <main+0x122>
     		   if(HAL_UART_Receive(&COM_uart, ret_handshake, sizeof(ret_handshake), 1000) == HAL_OK)
 800aaec:	f107 0120 	add.w	r1, r7, #32
 800aaf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aaf4:	2207      	movs	r2, #7
 800aaf6:	480e      	ldr	r0, [pc, #56]	; (800ab30 <main+0x100>)
 800aaf8:	f006 fc83 	bl	8011402 <HAL_UART_Receive>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d123      	bne.n	800ab4a <main+0x11a>
     			   for(int i =0 ; i<sizeof(HANDSHAKE); i++){
 800ab02:	2300      	movs	r3, #0
 800ab04:	667b      	str	r3, [r7, #100]	; 0x64
 800ab06:	e01d      	b.n	800ab44 <main+0x114>
     				   if(HANDSHAKE[i] != ret_handshake[i]){
 800ab08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ab0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab0e:	4413      	add	r3, r2
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	f107 0120 	add.w	r1, r7, #32
 800ab16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab18:	440b      	add	r3, r1
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d00b      	beq.n	800ab38 <main+0x108>
     					   HANDSHAKE_STATUS =1 ;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <main+0x104>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
     					   break;
 800ab26:	e010      	b.n	800ab4a <main+0x11a>
 800ab28:	40021c00 	.word	0x40021c00
 800ab2c:	08019310 	.word	0x08019310
 800ab30:	20000978 	.word	0x20000978
 800ab34:	20000314 	.word	0x20000314
     				   }
     				   else{
     					   HANDSHAKE_STATUS  = 2;
 800ab38:	4bb2      	ldr	r3, [pc, #712]	; (800ae04 <main+0x3d4>)
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	701a      	strb	r2, [r3, #0]
     			   for(int i =0 ; i<sizeof(HANDSHAKE); i++){
 800ab3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab40:	3301      	adds	r3, #1
 800ab42:	667b      	str	r3, [r7, #100]	; 0x64
 800ab44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab46:	2b06      	cmp	r3, #6
 800ab48:	d9de      	bls.n	800ab08 <main+0xd8>
     				   }
     		   }
//     		   if(HANDSHAKE_STATUS == 2){
//     			   break;
//     		   }
     		   HAL_Delay(500);
 800ab4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab4e:	f002 f8f1 	bl	800cd34 <HAL_Delay>
     	   }
        }while(HANDSHAKE_STATUS == 1);
 800ab52:	4bac      	ldr	r3, [pc, #688]	; (800ae04 <main+0x3d4>)
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d0b9      	beq.n	800aace <main+0x9e>
        myDebug("Handshake with COM successful.\n");
 800ab5a:	48ab      	ldr	r0, [pc, #684]	; (800ae08 <main+0x3d8>)
 800ab5c:	f7f8 fa26 	bl	8002fac <myDebug>

//        create_empty_files();


  HAL_TIM_Base_Start_IT(&htim6);
 800ab60:	48aa      	ldr	r0, [pc, #680]	; (800ae0c <main+0x3dc>)
 800ab62:	f006 f89f 	bl	8010ca4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800ab66:	48aa      	ldr	r0, [pc, #680]	; (800ae10 <main+0x3e0>)
 800ab68:	f006 f89c 	bl	8010ca4 <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_DMA(&COM_uart, COM_RX_DATA, sizeof(COM_RX_DATA));

  HAL_UART_Transmit(&huart7,"********************S2S OBC is starting ************\n", sizeof("********************S2S OBC is starting ************\n"),1000);
 800ab6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab70:	2236      	movs	r2, #54	; 0x36
 800ab72:	49a8      	ldr	r1, [pc, #672]	; (800ae14 <main+0x3e4>)
 800ab74:	48a8      	ldr	r0, [pc, #672]	; (800ae18 <main+0x3e8>)
 800ab76:	f006 fbb2 	bl	80112de <HAL_UART_Transmit>
//	}




 __init_storage();
 800ab7a:	f7ff fe81 	bl	800a880 <__init_storage>
 list_files(&Lfs);
 800ab7e:	48a7      	ldr	r0, [pc, #668]	; (800ae1c <main+0x3ec>)
 800ab80:	f7ff fcf6 	bl	800a570 <list_files>

//  char path[200];
// char txt[]="sangam is writing it manually";
//
//	__init_littefs();
 list_files_with_size(&Lfs, "/");
 800ab84:	49a6      	ldr	r1, [pc, #664]	; (800ae20 <main+0x3f0>)
 800ab86:	48a5      	ldr	r0, [pc, #660]	; (800ae1c <main+0x3ec>)
 800ab88:	f7ff fdc8 	bl	800a71c <list_files_with_size>
// 		  lfs_file_close(&Lfs, &File);
// read_file_from_littlefs(&Lfs, "satHealth.txt");
////  read_file_from_littlefs(&Lfs, "sat_health.txt");
// read_file_from_littlefs(&Lfs, "flags.txt");

 list_files_with_size(&Lfs, "/");
 800ab8c:	49a4      	ldr	r1, [pc, #656]	; (800ae20 <main+0x3f0>)
 800ab8e:	48a3      	ldr	r0, [pc, #652]	; (800ae1c <main+0x3ec>)
 800ab90:	f7ff fdc4 	bl	800a71c <list_files_with_size>
 truncate_text_file1(Lfs, File );
 800ab94:	4ca1      	ldr	r4, [pc, #644]	; (800ae1c <main+0x3ec>)
 800ab96:	4aa3      	ldr	r2, [pc, #652]	; (800ae24 <main+0x3f4>)
 800ab98:	ab1b      	add	r3, sp, #108	; 0x6c
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	2254      	movs	r2, #84	; 0x54
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f00b faec 	bl	801617c <memcpy>
 800aba4:	4668      	mov	r0, sp
 800aba6:	f104 0310 	add.w	r3, r4, #16
 800abaa:	226c      	movs	r2, #108	; 0x6c
 800abac:	4619      	mov	r1, r3
 800abae:	f00b fae5 	bl	801617c <memcpy>
 800abb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800abb6:	f7f7 f87f 	bl	8001cb8 <truncate_text_file1>
 uint8_t count=0;uint16_t timer_val;
 800abba:	2300      	movs	r3, #0
 800abbc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  uint8_t command[30]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29};
 800abc0:	4b99      	ldr	r3, [pc, #612]	; (800ae28 <main+0x3f8>)
 800abc2:	463c      	mov	r4, r7
 800abc4:	461d      	mov	r5, r3
 800abc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800abce:	c407      	stmia	r4!, {r0, r1, r2}
 800abd0:	8023      	strh	r3, [r4, #0]
  command[16]=0x01;
 800abd2:	2301      	movs	r3, #1
 800abd4:	743b      	strb	r3, [r7, #16]
  command[17]=0xca;
 800abd6:	23ca      	movs	r3, #202	; 0xca
 800abd8:	747b      	strb	r3, [r7, #17]
  command[18]=0xd1;
 800abda:	23d1      	movs	r3, #209	; 0xd1
 800abdc:	74bb      	strb	r3, [r7, #18]
  command[19]=0xf2;
 800abde:	23f2      	movs	r3, #242	; 0xf2
 800abe0:	74fb      	strb	r3, [r7, #19]
  parse_command(command, Lfs, File );
 800abe2:	4c8e      	ldr	r4, [pc, #568]	; (800ae1c <main+0x3ec>)
 800abe4:	463d      	mov	r5, r7
 800abe6:	4a8f      	ldr	r2, [pc, #572]	; (800ae24 <main+0x3f4>)
 800abe8:	ab1c      	add	r3, sp, #112	; 0x70
 800abea:	4611      	mov	r1, r2
 800abec:	2254      	movs	r2, #84	; 0x54
 800abee:	4618      	mov	r0, r3
 800abf0:	f00b fac4 	bl	801617c <memcpy>
 800abf4:	4668      	mov	r0, sp
 800abf6:	f104 030c 	add.w	r3, r4, #12
 800abfa:	2270      	movs	r2, #112	; 0x70
 800abfc:	4619      	mov	r1, r3
 800abfe:	f00b fabd 	bl	801617c <memcpy>
 800ac02:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac06:	4628      	mov	r0, r5
 800ac08:	f7f7 fb76 	bl	80022f8 <parse_command>

  command[16]=0x01;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	743b      	strb	r3, [r7, #16]
    command[17]=0x1d;
 800ac10:	231d      	movs	r3, #29
 800ac12:	747b      	strb	r3, [r7, #17]
    command[18]=0xd1;
 800ac14:	23d1      	movs	r3, #209	; 0xd1
 800ac16:	74bb      	strb	r3, [r7, #18]
    command[19]=0xf2;
 800ac18:	23f2      	movs	r3, #242	; 0xf2
 800ac1a:	74fb      	strb	r3, [r7, #19]
    parse_command(command, Lfs, File );
 800ac1c:	4c7f      	ldr	r4, [pc, #508]	; (800ae1c <main+0x3ec>)
 800ac1e:	463d      	mov	r5, r7
 800ac20:	4a80      	ldr	r2, [pc, #512]	; (800ae24 <main+0x3f4>)
 800ac22:	ab1c      	add	r3, sp, #112	; 0x70
 800ac24:	4611      	mov	r1, r2
 800ac26:	2254      	movs	r2, #84	; 0x54
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f00b faa7 	bl	801617c <memcpy>
 800ac2e:	4668      	mov	r0, sp
 800ac30:	f104 030c 	add.w	r3, r4, #12
 800ac34:	2270      	movs	r2, #112	; 0x70
 800ac36:	4619      	mov	r1, r3
 800ac38:	f00b faa0 	bl	801617c <memcpy>
 800ac3c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7f7 fb59 	bl	80022f8 <parse_command>

    command[16]=0x01;
 800ac46:	2301      	movs	r3, #1
 800ac48:	743b      	strb	r3, [r7, #16]
      command[17]=0xee;
 800ac4a:	23ee      	movs	r3, #238	; 0xee
 800ac4c:	747b      	strb	r3, [r7, #17]
      command[18]=0xee;
 800ac4e:	23ee      	movs	r3, #238	; 0xee
 800ac50:	74bb      	strb	r3, [r7, #18]
      command[19]=0xee;
 800ac52:	23ee      	movs	r3, #238	; 0xee
 800ac54:	74fb      	strb	r3, [r7, #19]
      parse_command(command, Lfs, File );
 800ac56:	4c71      	ldr	r4, [pc, #452]	; (800ae1c <main+0x3ec>)
 800ac58:	463d      	mov	r5, r7
 800ac5a:	4a72      	ldr	r2, [pc, #456]	; (800ae24 <main+0x3f4>)
 800ac5c:	ab1c      	add	r3, sp, #112	; 0x70
 800ac5e:	4611      	mov	r1, r2
 800ac60:	2254      	movs	r2, #84	; 0x54
 800ac62:	4618      	mov	r0, r3
 800ac64:	f00b fa8a 	bl	801617c <memcpy>
 800ac68:	4668      	mov	r0, sp
 800ac6a:	f104 030c 	add.w	r3, r4, #12
 800ac6e:	2270      	movs	r2, #112	; 0x70
 800ac70:	4619      	mov	r1, r3
 800ac72:	f00b fa83 	bl	801617c <memcpy>
 800ac76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f7f7 fb3c 	bl	80022f8 <parse_command>

      command[16]=0x01;
 800ac80:	2301      	movs	r3, #1
 800ac82:	743b      	strb	r3, [r7, #16]
        command[17]=0xee;
 800ac84:	23ee      	movs	r3, #238	; 0xee
 800ac86:	747b      	strb	r3, [r7, #17]
        command[18]=0xaa;
 800ac88:	23aa      	movs	r3, #170	; 0xaa
 800ac8a:	74bb      	strb	r3, [r7, #18]
        command[19]=0xaa;
 800ac8c:	23aa      	movs	r3, #170	; 0xaa
 800ac8e:	74fb      	strb	r3, [r7, #19]
        parse_command(command, Lfs, File );
 800ac90:	4c62      	ldr	r4, [pc, #392]	; (800ae1c <main+0x3ec>)
 800ac92:	463d      	mov	r5, r7
 800ac94:	4a63      	ldr	r2, [pc, #396]	; (800ae24 <main+0x3f4>)
 800ac96:	ab1c      	add	r3, sp, #112	; 0x70
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2254      	movs	r2, #84	; 0x54
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f00b fa6d 	bl	801617c <memcpy>
 800aca2:	4668      	mov	r0, sp
 800aca4:	f104 030c 	add.w	r3, r4, #12
 800aca8:	2270      	movs	r2, #112	; 0x70
 800acaa:	4619      	mov	r1, r3
 800acac:	f00b fa66 	bl	801617c <memcpy>
 800acb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800acb4:	4628      	mov	r0, r5
 800acb6:	f7f7 fb1f 	bl	80022f8 <parse_command>

        command[16]=0x01;
 800acba:	2301      	movs	r3, #1
 800acbc:	743b      	strb	r3, [r7, #16]
          command[17]=0x1a;
 800acbe:	231a      	movs	r3, #26
 800acc0:	747b      	strb	r3, [r7, #17]
          command[18]=0xe0;
 800acc2:	23e0      	movs	r3, #224	; 0xe0
 800acc4:	74bb      	strb	r3, [r7, #18]
          command[19]=0x1e;
 800acc6:	231e      	movs	r3, #30
 800acc8:	74fb      	strb	r3, [r7, #19]
          parse_command(command, Lfs, File );
 800acca:	4c54      	ldr	r4, [pc, #336]	; (800ae1c <main+0x3ec>)
 800accc:	463d      	mov	r5, r7
 800acce:	4a55      	ldr	r2, [pc, #340]	; (800ae24 <main+0x3f4>)
 800acd0:	ab1c      	add	r3, sp, #112	; 0x70
 800acd2:	4611      	mov	r1, r2
 800acd4:	2254      	movs	r2, #84	; 0x54
 800acd6:	4618      	mov	r0, r3
 800acd8:	f00b fa50 	bl	801617c <memcpy>
 800acdc:	4668      	mov	r0, sp
 800acde:	f104 030c 	add.w	r3, r4, #12
 800ace2:	2270      	movs	r2, #112	; 0x70
 800ace4:	4619      	mov	r1, r3
 800ace6:	f00b fa49 	bl	801617c <memcpy>
 800acea:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800acee:	4628      	mov	r0, r5
 800acf0:	f7f7 fb02 	bl	80022f8 <parse_command>

          command[16]=0x02;
 800acf4:	2302      	movs	r3, #2
 800acf6:	743b      	strb	r3, [r7, #16]
          command[17]=0xfd;
 800acf8:	23fd      	movs	r3, #253	; 0xfd
 800acfa:	747b      	strb	r3, [r7, #17]
          command[18]=0xba;
 800acfc:	23ba      	movs	r3, #186	; 0xba
 800acfe:	74bb      	strb	r3, [r7, #18]
          command[19]=0xd0;
 800ad00:	23d0      	movs	r3, #208	; 0xd0
 800ad02:	74fb      	strb	r3, [r7, #19]
          parse_command(command, Lfs, File );
 800ad04:	4c45      	ldr	r4, [pc, #276]	; (800ae1c <main+0x3ec>)
 800ad06:	463d      	mov	r5, r7
 800ad08:	4a46      	ldr	r2, [pc, #280]	; (800ae24 <main+0x3f4>)
 800ad0a:	ab1c      	add	r3, sp, #112	; 0x70
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	2254      	movs	r2, #84	; 0x54
 800ad10:	4618      	mov	r0, r3
 800ad12:	f00b fa33 	bl	801617c <memcpy>
 800ad16:	4668      	mov	r0, sp
 800ad18:	f104 030c 	add.w	r3, r4, #12
 800ad1c:	2270      	movs	r2, #112	; 0x70
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f00b fa2c 	bl	801617c <memcpy>
 800ad24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f7f7 fae5 	bl	80022f8 <parse_command>

          command[16]=0x03;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	743b      	strb	r3, [r7, #16]
          command[17]=0x0e;
 800ad32:	230e      	movs	r3, #14
 800ad34:	747b      	strb	r3, [r7, #17]
          command[18]=0x53;
 800ad36:	2353      	movs	r3, #83	; 0x53
 800ad38:	74bb      	strb	r3, [r7, #18]
          command[19]=0xce;
 800ad3a:	23ce      	movs	r3, #206	; 0xce
 800ad3c:	74fb      	strb	r3, [r7, #19]
          parse_command(command, Lfs, File );
 800ad3e:	4c37      	ldr	r4, [pc, #220]	; (800ae1c <main+0x3ec>)
 800ad40:	463d      	mov	r5, r7
 800ad42:	4a38      	ldr	r2, [pc, #224]	; (800ae24 <main+0x3f4>)
 800ad44:	ab1c      	add	r3, sp, #112	; 0x70
 800ad46:	4611      	mov	r1, r2
 800ad48:	2254      	movs	r2, #84	; 0x54
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f00b fa16 	bl	801617c <memcpy>
 800ad50:	4668      	mov	r0, sp
 800ad52:	f104 030c 	add.w	r3, r4, #12
 800ad56:	2270      	movs	r2, #112	; 0x70
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f00b fa0f 	bl	801617c <memcpy>
 800ad5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad62:	4628      	mov	r0, r5
 800ad64:	f7f7 fac8 	bl	80022f8 <parse_command>

          command[16]=0x04;
 800ad68:	2304      	movs	r3, #4
 800ad6a:	743b      	strb	r3, [r7, #16]
          command[17]=0xcc;
 800ad6c:	23cc      	movs	r3, #204	; 0xcc
 800ad6e:	747b      	strb	r3, [r7, #17]
          command[18]=0x5e;
 800ad70:	235e      	movs	r3, #94	; 0x5e
 800ad72:	74bb      	strb	r3, [r7, #18]
          command[19]=0xbd;
 800ad74:	23bd      	movs	r3, #189	; 0xbd
 800ad76:	74fb      	strb	r3, [r7, #19]
          parse_command(command, Lfs, File );
 800ad78:	4c28      	ldr	r4, [pc, #160]	; (800ae1c <main+0x3ec>)
 800ad7a:	463d      	mov	r5, r7
 800ad7c:	4a29      	ldr	r2, [pc, #164]	; (800ae24 <main+0x3f4>)
 800ad7e:	ab1c      	add	r3, sp, #112	; 0x70
 800ad80:	4611      	mov	r1, r2
 800ad82:	2254      	movs	r2, #84	; 0x54
 800ad84:	4618      	mov	r0, r3
 800ad86:	f00b f9f9 	bl	801617c <memcpy>
 800ad8a:	4668      	mov	r0, sp
 800ad8c:	f104 030c 	add.w	r3, r4, #12
 800ad90:	2270      	movs	r2, #112	; 0x70
 800ad92:	4619      	mov	r1, r3
 800ad94:	f00b f9f2 	bl	801617c <memcpy>
 800ad98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f7f7 faab 	bl	80022f8 <parse_command>

          command[16]=0x05;
 800ada2:	2305      	movs	r3, #5
 800ada4:	743b      	strb	r3, [r7, #16]
          command[17]=0xac;
 800ada6:	23ac      	movs	r3, #172	; 0xac
 800ada8:	747b      	strb	r3, [r7, #17]
          command[18]=0xcf;
 800adaa:	23cf      	movs	r3, #207	; 0xcf
 800adac:	74bb      	strb	r3, [r7, #18]
          command[19]=0xcf;
 800adae:	23cf      	movs	r3, #207	; 0xcf
 800adb0:	74fb      	strb	r3, [r7, #19]
          parse_command(command, Lfs, File );
 800adb2:	4c1a      	ldr	r4, [pc, #104]	; (800ae1c <main+0x3ec>)
 800adb4:	463d      	mov	r5, r7
 800adb6:	4a1b      	ldr	r2, [pc, #108]	; (800ae24 <main+0x3f4>)
 800adb8:	ab1c      	add	r3, sp, #112	; 0x70
 800adba:	4611      	mov	r1, r2
 800adbc:	2254      	movs	r2, #84	; 0x54
 800adbe:	4618      	mov	r0, r3
 800adc0:	f00b f9dc 	bl	801617c <memcpy>
 800adc4:	4668      	mov	r0, sp
 800adc6:	f104 030c 	add.w	r3, r4, #12
 800adca:	2270      	movs	r2, #112	; 0x70
 800adcc:	4619      	mov	r1, r3
 800adce:	f00b f9d5 	bl	801617c <memcpy>
 800add2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800add6:	4628      	mov	r0, r5
 800add8:	f7f7 fa8e 	bl	80022f8 <parse_command>
  while (1)
  {
//	  if(HAL_UART_Receive(&huart2, COM_RX_DATA,30,1000)==HAL_OK){
//		  myprintf("Received data %s\n",COM_RX_DATA);
//	  }
	  catch = HAL_UART_Receive(&COM_uart, COM_RX_DATA,10,5000);
 800addc:	f241 3388 	movw	r3, #5000	; 0x1388
 800ade0:	220a      	movs	r2, #10
 800ade2:	4912      	ldr	r1, [pc, #72]	; (800ae2c <main+0x3fc>)
 800ade4:	4812      	ldr	r0, [pc, #72]	; (800ae30 <main+0x400>)
 800ade6:	f006 fb0c 	bl	8011402 <HAL_UART_Receive>
 800adea:	4603      	mov	r3, r0
 800adec:	461a      	mov	r2, r3
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <main+0x404>)
 800adf0:	701a      	strb	r2, [r3, #0]
	  if(catch==HAL_OK){
 800adf2:	4b10      	ldr	r3, [pc, #64]	; (800ae34 <main+0x404>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1f0      	bne.n	800addc <main+0x3ac>
			  myprintf("Received data %s\n",COM_RX_DATA);
 800adfa:	490c      	ldr	r1, [pc, #48]	; (800ae2c <main+0x3fc>)
 800adfc:	480e      	ldr	r0, [pc, #56]	; (800ae38 <main+0x408>)
 800adfe:	f7f6 f825 	bl	8000e4c <myprintf>
	  catch = HAL_UART_Receive(&COM_uart, COM_RX_DATA,10,5000);
 800ae02:	e7eb      	b.n	800addc <main+0x3ac>
 800ae04:	20000314 	.word	0x20000314
 800ae08:	080192a4 	.word	0x080192a4
 800ae0c:	20001128 	.word	0x20001128
 800ae10:	20001170 	.word	0x20001170
 800ae14:	080192c4 	.word	0x080192c4
 800ae18:	20000888 	.word	0x20000888
 800ae1c:	20000da8 	.word	0x20000da8
 800ae20:	080190e0 	.word	0x080190e0
 800ae24:	200008cc 	.word	0x200008cc
 800ae28:	08019318 	.word	0x08019318
 800ae2c:	200009bc 	.word	0x200009bc
 800ae30:	20000978 	.word	0x20000978
 800ae34:	20000d62 	.word	0x20000d62
 800ae38:	080192fc 	.word	0x080192fc

0800ae3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b094      	sub	sp, #80	; 0x50
 800ae40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae42:	f107 0320 	add.w	r3, r7, #32
 800ae46:	2230      	movs	r2, #48	; 0x30
 800ae48:	2100      	movs	r1, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f00b f9a4 	bl	8016198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae50:	f107 030c 	add.w	r3, r7, #12
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	605a      	str	r2, [r3, #4]
 800ae5a:	609a      	str	r2, [r3, #8]
 800ae5c:	60da      	str	r2, [r3, #12]
 800ae5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae60:	2300      	movs	r3, #0
 800ae62:	60bb      	str	r3, [r7, #8]
 800ae64:	4b28      	ldr	r3, [pc, #160]	; (800af08 <SystemClock_Config+0xcc>)
 800ae66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae68:	4a27      	ldr	r2, [pc, #156]	; (800af08 <SystemClock_Config+0xcc>)
 800ae6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae6e:	6413      	str	r3, [r2, #64]	; 0x40
 800ae70:	4b25      	ldr	r3, [pc, #148]	; (800af08 <SystemClock_Config+0xcc>)
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae78:	60bb      	str	r3, [r7, #8]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	607b      	str	r3, [r7, #4]
 800ae80:	4b22      	ldr	r3, [pc, #136]	; (800af0c <SystemClock_Config+0xd0>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a21      	ldr	r2, [pc, #132]	; (800af0c <SystemClock_Config+0xd0>)
 800ae86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <SystemClock_Config+0xd0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae94:	607b      	str	r3, [r7, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ae9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aea2:	2302      	movs	r3, #2
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800aeac:	230c      	movs	r3, #12
 800aeae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800aeb0:	23a8      	movs	r3, #168	; 0xa8
 800aeb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800aeb8:	2307      	movs	r3, #7
 800aeba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aebc:	f107 0320 	add.w	r3, r7, #32
 800aec0:	4618      	mov	r0, r3
 800aec2:	f004 fb91 	bl	800f5e8 <HAL_RCC_OscConfig>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800aecc:	f000 f820 	bl	800af10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aed0:	230f      	movs	r3, #15
 800aed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aed4:	2302      	movs	r3, #2
 800aed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800aedc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800aee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800aee8:	f107 030c 	add.w	r3, r7, #12
 800aeec:	2105      	movs	r1, #5
 800aeee:	4618      	mov	r0, r3
 800aef0:	f004 fdf2 	bl	800fad8 <HAL_RCC_ClockConfig>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800aefa:	f000 f809 	bl	800af10 <Error_Handler>
  }
}
 800aefe:	bf00      	nop
 800af00:	3750      	adds	r7, #80	; 0x50
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	40023800 	.word	0x40023800
 800af0c:	40007000 	.word	0x40007000

0800af10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800af10:	b480      	push	{r7}
 800af12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800af14:	b672      	cpsid	i
}
 800af16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800af18:	e7fe      	b.n	800af18 <Error_Handler+0x8>

0800af1a <_nor_cs_assert>:
	_SELECT_SR3,
};

/* Functions */

static void _nor_cs_assert(nor_t *nor){
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	68b8      	ldr	r0, [r7, #8]
 800af5a:	4798      	blx	r3
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	68b8      	ldr	r0, [r7, #8]
 800af78:	4798      	blx	r3
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	6838      	ldr	r0, [r7, #0]
 800af92:	4798      	blx	r3
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 800afa4:	239e      	movs	r3, #158	; 0x9e
 800afa6:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff ffb4 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 800afb2:	f107 030f 	add.w	r3, r7, #15
 800afb6:	2201      	movs	r2, #1
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ffc3 	bl	800af46 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	2203      	movs	r2, #3
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff ffcb 	bl	800af64 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff ffae 	bl	800af30 <_nor_cs_deassert>

	return ID;
 800afd4:	68bb      	ldr	r3, [r7, #8]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b088      	sub	sp, #32
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 800afe6:	234b      	movs	r3, #75	; 0x4b
 800afe8:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 800afea:	f04f 0200 	mov.w	r2, #0
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
 800affa:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff8c 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 800b002:	f107 031f 	add.w	r3, r7, #31
 800b006:	2201      	movs	r2, #1
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff ff9b 	bl	800af46 <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 800b010:	f107 030c 	add.w	r3, r7, #12
 800b014:	2204      	movs	r2, #4
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff ff94 	bl	800af46 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 800b01e:	f107 0310 	add.w	r3, r7, #16
 800b022:	2208      	movs	r2, #8
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ff9c 	bl	800af64 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7ff ff7f 	bl	800af30 <_nor_cs_deassert>

	return UniqueId;
 800b032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 800b048:	2306      	movs	r3, #6
 800b04a:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ff64 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 800b052:	f107 030f 	add.w	r3, r7, #15
 800b056:	2201      	movs	r2, #1
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff ff73 	bl	800af46 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff ff65 	bl	800af30 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 800b07a:	2300      	movs	r3, #0
 800b07c:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d012      	beq.n	800b0aa <_nor_ReadStatusRegister+0x3c>
 800b084:	2b02      	cmp	r3, #2
 800b086:	dc16      	bgt.n	800b0b6 <_nor_ReadStatusRegister+0x48>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <_nor_ReadStatusRegister+0x24>
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d006      	beq.n	800b09e <_nor_ReadStatusRegister+0x30>
 800b090:	e011      	b.n	800b0b6 <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 800b092:	2305      	movs	r3, #5
 800b094:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3342      	adds	r3, #66	; 0x42
 800b09a:	60fb      	str	r3, [r7, #12]
		break;
 800b09c:	e00d      	b.n	800b0ba <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 800b09e:	2370      	movs	r3, #112	; 0x70
 800b0a0:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3342      	adds	r3, #66	; 0x42
 800b0a6:	60fb      	str	r3, [r7, #12]
		break;
 800b0a8:	e007      	b.n	800b0ba <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 800b0aa:	2315      	movs	r3, #21
 800b0ac:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3342      	adds	r3, #66	; 0x42
 800b0b2:	60fb      	str	r3, [r7, #12]
		break;
 800b0b4:	e001      	b.n	800b0ba <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 800b0b6:	23ff      	movs	r3, #255	; 0xff
 800b0b8:	e017      	b.n	800b0ea <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff ff2d 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 800b0c0:	f107 030a 	add.w	r3, r7, #10
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff3c 	bl	800af46 <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 800b0ce:	f107 030b 	add.w	r3, r7, #11
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ff44 	bl	800af64 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff ff27 	bl	800af30 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 800b0e2:	7afa      	ldrb	r2, [r7, #11]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	701a      	strb	r2, [r3, #0]

	return status;
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 800b0fc:	2305      	movs	r3, #5
 800b0fe:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff04 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 800b112:	f107 030f 	add.w	r3, r7, #15
 800b116:	2201      	movs	r2, #1
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ff13 	bl	800af46 <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3342      	adds	r3, #66	; 0x42
 800b124:	2201      	movs	r2, #1
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff ff1b 	bl	800af64 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 800b12e:	2164      	movs	r1, #100	; 0x64
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff ff26 	bl	800af82 <_nor_delay_us>
		msTimeout -= 100;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	3b64      	subs	r3, #100	; 0x64
 800b13a:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <_nor_WaitForWriteEnd+0x5e>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e7      	bne.n	800b120 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff feed 	bl	800af30 <_nor_cs_deassert>

	if (msTimeout == 0){
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e000      	b.n	800b162 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 800b172:	23ab      	movs	r3, #171	; 0xab
 800b174:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d013      	beq.n	800b1a4 <NOR_Init+0x3a>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00f      	beq.n	800b1a4 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d007      	beq.n	800b1a4 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e09a      	b.n	800b2de <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b1ae:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d101      	bne.n	800b1ba <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e091      	b.n	800b2de <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff feb8 	bl	800af30 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 800b1c0:	2164      	movs	r1, #100	; 0x64
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fedd 	bl	800af82 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fe9e 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 800b1de:	f107 030f 	add.w	r3, r7, #15
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff fead 	bl	800af46 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff fe9f 	bl	800af30 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fed2 	bl	800af9c <_nor_ReadID>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <NOR_Init+0xa8>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b20e:	4293      	cmp	r3, r2
 800b210:	d101      	bne.n	800b216 <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 800b212:	2303      	movs	r3, #3
 800b214:	e063      	b.n	800b2de <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fa30 	bl	800b680 <NOR_IDS_Interpret_Manufacturer>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fa32 	bl	800b698 <NOR_IDS_Interpret_Model>
 800b234:	4603      	mov	r3, r0
 800b236:	461a      	mov	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b248:	4293      	cmp	r3, r2
 800b24a:	d101      	bne.n	800b250 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 800b24c:	2304      	movs	r3, #4
 800b24e:	e046      	b.n	800b2de <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff fec4 	bl	800afde <_nor_ReadUniqID>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
//	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
//	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
//	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);

		nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fa3b 	bl	800b6e0 <NOR_IDS_GetQtdBlocks>
 800b26a:	4602      	mov	r2, r0
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	63da      	str	r2, [r3, #60]	; 0x3c

		nor->info.u16PageSize = NOR_PAGE_SIZE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b276:	851a      	strh	r2, [r3, #40]	; 0x28
		nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b27e:	861a      	strh	r2, [r3, #48]	; 0x30
		nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b286:	639a      	str	r2, [r3, #56]	; 0x38
		nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28c:	011a      	lsls	r2, r3, #4
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	635a      	str	r2, [r3, #52]	; 0x34
		nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b2a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	62da      	str	r2, [r3, #44]	; 0x2c
		nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800b2b2:	fb02 f203 	mul.w	r2, r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fed6 	bl	800b06e <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fed2 	bl	800b06e <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff fece 	bl	800b06e <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b2d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d KB\n", (uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <NOR_EraseAddress+0x18>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e043      	b.n	800b388 <NOR_EraseAddress+0xa0>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b306:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d001      	beq.n	800b312 <NOR_EraseAddress+0x2a>
 800b30e:	2306      	movs	r3, #6
 800b310:	e03a      	b.n	800b388 <NOR_EraseAddress+0xa0>

	switch (method){
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d010      	beq.n	800b33a <NOR_EraseAddress+0x52>
 800b318:	2b02      	cmp	r3, #2
 800b31a:	dc13      	bgt.n	800b344 <NOR_EraseAddress+0x5c>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <NOR_EraseAddress+0x3e>
 800b320:	2b01      	cmp	r3, #1
 800b322:	d005      	beq.n	800b330 <NOR_EraseAddress+0x48>
 800b324:	e00e      	b.n	800b344 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 800b326:	2320      	movs	r3, #32
 800b328:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 800b32a:	4b19      	ldr	r3, [pc, #100]	; (800b390 <NOR_EraseAddress+0xa8>)
 800b32c:	61fb      	str	r3, [r7, #28]
		break;
 800b32e:	e009      	b.n	800b344 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 800b330:	2352      	movs	r3, #82	; 0x52
 800b332:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 800b334:	4b17      	ldr	r3, [pc, #92]	; (800b394 <NOR_EraseAddress+0xac>)
 800b336:	61fb      	str	r3, [r7, #28]
		break;
 800b338:	e004      	b.n	800b344 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 800b33a:	23d8      	movs	r3, #216	; 0xd8
 800b33c:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 800b33e:	4b16      	ldr	r3, [pc, #88]	; (800b398 <NOR_EraseAddress+0xb0>)
 800b340:	61fb      	str	r3, [r7, #28]
		break;
 800b342:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	0c1b      	lsrs	r3, r3, #16
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	b2db      	uxtb	r3, r3
 800b352:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fe70 	bl	800b040 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f7ff fdda 	bl	800af1a <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 800b366:	f107 0314 	add.w	r3, r7, #20
 800b36a:	2204      	movs	r2, #4
 800b36c:	4619      	mov	r1, r3
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff fde9 	bl	800af46 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff fddb 	bl	800af30 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 800b37a:	69f9      	ldr	r1, [r7, #28]
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff feb8 	bl	800b0f2 <_nor_WaitForWriteEnd>
 800b382:	4603      	mov	r3, r0
 800b384:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 800b386:	7efb      	ldrb	r3, [r7, #27]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	00061a80 	.word	0x00061a80
 800b394:	00186a00 	.word	0x00186a00
 800b398:	001e8480 	.word	0x001e8480

0800b39c <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <NOR_EraseSector+0x14>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e015      	b.n	800b3dc <NOR_EraseSector+0x40>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b3b6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d001      	beq.n	800b3c2 <NOR_EraseSector+0x26>
 800b3be:	2306      	movs	r3, #6
 800b3c0:	e00c      	b.n	800b3dc <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	fb02 f303 	mul.w	r3, r2, r3
 800b3ce:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff ff87 	bl	800b2e8 <NOR_EraseAddress>
 800b3da:	4603      	mov	r3, r0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <NOR_WriteBytes+0x18>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e05f      	b.n	800b4bc <NOR_WriteBytes+0xd8>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b402:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b406:	4293      	cmp	r3, r2
 800b408:	d001      	beq.n	800b40e <NOR_WriteBytes+0x2a>
 800b40a:	2306      	movs	r3, #6
 800b40c:	e056      	b.n	800b4bc <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 800b414:	2302      	movs	r3, #2
 800b416:	e051      	b.n	800b4bc <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 800b418:	2300      	movs	r3, #0
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	e002      	b.n	800b424 <NOR_WriteBytes+0x40>
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	3301      	adds	r3, #1
 800b422:	61bb      	str	r3, [r7, #24]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d3f8      	bcc.n	800b41e <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b430:	461a      	mov	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	fbb3 f1f2 	udiv	r1, r3, r2
 800b438:	fb02 f201 	mul.w	r2, r2, r1
 800b43c:	1a9a      	subs	r2, r3, r2
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	4413      	add	r3, r2
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b446:	4293      	cmp	r3, r2
 800b448:	d903      	bls.n	800b452 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e001      	b.n	800b456 <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7ff fdf2 	bl	800b040 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 800b45c:	2302      	movs	r3, #2
 800b45e:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	0c1b      	lsrs	r3, r3, #16
 800b464:	b2db      	uxtb	r3, r3
 800b466:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	0a1b      	lsrs	r3, r3, #8
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fd4f 	bl	800af1a <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 800b47c:	f107 0314 	add.w	r3, r7, #20
 800b480:	2204      	movs	r2, #4
 800b482:	4619      	mov	r1, r3
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7ff fd5e 	bl	800af46 <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 800b48a:	69fa      	ldr	r2, [r7, #28]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fd59 	bl	800af46 <_nor_spi_tx>
		_nor_cs_deassert(nor);
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fd4b 	bl	800af30 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 800b49a:	f242 7110 	movw	r1, #10000	; 0x2710
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff fe27 	bl	800b0f2 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1b8      	bne.n	800b42c <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3720      	adds	r7, #32
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <NOR_WriteSector+0x18>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e027      	b.n	800b52c <NOR_WriteSector+0x68>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b4e2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00a      	beq.n	800b500 <NOR_WriteSector+0x3c>
 800b4ea:	2306      	movs	r3, #6
 800b4ec:	e01e      	b.n	800b52c <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	1a9b      	subs	r3, r3, r2
 800b4fe:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b504:	461a      	mov	r2, r3
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	4293      	cmp	r3, r2
 800b50a:	d2f0      	bcs.n	800b4ee <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b510:	461a      	mov	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	fb03 f302 	mul.w	r3, r3, r2
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	4413      	add	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff ff5d 	bl	800b3e4 <NOR_WriteBytes>
 800b52a:	4603      	mov	r3, r0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <NOR_ReadBytes+0x18>
 800b548:	2302      	movs	r3, #2
 800b54a:	e05d      	b.n	800b608 <NOR_ReadBytes+0xd4>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b552:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b556:	4293      	cmp	r3, r2
 800b558:	d001      	beq.n	800b55e <NOR_ReadBytes+0x2a>
 800b55a:	2306      	movs	r3, #6
 800b55c:	e054      	b.n	800b608 <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 800b564:	2302      	movs	r3, #2
 800b566:	e04f      	b.n	800b608 <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b574:	461a      	mov	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	fbb3 f1f2 	udiv	r1, r3, r2
 800b57c:	fb02 f201 	mul.w	r2, r2, r1
 800b580:	1a9a      	subs	r2, r3, r2
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	4413      	add	r3, r2
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d903      	bls.n	800b596 <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
 800b594:	e001      	b.n	800b59a <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 800b59a:	230b      	movs	r3, #11
 800b59c:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	0c1b      	lsrs	r3, r3, #16
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	0a1b      	lsrs	r3, r3, #8
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fcae 	bl	800af1a <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 800b5be:	f107 0310 	add.w	r3, r7, #16
 800b5c2:	2205      	movs	r2, #5
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff fcbd 	bl	800af46 <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 800b5cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ce:	68b9      	ldr	r1, [r7, #8]
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f7ff fcc7 	bl	800af64 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff fcaa 	bl	800af30 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	4413      	add	r3, r2
 800b5e2:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 800b5e4:	683a      	ldr	r2, [r7, #0]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1be      	bne.n	800b570 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	623b      	str	r3, [r7, #32]
 800b5f6:	e002      	b.n	800b5fe <NOR_ReadBytes+0xca>
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	6a3a      	ldr	r2, [r7, #32]
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	429a      	cmp	r2, r3
 800b604:	d3f8      	bcc.n	800b5f8 <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("w25qxx ReadBytes done.\n");

	return NOR_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3728      	adds	r7, #40	; 0x28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <NOR_ReadSector+0x18>
 800b624:	2302      	movs	r3, #2
 800b626:	e027      	b.n	800b678 <NOR_ReadSector+0x68>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b62e:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800b632:	4293      	cmp	r3, r2
 800b634:	d00a      	beq.n	800b64c <NOR_ReadSector+0x3c>
 800b636:	2306      	movs	r3, #6
 800b638:	e01e      	b.n	800b678 <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3301      	adds	r3, #1
 800b63e:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b644:	461a      	mov	r2, r3
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b650:	461a      	mov	r2, r3
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	4293      	cmp	r3, r2
 800b656:	d2f0      	bcs.n	800b63a <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b65c:	461a      	mov	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	fb03 f302 	mul.w	r3, r3, r2
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	4413      	add	r3, r2
 800b668:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	697a      	ldr	r2, [r7, #20]
 800b66e:	68b9      	ldr	r1, [r7, #8]
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f7ff ff5f 	bl	800b534 <NOR_ReadBytes>
 800b676:	4603      	mov	r3, r0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: pablo-jean
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	b2db      	uxtb	r3, r3
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ffed 	bl	800b680 <NOR_IDS_Interpret_Manufacturer>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
 800b6ac:	2bef      	cmp	r3, #239	; 0xef
 800b6ae:	d00e      	beq.n	800b6ce <NOR_IDS_Interpret_Model+0x36>
 800b6b0:	2bef      	cmp	r3, #239	; 0xef
 800b6b2:	dc03      	bgt.n	800b6bc <NOR_IDS_Interpret_Model+0x24>
 800b6b4:	2b20      	cmp	r3, #32
 800b6b6:	d00e      	beq.n	800b6d6 <NOR_IDS_Interpret_Model+0x3e>
 800b6b8:	2bc2      	cmp	r3, #194	; 0xc2
 800b6ba:	d002      	beq.n	800b6c2 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 800b6bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6c0:	e00a      	b.n	800b6d8 <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	0c1b      	lsrs	r3, r3, #16
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	e004      	b.n	800b6d8 <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	0a1b      	lsrs	r3, r3, #8
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	e000      	b.n	800b6d8 <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL:
		return ((0x9E >> 8) & 0xFFFF);
 800b6d6:	2300      	movs	r3, #0
		break;
	}
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff ffc9 	bl	800b680 <NOR_IDS_Interpret_Manufacturer>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	2bef      	cmp	r3, #239	; 0xef
 800b6f6:	d029      	beq.n	800b74c <NOR_IDS_GetQtdBlocks+0x6c>
 800b6f8:	2bef      	cmp	r3, #239	; 0xef
 800b6fa:	dc24      	bgt.n	800b746 <NOR_IDS_GetQtdBlocks+0x66>
 800b6fc:	2bc2      	cmp	r3, #194	; 0xc2
 800b6fe:	d025      	beq.n	800b74c <NOR_IDS_GetQtdBlocks+0x6c>
 800b700:	2bc2      	cmp	r3, #194	; 0xc2
 800b702:	dc20      	bgt.n	800b746 <NOR_IDS_GetQtdBlocks+0x66>
 800b704:	2bbf      	cmp	r3, #191	; 0xbf
 800b706:	d009      	beq.n	800b71c <NOR_IDS_GetQtdBlocks+0x3c>
 800b708:	2bbf      	cmp	r3, #191	; 0xbf
 800b70a:	dc1c      	bgt.n	800b746 <NOR_IDS_GetQtdBlocks+0x66>
 800b70c:	2b20      	cmp	r3, #32
 800b70e:	dc02      	bgt.n	800b716 <NOR_IDS_GetQtdBlocks+0x36>
 800b710:	2b1f      	cmp	r3, #31
 800b712:	da03      	bge.n	800b71c <NOR_IDS_GetQtdBlocks+0x3c>
 800b714:	e017      	b.n	800b746 <NOR_IDS_GetQtdBlocks+0x66>
 800b716:	2b85      	cmp	r3, #133	; 0x85
 800b718:	d018      	beq.n	800b74c <NOR_IDS_GetQtdBlocks+0x6c>
 800b71a:	e014      	b.n	800b746 <NOR_IDS_GetQtdBlocks+0x66>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	case    MANUF_MT25QL:
		density = ((0x9E >> 16) & 0xFF);
 800b71c:	2300      	movs	r3, #0
 800b71e:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	3b11      	subs	r3, #17
 800b724:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 800b726:	2302      	movs	r3, #2
 800b728:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 800b72a:	2300      	movs	r3, #0
 800b72c:	75fb      	strb	r3, [r7, #23]
 800b72e:	e005      	b.n	800b73c <NOR_IDS_GetQtdBlocks+0x5c>
			blocks *= 2;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	3301      	adds	r3, #1
 800b73a:	75fb      	strb	r3, [r7, #23]
 800b73c:	7dfa      	ldrb	r2, [r7, #23]
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	429a      	cmp	r2, r3
 800b742:	d3f5      	bcc.n	800b730 <NOR_IDS_GetQtdBlocks+0x50>
		}
	break;
 800b744:	e018      	b.n	800b778 <NOR_IDS_GetQtdBlocks+0x98>
	default:
		blocks = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	613b      	str	r3, [r7, #16]
		break;
 800b74a:	e015      	b.n	800b778 <NOR_IDS_GetQtdBlocks+0x98>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	0c1b      	lsrs	r3, r3, #16
 800b750:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 800b752:	7bbb      	ldrb	r3, [r7, #14]
 800b754:	3b11      	subs	r3, #17
 800b756:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 800b758:	2302      	movs	r3, #2
 800b75a:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 800b75c:	2300      	movs	r3, #0
 800b75e:	75fb      	strb	r3, [r7, #23]
 800b760:	e005      	b.n	800b76e <NOR_IDS_GetQtdBlocks+0x8e>
			blocks *= 2;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	3301      	adds	r3, #1
 800b76c:	75fb      	strb	r3, [r7, #23]
 800b76e:	7dfa      	ldrb	r2, [r7, #23]
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	429a      	cmp	r2, r3
 800b774:	d3f5      	bcc.n	800b762 <NOR_IDS_GetQtdBlocks+0x82>
		}
		break;
 800b776:	bf00      	nop
	}

	return blocks;
 800b778:	693b      	ldr	r3, [r7, #16]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800b788:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b78a:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <MX_SPI2_Init+0x68>)
 800b78c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b78e:	4b16      	ldr	r3, [pc, #88]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b790:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b794:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b798:	2200      	movs	r2, #0
 800b79a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b79c:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7a2:	4b11      	ldr	r3, [pc, #68]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b7a8:	4b0f      	ldr	r3, [pc, #60]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b7ae:	4b0e      	ldr	r3, [pc, #56]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7b6:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b7c2:	4b09      	ldr	r3, [pc, #36]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7c8:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800b7ce:	4b06      	ldr	r3, [pc, #24]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7d0:	220a      	movs	r2, #10
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b7d4:	4804      	ldr	r0, [pc, #16]	; (800b7e8 <MX_SPI2_Init+0x64>)
 800b7d6:	f004 fb4f 	bl	800fe78 <HAL_SPI_Init>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800b7e0:	f7ff fb96 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b7e4:	bf00      	nop
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20000e38 	.word	0x20000e38
 800b7ec:	40003800 	.word	0x40003800

0800b7f0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <MX_SPI3_Init+0x64>)
 800b7f6:	4a18      	ldr	r2, [pc, #96]	; (800b858 <MX_SPI3_Init+0x68>)
 800b7f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800b7fa:	4b16      	ldr	r3, [pc, #88]	; (800b854 <MX_SPI3_Init+0x64>)
 800b7fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800b802:	4b14      	ldr	r3, [pc, #80]	; (800b854 <MX_SPI3_Init+0x64>)
 800b804:	2200      	movs	r2, #0
 800b806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800b808:	4b12      	ldr	r3, [pc, #72]	; (800b854 <MX_SPI3_Init+0x64>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b80e:	4b11      	ldr	r3, [pc, #68]	; (800b854 <MX_SPI3_Init+0x64>)
 800b810:	2200      	movs	r2, #0
 800b812:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b814:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <MX_SPI3_Init+0x64>)
 800b816:	2200      	movs	r2, #0
 800b818:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800b81a:	4b0e      	ldr	r3, [pc, #56]	; (800b854 <MX_SPI3_Init+0x64>)
 800b81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b820:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b822:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <MX_SPI3_Init+0x64>)
 800b824:	2210      	movs	r2, #16
 800b826:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <MX_SPI3_Init+0x64>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800b82e:	4b09      	ldr	r3, [pc, #36]	; (800b854 <MX_SPI3_Init+0x64>)
 800b830:	2200      	movs	r2, #0
 800b832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b834:	4b07      	ldr	r3, [pc, #28]	; (800b854 <MX_SPI3_Init+0x64>)
 800b836:	2200      	movs	r2, #0
 800b838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800b83a:	4b06      	ldr	r3, [pc, #24]	; (800b854 <MX_SPI3_Init+0x64>)
 800b83c:	220a      	movs	r2, #10
 800b83e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800b840:	4804      	ldr	r0, [pc, #16]	; (800b854 <MX_SPI3_Init+0x64>)
 800b842:	f004 fb19 	bl	800fe78 <HAL_SPI_Init>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800b84c:	f7ff fb60 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800b850:	bf00      	nop
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20000920 	.word	0x20000920
 800b858:	40003c00 	.word	0x40003c00

0800b85c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800b860:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b862:	4a18      	ldr	r2, [pc, #96]	; (800b8c4 <MX_SPI4_Init+0x68>)
 800b864:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b86c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800b86e:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b870:	2200      	movs	r2, #0
 800b872:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800b874:	4b12      	ldr	r3, [pc, #72]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b876:	2200      	movs	r2, #0
 800b878:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b87a:	4b11      	ldr	r3, [pc, #68]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b880:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b882:	2200      	movs	r2, #0
 800b884:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800b886:	4b0e      	ldr	r3, [pc, #56]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b88c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b88e:	4b0c      	ldr	r3, [pc, #48]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b890:	2210      	movs	r2, #16
 800b892:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b894:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b896:	2200      	movs	r2, #0
 800b898:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8a0:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800b8a6:	4b06      	ldr	r3, [pc, #24]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800b8ac:	4804      	ldr	r0, [pc, #16]	; (800b8c0 <MX_SPI4_Init+0x64>)
 800b8ae:	f004 fae3 	bl	800fe78 <HAL_SPI_Init>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800b8b8:	f7ff fb2a 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800b8bc:	bf00      	nop
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20000c94 	.word	0x20000c94
 800b8c4:	40013400 	.word	0x40013400

0800b8c8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800b8cc:	4b17      	ldr	r3, [pc, #92]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8ce:	4a18      	ldr	r2, [pc, #96]	; (800b930 <MX_SPI5_Init+0x68>)
 800b8d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b8d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800b8e0:	4b12      	ldr	r3, [pc, #72]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800b8f2:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b8fa:	4b0c      	ldr	r3, [pc, #48]	; (800b92c <MX_SPI5_Init+0x64>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b900:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <MX_SPI5_Init+0x64>)
 800b902:	2200      	movs	r2, #0
 800b904:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <MX_SPI5_Init+0x64>)
 800b908:	2200      	movs	r2, #0
 800b90a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b90c:	4b07      	ldr	r3, [pc, #28]	; (800b92c <MX_SPI5_Init+0x64>)
 800b90e:	2200      	movs	r2, #0
 800b910:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800b912:	4b06      	ldr	r3, [pc, #24]	; (800b92c <MX_SPI5_Init+0x64>)
 800b914:	220a      	movs	r2, #10
 800b916:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800b918:	4804      	ldr	r0, [pc, #16]	; (800b92c <MX_SPI5_Init+0x64>)
 800b91a:	f004 faad 	bl	800fe78 <HAL_SPI_Init>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800b924:	f7ff faf4 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800b928:	bf00      	nop
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000e90 	.word	0x20000e90
 800b930:	40015000 	.word	0x40015000

0800b934 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b092      	sub	sp, #72	; 0x48
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b93c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	609a      	str	r2, [r3, #8]
 800b948:	60da      	str	r2, [r3, #12]
 800b94a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a71      	ldr	r2, [pc, #452]	; (800bb18 <HAL_SPI_MspInit+0x1e4>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d12c      	bne.n	800b9b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b956:	2300      	movs	r3, #0
 800b958:	633b      	str	r3, [r7, #48]	; 0x30
 800b95a:	4b70      	ldr	r3, [pc, #448]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	4a6f      	ldr	r2, [pc, #444]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b964:	6413      	str	r3, [r2, #64]	; 0x40
 800b966:	4b6d      	ldr	r3, [pc, #436]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b96e:	633b      	str	r3, [r7, #48]	; 0x30
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b972:	2300      	movs	r3, #0
 800b974:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b976:	4b69      	ldr	r3, [pc, #420]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97a:	4a68      	ldr	r2, [pc, #416]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b97c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b980:	6313      	str	r3, [r2, #48]	; 0x30
 800b982:	4b66      	ldr	r3, [pc, #408]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b98a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
 800b98e:	230e      	movs	r3, #14
 800b990:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b992:	2302      	movs	r3, #2
 800b994:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b996:	2300      	movs	r3, #0
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b99a:	2303      	movs	r3, #3
 800b99c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b99e:	2305      	movs	r3, #5
 800b9a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b9a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	485d      	ldr	r0, [pc, #372]	; (800bb20 <HAL_SPI_MspInit+0x1ec>)
 800b9aa:	f002 fad5 	bl	800df58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800b9ae:	e1b6      	b.n	800bd1e <HAL_SPI_MspInit+0x3ea>
  else if(spiHandle->Instance==SPI3)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a5b      	ldr	r2, [pc, #364]	; (800bb24 <HAL_SPI_MspInit+0x1f0>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	f040 80c2 	bne.w	800bb40 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b9bc:	2300      	movs	r3, #0
 800b9be:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9c0:	4b56      	ldr	r3, [pc, #344]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c4:	4a55      	ldr	r2, [pc, #340]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ca:	6413      	str	r3, [r2, #64]	; 0x40
 800b9cc:	4b53      	ldr	r3, [pc, #332]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9d8:	2300      	movs	r3, #0
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
 800b9dc:	4b4f      	ldr	r3, [pc, #316]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	4a4e      	ldr	r2, [pc, #312]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9e2:	f043 0302 	orr.w	r3, r3, #2
 800b9e6:	6313      	str	r3, [r2, #48]	; 0x30
 800b9e8:	4b4c      	ldr	r3, [pc, #304]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	623b      	str	r3, [r7, #32]
 800b9f8:	4b48      	ldr	r3, [pc, #288]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	4a47      	ldr	r2, [pc, #284]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800b9fe:	f043 0304 	orr.w	r3, r3, #4
 800ba02:	6313      	str	r3, [r2, #48]	; 0x30
 800ba04:	4b45      	ldr	r3, [pc, #276]	; (800bb1c <HAL_SPI_MspInit+0x1e8>)
 800ba06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	623b      	str	r3, [r7, #32]
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MAIN_FM_MISO_Pin|MAIN_FM_SCK_Pin;
 800ba10:	2318      	movs	r3, #24
 800ba12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba14:	2302      	movs	r3, #2
 800ba16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ba20:	2306      	movs	r3, #6
 800ba22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba28:	4619      	mov	r1, r3
 800ba2a:	483f      	ldr	r0, [pc, #252]	; (800bb28 <HAL_SPI_MspInit+0x1f4>)
 800ba2c:	f002 fa94 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_FM_MOSI_Pin;
 800ba30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba36:	2302      	movs	r3, #2
 800ba38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ba42:	2306      	movs	r3, #6
 800ba44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MAIN_FM_MOSI_GPIO_Port, &GPIO_InitStruct);
 800ba46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4837      	ldr	r0, [pc, #220]	; (800bb2c <HAL_SPI_MspInit+0x1f8>)
 800ba4e:	f002 fa83 	bl	800df58 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800ba52:	4b37      	ldr	r3, [pc, #220]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba54:	4a37      	ldr	r2, [pc, #220]	; (800bb34 <HAL_SPI_MspInit+0x200>)
 800ba56:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800ba58:	4b35      	ldr	r3, [pc, #212]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba5e:	4b34      	ldr	r3, [pc, #208]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba64:	4b32      	ldr	r3, [pc, #200]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ba6a:	4b31      	ldr	r3, [pc, #196]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba70:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba72:	4b2f      	ldr	r3, [pc, #188]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba78:	4b2d      	ldr	r3, [pc, #180]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800ba7e:	4b2c      	ldr	r3, [pc, #176]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ba84:	4b2a      	ldr	r3, [pc, #168]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ba8a:	4b29      	ldr	r3, [pc, #164]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800ba90:	4827      	ldr	r0, [pc, #156]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800ba92:	f001 fe5f 	bl	800d754 <HAL_DMA_Init>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 800ba9c:	f7ff fa38 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a23      	ldr	r2, [pc, #140]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800baa4:	64da      	str	r2, [r3, #76]	; 0x4c
 800baa6:	4a22      	ldr	r2, [pc, #136]	; (800bb30 <HAL_SPI_MspInit+0x1fc>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream7;
 800baac:	4b22      	ldr	r3, [pc, #136]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800baae:	4a23      	ldr	r2, [pc, #140]	; (800bb3c <HAL_SPI_MspInit+0x208>)
 800bab0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800bab2:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bab8:	4b1f      	ldr	r3, [pc, #124]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800baba:	2240      	movs	r2, #64	; 0x40
 800babc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800babe:	4b1e      	ldr	r3, [pc, #120]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bac4:	4b1c      	ldr	r3, [pc, #112]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800baca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bacc:	4b1a      	ldr	r3, [pc, #104]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bace:	2200      	movs	r2, #0
 800bad0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bad2:	4b19      	ldr	r3, [pc, #100]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800bad8:	4b17      	ldr	r3, [pc, #92]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bada:	2200      	movs	r2, #0
 800badc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bade:	4b16      	ldr	r3, [pc, #88]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bae4:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800baea:	4813      	ldr	r0, [pc, #76]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800baec:	f001 fe32 	bl	800d754 <HAL_DMA_Init>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <HAL_SPI_MspInit+0x1c6>
      Error_Handler();
 800baf6:	f7ff fa0b 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a0e      	ldr	r2, [pc, #56]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bafe:	649a      	str	r2, [r3, #72]	; 0x48
 800bb00:	4a0d      	ldr	r2, [pc, #52]	; (800bb38 <HAL_SPI_MspInit+0x204>)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800bb06:	2200      	movs	r2, #0
 800bb08:	2100      	movs	r1, #0
 800bb0a:	2033      	movs	r0, #51	; 0x33
 800bb0c:	f001 fdeb 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800bb10:	2033      	movs	r0, #51	; 0x33
 800bb12:	f001 fe04 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800bb16:	e102      	b.n	800bd1e <HAL_SPI_MspInit+0x3ea>
 800bb18:	40003800 	.word	0x40003800
 800bb1c:	40023800 	.word	0x40023800
 800bb20:	40022000 	.word	0x40022000
 800bb24:	40003c00 	.word	0x40003c00
 800bb28:	40020400 	.word	0x40020400
 800bb2c:	40020800 	.word	0x40020800
 800bb30:	20001008 	.word	0x20001008
 800bb34:	40026040 	.word	0x40026040
 800bb38:	20000f48 	.word	0x20000f48
 800bb3c:	400260b8 	.word	0x400260b8
  else if(spiHandle->Instance==SPI4)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a78      	ldr	r2, [pc, #480]	; (800bd28 <HAL_SPI_MspInit+0x3f4>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	f040 8091 	bne.w	800bc6e <HAL_SPI_MspInit+0x33a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	61fb      	str	r3, [r7, #28]
 800bb50:	4b76      	ldr	r3, [pc, #472]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb54:	4a75      	ldr	r2, [pc, #468]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb5a:	6453      	str	r3, [r2, #68]	; 0x44
 800bb5c:	4b73      	ldr	r3, [pc, #460]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bb68:	2300      	movs	r3, #0
 800bb6a:	61bb      	str	r3, [r7, #24]
 800bb6c:	4b6f      	ldr	r3, [pc, #444]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb70:	4a6e      	ldr	r2, [pc, #440]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb72:	f043 0310 	orr.w	r3, r3, #16
 800bb76:	6313      	str	r3, [r2, #48]	; 0x30
 800bb78:	4b6c      	ldr	r3, [pc, #432]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	61bb      	str	r3, [r7, #24]
 800bb82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|SMSN_FM_MISO_OBC_Pin|SMSN_FM_MOSI_OBC_Pin;
 800bb84:	2364      	movs	r3, #100	; 0x64
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb90:	2303      	movs	r3, #3
 800bb92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800bb94:	2305      	movs	r3, #5
 800bb96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bb98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4864      	ldr	r0, [pc, #400]	; (800bd30 <HAL_SPI_MspInit+0x3fc>)
 800bba0:	f002 f9da 	bl	800df58 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 800bba4:	4b63      	ldr	r3, [pc, #396]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bba6:	4a64      	ldr	r2, [pc, #400]	; (800bd38 <HAL_SPI_MspInit+0x404>)
 800bba8:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800bbaa:	4b62      	ldr	r3, [pc, #392]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbac:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800bbb0:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bbb2:	4b60      	ldr	r3, [pc, #384]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbb8:	4b5e      	ldr	r3, [pc, #376]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bbbe:	4b5d      	ldr	r3, [pc, #372]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bbc4:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbc6:	4b5b      	ldr	r3, [pc, #364]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bbcc:	4b59      	ldr	r3, [pc, #356]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800bbd2:	4b58      	ldr	r3, [pc, #352]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bbd8:	4b56      	ldr	r3, [pc, #344]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bbde:	4b55      	ldr	r3, [pc, #340]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800bbe4:	4853      	ldr	r0, [pc, #332]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbe6:	f001 fdb5 	bl	800d754 <HAL_DMA_Init>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <HAL_SPI_MspInit+0x2c0>
      Error_Handler();
 800bbf0:	f7ff f98e 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a4f      	ldr	r2, [pc, #316]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbf8:	64da      	str	r2, [r3, #76]	; 0x4c
 800bbfa:	4a4e      	ldr	r2, [pc, #312]	; (800bd34 <HAL_SPI_MspInit+0x400>)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800bc00:	4b4e      	ldr	r3, [pc, #312]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc02:	4a4f      	ldr	r2, [pc, #316]	; (800bd40 <HAL_SPI_MspInit+0x40c>)
 800bc04:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800bc06:	4b4d      	ldr	r3, [pc, #308]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc0c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bc0e:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc10:	2240      	movs	r2, #64	; 0x40
 800bc12:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bc14:	4b49      	ldr	r3, [pc, #292]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bc1a:	4b48      	ldr	r3, [pc, #288]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc20:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bc22:	4b46      	ldr	r3, [pc, #280]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bc28:	4b44      	ldr	r3, [pc, #272]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800bc2e:	4b43      	ldr	r3, [pc, #268]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bc34:	4b41      	ldr	r3, [pc, #260]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bc3a:	4b40      	ldr	r3, [pc, #256]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800bc40:	483e      	ldr	r0, [pc, #248]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc42:	f001 fd87 	bl	800d754 <HAL_DMA_Init>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <HAL_SPI_MspInit+0x31c>
      Error_Handler();
 800bc4c:	f7ff f960 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a3a      	ldr	r2, [pc, #232]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc54:	649a      	str	r2, [r3, #72]	; 0x48
 800bc56:	4a39      	ldr	r2, [pc, #228]	; (800bd3c <HAL_SPI_MspInit+0x408>)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	2054      	movs	r0, #84	; 0x54
 800bc62:	f001 fd40 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800bc66:	2054      	movs	r0, #84	; 0x54
 800bc68:	f001 fd59 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800bc6c:	e057      	b.n	800bd1e <HAL_SPI_MspInit+0x3ea>
  else if(spiHandle->Instance==SPI5)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a34      	ldr	r2, [pc, #208]	; (800bd44 <HAL_SPI_MspInit+0x410>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d152      	bne.n	800bd1e <HAL_SPI_MspInit+0x3ea>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	4b2b      	ldr	r3, [pc, #172]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bc7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc80:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bc82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc86:	6453      	str	r3, [r2, #68]	; 0x44
 800bc88:	4b28      	ldr	r3, [pc, #160]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bc8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc90:	617b      	str	r3, [r7, #20]
 800bc92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	4b24      	ldr	r3, [pc, #144]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	4a23      	ldr	r2, [pc, #140]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bc9e:	f043 0320 	orr.w	r3, r3, #32
 800bca2:	6313      	str	r3, [r2, #48]	; 0x30
 800bca4:	4b21      	ldr	r3, [pc, #132]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	f003 0320 	and.w	r3, r3, #32
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	4b1d      	ldr	r3, [pc, #116]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bcb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb8:	4a1c      	ldr	r2, [pc, #112]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbe:	6313      	str	r3, [r2, #48]	; 0x30
 800bcc0:	4b1a      	ldr	r3, [pc, #104]	; (800bd2c <HAL_SPI_MspInit+0x3f8>)
 800bcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800bccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800bcde:	2305      	movs	r3, #5
 800bce0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bce6:	4619      	mov	r1, r3
 800bce8:	4817      	ldr	r0, [pc, #92]	; (800bd48 <HAL_SPI_MspInit+0x414>)
 800bcea:	f002 f935 	bl	800df58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800bcee:	23c0      	movs	r3, #192	; 0xc0
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800bcfe:	2305      	movs	r3, #5
 800bd00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bd02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bd06:	4619      	mov	r1, r3
 800bd08:	4810      	ldr	r0, [pc, #64]	; (800bd4c <HAL_SPI_MspInit+0x418>)
 800bd0a:	f002 f925 	bl	800df58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2100      	movs	r1, #0
 800bd12:	2055      	movs	r0, #85	; 0x55
 800bd14:	f001 fce7 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800bd18:	2055      	movs	r0, #85	; 0x55
 800bd1a:	f001 fd00 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800bd1e:	bf00      	nop
 800bd20:	3748      	adds	r7, #72	; 0x48
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	40013400 	.word	0x40013400
 800bd2c:	40023800 	.word	0x40023800
 800bd30:	40021000 	.word	0x40021000
 800bd34:	20000ee8 	.word	0x20000ee8
 800bd38:	40026458 	.word	0x40026458
 800bd3c:	20000fa8 	.word	0x20000fa8
 800bd40:	40026428 	.word	0x40026428
 800bd44:	40015000 	.word	0x40015000
 800bd48:	40021400 	.word	0x40021400
 800bd4c:	40021c00 	.word	0x40021c00

0800bd50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd56:	2300      	movs	r3, #0
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd5e:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd64:	6453      	str	r3, [r2, #68]	; 0x44
 800bd66:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd72:	2300      	movs	r3, #0
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	4a08      	ldr	r2, [pc, #32]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd80:	6413      	str	r3, [r2, #64]	; 0x40
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <HAL_MspInit+0x4c>)
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bd8e:	bf00      	nop
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	40023800 	.word	0x40023800

0800bda0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bda4:	e7fe      	b.n	800bda4 <NMI_Handler+0x4>

0800bda6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bda6:	b480      	push	{r7}
 800bda8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bdaa:	e7fe      	b.n	800bdaa <HardFault_Handler+0x4>

0800bdac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bdb0:	e7fe      	b.n	800bdb0 <MemManage_Handler+0x4>

0800bdb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bdb6:	e7fe      	b.n	800bdb6 <BusFault_Handler+0x4>

0800bdb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bdbc:	e7fe      	b.n	800bdbc <UsageFault_Handler+0x4>

0800bdbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bdc2:	bf00      	nop
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bdd0:	bf00      	nop
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bdda:	b480      	push	{r7}
 800bddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bdde:	bf00      	nop
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bdec:	f000 ff82 	bl	800ccf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bdf0:	bf00      	nop
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800bdf8:	4802      	ldr	r0, [pc, #8]	; (800be04 <DMA1_Stream0_IRQHandler+0x10>)
 800bdfa:	f001 fe43 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800bdfe:	bf00      	nop
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	2000143c 	.word	0x2000143c

0800be08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800be0c:	4802      	ldr	r0, [pc, #8]	; (800be18 <DMA1_Stream1_IRQHandler+0x10>)
 800be0e:	f001 fe39 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800be12:	bf00      	nop
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	200010c8 	.word	0x200010c8

0800be1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800be20:	4802      	ldr	r0, [pc, #8]	; (800be2c <DMA1_Stream2_IRQHandler+0x10>)
 800be22:	f001 fe2f 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800be26:	bf00      	nop
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20001008 	.word	0x20001008

0800be30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800be34:	4802      	ldr	r0, [pc, #8]	; (800be40 <DMA1_Stream3_IRQHandler+0x10>)
 800be36:	f001 fe25 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800be3a:	bf00      	nop
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2000131c 	.word	0x2000131c

0800be44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 800be48:	4802      	ldr	r0, [pc, #8]	; (800be54 <DMA1_Stream4_IRQHandler+0x10>)
 800be4a:	f001 fe1b 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800be4e:	bf00      	nop
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20001068 	.word	0x20001068

0800be58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800be5c:	4802      	ldr	r0, [pc, #8]	; (800be68 <DMA1_Stream5_IRQHandler+0x10>)
 800be5e:	f001 fe11 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800be62:	bf00      	nop
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	200011b8 	.word	0x200011b8

0800be6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800be70:	4802      	ldr	r0, [pc, #8]	; (800be7c <DMA1_Stream6_IRQHandler+0x10>)
 800be72:	f001 fe07 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800be76:	bf00      	nop
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	200013dc 	.word	0x200013dc

0800be80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800be84:	4805      	ldr	r0, [pc, #20]	; (800be9c <ADC_IRQHandler+0x1c>)
 800be86:	f000 ffbc 	bl	800ce02 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800be8a:	4805      	ldr	r0, [pc, #20]	; (800bea0 <ADC_IRQHandler+0x20>)
 800be8c:	f000 ffb9 	bl	800ce02 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800be90:	4804      	ldr	r0, [pc, #16]	; (800bea4 <ADC_IRQHandler+0x24>)
 800be92:	f000 ffb6 	bl	800ce02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800be96:	bf00      	nop
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000648 	.word	0x20000648
 800bea0:	200005a0 	.word	0x200005a0
 800bea4:	20000690 	.word	0x20000690

0800bea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800beac:	4802      	ldr	r0, [pc, #8]	; (800beb8 <USART1_IRQHandler+0x10>)
 800beae:	f005 fbbf 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800beb2:	bf00      	nop
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	20000978 	.word	0x20000978

0800bebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800bec0:	4802      	ldr	r0, [pc, #8]	; (800becc <USART2_IRQHandler+0x10>)
 800bec2:	f005 fbb5 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bec6:	bf00      	nop
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20001524 	.word	0x20001524

0800bed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800bed4:	4802      	ldr	r0, [pc, #8]	; (800bee0 <USART3_IRQHandler+0x10>)
 800bed6:	f005 fbab 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800beda:	bf00      	nop
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	20001218 	.word	0x20001218

0800bee4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800bee8:	4802      	ldr	r0, [pc, #8]	; (800bef4 <DMA1_Stream7_IRQHandler+0x10>)
 800beea:	f001 fdcb 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800beee:	bf00      	nop
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20000f48 	.word	0x20000f48

0800bef8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800befc:	4802      	ldr	r0, [pc, #8]	; (800bf08 <SPI3_IRQHandler+0x10>)
 800befe:	f004 fc33 	bl	8010768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800bf02:	bf00      	nop
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20000920 	.word	0x20000920

0800bf0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800bf10:	4802      	ldr	r0, [pc, #8]	; (800bf1c <TIM6_DAC_IRQHandler+0x10>)
 800bf12:	f004 ff37 	bl	8010d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800bf16:	bf00      	nop
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20001128 	.word	0x20001128

0800bf20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800bf24:	4802      	ldr	r0, [pc, #8]	; (800bf30 <TIM7_IRQHandler+0x10>)
 800bf26:	f004 ff2d 	bl	8010d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800bf2a:	bf00      	nop
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20001170 	.word	0x20001170

0800bf34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800bf38:	4802      	ldr	r0, [pc, #8]	; (800bf44 <DMA2_Stream0_IRQHandler+0x10>)
 800bf3a:	f001 fda3 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800bf3e:	bf00      	nop
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	200005e8 	.word	0x200005e8

0800bf48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800bf4c:	4802      	ldr	r0, [pc, #8]	; (800bf58 <DMA2_Stream1_IRQHandler+0x10>)
 800bf4e:	f001 fd99 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800bf52:	bf00      	nop
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000fa8 	.word	0x20000fa8

0800bf5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800bf60:	4802      	ldr	r0, [pc, #8]	; (800bf6c <DMA2_Stream2_IRQHandler+0x10>)
 800bf62:	f001 fd8f 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800bf66:	bf00      	nop
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000738 	.word	0x20000738

0800bf70 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800bf74:	4802      	ldr	r0, [pc, #8]	; (800bf80 <DMA2_Stream3_IRQHandler+0x10>)
 800bf76:	f001 fd85 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800bf7a:	bf00      	nop
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000ee8 	.word	0x20000ee8

0800bf84 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800bf88:	4802      	ldr	r0, [pc, #8]	; (800bf94 <DMA2_Stream4_IRQHandler+0x10>)
 800bf8a:	f001 fd7b 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800bf8e:	bf00      	nop
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	200006d8 	.word	0x200006d8

0800bf98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800bf9c:	4802      	ldr	r0, [pc, #8]	; (800bfa8 <OTG_FS_IRQHandler+0x10>)
 800bf9e:	f002 faf0 	bl	800e582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800bfa2:	bf00      	nop
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20002a3c 	.word	0x20002a3c

0800bfac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800bfb0:	4802      	ldr	r0, [pc, #8]	; (800bfbc <DMA2_Stream5_IRQHandler+0x10>)
 800bfb2:	f001 fd67 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800bfb6:	bf00      	nop
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	2000137c 	.word	0x2000137c

0800bfc0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800bfc4:	4802      	ldr	r0, [pc, #8]	; (800bfd0 <DMA2_Stream6_IRQHandler+0x10>)
 800bfc6:	f001 fd5d 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800bfca:	bf00      	nop
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200012bc 	.word	0x200012bc

0800bfd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800bfd8:	4802      	ldr	r0, [pc, #8]	; (800bfe4 <DMA2_Stream7_IRQHandler+0x10>)
 800bfda:	f001 fd53 	bl	800da84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800bfde:	bf00      	nop
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	2000125c 	.word	0x2000125c

0800bfe8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800bfec:	4802      	ldr	r0, [pc, #8]	; (800bff8 <USART6_IRQHandler+0x10>)
 800bfee:	f005 fb1f 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800bff2:	bf00      	nop
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	200014e0 	.word	0x200014e0

0800bffc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800c000:	4802      	ldr	r0, [pc, #8]	; (800c00c <UART7_IRQHandler+0x10>)
 800c002:	f005 fb15 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800c006:	bf00      	nop
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	20000888 	.word	0x20000888

0800c010 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800c014:	4802      	ldr	r0, [pc, #8]	; (800c020 <UART8_IRQHandler+0x10>)
 800c016:	f005 fb0b 	bl	8011630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800c01a:	bf00      	nop
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	2000149c 	.word	0x2000149c

0800c024 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800c028:	4802      	ldr	r0, [pc, #8]	; (800c034 <SPI4_IRQHandler+0x10>)
 800c02a:	f004 fb9d 	bl	8010768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800c02e:	bf00      	nop
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000c94 	.word	0x20000c94

0800c038 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800c03c:	4802      	ldr	r0, [pc, #8]	; (800c048 <SPI5_IRQHandler+0x10>)
 800c03e:	f004 fb93 	bl	8010768 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800c042:	bf00      	nop
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000e90 	.word	0x20000e90

0800c04c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c04c:	b480      	push	{r7}
 800c04e:	af00      	add	r7, sp, #0
	return 1;
 800c050:	2301      	movs	r3, #1
}
 800c052:	4618      	mov	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <_kill>:

int _kill(int pid, int sig)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c066:	f00a f82f 	bl	80160c8 <__errno>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2216      	movs	r2, #22
 800c06e:	601a      	str	r2, [r3, #0]
	return -1;
 800c070:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_exit>:

void _exit (int status)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c084:	f04f 31ff 	mov.w	r1, #4294967295
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7ff ffe7 	bl	800c05c <_kill>
	while (1) {}		/* Make sure we hang here */
 800c08e:	e7fe      	b.n	800c08e <_exit+0x12>

0800c090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c09c:	2300      	movs	r3, #0
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	e00a      	b.n	800c0b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c0a2:	f3af 8000 	nop.w
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	60ba      	str	r2, [r7, #8]
 800c0ae:	b2ca      	uxtb	r2, r1
 800c0b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	dbf0      	blt.n	800c0a2 <_read+0x12>
	}

return len;
 800c0c0:	687b      	ldr	r3, [r7, #4]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b086      	sub	sp, #24
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	60b9      	str	r1, [r7, #8]
 800c0d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	617b      	str	r3, [r7, #20]
 800c0da:	e009      	b.n	800c0f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	60ba      	str	r2, [r7, #8]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	dbf1      	blt.n	800c0dc <_write+0x12>
	}
	return len;
 800c0f8:	687b      	ldr	r3, [r7, #4]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <_close>:

int _close(int file)
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
	return -1;
 800c10a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c12a:	605a      	str	r2, [r3, #4]
	return 0;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <_isatty>:

int _isatty(int file)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
	return 1;
 800c142:	2301      	movs	r3, #1
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
	return 0;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
	...

0800c16c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c174:	4a14      	ldr	r2, [pc, #80]	; (800c1c8 <_sbrk+0x5c>)
 800c176:	4b15      	ldr	r3, [pc, #84]	; (800c1cc <_sbrk+0x60>)
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c180:	4b13      	ldr	r3, [pc, #76]	; (800c1d0 <_sbrk+0x64>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c188:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <_sbrk+0x64>)
 800c18a:	4a12      	ldr	r2, [pc, #72]	; (800c1d4 <_sbrk+0x68>)
 800c18c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <_sbrk+0x64>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4413      	add	r3, r2
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d207      	bcs.n	800c1ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c19c:	f009 ff94 	bl	80160c8 <__errno>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	220c      	movs	r2, #12
 800c1a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1aa:	e009      	b.n	800c1c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c1ac:	4b08      	ldr	r3, [pc, #32]	; (800c1d0 <_sbrk+0x64>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c1b2:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <_sbrk+0x64>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	4a05      	ldr	r2, [pc, #20]	; (800c1d0 <_sbrk+0x64>)
 800c1bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c1be:	68fb      	ldr	r3, [r7, #12]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	20030000 	.word	0x20030000
 800c1cc:	00000400 	.word	0x00000400
 800c1d0:	20000368 	.word	0x20000368
 800c1d4:	20002e58 	.word	0x20002e58

0800c1d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c1dc:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <SystemInit+0x20>)
 800c1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e2:	4a05      	ldr	r2, [pc, #20]	; (800c1f8 <SystemInit+0x20>)
 800c1e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c1ec:	bf00      	nop
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	e000ed00 	.word	0xe000ed00

0800c1fc <MX_TIM6_Init>:
DMA_HandleTypeDef hdma_tim6_up;
DMA_HandleTypeDef hdma_tim7_up;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c202:	463b      	mov	r3, r7
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c20a:	4b15      	ldr	r3, [pc, #84]	; (800c260 <MX_TIM6_Init+0x64>)
 800c20c:	4a15      	ldr	r2, [pc, #84]	; (800c264 <MX_TIM6_Init+0x68>)
 800c20e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800c210:	4b13      	ldr	r3, [pc, #76]	; (800c260 <MX_TIM6_Init+0x64>)
 800c212:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800c216:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <MX_TIM6_Init+0x64>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <MX_TIM6_Init+0x64>)
 800c220:	f242 720f 	movw	r2, #9999	; 0x270f
 800c224:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c226:	4b0e      	ldr	r3, [pc, #56]	; (800c260 <MX_TIM6_Init+0x64>)
 800c228:	2200      	movs	r2, #0
 800c22a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c22c:	480c      	ldr	r0, [pc, #48]	; (800c260 <MX_TIM6_Init+0x64>)
 800c22e:	f004 fce9 	bl	8010c04 <HAL_TIM_Base_Init>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800c238:	f7fe fe6a 	bl	800af10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c23c:	2300      	movs	r3, #0
 800c23e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c240:	2300      	movs	r3, #0
 800c242:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c244:	463b      	mov	r3, r7
 800c246:	4619      	mov	r1, r3
 800c248:	4805      	ldr	r0, [pc, #20]	; (800c260 <MX_TIM6_Init+0x64>)
 800c24a:	f004 ff6b 	bl	8011124 <HAL_TIMEx_MasterConfigSynchronization>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800c254:	f7fe fe5c 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20001128 	.word	0x20001128
 800c264:	40001000 	.word	0x40001000

0800c268 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c26e:	463b      	mov	r3, r7
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c278:	4a15      	ldr	r2, [pc, #84]	; (800c2d0 <MX_TIM7_Init+0x68>)
 800c27a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 800c27c:	4b13      	ldr	r3, [pc, #76]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c27e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800c282:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c284:	4b11      	ldr	r3, [pc, #68]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c286:	2200      	movs	r2, #0
 800c288:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 800c28a:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c28c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c290:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c294:	2200      	movs	r2, #0
 800c296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800c298:	480c      	ldr	r0, [pc, #48]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c29a:	f004 fcb3 	bl	8010c04 <HAL_TIM_Base_Init>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800c2a4:	f7fe fe34 	bl	800af10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800c2b0:	463b      	mov	r3, r7
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4805      	ldr	r0, [pc, #20]	; (800c2cc <MX_TIM7_Init+0x64>)
 800c2b6:	f004 ff35 	bl	8011124 <HAL_TIMEx_MasterConfigSynchronization>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800c2c0:	f7fe fe26 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20001170 	.word	0x20001170
 800c2d0:	40001400 	.word	0x40001400

0800c2d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a4c      	ldr	r2, [pc, #304]	; (800c414 <HAL_TIM_Base_MspInit+0x140>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d146      	bne.n	800c374 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	4b4b      	ldr	r3, [pc, #300]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ee:	4a4a      	ldr	r2, [pc, #296]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c2f0:	f043 0310 	orr.w	r3, r3, #16
 800c2f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2f6:	4b48      	ldr	r3, [pc, #288]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Stream1;
 800c302:	4b46      	ldr	r3, [pc, #280]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c304:	4a46      	ldr	r2, [pc, #280]	; (800c420 <HAL_TIM_Base_MspInit+0x14c>)
 800c306:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 800c308:	4b44      	ldr	r3, [pc, #272]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c30a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800c30e:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c310:	4b42      	ldr	r3, [pc, #264]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c312:	2200      	movs	r2, #0
 800c314:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c316:	4b41      	ldr	r3, [pc, #260]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c318:	2200      	movs	r2, #0
 800c31a:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 800c31c:	4b3f      	ldr	r3, [pc, #252]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c31e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c322:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c324:	4b3d      	ldr	r3, [pc, #244]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c32a:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c32c:	4b3b      	ldr	r3, [pc, #236]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c32e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c332:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 800c334:	4b39      	ldr	r3, [pc, #228]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c336:	2200      	movs	r2, #0
 800c338:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 800c33a:	4b38      	ldr	r3, [pc, #224]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c340:	4b36      	ldr	r3, [pc, #216]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c342:	2200      	movs	r2, #0
 800c344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800c346:	4835      	ldr	r0, [pc, #212]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c348:	f001 fa04 	bl	800d754 <HAL_DMA_Init>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800c352:	f7fe fddd 	bl	800af10 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a30      	ldr	r2, [pc, #192]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c35a:	621a      	str	r2, [r3, #32]
 800c35c:	4a2f      	ldr	r2, [pc, #188]	; (800c41c <HAL_TIM_Base_MspInit+0x148>)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800c362:	2200      	movs	r2, #0
 800c364:	2100      	movs	r1, #0
 800c366:	2036      	movs	r0, #54	; 0x36
 800c368:	f001 f9bd 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c36c:	2036      	movs	r0, #54	; 0x36
 800c36e:	f001 f9d6 	bl	800d71e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800c372:	e04a      	b.n	800c40a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a2a      	ldr	r2, [pc, #168]	; (800c424 <HAL_TIM_Base_MspInit+0x150>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d145      	bne.n	800c40a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800c37e:	2300      	movs	r3, #0
 800c380:	60bb      	str	r3, [r7, #8]
 800c382:	4b25      	ldr	r3, [pc, #148]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c386:	4a24      	ldr	r2, [pc, #144]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c388:	f043 0320 	orr.w	r3, r3, #32
 800c38c:	6413      	str	r3, [r2, #64]	; 0x40
 800c38e:	4b22      	ldr	r3, [pc, #136]	; (800c418 <HAL_TIM_Base_MspInit+0x144>)
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	f003 0320 	and.w	r3, r3, #32
 800c396:	60bb      	str	r3, [r7, #8]
 800c398:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream4;
 800c39a:	4b23      	ldr	r3, [pc, #140]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c39c:	4a23      	ldr	r2, [pc, #140]	; (800c42c <HAL_TIM_Base_MspInit+0x158>)
 800c39e:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 800c3a0:	4b21      	ldr	r3, [pc, #132]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c3a6:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c3a8:	4b1f      	ldr	r3, [pc, #124]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3ae:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800c3b4:	4b1c      	ldr	r3, [pc, #112]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3ba:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c3bc:	4b1a      	ldr	r3, [pc, #104]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3c2:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c3c4:	4b18      	ldr	r3, [pc, #96]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c3ca:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 800c3cc:	4b16      	ldr	r3, [pc, #88]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 800c3d2:	4b15      	ldr	r3, [pc, #84]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c3d8:	4b13      	ldr	r3, [pc, #76]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 800c3de:	4812      	ldr	r0, [pc, #72]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3e0:	f001 f9b8 	bl	800d754 <HAL_DMA_Init>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <HAL_TIM_Base_MspInit+0x11a>
      Error_Handler();
 800c3ea:	f7fe fd91 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a0d      	ldr	r2, [pc, #52]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3f2:	621a      	str	r2, [r3, #32]
 800c3f4:	4a0c      	ldr	r2, [pc, #48]	; (800c428 <HAL_TIM_Base_MspInit+0x154>)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	2037      	movs	r0, #55	; 0x37
 800c400:	f001 f971 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800c404:	2037      	movs	r0, #55	; 0x37
 800c406:	f001 f98a 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800c40a:	bf00      	nop
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	40001000 	.word	0x40001000
 800c418:	40023800 	.word	0x40023800
 800c41c:	200010c8 	.word	0x200010c8
 800c420:	40026028 	.word	0x40026028
 800c424:	40001400 	.word	0x40001400
 800c428:	20001068 	.word	0x20001068
 800c42c:	40026070 	.word	0x40026070

0800c430 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800c434:	4b11      	ldr	r3, [pc, #68]	; (800c47c <MX_UART7_Init+0x4c>)
 800c436:	4a12      	ldr	r2, [pc, #72]	; (800c480 <MX_UART7_Init+0x50>)
 800c438:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <MX_UART7_Init+0x4c>)
 800c43c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c440:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800c442:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <MX_UART7_Init+0x4c>)
 800c444:	2200      	movs	r2, #0
 800c446:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800c448:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <MX_UART7_Init+0x4c>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <MX_UART7_Init+0x4c>)
 800c450:	2200      	movs	r2, #0
 800c452:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800c454:	4b09      	ldr	r3, [pc, #36]	; (800c47c <MX_UART7_Init+0x4c>)
 800c456:	220c      	movs	r2, #12
 800c458:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <MX_UART7_Init+0x4c>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800c460:	4b06      	ldr	r3, [pc, #24]	; (800c47c <MX_UART7_Init+0x4c>)
 800c462:	2200      	movs	r2, #0
 800c464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800c466:	4805      	ldr	r0, [pc, #20]	; (800c47c <MX_UART7_Init+0x4c>)
 800c468:	f004 feec 	bl	8011244 <HAL_UART_Init>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800c472:	f7fe fd4d 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800c476:	bf00      	nop
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	20000888 	.word	0x20000888
 800c480:	40007800 	.word	0x40007800

0800c484 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800c488:	4b11      	ldr	r3, [pc, #68]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c48a:	4a12      	ldr	r2, [pc, #72]	; (800c4d4 <MX_UART8_Init+0x50>)
 800c48c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c494:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800c496:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c498:	2200      	movs	r2, #0
 800c49a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800c4a2:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800c4a8:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c4aa:	220c      	movs	r2, #12
 800c4ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c4ae:	4b08      	ldr	r3, [pc, #32]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4b4:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <MX_UART8_Init+0x4c>)
 800c4bc:	f004 fec2 	bl	8011244 <HAL_UART_Init>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800c4c6:	f7fe fd23 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800c4ca:	bf00      	nop
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	2000149c 	.word	0x2000149c
 800c4d4:	40007c00 	.word	0x40007c00

0800c4d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c4dc:	4b11      	ldr	r3, [pc, #68]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4de:	4a12      	ldr	r2, [pc, #72]	; (800c528 <MX_USART1_UART_Init+0x50>)
 800c4e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c4e2:	4b10      	ldr	r3, [pc, #64]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c4e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c4ea:	4b0e      	ldr	r3, [pc, #56]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c4f6:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c4fc:	4b09      	ldr	r3, [pc, #36]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c4fe:	220c      	movs	r2, #12
 800c500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c502:	4b08      	ldr	r3, [pc, #32]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c504:	2200      	movs	r2, #0
 800c506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c508:	4b06      	ldr	r3, [pc, #24]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c50e:	4805      	ldr	r0, [pc, #20]	; (800c524 <MX_USART1_UART_Init+0x4c>)
 800c510:	f004 fe98 	bl	8011244 <HAL_UART_Init>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c51a:	f7fe fcf9 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c51e:	bf00      	nop
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	20000978 	.word	0x20000978
 800c528:	40011000 	.word	0x40011000

0800c52c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c530:	4b11      	ldr	r3, [pc, #68]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c532:	4a12      	ldr	r2, [pc, #72]	; (800c57c <MX_USART2_UART_Init+0x50>)
 800c534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c536:	4b10      	ldr	r3, [pc, #64]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c53c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c53e:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c544:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c54a:	4b0b      	ldr	r3, [pc, #44]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c550:	4b09      	ldr	r3, [pc, #36]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c552:	220c      	movs	r2, #12
 800c554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c556:	4b08      	ldr	r3, [pc, #32]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c558:	2200      	movs	r2, #0
 800c55a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c55c:	4b06      	ldr	r3, [pc, #24]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c55e:	2200      	movs	r2, #0
 800c560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c562:	4805      	ldr	r0, [pc, #20]	; (800c578 <MX_USART2_UART_Init+0x4c>)
 800c564:	f004 fe6e 	bl	8011244 <HAL_UART_Init>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800c56e:	f7fe fccf 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c572:	bf00      	nop
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001524 	.word	0x20001524
 800c57c:	40004400 	.word	0x40004400

0800c580 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c584:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c586:	4a12      	ldr	r2, [pc, #72]	; (800c5d0 <MX_USART3_UART_Init+0x50>)
 800c588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c58c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c592:	4b0e      	ldr	r3, [pc, #56]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c594:	2200      	movs	r2, #0
 800c596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c598:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c59e:	4b0b      	ldr	r3, [pc, #44]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c5a6:	220c      	movs	r2, #12
 800c5a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c5aa:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c5b0:	4b06      	ldr	r3, [pc, #24]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c5b6:	4805      	ldr	r0, [pc, #20]	; (800c5cc <MX_USART3_UART_Init+0x4c>)
 800c5b8:	f004 fe44 	bl	8011244 <HAL_UART_Init>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800c5c2:	f7fe fca5 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c5c6:	bf00      	nop
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20001218 	.word	0x20001218
 800c5d0:	40004800 	.word	0x40004800

0800c5d4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800c5d8:	4b11      	ldr	r3, [pc, #68]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5da:	4a12      	ldr	r2, [pc, #72]	; (800c624 <MX_USART6_UART_Init+0x50>)
 800c5dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800c5de:	4b10      	ldr	r3, [pc, #64]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c5e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c5e6:	4b0e      	ldr	r3, [pc, #56]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c5ec:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c5f2:	4b0b      	ldr	r3, [pc, #44]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c5f8:	4b09      	ldr	r3, [pc, #36]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c5fa:	220c      	movs	r2, #12
 800c5fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c5fe:	4b08      	ldr	r3, [pc, #32]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c600:	2200      	movs	r2, #0
 800c602:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c604:	4b06      	ldr	r3, [pc, #24]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c606:	2200      	movs	r2, #0
 800c608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c60a:	4805      	ldr	r0, [pc, #20]	; (800c620 <MX_USART6_UART_Init+0x4c>)
 800c60c:	f004 fe1a 	bl	8011244 <HAL_UART_Init>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800c616:	f7fe fc7b 	bl	800af10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c61a:	bf00      	nop
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	200014e0 	.word	0x200014e0
 800c624:	40011400 	.word	0x40011400

0800c628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b094      	sub	sp, #80	; 0x50
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	605a      	str	r2, [r3, #4]
 800c63a:	609a      	str	r2, [r3, #8]
 800c63c:	60da      	str	r2, [r3, #12]
 800c63e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a7e      	ldr	r2, [pc, #504]	; (800c840 <HAL_UART_MspInit+0x218>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d163      	bne.n	800c712 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800c64a:	2300      	movs	r3, #0
 800c64c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c64e:	4b7d      	ldr	r3, [pc, #500]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	4a7c      	ldr	r2, [pc, #496]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c658:	6413      	str	r3, [r2, #64]	; 0x40
 800c65a:	4b7a      	ldr	r3, [pc, #488]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c662:	63bb      	str	r3, [r7, #56]	; 0x38
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c666:	2300      	movs	r3, #0
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
 800c66a:	4b76      	ldr	r3, [pc, #472]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66e:	4a75      	ldr	r2, [pc, #468]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c670:	f043 0310 	orr.w	r3, r3, #16
 800c674:	6313      	str	r3, [r2, #48]	; 0x30
 800c676:	4b73      	ldr	r3, [pc, #460]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	f003 0310 	and.w	r3, r3, #16
 800c67e:	637b      	str	r3, [r7, #52]	; 0x34
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_OBC_Pin|DEBUG_RX_OBC_Pin;
 800c682:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c688:	2302      	movs	r3, #2
 800c68a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c690:	2303      	movs	r3, #3
 800c692:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800c694:	2308      	movs	r3, #8
 800c696:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c698:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c69c:	4619      	mov	r1, r3
 800c69e:	486a      	ldr	r0, [pc, #424]	; (800c848 <HAL_UART_MspInit+0x220>)
 800c6a0:	f001 fc5a 	bl	800df58 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800c6a4:	4b69      	ldr	r3, [pc, #420]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6a6:	4a6a      	ldr	r2, [pc, #424]	; (800c850 <HAL_UART_MspInit+0x228>)
 800c6a8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800c6aa:	4b68      	ldr	r3, [pc, #416]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6ac:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c6b0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c6b2:	4b66      	ldr	r3, [pc, #408]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6b8:	4b64      	ldr	r3, [pc, #400]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c6be:	4b63      	ldr	r3, [pc, #396]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6c4:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c6c6:	4b61      	ldr	r3, [pc, #388]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c6cc:	4b5f      	ldr	r3, [pc, #380]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800c6d2:	4b5e      	ldr	r3, [pc, #376]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c6d8:	4b5c      	ldr	r3, [pc, #368]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c6de:	4b5b      	ldr	r3, [pc, #364]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800c6e4:	4859      	ldr	r0, [pc, #356]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6e6:	f001 f835 	bl	800d754 <HAL_DMA_Init>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800c6f0:	f7fe fc0e 	bl	800af10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a55      	ldr	r2, [pc, #340]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6f8:	639a      	str	r2, [r3, #56]	; 0x38
 800c6fa:	4a54      	ldr	r2, [pc, #336]	; (800c84c <HAL_UART_MspInit+0x224>)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800c700:	2200      	movs	r2, #0
 800c702:	2100      	movs	r1, #0
 800c704:	2052      	movs	r0, #82	; 0x52
 800c706:	f000 ffee 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800c70a:	2052      	movs	r0, #82	; 0x52
 800c70c:	f001 f807 	bl	800d71e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800c710:	e265      	b.n	800cbde <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==UART8)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a4f      	ldr	r2, [pc, #316]	; (800c854 <HAL_UART_MspInit+0x22c>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	f040 80a5 	bne.w	800c868 <HAL_UART_MspInit+0x240>
    __HAL_RCC_UART8_CLK_ENABLE();
 800c71e:	2300      	movs	r3, #0
 800c720:	633b      	str	r3, [r7, #48]	; 0x30
 800c722:	4b48      	ldr	r3, [pc, #288]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	4a47      	ldr	r2, [pc, #284]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c72c:	6413      	str	r3, [r2, #64]	; 0x40
 800c72e:	4b45      	ldr	r3, [pc, #276]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c736:	633b      	str	r3, [r7, #48]	; 0x30
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c73a:	2300      	movs	r3, #0
 800c73c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c73e:	4b41      	ldr	r3, [pc, #260]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c742:	4a40      	ldr	r2, [pc, #256]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c744:	f043 0310 	orr.w	r3, r3, #16
 800c748:	6313      	str	r3, [r2, #48]	; 0x30
 800c74a:	4b3e      	ldr	r3, [pc, #248]	; (800c844 <HAL_UART_MspInit+0x21c>)
 800c74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74e:	f003 0310 	and.w	r3, r3, #16
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800c756:	2303      	movs	r3, #3
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c75a:	2302      	movs	r3, #2
 800c75c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c762:	2303      	movs	r3, #3
 800c764:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800c766:	2308      	movs	r3, #8
 800c768:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c76a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c76e:	4619      	mov	r1, r3
 800c770:	4835      	ldr	r0, [pc, #212]	; (800c848 <HAL_UART_MspInit+0x220>)
 800c772:	f001 fbf1 	bl	800df58 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 800c776:	4b38      	ldr	r3, [pc, #224]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c778:	4a38      	ldr	r2, [pc, #224]	; (800c85c <HAL_UART_MspInit+0x234>)
 800c77a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800c77c:	4b36      	ldr	r3, [pc, #216]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c77e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c782:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c784:	4b34      	ldr	r3, [pc, #208]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c786:	2200      	movs	r2, #0
 800c788:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c78a:	4b33      	ldr	r3, [pc, #204]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c790:	4b31      	ldr	r3, [pc, #196]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c796:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c798:	4b2f      	ldr	r3, [pc, #188]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c79e:	4b2e      	ldr	r3, [pc, #184]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 800c7a4:	4b2c      	ldr	r3, [pc, #176]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c7aa:	4b2b      	ldr	r3, [pc, #172]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c7b0:	4b29      	ldr	r3, [pc, #164]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800c7b6:	4828      	ldr	r0, [pc, #160]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7b8:	f000 ffcc 	bl	800d754 <HAL_DMA_Init>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d001      	beq.n	800c7c6 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800c7c2:	f7fe fba5 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a23      	ldr	r2, [pc, #140]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7ca:	639a      	str	r2, [r3, #56]	; 0x38
 800c7cc:	4a22      	ldr	r2, [pc, #136]	; (800c858 <HAL_UART_MspInit+0x230>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream0;
 800c7d2:	4b23      	ldr	r3, [pc, #140]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7d4:	4a23      	ldr	r2, [pc, #140]	; (800c864 <HAL_UART_MspInit+0x23c>)
 800c7d6:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Channel = DMA_CHANNEL_5;
 800c7d8:	4b21      	ldr	r3, [pc, #132]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7da:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c7de:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c7e0:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7e2:	2240      	movs	r2, #64	; 0x40
 800c7e4:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c7e6:	4b1e      	ldr	r3, [pc, #120]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c7f2:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c7f4:	4b1a      	ldr	r3, [pc, #104]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c7fa:	4b19      	ldr	r3, [pc, #100]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800c800:	4b17      	ldr	r3, [pc, #92]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c802:	2200      	movs	r2, #0
 800c804:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c806:	4b16      	ldr	r3, [pc, #88]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c808:	2200      	movs	r2, #0
 800c80a:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c80c:	4b14      	ldr	r3, [pc, #80]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c80e:	2200      	movs	r2, #0
 800c810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 800c812:	4813      	ldr	r0, [pc, #76]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c814:	f000 ff9e 	bl	800d754 <HAL_DMA_Init>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800c81e:	f7fe fb77 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart8_tx);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a0e      	ldr	r2, [pc, #56]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c826:	635a      	str	r2, [r3, #52]	; 0x34
 800c828:	4a0d      	ldr	r2, [pc, #52]	; (800c860 <HAL_UART_MspInit+0x238>)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800c82e:	2200      	movs	r2, #0
 800c830:	2100      	movs	r1, #0
 800c832:	2053      	movs	r0, #83	; 0x53
 800c834:	f000 ff57 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800c838:	2053      	movs	r0, #83	; 0x53
 800c83a:	f000 ff70 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800c83e:	e1ce      	b.n	800cbde <HAL_UART_MspInit+0x5b6>
 800c840:	40007800 	.word	0x40007800
 800c844:	40023800 	.word	0x40023800
 800c848:	40021000 	.word	0x40021000
 800c84c:	2000131c 	.word	0x2000131c
 800c850:	40026058 	.word	0x40026058
 800c854:	40007c00 	.word	0x40007c00
 800c858:	200013dc 	.word	0x200013dc
 800c85c:	400260a0 	.word	0x400260a0
 800c860:	2000143c 	.word	0x2000143c
 800c864:	40026010 	.word	0x40026010
  else if(uartHandle->Instance==USART1)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a9b      	ldr	r2, [pc, #620]	; (800cadc <HAL_UART_MspInit+0x4b4>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	f040 8091 	bne.w	800c996 <HAL_UART_MspInit+0x36e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800c874:	2300      	movs	r3, #0
 800c876:	62bb      	str	r3, [r7, #40]	; 0x28
 800c878:	4b99      	ldr	r3, [pc, #612]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87c:	4a98      	ldr	r2, [pc, #608]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c87e:	f043 0310 	orr.w	r3, r3, #16
 800c882:	6453      	str	r3, [r2, #68]	; 0x44
 800c884:	4b96      	ldr	r3, [pc, #600]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c890:	2300      	movs	r3, #0
 800c892:	627b      	str	r3, [r7, #36]	; 0x24
 800c894:	4b92      	ldr	r3, [pc, #584]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c898:	4a91      	ldr	r2, [pc, #580]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c89a:	f043 0302 	orr.w	r3, r3, #2
 800c89e:	6313      	str	r3, [r2, #48]	; 0x30
 800c8a0:	4b8f      	ldr	r3, [pc, #572]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800c8ac:	23c0      	movs	r3, #192	; 0xc0
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c8bc:	2307      	movs	r3, #7
 800c8be:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4887      	ldr	r0, [pc, #540]	; (800cae4 <HAL_UART_MspInit+0x4bc>)
 800c8c8:	f001 fb46 	bl	800df58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800c8cc:	4b86      	ldr	r3, [pc, #536]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8ce:	4a87      	ldr	r2, [pc, #540]	; (800caec <HAL_UART_MspInit+0x4c4>)
 800c8d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800c8d2:	4b85      	ldr	r3, [pc, #532]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c8d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c8da:	4b83      	ldr	r3, [pc, #524]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c8e0:	4b81      	ldr	r3, [pc, #516]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c8e6:	4b80      	ldr	r3, [pc, #512]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c8ee:	4b7e      	ldr	r3, [pc, #504]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c8f4:	4b7c      	ldr	r3, [pc, #496]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800c8fa:	4b7b      	ldr	r3, [pc, #492]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c900:	4b79      	ldr	r3, [pc, #484]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c902:	2200      	movs	r2, #0
 800c904:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c906:	4b78      	ldr	r3, [pc, #480]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c908:	2200      	movs	r2, #0
 800c90a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c90c:	4876      	ldr	r0, [pc, #472]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c90e:	f000 ff21 	bl	800d754 <HAL_DMA_Init>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 800c918:	f7fe fafa 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a72      	ldr	r2, [pc, #456]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
 800c922:	4a71      	ldr	r2, [pc, #452]	; (800cae8 <HAL_UART_MspInit+0x4c0>)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800c928:	4b71      	ldr	r3, [pc, #452]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c92a:	4a72      	ldr	r2, [pc, #456]	; (800caf4 <HAL_UART_MspInit+0x4cc>)
 800c92c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800c92e:	4b70      	ldr	r3, [pc, #448]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c934:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c936:	4b6e      	ldr	r3, [pc, #440]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c938:	2240      	movs	r2, #64	; 0x40
 800c93a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c93c:	4b6c      	ldr	r3, [pc, #432]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c93e:	2200      	movs	r2, #0
 800c940:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c942:	4b6b      	ldr	r3, [pc, #428]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c948:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c94a:	4b69      	ldr	r3, [pc, #420]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c950:	4b67      	ldr	r3, [pc, #412]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c952:	2200      	movs	r2, #0
 800c954:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800c956:	4b66      	ldr	r3, [pc, #408]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c958:	2200      	movs	r2, #0
 800c95a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c95c:	4b64      	ldr	r3, [pc, #400]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c95e:	2200      	movs	r2, #0
 800c960:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c962:	4b63      	ldr	r3, [pc, #396]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c964:	2200      	movs	r2, #0
 800c966:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c968:	4861      	ldr	r0, [pc, #388]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c96a:	f000 fef3 	bl	800d754 <HAL_DMA_Init>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <HAL_UART_MspInit+0x350>
      Error_Handler();
 800c974:	f7fe facc 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a5d      	ldr	r2, [pc, #372]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c97c:	635a      	str	r2, [r3, #52]	; 0x34
 800c97e:	4a5c      	ldr	r2, [pc, #368]	; (800caf0 <HAL_UART_MspInit+0x4c8>)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c984:	2200      	movs	r2, #0
 800c986:	2100      	movs	r1, #0
 800c988:	2025      	movs	r0, #37	; 0x25
 800c98a:	f000 feac 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c98e:	2025      	movs	r0, #37	; 0x25
 800c990:	f000 fec5 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800c994:	e123      	b.n	800cbde <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==USART2)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a57      	ldr	r2, [pc, #348]	; (800caf8 <HAL_UART_MspInit+0x4d0>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d162      	bne.n	800ca66 <HAL_UART_MspInit+0x43e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	623b      	str	r3, [r7, #32]
 800c9a4:	4b4e      	ldr	r3, [pc, #312]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a8:	4a4d      	ldr	r2, [pc, #308]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9ae:	6413      	str	r3, [r2, #64]	; 0x40
 800c9b0:	4b4b      	ldr	r3, [pc, #300]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b8:	623b      	str	r3, [r7, #32]
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c9bc:	2300      	movs	r3, #0
 800c9be:	61fb      	str	r3, [r7, #28]
 800c9c0:	4b47      	ldr	r3, [pc, #284]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c4:	4a46      	ldr	r2, [pc, #280]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9c6:	f043 0308 	orr.w	r3, r3, #8
 800c9ca:	6313      	str	r3, [r2, #48]	; 0x30
 800c9cc:	4b44      	ldr	r3, [pc, #272]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800c9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d0:	f003 0308 	and.w	r3, r3, #8
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800c9d8:	2360      	movs	r3, #96	; 0x60
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9dc:	2302      	movs	r3, #2
 800c9de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c9e8:	2307      	movs	r3, #7
 800c9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c9ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4842      	ldr	r0, [pc, #264]	; (800cafc <HAL_UART_MspInit+0x4d4>)
 800c9f4:	f001 fab0 	bl	800df58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800c9f8:	4b41      	ldr	r3, [pc, #260]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800c9fa:	4a42      	ldr	r2, [pc, #264]	; (800cb04 <HAL_UART_MspInit+0x4dc>)
 800c9fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800c9fe:	4b40      	ldr	r3, [pc, #256]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ca04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca06:	4b3e      	ldr	r3, [pc, #248]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca0c:	4b3c      	ldr	r3, [pc, #240]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca12:	4b3b      	ldr	r3, [pc, #236]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca1a:	4b39      	ldr	r3, [pc, #228]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca20:	4b37      	ldr	r3, [pc, #220]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800ca26:	4b36      	ldr	r3, [pc, #216]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ca2c:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ca32:	4b33      	ldr	r3, [pc, #204]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ca38:	4831      	ldr	r0, [pc, #196]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca3a:	f000 fe8b 	bl	800d754 <HAL_DMA_Init>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <HAL_UART_MspInit+0x420>
      Error_Handler();
 800ca44:	f7fe fa64 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a2d      	ldr	r2, [pc, #180]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca4c:	639a      	str	r2, [r3, #56]	; 0x38
 800ca4e:	4a2c      	ldr	r2, [pc, #176]	; (800cb00 <HAL_UART_MspInit+0x4d8>)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ca54:	2200      	movs	r2, #0
 800ca56:	2100      	movs	r1, #0
 800ca58:	2026      	movs	r0, #38	; 0x26
 800ca5a:	f000 fe44 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ca5e:	2026      	movs	r0, #38	; 0x26
 800ca60:	f000 fe5d 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800ca64:	e0bb      	b.n	800cbde <HAL_UART_MspInit+0x5b6>
  else if(uartHandle->Instance==USART3)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a27      	ldr	r2, [pc, #156]	; (800cb08 <HAL_UART_MspInit+0x4e0>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d14f      	bne.n	800cb10 <HAL_UART_MspInit+0x4e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ca70:	2300      	movs	r3, #0
 800ca72:	61bb      	str	r3, [r7, #24]
 800ca74:	4b1a      	ldr	r3, [pc, #104]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca78:	4a19      	ldr	r2, [pc, #100]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca7e:	6413      	str	r3, [r2, #64]	; 0x40
 800ca80:	4b17      	ldr	r3, [pc, #92]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	617b      	str	r3, [r7, #20]
 800ca90:	4b13      	ldr	r3, [pc, #76]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca94:	4a12      	ldr	r2, [pc, #72]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca96:	f043 0304 	orr.w	r3, r3, #4
 800ca9a:	6313      	str	r3, [r2, #48]	; 0x30
 800ca9c:	4b10      	ldr	r3, [pc, #64]	; (800cae0 <HAL_UART_MspInit+0x4b8>)
 800ca9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800caa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caae:	2302      	movs	r3, #2
 800cab0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cab6:	2303      	movs	r3, #3
 800cab8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800caba:	2307      	movs	r3, #7
 800cabc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cabe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cac2:	4619      	mov	r1, r3
 800cac4:	4811      	ldr	r0, [pc, #68]	; (800cb0c <HAL_UART_MspInit+0x4e4>)
 800cac6:	f001 fa47 	bl	800df58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	2027      	movs	r0, #39	; 0x27
 800cad0:	f000 fe09 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cad4:	2027      	movs	r0, #39	; 0x27
 800cad6:	f000 fe22 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800cada:	e080      	b.n	800cbde <HAL_UART_MspInit+0x5b6>
 800cadc:	40011000 	.word	0x40011000
 800cae0:	40023800 	.word	0x40023800
 800cae4:	40020400 	.word	0x40020400
 800cae8:	2000137c 	.word	0x2000137c
 800caec:	40026488 	.word	0x40026488
 800caf0:	2000125c 	.word	0x2000125c
 800caf4:	400264b8 	.word	0x400264b8
 800caf8:	40004400 	.word	0x40004400
 800cafc:	40020c00 	.word	0x40020c00
 800cb00:	200011b8 	.word	0x200011b8
 800cb04:	40026088 	.word	0x40026088
 800cb08:	40004800 	.word	0x40004800
 800cb0c:	40020800 	.word	0x40020800
  else if(uartHandle->Instance==USART6)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a34      	ldr	r2, [pc, #208]	; (800cbe8 <HAL_UART_MspInit+0x5c0>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d161      	bne.n	800cbde <HAL_UART_MspInit+0x5b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	4b33      	ldr	r3, [pc, #204]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb22:	4a32      	ldr	r2, [pc, #200]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb24:	f043 0320 	orr.w	r3, r3, #32
 800cb28:	6453      	str	r3, [r2, #68]	; 0x44
 800cb2a:	4b30      	ldr	r3, [pc, #192]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2e:	f003 0320 	and.w	r3, r3, #32
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	4b2c      	ldr	r3, [pc, #176]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3e:	4a2b      	ldr	r2, [pc, #172]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb40:	f043 0304 	orr.w	r3, r3, #4
 800cb44:	6313      	str	r3, [r2, #48]	; 0x30
 800cb46:	4b29      	ldr	r3, [pc, #164]	; (800cbec <HAL_UART_MspInit+0x5c4>)
 800cb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4a:	f003 0304 	and.w	r3, r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cb52:	23c0      	movs	r3, #192	; 0xc0
 800cb54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb56:	2302      	movs	r3, #2
 800cb58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cb62:	2308      	movs	r3, #8
 800cb64:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4820      	ldr	r0, [pc, #128]	; (800cbf0 <HAL_UART_MspInit+0x5c8>)
 800cb6e:	f001 f9f3 	bl	800df58 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800cb72:	4b20      	ldr	r3, [pc, #128]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb74:	4a20      	ldr	r2, [pc, #128]	; (800cbf8 <HAL_UART_MspInit+0x5d0>)
 800cb76:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800cb78:	4b1e      	ldr	r3, [pc, #120]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb7a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800cb7e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cb80:	4b1c      	ldr	r3, [pc, #112]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb82:	2240      	movs	r2, #64	; 0x40
 800cb84:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb86:	4b1b      	ldr	r3, [pc, #108]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb88:	2200      	movs	r2, #0
 800cb8a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cb8c:	4b19      	ldr	r3, [pc, #100]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb92:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb94:	4b17      	ldr	r3, [pc, #92]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb9a:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800cba0:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cbac:	4b11      	ldr	r3, [pc, #68]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800cbb2:	4810      	ldr	r0, [pc, #64]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cbb4:	f000 fdce 	bl	800d754 <HAL_DMA_Init>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <HAL_UART_MspInit+0x59a>
      Error_Handler();
 800cbbe:	f7fe f9a7 	bl	800af10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a0b      	ldr	r2, [pc, #44]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cbc6:	635a      	str	r2, [r3, #52]	; 0x34
 800cbc8:	4a0a      	ldr	r2, [pc, #40]	; (800cbf4 <HAL_UART_MspInit+0x5cc>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	2047      	movs	r0, #71	; 0x47
 800cbd4:	f000 fd87 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cbd8:	2047      	movs	r0, #71	; 0x47
 800cbda:	f000 fda0 	bl	800d71e <HAL_NVIC_EnableIRQ>
}
 800cbde:	bf00      	nop
 800cbe0:	3750      	adds	r7, #80	; 0x50
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	40011400 	.word	0x40011400
 800cbec:	40023800 	.word	0x40023800
 800cbf0:	40020800 	.word	0x40020800
 800cbf4:	200012bc 	.word	0x200012bc
 800cbf8:	400264a0 	.word	0x400264a0

0800cbfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800cbfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cc34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cc00:	480d      	ldr	r0, [pc, #52]	; (800cc38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800cc02:	490e      	ldr	r1, [pc, #56]	; (800cc3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800cc04:	4a0e      	ldr	r2, [pc, #56]	; (800cc40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800cc06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cc08:	e002      	b.n	800cc10 <LoopCopyDataInit>

0800cc0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cc0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cc0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cc0e:	3304      	adds	r3, #4

0800cc10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cc10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cc12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cc14:	d3f9      	bcc.n	800cc0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cc16:	4a0b      	ldr	r2, [pc, #44]	; (800cc44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800cc18:	4c0b      	ldr	r4, [pc, #44]	; (800cc48 <LoopFillZerobss+0x26>)
  movs r3, #0
 800cc1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cc1c:	e001      	b.n	800cc22 <LoopFillZerobss>

0800cc1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cc1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cc20:	3204      	adds	r2, #4

0800cc22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cc22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cc24:	d3fb      	bcc.n	800cc1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cc26:	f7ff fad7 	bl	800c1d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cc2a:	f009 fa65 	bl	80160f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc2e:	f7fd feff 	bl	800aa30 <main>
  bx  lr    
 800cc32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800cc34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800cc38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cc3c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800cc40:	08019634 	.word	0x08019634
  ldr r2, =_sbss
 800cc44:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800cc48:	20002e54 	.word	0x20002e54

0800cc4c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cc4c:	e7fe      	b.n	800cc4c <CAN1_RX0_IRQHandler>
	...

0800cc50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cc54:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <HAL_Init+0x40>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a0d      	ldr	r2, [pc, #52]	; (800cc90 <HAL_Init+0x40>)
 800cc5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cc60:	4b0b      	ldr	r3, [pc, #44]	; (800cc90 <HAL_Init+0x40>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a0a      	ldr	r2, [pc, #40]	; (800cc90 <HAL_Init+0x40>)
 800cc66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cc6c:	4b08      	ldr	r3, [pc, #32]	; (800cc90 <HAL_Init+0x40>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a07      	ldr	r2, [pc, #28]	; (800cc90 <HAL_Init+0x40>)
 800cc72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cc78:	2003      	movs	r0, #3
 800cc7a:	f000 fd29 	bl	800d6d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cc7e:	200f      	movs	r0, #15
 800cc80:	f000 f808 	bl	800cc94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cc84:	f7ff f864 	bl	800bd50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	40023c00 	.word	0x40023c00

0800cc94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cc9c:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <HAL_InitTick+0x54>)
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	4b12      	ldr	r3, [pc, #72]	; (800ccec <HAL_InitTick+0x58>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	4619      	mov	r1, r3
 800cca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ccaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 fd41 	bl	800d73a <HAL_SYSTICK_Config>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e00e      	b.n	800cce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b0f      	cmp	r3, #15
 800ccc6:	d80a      	bhi.n	800ccde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ccc8:	2200      	movs	r2, #0
 800ccca:	6879      	ldr	r1, [r7, #4]
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	f000 fd09 	bl	800d6e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ccd4:	4a06      	ldr	r2, [pc, #24]	; (800ccf0 <HAL_InitTick+0x5c>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e000      	b.n	800cce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000048 	.word	0x20000048
 800ccec:	20000050 	.word	0x20000050
 800ccf0:	2000004c 	.word	0x2000004c

0800ccf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ccf8:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <HAL_IncTick+0x20>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <HAL_IncTick+0x24>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4413      	add	r3, r2
 800cd04:	4a04      	ldr	r2, [pc, #16]	; (800cd18 <HAL_IncTick+0x24>)
 800cd06:	6013      	str	r3, [r2, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20000050 	.word	0x20000050
 800cd18:	20001568 	.word	0x20001568

0800cd1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
  return uwTick;
 800cd20:	4b03      	ldr	r3, [pc, #12]	; (800cd30 <HAL_GetTick+0x14>)
 800cd22:	681b      	ldr	r3, [r3, #0]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20001568 	.word	0x20001568

0800cd34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cd3c:	f7ff ffee 	bl	800cd1c <HAL_GetTick>
 800cd40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4c:	d005      	beq.n	800cd5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cd4e:	4b0a      	ldr	r3, [pc, #40]	; (800cd78 <HAL_Delay+0x44>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	461a      	mov	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	4413      	add	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cd5a:	bf00      	nop
 800cd5c:	f7ff ffde 	bl	800cd1c <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d8f7      	bhi.n	800cd5c <HAL_Delay+0x28>
  {
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000050 	.word	0x20000050

0800cd7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e033      	b.n	800cdfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d109      	bne.n	800cdae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7f4 fd52 	bl	8001844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb2:	f003 0310 	and.w	r3, r3, #16
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d118      	bne.n	800cdec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cdc2:	f023 0302 	bic.w	r3, r3, #2
 800cdc6:	f043 0202 	orr.w	r2, r3, #2
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 faa8 	bl	800d324 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdde:	f023 0303 	bic.w	r3, r3, #3
 800cde2:	f043 0201 	orr.w	r2, r3, #1
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	641a      	str	r2, [r3, #64]	; 0x40
 800cdea:	e001      	b.n	800cdf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	bf0c      	ite	eq
 800ce20:	2301      	moveq	r3, #1
 800ce22:	2300      	movne	r3, #0
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	f003 0320 	and.w	r3, r3, #32
 800ce32:	2b20      	cmp	r3, #32
 800ce34:	bf0c      	ite	eq
 800ce36:	2301      	moveq	r3, #1
 800ce38:	2300      	movne	r3, #0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d049      	beq.n	800ced8 <HAL_ADC_IRQHandler+0xd6>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d046      	beq.n	800ced8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4e:	f003 0310 	and.w	r3, r3, #16
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d12b      	bne.n	800cec8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d127      	bne.n	800cec8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d006      	beq.n	800ce94 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d119      	bne.n	800cec8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685a      	ldr	r2, [r3, #4]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f022 0220 	bic.w	r2, r2, #32
 800cea2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d105      	bne.n	800cec8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec0:	f043 0201 	orr.w	r2, r3, #1
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f8db 	bl	800d084 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f06f 0212 	mvn.w	r2, #18
 800ced6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0304 	and.w	r3, r3, #4
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	bf0c      	ite	eq
 800cee6:	2301      	moveq	r3, #1
 800cee8:	2300      	movne	r3, #0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef8:	2b80      	cmp	r3, #128	; 0x80
 800cefa:	bf0c      	ite	eq
 800cefc:	2301      	moveq	r3, #1
 800cefe:	2300      	movne	r3, #0
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d057      	beq.n	800cfba <HAL_ADC_IRQHandler+0x1b8>
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d054      	beq.n	800cfba <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf14:	f003 0310 	and.w	r3, r3, #16
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d105      	bne.n	800cf28 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d139      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d006      	beq.n	800cf52 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d12b      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d124      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d11d      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d119      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	685a      	ldr	r2, [r3, #4]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf84:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d105      	bne.n	800cfaa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa2:	f043 0201 	orr.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fab6 	bl	800d51c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f06f 020c 	mvn.w	r2, #12
 800cfb8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	bf0c      	ite	eq
 800cfc8:	2301      	moveq	r3, #1
 800cfca:	2300      	movne	r3, #0
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfda:	2b40      	cmp	r3, #64	; 0x40
 800cfdc:	bf0c      	ite	eq
 800cfde:	2301      	moveq	r3, #1
 800cfe0:	2300      	movne	r3, #0
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d017      	beq.n	800d01c <HAL_ADC_IRQHandler+0x21a>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d014      	beq.n	800d01c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d10d      	bne.n	800d01c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d004:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f843 	bl	800d098 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f06f 0201 	mvn.w	r2, #1
 800d01a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 0320 	and.w	r3, r3, #32
 800d026:	2b20      	cmp	r3, #32
 800d028:	bf0c      	ite	eq
 800d02a:	2301      	moveq	r3, #1
 800d02c:	2300      	movne	r3, #0
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d03c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d040:	bf0c      	ite	eq
 800d042:	2301      	moveq	r3, #1
 800d044:	2300      	movne	r3, #0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d015      	beq.n	800d07c <HAL_ADC_IRQHandler+0x27a>
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d012      	beq.n	800d07c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05a:	f043 0202 	orr.w	r2, r3, #2
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f06f 0220 	mvn.w	r2, #32
 800d06a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f81d 	bl	800d0ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f06f 0220 	mvn.w	r2, #32
 800d07a:	601a      	str	r2, [r3, #0]
  }
}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800d0b4:	bf00      	nop
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d101      	bne.n	800d0dc <HAL_ADC_ConfigChannel+0x1c>
 800d0d8:	2302      	movs	r3, #2
 800d0da:	e113      	b.n	800d304 <HAL_ADC_ConfigChannel+0x244>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b09      	cmp	r3, #9
 800d0ea:	d925      	bls.n	800d138 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68d9      	ldr	r1, [r3, #12]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4413      	add	r3, r2
 800d100:	3b1e      	subs	r3, #30
 800d102:	2207      	movs	r2, #7
 800d104:	fa02 f303 	lsl.w	r3, r2, r3
 800d108:	43da      	mvns	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	400a      	ands	r2, r1
 800d110:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68d9      	ldr	r1, [r3, #12]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	b29b      	uxth	r3, r3
 800d122:	4618      	mov	r0, r3
 800d124:	4603      	mov	r3, r0
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	4403      	add	r3, r0
 800d12a:	3b1e      	subs	r3, #30
 800d12c:	409a      	lsls	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	60da      	str	r2, [r3, #12]
 800d136:	e022      	b.n	800d17e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6919      	ldr	r1, [r3, #16]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	b29b      	uxth	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	4613      	mov	r3, r2
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4413      	add	r3, r2
 800d14c:	2207      	movs	r2, #7
 800d14e:	fa02 f303 	lsl.w	r3, r2, r3
 800d152:	43da      	mvns	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	400a      	ands	r2, r1
 800d15a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6919      	ldr	r1, [r3, #16]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	689a      	ldr	r2, [r3, #8]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	4618      	mov	r0, r3
 800d16e:	4603      	mov	r3, r0
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4403      	add	r3, r0
 800d174:	409a      	lsls	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	430a      	orrs	r2, r1
 800d17c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2b06      	cmp	r3, #6
 800d184:	d824      	bhi.n	800d1d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	4613      	mov	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	3b05      	subs	r3, #5
 800d198:	221f      	movs	r2, #31
 800d19a:	fa02 f303 	lsl.w	r3, r2, r3
 800d19e:	43da      	mvns	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	400a      	ands	r2, r1
 800d1a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	3b05      	subs	r3, #5
 800d1c2:	fa00 f203 	lsl.w	r2, r0, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	635a      	str	r2, [r3, #52]	; 0x34
 800d1ce:	e04c      	b.n	800d26a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	2b0c      	cmp	r3, #12
 800d1d6:	d824      	bhi.n	800d222 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	3b23      	subs	r3, #35	; 0x23
 800d1ea:	221f      	movs	r2, #31
 800d1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f0:	43da      	mvns	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	400a      	ands	r2, r1
 800d1f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	b29b      	uxth	r3, r3
 800d206:	4618      	mov	r0, r3
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	3b23      	subs	r3, #35	; 0x23
 800d214:	fa00 f203 	lsl.w	r2, r0, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	430a      	orrs	r2, r1
 800d21e:	631a      	str	r2, [r3, #48]	; 0x30
 800d220:	e023      	b.n	800d26a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4613      	mov	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	3b41      	subs	r3, #65	; 0x41
 800d234:	221f      	movs	r2, #31
 800d236:	fa02 f303 	lsl.w	r3, r2, r3
 800d23a:	43da      	mvns	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	400a      	ands	r2, r1
 800d242:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4618      	mov	r0, r3
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	4613      	mov	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	3b41      	subs	r3, #65	; 0x41
 800d25e:	fa00 f203 	lsl.w	r2, r0, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d26a:	4b29      	ldr	r3, [pc, #164]	; (800d310 <HAL_ADC_ConfigChannel+0x250>)
 800d26c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a28      	ldr	r2, [pc, #160]	; (800d314 <HAL_ADC_ConfigChannel+0x254>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d10f      	bne.n	800d298 <HAL_ADC_ConfigChannel+0x1d8>
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b12      	cmp	r3, #18
 800d27e:	d10b      	bne.n	800d298 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a1d      	ldr	r2, [pc, #116]	; (800d314 <HAL_ADC_ConfigChannel+0x254>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d12b      	bne.n	800d2fa <HAL_ADC_ConfigChannel+0x23a>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a1c      	ldr	r2, [pc, #112]	; (800d318 <HAL_ADC_ConfigChannel+0x258>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d003      	beq.n	800d2b4 <HAL_ADC_ConfigChannel+0x1f4>
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b11      	cmp	r3, #17
 800d2b2:	d122      	bne.n	800d2fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a11      	ldr	r2, [pc, #68]	; (800d318 <HAL_ADC_ConfigChannel+0x258>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d111      	bne.n	800d2fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800d2d6:	4b11      	ldr	r3, [pc, #68]	; (800d31c <HAL_ADC_ConfigChannel+0x25c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a11      	ldr	r2, [pc, #68]	; (800d320 <HAL_ADC_ConfigChannel+0x260>)
 800d2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2e0:	0c9a      	lsrs	r2, r3, #18
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800d2ec:	e002      	b.n	800d2f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1f9      	bne.n	800d2ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	40012300 	.word	0x40012300
 800d314:	40012000 	.word	0x40012000
 800d318:	10000012 	.word	0x10000012
 800d31c:	20000048 	.word	0x20000048
 800d320:	431bde83 	.word	0x431bde83

0800d324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d32c:	4b79      	ldr	r3, [pc, #484]	; (800d514 <ADC_Init+0x1f0>)
 800d32e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	431a      	orrs	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6859      	ldr	r1, [r3, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	021a      	lsls	r2, r3, #8
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800d37c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6859      	ldr	r1, [r3, #4]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689a      	ldr	r2, [r3, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	689a      	ldr	r2, [r3, #8]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d39e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6899      	ldr	r1, [r3, #8]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	4a58      	ldr	r2, [pc, #352]	; (800d518 <ADC_Init+0x1f4>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d022      	beq.n	800d402 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	689a      	ldr	r2, [r3, #8]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d3ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6899      	ldr	r1, [r3, #8]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	430a      	orrs	r2, r1
 800d3dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689a      	ldr	r2, [r3, #8]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d3ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6899      	ldr	r1, [r3, #8]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	609a      	str	r2, [r3, #8]
 800d400:	e00f      	b.n	800d422 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	689a      	ldr	r2, [r3, #8]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d420:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	689a      	ldr	r2, [r3, #8]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 0202 	bic.w	r2, r2, #2
 800d430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6899      	ldr	r1, [r3, #8]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7e1b      	ldrb	r3, [r3, #24]
 800d43c:	005a      	lsls	r2, r3, #1
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01b      	beq.n	800d488 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d45e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	685a      	ldr	r2, [r3, #4]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800d46e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6859      	ldr	r1, [r3, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47a:	3b01      	subs	r3, #1
 800d47c:	035a      	lsls	r2, r3, #13
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	430a      	orrs	r2, r1
 800d484:	605a      	str	r2, [r3, #4]
 800d486:	e007      	b.n	800d498 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d496:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800d4a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	051a      	lsls	r2, r3, #20
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d4cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6899      	ldr	r1, [r3, #8]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4da:	025a      	lsls	r2, r3, #9
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	430a      	orrs	r2, r1
 800d4e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689a      	ldr	r2, [r3, #8]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6899      	ldr	r1, [r3, #8]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	029a      	lsls	r2, r3, #10
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	430a      	orrs	r2, r1
 800d506:	609a      	str	r2, [r3, #8]
}
 800d508:	bf00      	nop
 800d50a:	3714      	adds	r7, #20
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	40012300 	.word	0x40012300
 800d518:	0f000001 	.word	0x0f000001

0800d51c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d540:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <__NVIC_SetPriorityGrouping+0x44>)
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d54c:	4013      	ands	r3, r2
 800d54e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d55c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d562:	4a04      	ldr	r2, [pc, #16]	; (800d574 <__NVIC_SetPriorityGrouping+0x44>)
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	60d3      	str	r3, [r2, #12]
}
 800d568:	bf00      	nop
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	e000ed00 	.word	0xe000ed00

0800d578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d57c:	4b04      	ldr	r3, [pc, #16]	; (800d590 <__NVIC_GetPriorityGrouping+0x18>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	0a1b      	lsrs	r3, r3, #8
 800d582:	f003 0307 	and.w	r3, r3, #7
}
 800d586:	4618      	mov	r0, r3
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	e000ed00 	.word	0xe000ed00

0800d594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	db0b      	blt.n	800d5be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5a6:	79fb      	ldrb	r3, [r7, #7]
 800d5a8:	f003 021f 	and.w	r2, r3, #31
 800d5ac:	4907      	ldr	r1, [pc, #28]	; (800d5cc <__NVIC_EnableIRQ+0x38>)
 800d5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	fa00 f202 	lsl.w	r2, r0, r2
 800d5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d5be:	bf00      	nop
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	e000e100 	.word	0xe000e100

0800d5d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	db0a      	blt.n	800d5fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	490c      	ldr	r1, [pc, #48]	; (800d61c <__NVIC_SetPriority+0x4c>)
 800d5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ee:	0112      	lsls	r2, r2, #4
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	440b      	add	r3, r1
 800d5f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d5f8:	e00a      	b.n	800d610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	4908      	ldr	r1, [pc, #32]	; (800d620 <__NVIC_SetPriority+0x50>)
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	f003 030f 	and.w	r3, r3, #15
 800d606:	3b04      	subs	r3, #4
 800d608:	0112      	lsls	r2, r2, #4
 800d60a:	b2d2      	uxtb	r2, r2
 800d60c:	440b      	add	r3, r1
 800d60e:	761a      	strb	r2, [r3, #24]
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	e000e100 	.word	0xe000e100
 800d620:	e000ed00 	.word	0xe000ed00

0800d624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d624:	b480      	push	{r7}
 800d626:	b089      	sub	sp, #36	; 0x24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0307 	and.w	r3, r3, #7
 800d636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	f1c3 0307 	rsb	r3, r3, #7
 800d63e:	2b04      	cmp	r3, #4
 800d640:	bf28      	it	cs
 800d642:	2304      	movcs	r3, #4
 800d644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	3304      	adds	r3, #4
 800d64a:	2b06      	cmp	r3, #6
 800d64c:	d902      	bls.n	800d654 <NVIC_EncodePriority+0x30>
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	3b03      	subs	r3, #3
 800d652:	e000      	b.n	800d656 <NVIC_EncodePriority+0x32>
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d658:	f04f 32ff 	mov.w	r2, #4294967295
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	fa02 f303 	lsl.w	r3, r2, r3
 800d662:	43da      	mvns	r2, r3
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	401a      	ands	r2, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d66c:	f04f 31ff 	mov.w	r1, #4294967295
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	fa01 f303 	lsl.w	r3, r1, r3
 800d676:	43d9      	mvns	r1, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d67c:	4313      	orrs	r3, r2
         );
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3724      	adds	r7, #36	; 0x24
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
	...

0800d68c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3b01      	subs	r3, #1
 800d698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d69c:	d301      	bcc.n	800d6a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e00f      	b.n	800d6c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d6a2:	4a0a      	ldr	r2, [pc, #40]	; (800d6cc <SysTick_Config+0x40>)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d6aa:	210f      	movs	r1, #15
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	f7ff ff8e 	bl	800d5d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <SysTick_Config+0x40>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d6ba:	4b04      	ldr	r3, [pc, #16]	; (800d6cc <SysTick_Config+0x40>)
 800d6bc:	2207      	movs	r2, #7
 800d6be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	e000e010 	.word	0xe000e010

0800d6d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff ff29 	bl	800d530 <__NVIC_SetPriorityGrouping>
}
 800d6de:	bf00      	nop
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b086      	sub	sp, #24
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d6f8:	f7ff ff3e 	bl	800d578 <__NVIC_GetPriorityGrouping>
 800d6fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	6978      	ldr	r0, [r7, #20]
 800d704:	f7ff ff8e 	bl	800d624 <NVIC_EncodePriority>
 800d708:	4602      	mov	r2, r0
 800d70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff ff5d 	bl	800d5d0 <__NVIC_SetPriority>
}
 800d716:	bf00      	nop
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b082      	sub	sp, #8
 800d722:	af00      	add	r7, sp, #0
 800d724:	4603      	mov	r3, r0
 800d726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff ff31 	bl	800d594 <__NVIC_EnableIRQ>
}
 800d732:	bf00      	nop
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff ffa2 	bl	800d68c <SysTick_Config>
 800d748:	4603      	mov	r3, r0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d760:	f7ff fadc 	bl	800cd1c <HAL_GetTick>
 800d764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e099      	b.n	800d8a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2202      	movs	r2, #2
 800d774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f022 0201 	bic.w	r2, r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d790:	e00f      	b.n	800d7b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d792:	f7ff fac3 	bl	800cd1c <HAL_GetTick>
 800d796:	4602      	mov	r2, r0
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b05      	cmp	r3, #5
 800d79e:	d908      	bls.n	800d7b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2220      	movs	r2, #32
 800d7a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2203      	movs	r2, #3
 800d7aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e078      	b.n	800d8a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e8      	bne.n	800d792 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	4b38      	ldr	r3, [pc, #224]	; (800d8ac <HAL_DMA_Init+0x158>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d7de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d7ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	699b      	ldr	r3, [r3, #24]
 800d7f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d7f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6a1b      	ldr	r3, [r3, #32]
 800d7fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	4313      	orrs	r3, r2
 800d802:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	2b04      	cmp	r3, #4
 800d80a:	d107      	bne.n	800d81c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d814:	4313      	orrs	r3, r2
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	4313      	orrs	r3, r2
 800d81a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f023 0307 	bic.w	r3, r3, #7
 800d832:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d842:	2b04      	cmp	r3, #4
 800d844:	d117      	bne.n	800d876 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fb01 	bl	800de60 <DMA_CheckFifoParam>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d008      	beq.n	800d876 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2240      	movs	r2, #64	; 0x40
 800d868:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800d872:	2301      	movs	r3, #1
 800d874:	e016      	b.n	800d8a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fab8 	bl	800ddf4 <DMA_CalcBaseAndBitshift>
 800d884:	4603      	mov	r3, r0
 800d886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d88c:	223f      	movs	r2, #63	; 0x3f
 800d88e:	409a      	lsls	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	f010803f 	.word	0xf010803f

0800d8b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d101      	bne.n	800d8d6 <HAL_DMA_Start_IT+0x26>
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	e040      	b.n	800d958 <HAL_DMA_Start_IT+0xa8>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d12f      	bne.n	800d94a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 fa4a 	bl	800dd98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d908:	223f      	movs	r2, #63	; 0x3f
 800d90a:	409a      	lsls	r2, r3
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f042 0216 	orr.w	r2, r2, #22
 800d91e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d007      	beq.n	800d938 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f042 0208 	orr.w	r2, r2, #8
 800d936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f042 0201 	orr.w	r2, r2, #1
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	e005      	b.n	800d956 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d952:	2302      	movs	r3, #2
 800d954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d956:	7dfb      	ldrb	r3, [r7, #23]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d96c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d96e:	f7ff f9d5 	bl	800cd1c <HAL_GetTick>
 800d972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d008      	beq.n	800d992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2280      	movs	r2, #128	; 0x80
 800d984:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e052      	b.n	800da38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f022 0216 	bic.w	r2, r2, #22
 800d9a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	695a      	ldr	r2, [r3, #20]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d103      	bne.n	800d9c2 <HAL_DMA_Abort+0x62>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d007      	beq.n	800d9d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f022 0208 	bic.w	r2, r2, #8
 800d9d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f022 0201 	bic.w	r2, r2, #1
 800d9e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d9e2:	e013      	b.n	800da0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d9e4:	f7ff f99a 	bl	800cd1c <HAL_GetTick>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	2b05      	cmp	r3, #5
 800d9f0:	d90c      	bls.n	800da0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2220      	movs	r2, #32
 800d9f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e015      	b.n	800da38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e4      	bne.n	800d9e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da1e:	223f      	movs	r2, #63	; 0x3f
 800da20:	409a      	lsls	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b02      	cmp	r3, #2
 800da52:	d004      	beq.n	800da5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2280      	movs	r2, #128	; 0x80
 800da58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e00c      	b.n	800da78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2205      	movs	r2, #5
 800da62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0201 	bic.w	r2, r2, #1
 800da74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800da8c:	2300      	movs	r3, #0
 800da8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800da90:	4b92      	ldr	r3, [pc, #584]	; (800dcdc <HAL_DMA_IRQHandler+0x258>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a92      	ldr	r2, [pc, #584]	; (800dce0 <HAL_DMA_IRQHandler+0x25c>)
 800da96:	fba2 2303 	umull	r2, r3, r2, r3
 800da9a:	0a9b      	lsrs	r3, r3, #10
 800da9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daae:	2208      	movs	r2, #8
 800dab0:	409a      	lsls	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	4013      	ands	r3, r2
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d01a      	beq.n	800daf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d013      	beq.n	800daf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f022 0204 	bic.w	r2, r2, #4
 800dad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dadc:	2208      	movs	r2, #8
 800dade:	409a      	lsls	r2, r3
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae8:	f043 0201 	orr.w	r2, r3, #1
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daf4:	2201      	movs	r2, #1
 800daf6:	409a      	lsls	r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4013      	ands	r3, r2
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d012      	beq.n	800db26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00b      	beq.n	800db26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db12:	2201      	movs	r2, #1
 800db14:	409a      	lsls	r2, r3
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db1e:	f043 0202 	orr.w	r2, r3, #2
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db2a:	2204      	movs	r2, #4
 800db2c:	409a      	lsls	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	4013      	ands	r3, r2
 800db32:	2b00      	cmp	r3, #0
 800db34:	d012      	beq.n	800db5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00b      	beq.n	800db5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db48:	2204      	movs	r2, #4
 800db4a:	409a      	lsls	r2, r3
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	f043 0204 	orr.w	r2, r3, #4
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db60:	2210      	movs	r2, #16
 800db62:	409a      	lsls	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4013      	ands	r3, r2
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d043      	beq.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0308 	and.w	r3, r3, #8
 800db76:	2b00      	cmp	r3, #0
 800db78:	d03c      	beq.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db7e:	2210      	movs	r2, #16
 800db80:	409a      	lsls	r2, r3
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d018      	beq.n	800dbc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d108      	bne.n	800dbb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d024      	beq.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
 800dbb2:	e01f      	b.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01b      	beq.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	4798      	blx	r3
 800dbc4:	e016      	b.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d107      	bne.n	800dbe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f022 0208 	bic.w	r2, r2, #8
 800dbe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d003      	beq.n	800dbf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbf8:	2220      	movs	r2, #32
 800dbfa:	409a      	lsls	r2, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 808e 	beq.w	800dd22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f003 0310 	and.w	r3, r3, #16
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 8086 	beq.w	800dd22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1a:	2220      	movs	r2, #32
 800dc1c:	409a      	lsls	r2, r3
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b05      	cmp	r3, #5
 800dc2c:	d136      	bne.n	800dc9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 0216 	bic.w	r2, r2, #22
 800dc3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	695a      	ldr	r2, [r3, #20]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d103      	bne.n	800dc5e <HAL_DMA_IRQHandler+0x1da>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d007      	beq.n	800dc6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f022 0208 	bic.w	r2, r2, #8
 800dc6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc72:	223f      	movs	r2, #63	; 0x3f
 800dc74:	409a      	lsls	r2, r3
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d07d      	beq.n	800dd8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	4798      	blx	r3
        }
        return;
 800dc9a:	e078      	b.n	800dd8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d01c      	beq.n	800dce4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d108      	bne.n	800dcca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d030      	beq.n	800dd22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	4798      	blx	r3
 800dcc8:	e02b      	b.n	800dd22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d027      	beq.n	800dd22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	4798      	blx	r3
 800dcda:	e022      	b.n	800dd22 <HAL_DMA_IRQHandler+0x29e>
 800dcdc:	20000048 	.word	0x20000048
 800dce0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10f      	bne.n	800dd12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f022 0210 	bic.w	r2, r2, #16
 800dd00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d003      	beq.n	800dd22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d032      	beq.n	800dd90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d022      	beq.n	800dd7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2205      	movs	r2, #5
 800dd3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f022 0201 	bic.w	r2, r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	3301      	adds	r3, #1
 800dd52:	60bb      	str	r3, [r7, #8]
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d307      	bcc.n	800dd6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1f2      	bne.n	800dd4e <HAL_DMA_IRQHandler+0x2ca>
 800dd68:	e000      	b.n	800dd6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800dd6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	4798      	blx	r3
 800dd8c:	e000      	b.n	800dd90 <HAL_DMA_IRQHandler+0x30c>
        return;
 800dd8e:	bf00      	nop
    }
  }
}
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop

0800dd98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ddb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	2b40      	cmp	r3, #64	; 0x40
 800ddc4:	d108      	bne.n	800ddd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ddd6:	e007      	b.n	800dde8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	60da      	str	r2, [r3, #12]
}
 800dde8:	bf00      	nop
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	b2db      	uxtb	r3, r3
 800de02:	3b10      	subs	r3, #16
 800de04:	4a14      	ldr	r2, [pc, #80]	; (800de58 <DMA_CalcBaseAndBitshift+0x64>)
 800de06:	fba2 2303 	umull	r2, r3, r2, r3
 800de0a:	091b      	lsrs	r3, r3, #4
 800de0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800de0e:	4a13      	ldr	r2, [pc, #76]	; (800de5c <DMA_CalcBaseAndBitshift+0x68>)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	4413      	add	r3, r2
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	461a      	mov	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d909      	bls.n	800de36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800de2a:	f023 0303 	bic.w	r3, r3, #3
 800de2e:	1d1a      	adds	r2, r3, #4
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	659a      	str	r2, [r3, #88]	; 0x58
 800de34:	e007      	b.n	800de46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800de3e:	f023 0303 	bic.w	r3, r3, #3
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	aaaaaaab 	.word	0xaaaaaaab
 800de5c:	08019548 	.word	0x08019548

0800de60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d11f      	bne.n	800deba <DMA_CheckFifoParam+0x5a>
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d856      	bhi.n	800df2e <DMA_CheckFifoParam+0xce>
 800de80:	a201      	add	r2, pc, #4	; (adr r2, 800de88 <DMA_CheckFifoParam+0x28>)
 800de82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de86:	bf00      	nop
 800de88:	0800de99 	.word	0x0800de99
 800de8c:	0800deab 	.word	0x0800deab
 800de90:	0800de99 	.word	0x0800de99
 800de94:	0800df2f 	.word	0x0800df2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d046      	beq.n	800df32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dea8:	e043      	b.n	800df32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800deb2:	d140      	bne.n	800df36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800deb8:	e03d      	b.n	800df36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dec2:	d121      	bne.n	800df08 <DMA_CheckFifoParam+0xa8>
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d837      	bhi.n	800df3a <DMA_CheckFifoParam+0xda>
 800deca:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <DMA_CheckFifoParam+0x70>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800dee1 	.word	0x0800dee1
 800ded4:	0800dee7 	.word	0x0800dee7
 800ded8:	0800dee1 	.word	0x0800dee1
 800dedc:	0800def9 	.word	0x0800def9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	73fb      	strb	r3, [r7, #15]
      break;
 800dee4:	e030      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800deee:	2b00      	cmp	r3, #0
 800def0:	d025      	beq.n	800df3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800def6:	e022      	b.n	800df3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800df00:	d11f      	bne.n	800df42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800df06:	e01c      	b.n	800df42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d903      	bls.n	800df16 <DMA_CheckFifoParam+0xb6>
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b03      	cmp	r3, #3
 800df12:	d003      	beq.n	800df1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800df14:	e018      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800df16:	2301      	movs	r3, #1
 800df18:	73fb      	strb	r3, [r7, #15]
      break;
 800df1a:	e015      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00e      	beq.n	800df46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	73fb      	strb	r3, [r7, #15]
      break;
 800df2c:	e00b      	b.n	800df46 <DMA_CheckFifoParam+0xe6>
      break;
 800df2e:	bf00      	nop
 800df30:	e00a      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;
 800df32:	bf00      	nop
 800df34:	e008      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;
 800df36:	bf00      	nop
 800df38:	e006      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;
 800df3a:	bf00      	nop
 800df3c:	e004      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;
 800df3e:	bf00      	nop
 800df40:	e002      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;   
 800df42:	bf00      	nop
 800df44:	e000      	b.n	800df48 <DMA_CheckFifoParam+0xe8>
      break;
 800df46:	bf00      	nop
    }
  } 
  
  return status; 
 800df48:	7bfb      	ldrb	r3, [r7, #15]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop

0800df58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800df58:	b480      	push	{r7}
 800df5a:	b089      	sub	sp, #36	; 0x24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800df62:	2300      	movs	r3, #0
 800df64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800df66:	2300      	movs	r3, #0
 800df68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800df6a:	2300      	movs	r3, #0
 800df6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800df6e:	2300      	movs	r3, #0
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	e177      	b.n	800e264 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800df74:	2201      	movs	r2, #1
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	fa02 f303 	lsl.w	r3, r2, r3
 800df7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	4013      	ands	r3, r2
 800df86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	f040 8166 	bne.w	800e25e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	f003 0303 	and.w	r3, r3, #3
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d005      	beq.n	800dfaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d130      	bne.n	800e00c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	2203      	movs	r2, #3
 800dfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfba:	43db      	mvns	r3, r3
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	005b      	lsls	r3, r3, #1
 800dfca:	fa02 f303 	lsl.w	r3, r2, r3
 800dfce:	69ba      	ldr	r2, [r7, #24]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	69ba      	ldr	r2, [r7, #24]
 800dfd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe8:	43db      	mvns	r3, r3
 800dfea:	69ba      	ldr	r2, [r7, #24]
 800dfec:	4013      	ands	r3, r2
 800dfee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	091b      	lsrs	r3, r3, #4
 800dff6:	f003 0201 	and.w	r2, r3, #1
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	fa02 f303 	lsl.w	r3, r2, r3
 800e000:	69ba      	ldr	r2, [r7, #24]
 800e002:	4313      	orrs	r3, r2
 800e004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	69ba      	ldr	r2, [r7, #24]
 800e00a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	f003 0303 	and.w	r3, r3, #3
 800e014:	2b03      	cmp	r3, #3
 800e016:	d017      	beq.n	800e048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	2203      	movs	r2, #3
 800e024:	fa02 f303 	lsl.w	r3, r2, r3
 800e028:	43db      	mvns	r3, r3
 800e02a:	69ba      	ldr	r2, [r7, #24]
 800e02c:	4013      	ands	r3, r2
 800e02e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	fa02 f303 	lsl.w	r3, r2, r3
 800e03c:	69ba      	ldr	r2, [r7, #24]
 800e03e:	4313      	orrs	r3, r2
 800e040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	69ba      	ldr	r2, [r7, #24]
 800e046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	f003 0303 	and.w	r3, r3, #3
 800e050:	2b02      	cmp	r3, #2
 800e052:	d123      	bne.n	800e09c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	08da      	lsrs	r2, r3, #3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3208      	adds	r2, #8
 800e05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	f003 0307 	and.w	r3, r3, #7
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	220f      	movs	r2, #15
 800e06c:	fa02 f303 	lsl.w	r3, r2, r3
 800e070:	43db      	mvns	r3, r3
 800e072:	69ba      	ldr	r2, [r7, #24]
 800e074:	4013      	ands	r3, r2
 800e076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	691a      	ldr	r2, [r3, #16]
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f003 0307 	and.w	r3, r3, #7
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	fa02 f303 	lsl.w	r3, r2, r3
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	08da      	lsrs	r2, r3, #3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	3208      	adds	r2, #8
 800e096:	69b9      	ldr	r1, [r7, #24]
 800e098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ac:	43db      	mvns	r3, r3
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	f003 0203 	and.w	r2, r3, #3
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c4:	69ba      	ldr	r2, [r7, #24]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	69ba      	ldr	r2, [r7, #24]
 800e0ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 80c0 	beq.w	800e25e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e0de:	2300      	movs	r3, #0
 800e0e0:	60fb      	str	r3, [r7, #12]
 800e0e2:	4b66      	ldr	r3, [pc, #408]	; (800e27c <HAL_GPIO_Init+0x324>)
 800e0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e6:	4a65      	ldr	r2, [pc, #404]	; (800e27c <HAL_GPIO_Init+0x324>)
 800e0e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e0ec:	6453      	str	r3, [r2, #68]	; 0x44
 800e0ee:	4b63      	ldr	r3, [pc, #396]	; (800e27c <HAL_GPIO_Init+0x324>)
 800e0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0f6:	60fb      	str	r3, [r7, #12]
 800e0f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e0fa:	4a61      	ldr	r2, [pc, #388]	; (800e280 <HAL_GPIO_Init+0x328>)
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	089b      	lsrs	r3, r3, #2
 800e100:	3302      	adds	r3, #2
 800e102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	f003 0303 	and.w	r3, r3, #3
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	220f      	movs	r2, #15
 800e112:	fa02 f303 	lsl.w	r3, r2, r3
 800e116:	43db      	mvns	r3, r3
 800e118:	69ba      	ldr	r2, [r7, #24]
 800e11a:	4013      	ands	r3, r2
 800e11c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	4a58      	ldr	r2, [pc, #352]	; (800e284 <HAL_GPIO_Init+0x32c>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d037      	beq.n	800e196 <HAL_GPIO_Init+0x23e>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4a57      	ldr	r2, [pc, #348]	; (800e288 <HAL_GPIO_Init+0x330>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d031      	beq.n	800e192 <HAL_GPIO_Init+0x23a>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a56      	ldr	r2, [pc, #344]	; (800e28c <HAL_GPIO_Init+0x334>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d02b      	beq.n	800e18e <HAL_GPIO_Init+0x236>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4a55      	ldr	r2, [pc, #340]	; (800e290 <HAL_GPIO_Init+0x338>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d025      	beq.n	800e18a <HAL_GPIO_Init+0x232>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4a54      	ldr	r2, [pc, #336]	; (800e294 <HAL_GPIO_Init+0x33c>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d01f      	beq.n	800e186 <HAL_GPIO_Init+0x22e>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a53      	ldr	r2, [pc, #332]	; (800e298 <HAL_GPIO_Init+0x340>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d019      	beq.n	800e182 <HAL_GPIO_Init+0x22a>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a52      	ldr	r2, [pc, #328]	; (800e29c <HAL_GPIO_Init+0x344>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d013      	beq.n	800e17e <HAL_GPIO_Init+0x226>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4a51      	ldr	r2, [pc, #324]	; (800e2a0 <HAL_GPIO_Init+0x348>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d00d      	beq.n	800e17a <HAL_GPIO_Init+0x222>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a50      	ldr	r2, [pc, #320]	; (800e2a4 <HAL_GPIO_Init+0x34c>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d007      	beq.n	800e176 <HAL_GPIO_Init+0x21e>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a4f      	ldr	r2, [pc, #316]	; (800e2a8 <HAL_GPIO_Init+0x350>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d101      	bne.n	800e172 <HAL_GPIO_Init+0x21a>
 800e16e:	2309      	movs	r3, #9
 800e170:	e012      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e172:	230a      	movs	r3, #10
 800e174:	e010      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e176:	2308      	movs	r3, #8
 800e178:	e00e      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e17a:	2307      	movs	r3, #7
 800e17c:	e00c      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e17e:	2306      	movs	r3, #6
 800e180:	e00a      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e182:	2305      	movs	r3, #5
 800e184:	e008      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e186:	2304      	movs	r3, #4
 800e188:	e006      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e18a:	2303      	movs	r3, #3
 800e18c:	e004      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e18e:	2302      	movs	r3, #2
 800e190:	e002      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e192:	2301      	movs	r3, #1
 800e194:	e000      	b.n	800e198 <HAL_GPIO_Init+0x240>
 800e196:	2300      	movs	r3, #0
 800e198:	69fa      	ldr	r2, [r7, #28]
 800e19a:	f002 0203 	and.w	r2, r2, #3
 800e19e:	0092      	lsls	r2, r2, #2
 800e1a0:	4093      	lsls	r3, r2
 800e1a2:	69ba      	ldr	r2, [r7, #24]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e1a8:	4935      	ldr	r1, [pc, #212]	; (800e280 <HAL_GPIO_Init+0x328>)
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	089b      	lsrs	r3, r3, #2
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e1b6:	4b3d      	ldr	r3, [pc, #244]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	43db      	mvns	r3, r3
 800e1c0:	69ba      	ldr	r2, [r7, #24]
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800e1d2:	69ba      	ldr	r2, [r7, #24]
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e1da:	4a34      	ldr	r2, [pc, #208]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800e1e0:	4b32      	ldr	r3, [pc, #200]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	43db      	mvns	r3, r3
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d003      	beq.n	800e204 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800e1fc:	69ba      	ldr	r2, [r7, #24]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	4313      	orrs	r3, r2
 800e202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e204:	4a29      	ldr	r2, [pc, #164]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e20a:	4b28      	ldr	r3, [pc, #160]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	43db      	mvns	r3, r3
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	4013      	ands	r3, r2
 800e218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800e226:	69ba      	ldr	r2, [r7, #24]
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	4313      	orrs	r3, r2
 800e22c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e22e:	4a1f      	ldr	r2, [pc, #124]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e230:	69bb      	ldr	r3, [r7, #24]
 800e232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e234:	4b1d      	ldr	r3, [pc, #116]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	43db      	mvns	r3, r3
 800e23e:	69ba      	ldr	r2, [r7, #24]
 800e240:	4013      	ands	r3, r2
 800e242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d003      	beq.n	800e258 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	4313      	orrs	r3, r2
 800e256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e258:	4a14      	ldr	r2, [pc, #80]	; (800e2ac <HAL_GPIO_Init+0x354>)
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	3301      	adds	r3, #1
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	2b0f      	cmp	r3, #15
 800e268:	f67f ae84 	bls.w	800df74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e26c:	bf00      	nop
 800e26e:	bf00      	nop
 800e270:	3724      	adds	r7, #36	; 0x24
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	40023800 	.word	0x40023800
 800e280:	40013800 	.word	0x40013800
 800e284:	40020000 	.word	0x40020000
 800e288:	40020400 	.word	0x40020400
 800e28c:	40020800 	.word	0x40020800
 800e290:	40020c00 	.word	0x40020c00
 800e294:	40021000 	.word	0x40021000
 800e298:	40021400 	.word	0x40021400
 800e29c:	40021800 	.word	0x40021800
 800e2a0:	40021c00 	.word	0x40021c00
 800e2a4:	40022000 	.word	0x40022000
 800e2a8:	40022400 	.word	0x40022400
 800e2ac:	40013c00 	.word	0x40013c00

0800e2b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	807b      	strh	r3, [r7, #2]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e2c0:	787b      	ldrb	r3, [r7, #1]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d003      	beq.n	800e2ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e2c6:	887a      	ldrh	r2, [r7, #2]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e2cc:	e003      	b.n	800e2d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e2ce:	887b      	ldrh	r3, [r7, #2]
 800e2d0:	041a      	lsls	r2, r3, #16
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	619a      	str	r2, [r3, #24]
}
 800e2d6:	bf00      	nop
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2e4:	b08f      	sub	sp, #60	; 0x3c
 800e2e6:	af0a      	add	r7, sp, #40	; 0x28
 800e2e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d101      	bne.n	800e2f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e10f      	b.n	800e514 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f007 fba8 	bl	8015a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2203      	movs	r2, #3
 800e318:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4618      	mov	r0, r3
 800e334:	f004 faf1 	bl	801291a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	603b      	str	r3, [r7, #0]
 800e33e:	687e      	ldr	r6, [r7, #4]
 800e340:	466d      	mov	r5, sp
 800e342:	f106 0410 	add.w	r4, r6, #16
 800e346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e34a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e34c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e34e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e352:	e885 0003 	stmia.w	r5, {r0, r1}
 800e356:	1d33      	adds	r3, r6, #4
 800e358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e35a:	6838      	ldr	r0, [r7, #0]
 800e35c:	f004 f9c8 	bl	80126f0 <USB_CoreInit>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d005      	beq.n	800e372 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2202      	movs	r2, #2
 800e36a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e0d0      	b.n	800e514 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f004 fadf 	bl	801293c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e37e:	2300      	movs	r3, #0
 800e380:	73fb      	strb	r3, [r7, #15]
 800e382:	e04a      	b.n	800e41a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e384:	7bfa      	ldrb	r2, [r7, #15]
 800e386:	6879      	ldr	r1, [r7, #4]
 800e388:	4613      	mov	r3, r2
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	440b      	add	r3, r1
 800e392:	333d      	adds	r3, #61	; 0x3d
 800e394:	2201      	movs	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e398:	7bfa      	ldrb	r2, [r7, #15]
 800e39a:	6879      	ldr	r1, [r7, #4]
 800e39c:	4613      	mov	r3, r2
 800e39e:	00db      	lsls	r3, r3, #3
 800e3a0:	1a9b      	subs	r3, r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	440b      	add	r3, r1
 800e3a6:	333c      	adds	r3, #60	; 0x3c
 800e3a8:	7bfa      	ldrb	r2, [r7, #15]
 800e3aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800e3ac:	7bfa      	ldrb	r2, [r7, #15]
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	b298      	uxth	r0, r3
 800e3b2:	6879      	ldr	r1, [r7, #4]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	1a9b      	subs	r3, r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	440b      	add	r3, r1
 800e3be:	3342      	adds	r3, #66	; 0x42
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e3c4:	7bfa      	ldrb	r2, [r7, #15]
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	00db      	lsls	r3, r3, #3
 800e3cc:	1a9b      	subs	r3, r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	440b      	add	r3, r1
 800e3d2:	333f      	adds	r3, #63	; 0x3f
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e3d8:	7bfa      	ldrb	r2, [r7, #15]
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	1a9b      	subs	r3, r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	440b      	add	r3, r1
 800e3e6:	3344      	adds	r3, #68	; 0x44
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e3ec:	7bfa      	ldrb	r2, [r7, #15]
 800e3ee:	6879      	ldr	r1, [r7, #4]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	1a9b      	subs	r3, r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	440b      	add	r3, r1
 800e3fa:	3348      	adds	r3, #72	; 0x48
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e400:	7bfa      	ldrb	r2, [r7, #15]
 800e402:	6879      	ldr	r1, [r7, #4]
 800e404:	4613      	mov	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	1a9b      	subs	r3, r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	440b      	add	r3, r1
 800e40e:	3350      	adds	r3, #80	; 0x50
 800e410:	2200      	movs	r2, #0
 800e412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	3301      	adds	r3, #1
 800e418:	73fb      	strb	r3, [r7, #15]
 800e41a:	7bfa      	ldrb	r2, [r7, #15]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	429a      	cmp	r2, r3
 800e422:	d3af      	bcc.n	800e384 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e424:	2300      	movs	r3, #0
 800e426:	73fb      	strb	r3, [r7, #15]
 800e428:	e044      	b.n	800e4b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e42a:	7bfa      	ldrb	r2, [r7, #15]
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	4613      	mov	r3, r2
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	440b      	add	r3, r1
 800e438:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800e43c:	2200      	movs	r2, #0
 800e43e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e440:	7bfa      	ldrb	r2, [r7, #15]
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	4613      	mov	r3, r2
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	440b      	add	r3, r1
 800e44e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800e452:	7bfa      	ldrb	r2, [r7, #15]
 800e454:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e456:	7bfa      	ldrb	r2, [r7, #15]
 800e458:	6879      	ldr	r1, [r7, #4]
 800e45a:	4613      	mov	r3, r2
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	1a9b      	subs	r3, r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	440b      	add	r3, r1
 800e464:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e468:	2200      	movs	r2, #0
 800e46a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e46c:	7bfa      	ldrb	r2, [r7, #15]
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	4613      	mov	r3, r2
 800e472:	00db      	lsls	r3, r3, #3
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	440b      	add	r3, r1
 800e47a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e482:	7bfa      	ldrb	r2, [r7, #15]
 800e484:	6879      	ldr	r1, [r7, #4]
 800e486:	4613      	mov	r3, r2
 800e488:	00db      	lsls	r3, r3, #3
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	440b      	add	r3, r1
 800e490:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e494:	2200      	movs	r2, #0
 800e496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e498:	7bfa      	ldrb	r2, [r7, #15]
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	4613      	mov	r3, r2
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	1a9b      	subs	r3, r3, r2
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	440b      	add	r3, r1
 800e4a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	73fb      	strb	r3, [r7, #15]
 800e4b4:	7bfa      	ldrb	r2, [r7, #15]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d3b5      	bcc.n	800e42a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	687e      	ldr	r6, [r7, #4]
 800e4c6:	466d      	mov	r5, sp
 800e4c8:	f106 0410 	add.w	r4, r6, #16
 800e4cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e4d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e4d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e4d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800e4dc:	1d33      	adds	r3, r6, #4
 800e4de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4e0:	6838      	ldr	r0, [r7, #0]
 800e4e2:	f004 fa77 	bl	80129d4 <USB_DevInit>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d005      	beq.n	800e4f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e00d      	b.n	800e514 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f005 faf3 	bl	8013af8 <USB_DevDisconnect>

  return HAL_OK;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3714      	adds	r7, #20
 800e518:	46bd      	mov	sp, r7
 800e51a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e51c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800e530:	2b01      	cmp	r3, #1
 800e532:	d101      	bne.n	800e538 <HAL_PCD_Start+0x1c>
 800e534:	2302      	movs	r3, #2
 800e536:	e020      	b.n	800e57a <HAL_PCD_Start+0x5e>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e544:	2b01      	cmp	r3, #1
 800e546:	d109      	bne.n	800e55c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d005      	beq.n	800e55c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f004 f9c9 	bl	80128f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f005 faa3 	bl	8013ab6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e582:	b590      	push	{r4, r7, lr}
 800e584:	b08d      	sub	sp, #52	; 0x34
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e590:	6a3b      	ldr	r3, [r7, #32]
 800e592:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4618      	mov	r0, r3
 800e59a:	f005 fb61 	bl	8013c60 <USB_GetMode>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f040 839d 	bne.w	800ece0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f005 fac5 	bl	8013b3a <USB_ReadInterrupts>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 8393 	beq.w	800ecde <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f005 fabc 	bl	8013b3a <USB_ReadInterrupts>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	f003 0302 	and.w	r3, r3, #2
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d107      	bne.n	800e5dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	695a      	ldr	r2, [r3, #20]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f002 0202 	and.w	r2, r2, #2
 800e5da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f005 faaa 	bl	8013b3a <USB_ReadInterrupts>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f003 0310 	and.w	r3, r3, #16
 800e5ec:	2b10      	cmp	r3, #16
 800e5ee:	d161      	bne.n	800e6b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f022 0210 	bic.w	r2, r2, #16
 800e5fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	6a1b      	ldr	r3, [r3, #32]
 800e604:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	f003 020f 	and.w	r2, r3, #15
 800e60c:	4613      	mov	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	1a9b      	subs	r3, r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	4413      	add	r3, r2
 800e61c:	3304      	adds	r3, #4
 800e61e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	0c5b      	lsrs	r3, r3, #17
 800e624:	f003 030f 	and.w	r3, r3, #15
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d124      	bne.n	800e676 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e62c:	69ba      	ldr	r2, [r7, #24]
 800e62e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e632:	4013      	ands	r3, r2
 800e634:	2b00      	cmp	r3, #0
 800e636:	d035      	beq.n	800e6a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	091b      	lsrs	r3, r3, #4
 800e640:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e646:	b29b      	uxth	r3, r3
 800e648:	461a      	mov	r2, r3
 800e64a:	6a38      	ldr	r0, [r7, #32]
 800e64c:	f005 f8e1 	bl	8013812 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	68da      	ldr	r2, [r3, #12]
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	091b      	lsrs	r3, r3, #4
 800e658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e65c:	441a      	add	r2, r3
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	699a      	ldr	r2, [r3, #24]
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	091b      	lsrs	r3, r3, #4
 800e66a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e66e:	441a      	add	r2, r3
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	619a      	str	r2, [r3, #24]
 800e674:	e016      	b.n	800e6a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	0c5b      	lsrs	r3, r3, #17
 800e67a:	f003 030f 	and.w	r3, r3, #15
 800e67e:	2b06      	cmp	r3, #6
 800e680:	d110      	bne.n	800e6a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e688:	2208      	movs	r2, #8
 800e68a:	4619      	mov	r1, r3
 800e68c:	6a38      	ldr	r0, [r7, #32]
 800e68e:	f005 f8c0 	bl	8013812 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	699a      	ldr	r2, [r3, #24]
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	091b      	lsrs	r3, r3, #4
 800e69a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e69e:	441a      	add	r2, r3
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	699a      	ldr	r2, [r3, #24]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f042 0210 	orr.w	r2, r2, #16
 800e6b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f005 fa3e 	bl	8013b3a <USB_ReadInterrupts>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e6c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e6c8:	d16e      	bne.n	800e7a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f005 fa44 	bl	8013b60 <USB_ReadDevAllOutEpInterrupt>
 800e6d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e6da:	e062      	b.n	800e7a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d057      	beq.n	800e796 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f005 fa69 	bl	8013bc8 <USB_ReadDevOutEPInterrupt>
 800e6f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00c      	beq.n	800e71c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	015a      	lsls	r2, r3, #5
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	4413      	add	r3, r2
 800e70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e70e:	461a      	mov	r2, r3
 800e710:	2301      	movs	r3, #1
 800e712:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 fdb0 	bl	800f27c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	f003 0308 	and.w	r3, r3, #8
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00c      	beq.n	800e740 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	015a      	lsls	r2, r3, #5
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	4413      	add	r3, r2
 800e72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e732:	461a      	mov	r2, r3
 800e734:	2308      	movs	r3, #8
 800e736:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 feaa 	bl	800f494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	f003 0310 	and.w	r3, r3, #16
 800e746:	2b00      	cmp	r3, #0
 800e748:	d008      	beq.n	800e75c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e756:	461a      	mov	r2, r3
 800e758:	2310      	movs	r3, #16
 800e75a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	f003 0320 	and.w	r3, r3, #32
 800e762:	2b00      	cmp	r3, #0
 800e764:	d008      	beq.n	800e778 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	015a      	lsls	r2, r3, #5
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	4413      	add	r3, r2
 800e76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e772:	461a      	mov	r2, r3
 800e774:	2320      	movs	r3, #32
 800e776:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d009      	beq.n	800e796 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	015a      	lsls	r2, r3, #5
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	4413      	add	r3, r2
 800e78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e78e:	461a      	mov	r2, r3
 800e790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e794:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	3301      	adds	r3, #1
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	085b      	lsrs	r3, r3, #1
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d199      	bne.n	800e6dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f005 f9c4 	bl	8013b3a <USB_ReadInterrupts>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e7bc:	f040 80c0 	bne.w	800e940 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f005 f9e5 	bl	8013b94 <USB_ReadDevAllInEpInterrupt>
 800e7ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e7d0:	e0b2      	b.n	800e938 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f000 80a7 	beq.w	800e92c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e4:	b2d2      	uxtb	r2, r2
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f005 fa0b 	bl	8013c04 <USB_ReadDevInEPInterrupt>
 800e7ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d057      	beq.n	800e8aa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	f003 030f 	and.w	r3, r3, #15
 800e800:	2201      	movs	r2, #1
 800e802:	fa02 f303 	lsl.w	r3, r2, r3
 800e806:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	43db      	mvns	r3, r3
 800e814:	69f9      	ldr	r1, [r7, #28]
 800e816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e81a:	4013      	ands	r3, r2
 800e81c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e82a:	461a      	mov	r2, r3
 800e82c:	2301      	movs	r3, #1
 800e82e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d132      	bne.n	800e89e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e838:	6879      	ldr	r1, [r7, #4]
 800e83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e83c:	4613      	mov	r3, r2
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	1a9b      	subs	r3, r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	3348      	adds	r3, #72	; 0x48
 800e848:	6819      	ldr	r1, [r3, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e84e:	4613      	mov	r3, r2
 800e850:	00db      	lsls	r3, r3, #3
 800e852:	1a9b      	subs	r3, r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4403      	add	r3, r0
 800e858:	3344      	adds	r3, #68	; 0x44
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4419      	add	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e862:	4613      	mov	r3, r2
 800e864:	00db      	lsls	r3, r3, #3
 800e866:	1a9b      	subs	r3, r3, r2
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4403      	add	r3, r0
 800e86c:	3348      	adds	r3, #72	; 0x48
 800e86e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	2b00      	cmp	r3, #0
 800e874:	d113      	bne.n	800e89e <HAL_PCD_IRQHandler+0x31c>
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e87a:	4613      	mov	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	1a9b      	subs	r3, r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	440b      	add	r3, r1
 800e884:	3350      	adds	r3, #80	; 0x50
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d108      	bne.n	800e89e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e896:	461a      	mov	r2, r3
 800e898:	2101      	movs	r1, #1
 800e89a:	f005 fa13 	bl	8013cc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f007 f95e 	bl	8015b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f003 0308 	and.w	r3, r3, #8
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d008      	beq.n	800e8c6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	f003 0310 	and.w	r3, r3, #16
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d008      	beq.n	800e8e2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8dc:	461a      	mov	r2, r3
 800e8de:	2310      	movs	r3, #16
 800e8e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d008      	beq.n	800e8fe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	015a      	lsls	r2, r3, #5
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	2340      	movs	r3, #64	; 0x40
 800e8fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f003 0302 	and.w	r3, r3, #2
 800e904:	2b00      	cmp	r3, #0
 800e906:	d008      	beq.n	800e91a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	015a      	lsls	r2, r3, #5
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e914:	461a      	mov	r2, r3
 800e916:	2302      	movs	r3, #2
 800e918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fc1b 	bl	800f162 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	3301      	adds	r3, #1
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e934:	085b      	lsrs	r3, r3, #1
 800e936:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f47f af49 	bne.w	800e7d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4618      	mov	r0, r3
 800e946:	f005 f8f8 	bl	8013b3a <USB_ReadInterrupts>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e954:	d122      	bne.n	800e99c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	69fa      	ldr	r2, [r7, #28]
 800e960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e964:	f023 0301 	bic.w	r3, r3, #1
 800e968:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800e970:	2b01      	cmp	r3, #1
 800e972:	d108      	bne.n	800e986 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e97c:	2100      	movs	r1, #0
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fe26 	bl	800f5d0 <HAL_PCDEx_LPM_Callback>
 800e984:	e002      	b.n	800e98c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f007 f964 	bl	8015c54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	695a      	ldr	r2, [r3, #20]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e99a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f005 f8ca 	bl	8013b3a <USB_ReadInterrupts>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9b0:	d112      	bne.n	800e9d8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d102      	bne.n	800e9c8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f007 f920 	bl	8015c08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	695a      	ldr	r2, [r3, #20]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e9d6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f005 f8ac 	bl	8013b3a <USB_ReadInterrupts>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9ec:	f040 80c7 	bne.w	800eb7e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	69fa      	ldr	r2, [r7, #28]
 800e9fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fe:	f023 0301 	bic.w	r3, r3, #1
 800ea02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2110      	movs	r1, #16
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f004 f946 	bl	8012c9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ea10:	2300      	movs	r3, #0
 800ea12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea14:	e056      	b.n	800eac4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea22:	461a      	mov	r2, r3
 800ea24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	015a      	lsls	r2, r3, #5
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	4413      	add	r3, r2
 800ea32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea3a:	0151      	lsls	r1, r2, #5
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	440a      	add	r2, r1
 800ea40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ea4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4c:	015a      	lsls	r2, r3, #5
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	4413      	add	r3, r2
 800ea52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea5a:	0151      	lsls	r1, r2, #5
 800ea5c:	69fa      	ldr	r2, [r7, #28]
 800ea5e:	440a      	add	r2, r1
 800ea60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ea68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	015a      	lsls	r2, r3, #5
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	4413      	add	r3, r2
 800ea72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea76:	461a      	mov	r2, r3
 800ea78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea80:	015a      	lsls	r2, r3, #5
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	4413      	add	r3, r2
 800ea86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea8e:	0151      	lsls	r1, r2, #5
 800ea90:	69fa      	ldr	r2, [r7, #28]
 800ea92:	440a      	add	r2, r1
 800ea94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ea9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa0:	015a      	lsls	r2, r3, #5
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaae:	0151      	lsls	r1, r2, #5
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	440a      	add	r2, r1
 800eab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eabc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	3301      	adds	r3, #1
 800eac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3a3      	bcc.n	800ea16 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eadc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800eae0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d016      	beq.n	800eb18 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaf4:	69fa      	ldr	r2, [r7, #28]
 800eaf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eafa:	f043 030b 	orr.w	r3, r3, #11
 800eafe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb10:	f043 030b 	orr.w	r3, r3, #11
 800eb14:	6453      	str	r3, [r2, #68]	; 0x44
 800eb16:	e015      	b.n	800eb44 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	69fa      	ldr	r2, [r7, #28]
 800eb22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb2a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800eb2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	69fa      	ldr	r2, [r7, #28]
 800eb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb3e:	f043 030b 	orr.w	r3, r3, #11
 800eb42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	69fa      	ldr	r2, [r7, #28]
 800eb4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eb56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800eb68:	461a      	mov	r2, r3
 800eb6a:	f005 f8ab 	bl	8013cc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	695a      	ldr	r2, [r3, #20]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800eb7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f004 ffd9 	bl	8013b3a <USB_ReadInterrupts>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb92:	d124      	bne.n	800ebde <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f005 f86f 	bl	8013c7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f004 f8d7 	bl	8012d56 <USB_GetDevSpeed>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681c      	ldr	r4, [r3, #0]
 800ebb4:	f001 f92c 	bl	800fe10 <HAL_RCC_GetHCLKFreq>
 800ebb8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f003 fdf6 	bl	80127b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f006 fff4 	bl	8015bb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	695a      	ldr	r2, [r3, #20]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ebdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f004 ffa9 	bl	8013b3a <USB_ReadInterrupts>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f003 0308 	and.w	r3, r3, #8
 800ebee:	2b08      	cmp	r3, #8
 800ebf0:	d10a      	bne.n	800ec08 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f006 ffd1 	bl	8015b9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	695a      	ldr	r2, [r3, #20]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f002 0208 	and.w	r2, r2, #8
 800ec06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f004 ff94 	bl	8013b3a <USB_ReadInterrupts>
 800ec12:	4603      	mov	r3, r0
 800ec14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec1c:	d10f      	bne.n	800ec3e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ec22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f007 f833 	bl	8015c94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	695a      	ldr	r2, [r3, #20]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ec3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f004 ff79 	bl	8013b3a <USB_ReadInterrupts>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec52:	d10f      	bne.n	800ec74 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800ec54:	2300      	movs	r3, #0
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ec58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f007 f806 	bl	8015c70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	695a      	ldr	r2, [r3, #20]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ec72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f004 ff5e 	bl	8013b3a <USB_ReadInterrupts>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec88:	d10a      	bne.n	800eca0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f007 f814 	bl	8015cb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	695a      	ldr	r2, [r3, #20]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ec9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f004 ff48 	bl	8013b3a <USB_ReadInterrupts>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	f003 0304 	and.w	r3, r3, #4
 800ecb0:	2b04      	cmp	r3, #4
 800ecb2:	d115      	bne.n	800ece0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	f003 0304 	and.w	r3, r3, #4
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f007 f804 	bl	8015cd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6859      	ldr	r1, [r3, #4]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69ba      	ldr	r2, [r7, #24]
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	605a      	str	r2, [r3, #4]
 800ecdc:	e000      	b.n	800ece0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800ecde:	bf00      	nop
    }
  }
}
 800ece0:	3734      	adds	r7, #52	; 0x34
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd90      	pop	{r4, r7, pc}

0800ece6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d101      	bne.n	800ed00 <HAL_PCD_SetAddress+0x1a>
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e013      	b.n	800ed28 <HAL_PCD_SetAddress+0x42>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	78fa      	ldrb	r2, [r7, #3]
 800ed0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	78fa      	ldrb	r2, [r7, #3]
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f004 fea6 	bl	8013a6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	4608      	mov	r0, r1
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	4603      	mov	r3, r0
 800ed40:	70fb      	strb	r3, [r7, #3]
 800ed42:	460b      	mov	r3, r1
 800ed44:	803b      	strh	r3, [r7, #0]
 800ed46:	4613      	mov	r3, r2
 800ed48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ed4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	da0f      	bge.n	800ed76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed56:	78fb      	ldrb	r3, [r7, #3]
 800ed58:	f003 020f 	and.w	r2, r3, #15
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	00db      	lsls	r3, r3, #3
 800ed60:	1a9b      	subs	r3, r3, r2
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	3338      	adds	r3, #56	; 0x38
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	4413      	add	r3, r2
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2201      	movs	r2, #1
 800ed72:	705a      	strb	r2, [r3, #1]
 800ed74:	e00f      	b.n	800ed96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ed76:	78fb      	ldrb	r3, [r7, #3]
 800ed78:	f003 020f 	and.w	r2, r3, #15
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	1a9b      	subs	r3, r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2200      	movs	r2, #0
 800ed94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ed96:	78fb      	ldrb	r3, [r7, #3]
 800ed98:	f003 030f 	and.w	r3, r3, #15
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800eda2:	883a      	ldrh	r2, [r7, #0]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	78ba      	ldrb	r2, [r7, #2]
 800edac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	785b      	ldrb	r3, [r3, #1]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d004      	beq.n	800edc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800edc0:	78bb      	ldrb	r3, [r7, #2]
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d102      	bne.n	800edcc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d101      	bne.n	800edda <HAL_PCD_EP_Open+0xaa>
 800edd6:	2302      	movs	r3, #2
 800edd8:	e00e      	b.n	800edf8 <HAL_PCD_EP_Open+0xc8>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	4618      	mov	r0, r3
 800edea:	f003 ffd9 	bl	8012da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800edf6:	7afb      	ldrb	r3, [r7, #11]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ee0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da0f      	bge.n	800ee34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee14:	78fb      	ldrb	r3, [r7, #3]
 800ee16:	f003 020f 	and.w	r2, r3, #15
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	1a9b      	subs	r3, r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	3338      	adds	r3, #56	; 0x38
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	4413      	add	r3, r2
 800ee28:	3304      	adds	r3, #4
 800ee2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	705a      	strb	r2, [r3, #1]
 800ee32:	e00f      	b.n	800ee54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee34:	78fb      	ldrb	r3, [r7, #3]
 800ee36:	f003 020f 	and.w	r2, r3, #15
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	1a9b      	subs	r3, r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	4413      	add	r3, r2
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	f003 030f 	and.w	r3, r3, #15
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d101      	bne.n	800ee6e <HAL_PCD_EP_Close+0x6e>
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	e00e      	b.n	800ee8c <HAL_PCD_EP_Close+0x8c>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f004 f817 	bl	8012eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b086      	sub	sp, #24
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	607a      	str	r2, [r7, #4]
 800ee9e:	603b      	str	r3, [r7, #0]
 800eea0:	460b      	mov	r3, r1
 800eea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eea4:	7afb      	ldrb	r3, [r7, #11]
 800eea6:	f003 020f 	and.w	r2, r3, #15
 800eeaa:	4613      	mov	r3, r2
 800eeac:	00db      	lsls	r3, r3, #3
 800eeae:	1a9b      	subs	r3, r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	4413      	add	r3, r2
 800eeba:	3304      	adds	r3, #4
 800eebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2200      	movs	r2, #0
 800eece:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2200      	movs	r2, #0
 800eed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eed6:	7afb      	ldrb	r3, [r7, #11]
 800eed8:	f003 030f 	and.w	r3, r3, #15
 800eedc:	b2da      	uxtb	r2, r3
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d102      	bne.n	800eef0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800eef0:	7afb      	ldrb	r3, [r7, #11]
 800eef2:	f003 030f 	and.w	r3, r3, #15
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6818      	ldr	r0, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	461a      	mov	r2, r3
 800ef06:	6979      	ldr	r1, [r7, #20]
 800ef08:	f004 faf2 	bl	80134f0 <USB_EP0StartXfer>
 800ef0c:	e008      	b.n	800ef20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	461a      	mov	r2, r3
 800ef1a:	6979      	ldr	r1, [r7, #20]
 800ef1c:	f004 f8a4 	bl	8013068 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b083      	sub	sp, #12
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ef36:	78fb      	ldrb	r3, [r7, #3]
 800ef38:	f003 020f 	and.w	r2, r3, #15
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	4613      	mov	r3, r2
 800ef40:	00db      	lsls	r3, r3, #3
 800ef42:	1a9b      	subs	r3, r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	440b      	add	r3, r1
 800ef48:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ef4c:	681b      	ldr	r3, [r3, #0]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b086      	sub	sp, #24
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	60f8      	str	r0, [r7, #12]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
 800ef66:	460b      	mov	r3, r1
 800ef68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ef6a:	7afb      	ldrb	r3, [r7, #11]
 800ef6c:	f003 020f 	and.w	r2, r3, #15
 800ef70:	4613      	mov	r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	3338      	adds	r3, #56	; 0x38
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	3304      	adds	r3, #4
 800ef80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	683a      	ldr	r2, [r7, #0]
 800ef8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	2200      	movs	r2, #0
 800ef92:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	2201      	movs	r2, #1
 800ef98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ef9a:	7afb      	ldrb	r3, [r7, #11]
 800ef9c:	f003 030f 	and.w	r3, r3, #15
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	691b      	ldr	r3, [r3, #16]
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d102      	bne.n	800efb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800efb4:	7afb      	ldrb	r3, [r7, #11]
 800efb6:	f003 030f 	and.w	r3, r3, #15
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d109      	bne.n	800efd2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	461a      	mov	r2, r3
 800efca:	6979      	ldr	r1, [r7, #20]
 800efcc:	f004 fa90 	bl	80134f0 <USB_EP0StartXfer>
 800efd0:	e008      	b.n	800efe4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6818      	ldr	r0, [r3, #0]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	6979      	ldr	r1, [r7, #20]
 800efe0:	f004 f842 	bl	8013068 <USB_EPStartXfer>
  }

  return HAL_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b084      	sub	sp, #16
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
 800eff6:	460b      	mov	r3, r1
 800eff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	f003 020f 	and.w	r2, r3, #15
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d901      	bls.n	800f00c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e050      	b.n	800f0ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f00c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f010:	2b00      	cmp	r3, #0
 800f012:	da0f      	bge.n	800f034 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	f003 020f 	and.w	r2, r3, #15
 800f01a:	4613      	mov	r3, r2
 800f01c:	00db      	lsls	r3, r3, #3
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	3338      	adds	r3, #56	; 0x38
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	4413      	add	r3, r2
 800f028:	3304      	adds	r3, #4
 800f02a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2201      	movs	r2, #1
 800f030:	705a      	strb	r2, [r3, #1]
 800f032:	e00d      	b.n	800f050 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f034:	78fa      	ldrb	r2, [r7, #3]
 800f036:	4613      	mov	r3, r2
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	1a9b      	subs	r3, r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	4413      	add	r3, r2
 800f046:	3304      	adds	r3, #4
 800f048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2201      	movs	r2, #1
 800f054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f056:	78fb      	ldrb	r3, [r7, #3]
 800f058:	f003 030f 	and.w	r3, r3, #15
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d101      	bne.n	800f070 <HAL_PCD_EP_SetStall+0x82>
 800f06c:	2302      	movs	r3, #2
 800f06e:	e01e      	b.n	800f0ae <HAL_PCD_EP_SetStall+0xc0>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68f9      	ldr	r1, [r7, #12]
 800f07e:	4618      	mov	r0, r3
 800f080:	f004 fc1f 	bl	80138c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f084:	78fb      	ldrb	r3, [r7, #3]
 800f086:	f003 030f 	and.w	r3, r3, #15
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6818      	ldr	r0, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	b2d9      	uxtb	r1, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f09e:	461a      	mov	r2, r3
 800f0a0:	f004 fe10 	bl	8013cc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f0ac:	2300      	movs	r3, #0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f0c2:	78fb      	ldrb	r3, [r7, #3]
 800f0c4:	f003 020f 	and.w	r2, r3, #15
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d901      	bls.n	800f0d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e042      	b.n	800f15a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	da0f      	bge.n	800f0fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f0dc:	78fb      	ldrb	r3, [r7, #3]
 800f0de:	f003 020f 	and.w	r2, r3, #15
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	00db      	lsls	r3, r3, #3
 800f0e6:	1a9b      	subs	r3, r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	3338      	adds	r3, #56	; 0x38
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	705a      	strb	r2, [r3, #1]
 800f0fa:	e00f      	b.n	800f11c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f0fc:	78fb      	ldrb	r3, [r7, #3]
 800f0fe:	f003 020f 	and.w	r2, r3, #15
 800f102:	4613      	mov	r3, r2
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	1a9b      	subs	r3, r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	4413      	add	r3, r2
 800f112:	3304      	adds	r3, #4
 800f114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f122:	78fb      	ldrb	r3, [r7, #3]
 800f124:	f003 030f 	and.w	r3, r3, #15
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f134:	2b01      	cmp	r3, #1
 800f136:	d101      	bne.n	800f13c <HAL_PCD_EP_ClrStall+0x86>
 800f138:	2302      	movs	r3, #2
 800f13a:	e00e      	b.n	800f15a <HAL_PCD_EP_ClrStall+0xa4>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68f9      	ldr	r1, [r7, #12]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f004 fc27 	bl	801399e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b08a      	sub	sp, #40	; 0x28
 800f166:	af02      	add	r7, sp, #8
 800f168:	6078      	str	r0, [r7, #4]
 800f16a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f176:	683a      	ldr	r2, [r7, #0]
 800f178:	4613      	mov	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	1a9b      	subs	r3, r3, r2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	3338      	adds	r3, #56	; 0x38
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	4413      	add	r3, r2
 800f186:	3304      	adds	r3, #4
 800f188:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	699a      	ldr	r2, [r3, #24]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	429a      	cmp	r2, r3
 800f194:	d901      	bls.n	800f19a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f196:	2301      	movs	r3, #1
 800f198:	e06c      	b.n	800f274 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	695a      	ldr	r2, [r3, #20]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	699b      	ldr	r3, [r3, #24]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	69fa      	ldr	r2, [r7, #28]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d902      	bls.n	800f1b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	3303      	adds	r3, #3
 800f1ba:	089b      	lsrs	r3, r3, #2
 800f1bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f1be:	e02b      	b.n	800f218 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	695a      	ldr	r2, [r3, #20]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	69fa      	ldr	r2, [r7, #28]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d902      	bls.n	800f1dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	3303      	adds	r3, #3
 800f1e0:	089b      	lsrs	r3, r3, #2
 800f1e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68d9      	ldr	r1, [r3, #12]
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	b2da      	uxtb	r2, r3
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	6978      	ldr	r0, [r7, #20]
 800f1fc:	f004 facb 	bl	8013796 <USB_WritePacket>

    ep->xfer_buff  += len;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	441a      	add	r2, r3
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	699a      	ldr	r2, [r3, #24]
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	441a      	add	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	015a      	lsls	r2, r3, #5
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	4413      	add	r3, r2
 800f220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f224:	699b      	ldr	r3, [r3, #24]
 800f226:	b29b      	uxth	r3, r3
 800f228:	69ba      	ldr	r2, [r7, #24]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d809      	bhi.n	800f242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f236:	429a      	cmp	r2, r3
 800f238:	d203      	bcs.n	800f242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1be      	bne.n	800f1c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	695a      	ldr	r2, [r3, #20]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d811      	bhi.n	800f272 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	f003 030f 	and.w	r3, r3, #15
 800f254:	2201      	movs	r2, #1
 800f256:	fa02 f303 	lsl.w	r3, r2, r3
 800f25a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	43db      	mvns	r3, r3
 800f268:	6939      	ldr	r1, [r7, #16]
 800f26a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f26e:	4013      	ands	r3, r2
 800f270:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3720      	adds	r7, #32
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	333c      	adds	r3, #60	; 0x3c
 800f294:	3304      	adds	r3, #4
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	f040 80a0 	bne.w	800f3f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f003 0308 	and.w	r3, r3, #8
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d015      	beq.n	800f2ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	4a72      	ldr	r2, [pc, #456]	; (800f48c <PCD_EP_OutXfrComplete_int+0x210>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	f240 80dd 	bls.w	800f482 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 80d7 	beq.w	800f482 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	015a      	lsls	r2, r3, #5
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	4413      	add	r3, r2
 800f2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2e6:	6093      	str	r3, [r2, #8]
 800f2e8:	e0cb      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	f003 0320 	and.w	r3, r3, #32
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d009      	beq.n	800f308 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f300:	461a      	mov	r2, r3
 800f302:	2320      	movs	r3, #32
 800f304:	6093      	str	r3, [r2, #8]
 800f306:	e0bc      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f040 80b7 	bne.w	800f482 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4a5d      	ldr	r2, [pc, #372]	; (800f48c <PCD_EP_OutXfrComplete_int+0x210>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d90f      	bls.n	800f33c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00a      	beq.n	800f33c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	015a      	lsls	r2, r3, #5
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	4413      	add	r3, r2
 800f32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f332:	461a      	mov	r2, r3
 800f334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f338:	6093      	str	r3, [r2, #8]
 800f33a:	e0a2      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4613      	mov	r3, r2
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	1a9b      	subs	r3, r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	440b      	add	r3, r1
 800f34a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f34e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	0159      	lsls	r1, r3, #5
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	440b      	add	r3, r1
 800f358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800f362:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	683a      	ldr	r2, [r7, #0]
 800f368:	4613      	mov	r3, r2
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	1a9b      	subs	r3, r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4403      	add	r3, r0
 800f372:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f376:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800f378:	6879      	ldr	r1, [r7, #4]
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	4613      	mov	r3, r2
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	1a9b      	subs	r3, r3, r2
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	440b      	add	r3, r1
 800f386:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f38a:	6819      	ldr	r1, [r3, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	4613      	mov	r3, r2
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	1a9b      	subs	r3, r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4403      	add	r3, r0
 800f39a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4419      	add	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	00db      	lsls	r3, r3, #3
 800f3aa:	1a9b      	subs	r3, r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	4403      	add	r3, r0
 800f3b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f3b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d114      	bne.n	800f3e6 <PCD_EP_OutXfrComplete_int+0x16a>
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	00db      	lsls	r3, r3, #3
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	440b      	add	r3, r1
 800f3ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d108      	bne.n	800f3e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6818      	ldr	r0, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f3de:	461a      	mov	r2, r3
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	f004 fc6f 	bl	8013cc4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f006 fb9f 	bl	8015b30 <HAL_PCD_DataOutStageCallback>
 800f3f2:	e046      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4a26      	ldr	r2, [pc, #152]	; (800f490 <PCD_EP_OutXfrComplete_int+0x214>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d124      	bne.n	800f446 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00a      	beq.n	800f41c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	015a      	lsls	r2, r3, #5
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	4413      	add	r3, r2
 800f40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f412:	461a      	mov	r2, r3
 800f414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f418:	6093      	str	r3, [r2, #8]
 800f41a:	e032      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d008      	beq.n	800f438 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	015a      	lsls	r2, r3, #5
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	4413      	add	r3, r2
 800f42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f432:	461a      	mov	r2, r3
 800f434:	2320      	movs	r3, #32
 800f436:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f006 fb76 	bl	8015b30 <HAL_PCD_DataOutStageCallback>
 800f444:	e01d      	b.n	800f482 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d114      	bne.n	800f476 <PCD_EP_OutXfrComplete_int+0x1fa>
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	4613      	mov	r3, r2
 800f452:	00db      	lsls	r3, r3, #3
 800f454:	1a9b      	subs	r3, r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	440b      	add	r3, r1
 800f45a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d108      	bne.n	800f476 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f46e:	461a      	mov	r2, r3
 800f470:	2100      	movs	r1, #0
 800f472:	f004 fc27 	bl	8013cc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f006 fb57 	bl	8015b30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	4f54300a 	.word	0x4f54300a
 800f490:	4f54310a 	.word	0x4f54310a

0800f494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	333c      	adds	r3, #60	; 0x3c
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	4a15      	ldr	r2, [pc, #84]	; (800f51c <PCD_EP_OutSetupPacket_int+0x88>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d90e      	bls.n	800f4e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d009      	beq.n	800f4e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	015a      	lsls	r2, r3, #5
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	4413      	add	r3, r2
 800f4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f006 fb0f 	bl	8015b0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	4a0a      	ldr	r2, [pc, #40]	; (800f51c <PCD_EP_OutSetupPacket_int+0x88>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d90c      	bls.n	800f510 <PCD_EP_OutSetupPacket_int+0x7c>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d108      	bne.n	800f510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6818      	ldr	r0, [r3, #0]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f508:	461a      	mov	r2, r3
 800f50a:	2101      	movs	r1, #1
 800f50c:	f004 fbda 	bl	8013cc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3718      	adds	r7, #24
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	4f54300a 	.word	0x4f54300a

0800f520 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	460b      	mov	r3, r1
 800f52a:	70fb      	strb	r3, [r7, #3]
 800f52c:	4613      	mov	r3, r2
 800f52e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f536:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f538:	78fb      	ldrb	r3, [r7, #3]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d107      	bne.n	800f54e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f53e:	883b      	ldrh	r3, [r7, #0]
 800f540:	0419      	lsls	r1, r3, #16
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	430a      	orrs	r2, r1
 800f54a:	629a      	str	r2, [r3, #40]	; 0x28
 800f54c:	e028      	b.n	800f5a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f554:	0c1b      	lsrs	r3, r3, #16
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	4413      	add	r3, r2
 800f55a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f55c:	2300      	movs	r3, #0
 800f55e:	73fb      	strb	r3, [r7, #15]
 800f560:	e00d      	b.n	800f57e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	7bfb      	ldrb	r3, [r7, #15]
 800f568:	3340      	adds	r3, #64	; 0x40
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	4413      	add	r3, r2
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	0c1b      	lsrs	r3, r3, #16
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	4413      	add	r3, r2
 800f576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f578:	7bfb      	ldrb	r3, [r7, #15]
 800f57a:	3301      	adds	r3, #1
 800f57c:	73fb      	strb	r3, [r7, #15]
 800f57e:	7bfa      	ldrb	r2, [r7, #15]
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	3b01      	subs	r3, #1
 800f584:	429a      	cmp	r2, r3
 800f586:	d3ec      	bcc.n	800f562 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f588:	883b      	ldrh	r3, [r7, #0]
 800f58a:	0418      	lsls	r0, r3, #16
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6819      	ldr	r1, [r3, #0]
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	3b01      	subs	r3, #1
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	4302      	orrs	r2, r0
 800f598:	3340      	adds	r3, #64	; 0x40
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	440b      	add	r3, r1
 800f59e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr

0800f5ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f5ae:	b480      	push	{r7}
 800f5b0:	b083      	sub	sp, #12
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	887a      	ldrh	r2, [r7, #2]
 800f5c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f5dc:	bf00      	nop
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e264      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	2b00      	cmp	r3, #0
 800f604:	d075      	beq.n	800f6f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f606:	4ba3      	ldr	r3, [pc, #652]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 030c 	and.w	r3, r3, #12
 800f60e:	2b04      	cmp	r3, #4
 800f610:	d00c      	beq.n	800f62c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f612:	4ba0      	ldr	r3, [pc, #640]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d112      	bne.n	800f644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f61e:	4b9d      	ldr	r3, [pc, #628]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f62a:	d10b      	bne.n	800f644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f62c:	4b99      	ldr	r3, [pc, #612]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d05b      	beq.n	800f6f0 <HAL_RCC_OscConfig+0x108>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d157      	bne.n	800f6f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f640:	2301      	movs	r3, #1
 800f642:	e23f      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f64c:	d106      	bne.n	800f65c <HAL_RCC_OscConfig+0x74>
 800f64e:	4b91      	ldr	r3, [pc, #580]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a90      	ldr	r2, [pc, #576]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f658:	6013      	str	r3, [r2, #0]
 800f65a:	e01d      	b.n	800f698 <HAL_RCC_OscConfig+0xb0>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f664:	d10c      	bne.n	800f680 <HAL_RCC_OscConfig+0x98>
 800f666:	4b8b      	ldr	r3, [pc, #556]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a8a      	ldr	r2, [pc, #552]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f66c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f670:	6013      	str	r3, [r2, #0]
 800f672:	4b88      	ldr	r3, [pc, #544]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a87      	ldr	r2, [pc, #540]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f67c:	6013      	str	r3, [r2, #0]
 800f67e:	e00b      	b.n	800f698 <HAL_RCC_OscConfig+0xb0>
 800f680:	4b84      	ldr	r3, [pc, #528]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a83      	ldr	r2, [pc, #524]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	4b81      	ldr	r3, [pc, #516]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a80      	ldr	r2, [pc, #512]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d013      	beq.n	800f6c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6a0:	f7fd fb3c 	bl	800cd1c <HAL_GetTick>
 800f6a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f6a6:	e008      	b.n	800f6ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f6a8:	f7fd fb38 	bl	800cd1c <HAL_GetTick>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	1ad3      	subs	r3, r2, r3
 800f6b2:	2b64      	cmp	r3, #100	; 0x64
 800f6b4:	d901      	bls.n	800f6ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f6b6:	2303      	movs	r3, #3
 800f6b8:	e204      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f6ba:	4b76      	ldr	r3, [pc, #472]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d0f0      	beq.n	800f6a8 <HAL_RCC_OscConfig+0xc0>
 800f6c6:	e014      	b.n	800f6f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6c8:	f7fd fb28 	bl	800cd1c <HAL_GetTick>
 800f6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f6ce:	e008      	b.n	800f6e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f6d0:	f7fd fb24 	bl	800cd1c <HAL_GetTick>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	2b64      	cmp	r3, #100	; 0x64
 800f6dc:	d901      	bls.n	800f6e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f6de:	2303      	movs	r3, #3
 800f6e0:	e1f0      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f6e2:	4b6c      	ldr	r3, [pc, #432]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1f0      	bne.n	800f6d0 <HAL_RCC_OscConfig+0xe8>
 800f6ee:	e000      	b.n	800f6f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f6f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f003 0302 	and.w	r3, r3, #2
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d063      	beq.n	800f7c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f6fe:	4b65      	ldr	r3, [pc, #404]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f003 030c 	and.w	r3, r3, #12
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00b      	beq.n	800f722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f70a:	4b62      	ldr	r3, [pc, #392]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f712:	2b08      	cmp	r3, #8
 800f714:	d11c      	bne.n	800f750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f716:	4b5f      	ldr	r3, [pc, #380]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d116      	bne.n	800f750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f722:	4b5c      	ldr	r3, [pc, #368]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d005      	beq.n	800f73a <HAL_RCC_OscConfig+0x152>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d001      	beq.n	800f73a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e1c4      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f73a:	4b56      	ldr	r3, [pc, #344]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	691b      	ldr	r3, [r3, #16]
 800f746:	00db      	lsls	r3, r3, #3
 800f748:	4952      	ldr	r1, [pc, #328]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f74a:	4313      	orrs	r3, r2
 800f74c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f74e:	e03a      	b.n	800f7c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d020      	beq.n	800f79a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f758:	4b4f      	ldr	r3, [pc, #316]	; (800f898 <HAL_RCC_OscConfig+0x2b0>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f75e:	f7fd fadd 	bl	800cd1c <HAL_GetTick>
 800f762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f764:	e008      	b.n	800f778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f766:	f7fd fad9 	bl	800cd1c <HAL_GetTick>
 800f76a:	4602      	mov	r2, r0
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	2b02      	cmp	r3, #2
 800f772:	d901      	bls.n	800f778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f774:	2303      	movs	r3, #3
 800f776:	e1a5      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f778:	4b46      	ldr	r3, [pc, #280]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f003 0302 	and.w	r3, r3, #2
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0f0      	beq.n	800f766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f784:	4b43      	ldr	r3, [pc, #268]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	4940      	ldr	r1, [pc, #256]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f794:	4313      	orrs	r3, r2
 800f796:	600b      	str	r3, [r1, #0]
 800f798:	e015      	b.n	800f7c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f79a:	4b3f      	ldr	r3, [pc, #252]	; (800f898 <HAL_RCC_OscConfig+0x2b0>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7a0:	f7fd fabc 	bl	800cd1c <HAL_GetTick>
 800f7a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f7a6:	e008      	b.n	800f7ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f7a8:	f7fd fab8 	bl	800cd1c <HAL_GetTick>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	2b02      	cmp	r3, #2
 800f7b4:	d901      	bls.n	800f7ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f7b6:	2303      	movs	r3, #3
 800f7b8:	e184      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f7ba:	4b36      	ldr	r3, [pc, #216]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f003 0302 	and.w	r3, r3, #2
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1f0      	bne.n	800f7a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f003 0308 	and.w	r3, r3, #8
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d030      	beq.n	800f834 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d016      	beq.n	800f808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f7da:	4b30      	ldr	r3, [pc, #192]	; (800f89c <HAL_RCC_OscConfig+0x2b4>)
 800f7dc:	2201      	movs	r2, #1
 800f7de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f7e0:	f7fd fa9c 	bl	800cd1c <HAL_GetTick>
 800f7e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f7e6:	e008      	b.n	800f7fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f7e8:	f7fd fa98 	bl	800cd1c <HAL_GetTick>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	d901      	bls.n	800f7fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	e164      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f7fa:	4b26      	ldr	r3, [pc, #152]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d0f0      	beq.n	800f7e8 <HAL_RCC_OscConfig+0x200>
 800f806:	e015      	b.n	800f834 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f808:	4b24      	ldr	r3, [pc, #144]	; (800f89c <HAL_RCC_OscConfig+0x2b4>)
 800f80a:	2200      	movs	r2, #0
 800f80c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f80e:	f7fd fa85 	bl	800cd1c <HAL_GetTick>
 800f812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f814:	e008      	b.n	800f828 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f816:	f7fd fa81 	bl	800cd1c <HAL_GetTick>
 800f81a:	4602      	mov	r2, r0
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	2b02      	cmp	r3, #2
 800f822:	d901      	bls.n	800f828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f824:	2303      	movs	r3, #3
 800f826:	e14d      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f828:	4b1a      	ldr	r3, [pc, #104]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f82c:	f003 0302 	and.w	r3, r3, #2
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1f0      	bne.n	800f816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f003 0304 	and.w	r3, r3, #4
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 80a0 	beq.w	800f982 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f842:	2300      	movs	r3, #0
 800f844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f846:	4b13      	ldr	r3, [pc, #76]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10f      	bne.n	800f872 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f852:	2300      	movs	r3, #0
 800f854:	60bb      	str	r3, [r7, #8]
 800f856:	4b0f      	ldr	r3, [pc, #60]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f85a:	4a0e      	ldr	r2, [pc, #56]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f85c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f860:	6413      	str	r3, [r2, #64]	; 0x40
 800f862:	4b0c      	ldr	r3, [pc, #48]	; (800f894 <HAL_RCC_OscConfig+0x2ac>)
 800f864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f86a:	60bb      	str	r3, [r7, #8]
 800f86c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f86e:	2301      	movs	r3, #1
 800f870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f872:	4b0b      	ldr	r3, [pc, #44]	; (800f8a0 <HAL_RCC_OscConfig+0x2b8>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d121      	bne.n	800f8c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f87e:	4b08      	ldr	r3, [pc, #32]	; (800f8a0 <HAL_RCC_OscConfig+0x2b8>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a07      	ldr	r2, [pc, #28]	; (800f8a0 <HAL_RCC_OscConfig+0x2b8>)
 800f884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f88a:	f7fd fa47 	bl	800cd1c <HAL_GetTick>
 800f88e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f890:	e011      	b.n	800f8b6 <HAL_RCC_OscConfig+0x2ce>
 800f892:	bf00      	nop
 800f894:	40023800 	.word	0x40023800
 800f898:	42470000 	.word	0x42470000
 800f89c:	42470e80 	.word	0x42470e80
 800f8a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f8a4:	f7fd fa3a 	bl	800cd1c <HAL_GetTick>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d901      	bls.n	800f8b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f8b2:	2303      	movs	r3, #3
 800f8b4:	e106      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f8b6:	4b85      	ldr	r3, [pc, #532]	; (800facc <HAL_RCC_OscConfig+0x4e4>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0f0      	beq.n	800f8a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d106      	bne.n	800f8d8 <HAL_RCC_OscConfig+0x2f0>
 800f8ca:	4b81      	ldr	r3, [pc, #516]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ce:	4a80      	ldr	r2, [pc, #512]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8d0:	f043 0301 	orr.w	r3, r3, #1
 800f8d4:	6713      	str	r3, [r2, #112]	; 0x70
 800f8d6:	e01c      	b.n	800f912 <HAL_RCC_OscConfig+0x32a>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	2b05      	cmp	r3, #5
 800f8de:	d10c      	bne.n	800f8fa <HAL_RCC_OscConfig+0x312>
 800f8e0:	4b7b      	ldr	r3, [pc, #492]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e4:	4a7a      	ldr	r2, [pc, #488]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8e6:	f043 0304 	orr.w	r3, r3, #4
 800f8ea:	6713      	str	r3, [r2, #112]	; 0x70
 800f8ec:	4b78      	ldr	r3, [pc, #480]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8f0:	4a77      	ldr	r2, [pc, #476]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8f2:	f043 0301 	orr.w	r3, r3, #1
 800f8f6:	6713      	str	r3, [r2, #112]	; 0x70
 800f8f8:	e00b      	b.n	800f912 <HAL_RCC_OscConfig+0x32a>
 800f8fa:	4b75      	ldr	r3, [pc, #468]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8fe:	4a74      	ldr	r2, [pc, #464]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f900:	f023 0301 	bic.w	r3, r3, #1
 800f904:	6713      	str	r3, [r2, #112]	; 0x70
 800f906:	4b72      	ldr	r3, [pc, #456]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f90a:	4a71      	ldr	r2, [pc, #452]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f90c:	f023 0304 	bic.w	r3, r3, #4
 800f910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d015      	beq.n	800f946 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f91a:	f7fd f9ff 	bl	800cd1c <HAL_GetTick>
 800f91e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f920:	e00a      	b.n	800f938 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f922:	f7fd f9fb 	bl	800cd1c <HAL_GetTick>
 800f926:	4602      	mov	r2, r0
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f930:	4293      	cmp	r3, r2
 800f932:	d901      	bls.n	800f938 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f934:	2303      	movs	r3, #3
 800f936:	e0c5      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f938:	4b65      	ldr	r3, [pc, #404]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93c:	f003 0302 	and.w	r3, r3, #2
 800f940:	2b00      	cmp	r3, #0
 800f942:	d0ee      	beq.n	800f922 <HAL_RCC_OscConfig+0x33a>
 800f944:	e014      	b.n	800f970 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f946:	f7fd f9e9 	bl	800cd1c <HAL_GetTick>
 800f94a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f94c:	e00a      	b.n	800f964 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f94e:	f7fd f9e5 	bl	800cd1c <HAL_GetTick>
 800f952:	4602      	mov	r2, r0
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	f241 3288 	movw	r2, #5000	; 0x1388
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d901      	bls.n	800f964 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	e0af      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f964:	4b5a      	ldr	r3, [pc, #360]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f968:	f003 0302 	and.w	r3, r3, #2
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1ee      	bne.n	800f94e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f970:	7dfb      	ldrb	r3, [r7, #23]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d105      	bne.n	800f982 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f976:	4b56      	ldr	r3, [pc, #344]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f97a:	4a55      	ldr	r2, [pc, #340]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f97c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	699b      	ldr	r3, [r3, #24]
 800f986:	2b00      	cmp	r3, #0
 800f988:	f000 809b 	beq.w	800fac2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f98c:	4b50      	ldr	r3, [pc, #320]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	f003 030c 	and.w	r3, r3, #12
 800f994:	2b08      	cmp	r3, #8
 800f996:	d05c      	beq.n	800fa52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	699b      	ldr	r3, [r3, #24]
 800f99c:	2b02      	cmp	r3, #2
 800f99e:	d141      	bne.n	800fa24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9a0:	4b4c      	ldr	r3, [pc, #304]	; (800fad4 <HAL_RCC_OscConfig+0x4ec>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9a6:	f7fd f9b9 	bl	800cd1c <HAL_GetTick>
 800f9aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9ac:	e008      	b.n	800f9c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f9ae:	f7fd f9b5 	bl	800cd1c <HAL_GetTick>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d901      	bls.n	800f9c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e081      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f9c0:	4b43      	ldr	r3, [pc, #268]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1f0      	bne.n	800f9ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	69da      	ldr	r2, [r3, #28]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6a1b      	ldr	r3, [r3, #32]
 800f9d4:	431a      	orrs	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	019b      	lsls	r3, r3, #6
 800f9dc:	431a      	orrs	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e2:	085b      	lsrs	r3, r3, #1
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	041b      	lsls	r3, r3, #16
 800f9e8:	431a      	orrs	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ee:	061b      	lsls	r3, r3, #24
 800f9f0:	4937      	ldr	r1, [pc, #220]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f9f6:	4b37      	ldr	r3, [pc, #220]	; (800fad4 <HAL_RCC_OscConfig+0x4ec>)
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9fc:	f7fd f98e 	bl	800cd1c <HAL_GetTick>
 800fa00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fa02:	e008      	b.n	800fa16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fa04:	f7fd f98a 	bl	800cd1c <HAL_GetTick>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	1ad3      	subs	r3, r2, r3
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d901      	bls.n	800fa16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800fa12:	2303      	movs	r3, #3
 800fa14:	e056      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fa16:	4b2e      	ldr	r3, [pc, #184]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d0f0      	beq.n	800fa04 <HAL_RCC_OscConfig+0x41c>
 800fa22:	e04e      	b.n	800fac2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa24:	4b2b      	ldr	r3, [pc, #172]	; (800fad4 <HAL_RCC_OscConfig+0x4ec>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa2a:	f7fd f977 	bl	800cd1c <HAL_GetTick>
 800fa2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fa30:	e008      	b.n	800fa44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fa32:	f7fd f973 	bl	800cd1c <HAL_GetTick>
 800fa36:	4602      	mov	r2, r0
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	d901      	bls.n	800fa44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e03f      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fa44:	4b22      	ldr	r3, [pc, #136]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1f0      	bne.n	800fa32 <HAL_RCC_OscConfig+0x44a>
 800fa50:	e037      	b.n	800fac2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	699b      	ldr	r3, [r3, #24]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d101      	bne.n	800fa5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e032      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fa5e:	4b1c      	ldr	r3, [pc, #112]	; (800fad0 <HAL_RCC_OscConfig+0x4e8>)
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d028      	beq.n	800fabe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d121      	bne.n	800fabe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d11a      	bne.n	800fabe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fa8e:	4013      	ands	r3, r2
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fa94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d111      	bne.n	800fabe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa4:	085b      	lsrs	r3, r3, #1
 800faa6:	3b01      	subs	r3, #1
 800faa8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800faaa:	429a      	cmp	r2, r3
 800faac:	d107      	bne.n	800fabe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800faba:	429a      	cmp	r2, r3
 800fabc:	d001      	beq.n	800fac2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e000      	b.n	800fac4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	40007000 	.word	0x40007000
 800fad0:	40023800 	.word	0x40023800
 800fad4:	42470060 	.word	0x42470060

0800fad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d101      	bne.n	800faec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	e0cc      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800faec:	4b68      	ldr	r3, [pc, #416]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f003 030f 	and.w	r3, r3, #15
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d90c      	bls.n	800fb14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fafa:	4b65      	ldr	r3, [pc, #404]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	b2d2      	uxtb	r2, r2
 800fb00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb02:	4b63      	ldr	r3, [pc, #396]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f003 030f 	and.w	r3, r3, #15
 800fb0a:	683a      	ldr	r2, [r7, #0]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d001      	beq.n	800fb14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	e0b8      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f003 0302 	and.w	r3, r3, #2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d020      	beq.n	800fb62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f003 0304 	and.w	r3, r3, #4
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d005      	beq.n	800fb38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fb2c:	4b59      	ldr	r3, [pc, #356]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	4a58      	ldr	r2, [pc, #352]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fb36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fb44:	4b53      	ldr	r3, [pc, #332]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	4a52      	ldr	r2, [pc, #328]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fb4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fb50:	4b50      	ldr	r3, [pc, #320]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	494d      	ldr	r1, [pc, #308]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d044      	beq.n	800fbf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d107      	bne.n	800fb86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fb76:	4b47      	ldr	r3, [pc, #284]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d119      	bne.n	800fbb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	e07f      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	d003      	beq.n	800fb96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fb92:	2b03      	cmp	r3, #3
 800fb94:	d107      	bne.n	800fba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb96:	4b3f      	ldr	r3, [pc, #252]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d109      	bne.n	800fbb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fba2:	2301      	movs	r3, #1
 800fba4:	e06f      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fba6:	4b3b      	ldr	r3, [pc, #236]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0302 	and.w	r3, r3, #2
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e067      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fbb6:	4b37      	ldr	r3, [pc, #220]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fbb8:	689b      	ldr	r3, [r3, #8]
 800fbba:	f023 0203 	bic.w	r2, r3, #3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	4934      	ldr	r1, [pc, #208]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fbc8:	f7fd f8a8 	bl	800cd1c <HAL_GetTick>
 800fbcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbce:	e00a      	b.n	800fbe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fbd0:	f7fd f8a4 	bl	800cd1c <HAL_GetTick>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d901      	bls.n	800fbe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	e04f      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fbe6:	4b2b      	ldr	r3, [pc, #172]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fbe8:	689b      	ldr	r3, [r3, #8]
 800fbea:	f003 020c 	and.w	r2, r3, #12
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d1eb      	bne.n	800fbd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fbf8:	4b25      	ldr	r3, [pc, #148]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f003 030f 	and.w	r3, r3, #15
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d20c      	bcs.n	800fc20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc06:	4b22      	ldr	r3, [pc, #136]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc0e:	4b20      	ldr	r3, [pc, #128]	; (800fc90 <HAL_RCC_ClockConfig+0x1b8>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 030f 	and.w	r3, r3, #15
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d001      	beq.n	800fc20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e032      	b.n	800fc86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f003 0304 	and.w	r3, r3, #4
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d008      	beq.n	800fc3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fc2c:	4b19      	ldr	r3, [pc, #100]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	4916      	ldr	r1, [pc, #88]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f003 0308 	and.w	r3, r3, #8
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d009      	beq.n	800fc5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fc4a:	4b12      	ldr	r3, [pc, #72]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fc4c:	689b      	ldr	r3, [r3, #8]
 800fc4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	490e      	ldr	r1, [pc, #56]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fc5e:	f000 f821 	bl	800fca4 <HAL_RCC_GetSysClockFreq>
 800fc62:	4602      	mov	r2, r0
 800fc64:	4b0b      	ldr	r3, [pc, #44]	; (800fc94 <HAL_RCC_ClockConfig+0x1bc>)
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	091b      	lsrs	r3, r3, #4
 800fc6a:	f003 030f 	and.w	r3, r3, #15
 800fc6e:	490a      	ldr	r1, [pc, #40]	; (800fc98 <HAL_RCC_ClockConfig+0x1c0>)
 800fc70:	5ccb      	ldrb	r3, [r1, r3]
 800fc72:	fa22 f303 	lsr.w	r3, r2, r3
 800fc76:	4a09      	ldr	r2, [pc, #36]	; (800fc9c <HAL_RCC_ClockConfig+0x1c4>)
 800fc78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fc7a:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <HAL_RCC_ClockConfig+0x1c8>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fd f808 	bl	800cc94 <HAL_InitTick>

  return HAL_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	40023c00 	.word	0x40023c00
 800fc94:	40023800 	.word	0x40023800
 800fc98:	08019530 	.word	0x08019530
 800fc9c:	20000048 	.word	0x20000048
 800fca0:	2000004c 	.word	0x2000004c

0800fca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fca4:	b5b0      	push	{r4, r5, r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fcaa:	2100      	movs	r1, #0
 800fcac:	6079      	str	r1, [r7, #4]
 800fcae:	2100      	movs	r1, #0
 800fcb0:	60f9      	str	r1, [r7, #12]
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fcba:	4952      	ldr	r1, [pc, #328]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcbc:	6889      	ldr	r1, [r1, #8]
 800fcbe:	f001 010c 	and.w	r1, r1, #12
 800fcc2:	2908      	cmp	r1, #8
 800fcc4:	d00d      	beq.n	800fce2 <HAL_RCC_GetSysClockFreq+0x3e>
 800fcc6:	2908      	cmp	r1, #8
 800fcc8:	f200 8094 	bhi.w	800fdf4 <HAL_RCC_GetSysClockFreq+0x150>
 800fccc:	2900      	cmp	r1, #0
 800fcce:	d002      	beq.n	800fcd6 <HAL_RCC_GetSysClockFreq+0x32>
 800fcd0:	2904      	cmp	r1, #4
 800fcd2:	d003      	beq.n	800fcdc <HAL_RCC_GetSysClockFreq+0x38>
 800fcd4:	e08e      	b.n	800fdf4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fcd6:	4b4c      	ldr	r3, [pc, #304]	; (800fe08 <HAL_RCC_GetSysClockFreq+0x164>)
 800fcd8:	60bb      	str	r3, [r7, #8]
       break;
 800fcda:	e08e      	b.n	800fdfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fcdc:	4b4b      	ldr	r3, [pc, #300]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x168>)
 800fcde:	60bb      	str	r3, [r7, #8]
      break;
 800fce0:	e08b      	b.n	800fdfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fce2:	4948      	ldr	r1, [pc, #288]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fce4:	6849      	ldr	r1, [r1, #4]
 800fce6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800fcea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fcec:	4945      	ldr	r1, [pc, #276]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcee:	6849      	ldr	r1, [r1, #4]
 800fcf0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	d024      	beq.n	800fd42 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fcf8:	4942      	ldr	r1, [pc, #264]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fcfa:	6849      	ldr	r1, [r1, #4]
 800fcfc:	0989      	lsrs	r1, r1, #6
 800fcfe:	4608      	mov	r0, r1
 800fd00:	f04f 0100 	mov.w	r1, #0
 800fd04:	f240 14ff 	movw	r4, #511	; 0x1ff
 800fd08:	f04f 0500 	mov.w	r5, #0
 800fd0c:	ea00 0204 	and.w	r2, r0, r4
 800fd10:	ea01 0305 	and.w	r3, r1, r5
 800fd14:	493d      	ldr	r1, [pc, #244]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x168>)
 800fd16:	fb01 f003 	mul.w	r0, r1, r3
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	fb01 f102 	mul.w	r1, r1, r2
 800fd20:	1844      	adds	r4, r0, r1
 800fd22:	493a      	ldr	r1, [pc, #232]	; (800fe0c <HAL_RCC_GetSysClockFreq+0x168>)
 800fd24:	fba2 0101 	umull	r0, r1, r2, r1
 800fd28:	1863      	adds	r3, r4, r1
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f04f 0300 	mov.w	r3, #0
 800fd34:	f7f0 fee2 	bl	8000afc <__aeabi_uldivmod>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	e04a      	b.n	800fdd8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fd42:	4b30      	ldr	r3, [pc, #192]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	099b      	lsrs	r3, r3, #6
 800fd48:	461a      	mov	r2, r3
 800fd4a:	f04f 0300 	mov.w	r3, #0
 800fd4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fd52:	f04f 0100 	mov.w	r1, #0
 800fd56:	ea02 0400 	and.w	r4, r2, r0
 800fd5a:	ea03 0501 	and.w	r5, r3, r1
 800fd5e:	4620      	mov	r0, r4
 800fd60:	4629      	mov	r1, r5
 800fd62:	f04f 0200 	mov.w	r2, #0
 800fd66:	f04f 0300 	mov.w	r3, #0
 800fd6a:	014b      	lsls	r3, r1, #5
 800fd6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800fd70:	0142      	lsls	r2, r0, #5
 800fd72:	4610      	mov	r0, r2
 800fd74:	4619      	mov	r1, r3
 800fd76:	1b00      	subs	r0, r0, r4
 800fd78:	eb61 0105 	sbc.w	r1, r1, r5
 800fd7c:	f04f 0200 	mov.w	r2, #0
 800fd80:	f04f 0300 	mov.w	r3, #0
 800fd84:	018b      	lsls	r3, r1, #6
 800fd86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800fd8a:	0182      	lsls	r2, r0, #6
 800fd8c:	1a12      	subs	r2, r2, r0
 800fd8e:	eb63 0301 	sbc.w	r3, r3, r1
 800fd92:	f04f 0000 	mov.w	r0, #0
 800fd96:	f04f 0100 	mov.w	r1, #0
 800fd9a:	00d9      	lsls	r1, r3, #3
 800fd9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fda0:	00d0      	lsls	r0, r2, #3
 800fda2:	4602      	mov	r2, r0
 800fda4:	460b      	mov	r3, r1
 800fda6:	1912      	adds	r2, r2, r4
 800fda8:	eb45 0303 	adc.w	r3, r5, r3
 800fdac:	f04f 0000 	mov.w	r0, #0
 800fdb0:	f04f 0100 	mov.w	r1, #0
 800fdb4:	0299      	lsls	r1, r3, #10
 800fdb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800fdba:	0290      	lsls	r0, r2, #10
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	f04f 0300 	mov.w	r3, #0
 800fdcc:	f7f0 fe96 	bl	8000afc <__aeabi_uldivmod>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fdd8:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <HAL_RCC_GetSysClockFreq+0x160>)
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	0c1b      	lsrs	r3, r3, #16
 800fdde:	f003 0303 	and.w	r3, r3, #3
 800fde2:	3301      	adds	r3, #1
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf0:	60bb      	str	r3, [r7, #8]
      break;
 800fdf2:	e002      	b.n	800fdfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fdf4:	4b04      	ldr	r3, [pc, #16]	; (800fe08 <HAL_RCC_GetSysClockFreq+0x164>)
 800fdf6:	60bb      	str	r3, [r7, #8]
      break;
 800fdf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fdfa:	68bb      	ldr	r3, [r7, #8]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bdb0      	pop	{r4, r5, r7, pc}
 800fe04:	40023800 	.word	0x40023800
 800fe08:	00f42400 	.word	0x00f42400
 800fe0c:	016e3600 	.word	0x016e3600

0800fe10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe10:	b480      	push	{r7}
 800fe12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fe14:	4b03      	ldr	r3, [pc, #12]	; (800fe24 <HAL_RCC_GetHCLKFreq+0x14>)
 800fe16:	681b      	ldr	r3, [r3, #0]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	20000048 	.word	0x20000048

0800fe28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fe2c:	f7ff fff0 	bl	800fe10 <HAL_RCC_GetHCLKFreq>
 800fe30:	4602      	mov	r2, r0
 800fe32:	4b05      	ldr	r3, [pc, #20]	; (800fe48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe34:	689b      	ldr	r3, [r3, #8]
 800fe36:	0a9b      	lsrs	r3, r3, #10
 800fe38:	f003 0307 	and.w	r3, r3, #7
 800fe3c:	4903      	ldr	r1, [pc, #12]	; (800fe4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800fe3e:	5ccb      	ldrb	r3, [r1, r3]
 800fe40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	40023800 	.word	0x40023800
 800fe4c:	08019540 	.word	0x08019540

0800fe50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fe54:	f7ff ffdc 	bl	800fe10 <HAL_RCC_GetHCLKFreq>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	4b05      	ldr	r3, [pc, #20]	; (800fe70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	0b5b      	lsrs	r3, r3, #13
 800fe60:	f003 0307 	and.w	r3, r3, #7
 800fe64:	4903      	ldr	r1, [pc, #12]	; (800fe74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fe66:	5ccb      	ldrb	r3, [r1, r3]
 800fe68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	40023800 	.word	0x40023800
 800fe74:	08019540 	.word	0x08019540

0800fe78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d101      	bne.n	800fe8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fe86:	2301      	movs	r3, #1
 800fe88:	e07b      	b.n	800ff82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d108      	bne.n	800fea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fe9a:	d009      	beq.n	800feb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	61da      	str	r2, [r3, #28]
 800fea2:	e005      	b.n	800feb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7fb fd32 	bl	800b934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2202      	movs	r2, #2
 800fed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fef8:	431a      	orrs	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff02:	431a      	orrs	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	f003 0302 	and.w	r3, r3, #2
 800ff0c:	431a      	orrs	r2, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	f003 0301 	and.w	r3, r3, #1
 800ff16:	431a      	orrs	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	699b      	ldr	r3, [r3, #24]
 800ff1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff20:	431a      	orrs	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	69db      	ldr	r3, [r3, #28]
 800ff26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff2a:	431a      	orrs	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a1b      	ldr	r3, [r3, #32]
 800ff30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff34:	ea42 0103 	orr.w	r1, r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	430a      	orrs	r2, r1
 800ff46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	699b      	ldr	r3, [r3, #24]
 800ff4c:	0c1b      	lsrs	r3, r3, #16
 800ff4e:	f003 0104 	and.w	r1, r3, #4
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff56:	f003 0210 	and.w	r2, r3, #16
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	430a      	orrs	r2, r1
 800ff60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	69da      	ldr	r2, [r3, #28]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}

0800ff8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b088      	sub	sp, #32
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	60f8      	str	r0, [r7, #12]
 800ff92:	60b9      	str	r1, [r7, #8]
 800ff94:	603b      	str	r3, [r7, #0]
 800ff96:	4613      	mov	r3, r2
 800ff98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d101      	bne.n	800ffac <HAL_SPI_Transmit+0x22>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	e126      	b.n	80101fa <HAL_SPI_Transmit+0x270>
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ffb4:	f7fc feb2 	bl	800cd1c <HAL_GetTick>
 800ffb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ffba:	88fb      	ldrh	r3, [r7, #6]
 800ffbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d002      	beq.n	800ffd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ffce:	e10b      	b.n	80101e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d002      	beq.n	800ffdc <HAL_SPI_Transmit+0x52>
 800ffd6:	88fb      	ldrh	r3, [r7, #6]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d102      	bne.n	800ffe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ffe0:	e102      	b.n	80101e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2203      	movs	r2, #3
 800ffe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	88fa      	ldrh	r2, [r7, #6]
 800fffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	88fa      	ldrh	r2, [r7, #6]
 8010000:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2200      	movs	r2, #0
 8010018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2200      	movs	r2, #0
 801001e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010028:	d10f      	bne.n	801004a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010054:	2b40      	cmp	r3, #64	; 0x40
 8010056:	d007      	beq.n	8010068 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010070:	d14b      	bne.n	801010a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <HAL_SPI_Transmit+0xf6>
 801007a:	8afb      	ldrh	r3, [r7, #22]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d13e      	bne.n	80100fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	881a      	ldrh	r2, [r3, #0]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010090:	1c9a      	adds	r2, r3, #2
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801009a:	b29b      	uxth	r3, r3
 801009c:	3b01      	subs	r3, #1
 801009e:	b29a      	uxth	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80100a4:	e02b      	b.n	80100fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	f003 0302 	and.w	r3, r3, #2
 80100b0:	2b02      	cmp	r3, #2
 80100b2:	d112      	bne.n	80100da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b8:	881a      	ldrh	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100c4:	1c9a      	adds	r2, r3, #2
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	3b01      	subs	r3, #1
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80100d8:	e011      	b.n	80100fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100da:	f7fc fe1f 	bl	800cd1c <HAL_GetTick>
 80100de:	4602      	mov	r2, r0
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d803      	bhi.n	80100f2 <HAL_SPI_Transmit+0x168>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f0:	d102      	bne.n	80100f8 <HAL_SPI_Transmit+0x16e>
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d102      	bne.n	80100fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80100f8:	2303      	movs	r3, #3
 80100fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80100fc:	e074      	b.n	80101e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010102:	b29b      	uxth	r3, r3
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1ce      	bne.n	80100a6 <HAL_SPI_Transmit+0x11c>
 8010108:	e04c      	b.n	80101a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d002      	beq.n	8010118 <HAL_SPI_Transmit+0x18e>
 8010112:	8afb      	ldrh	r3, [r7, #22]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d140      	bne.n	801019a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	330c      	adds	r3, #12
 8010122:	7812      	ldrb	r2, [r2, #0]
 8010124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010134:	b29b      	uxth	r3, r3
 8010136:	3b01      	subs	r3, #1
 8010138:	b29a      	uxth	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801013e:	e02c      	b.n	801019a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	f003 0302 	and.w	r3, r3, #2
 801014a:	2b02      	cmp	r3, #2
 801014c:	d113      	bne.n	8010176 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	330c      	adds	r3, #12
 8010158:	7812      	ldrb	r2, [r2, #0]
 801015a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801016a:	b29b      	uxth	r3, r3
 801016c:	3b01      	subs	r3, #1
 801016e:	b29a      	uxth	r2, r3
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	86da      	strh	r2, [r3, #54]	; 0x36
 8010174:	e011      	b.n	801019a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010176:	f7fc fdd1 	bl	800cd1c <HAL_GetTick>
 801017a:	4602      	mov	r2, r0
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	429a      	cmp	r2, r3
 8010184:	d803      	bhi.n	801018e <HAL_SPI_Transmit+0x204>
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801018c:	d102      	bne.n	8010194 <HAL_SPI_Transmit+0x20a>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d102      	bne.n	801019a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010198:	e026      	b.n	80101e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801019e:	b29b      	uxth	r3, r3
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1cd      	bne.n	8010140 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80101a4:	69ba      	ldr	r2, [r7, #24]
 80101a6:	6839      	ldr	r1, [r7, #0]
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 fce9 	bl	8010b80 <SPI_EndRxTxTransaction>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2220      	movs	r2, #32
 80101b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	689b      	ldr	r3, [r3, #8]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10a      	bne.n	80101d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80101c2:	2300      	movs	r3, #0
 80101c4:	613b      	str	r3, [r7, #16]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	613b      	str	r3, [r7, #16]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	613b      	str	r3, [r7, #16]
 80101d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	77fb      	strb	r3, [r7, #31]
 80101e4:	e000      	b.n	80101e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80101e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2201      	movs	r2, #1
 80101ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80101f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3720      	adds	r7, #32
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b088      	sub	sp, #32
 8010206:	af02      	add	r7, sp, #8
 8010208:	60f8      	str	r0, [r7, #12]
 801020a:	60b9      	str	r1, [r7, #8]
 801020c:	603b      	str	r3, [r7, #0]
 801020e:	4613      	mov	r3, r2
 8010210:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801021e:	d112      	bne.n	8010246 <HAL_SPI_Receive+0x44>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d10e      	bne.n	8010246 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2204      	movs	r2, #4
 801022c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010230:	88fa      	ldrh	r2, [r7, #6]
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	4613      	mov	r3, r2
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	68b9      	ldr	r1, [r7, #8]
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 f8f1 	bl	8010424 <HAL_SPI_TransmitReceive>
 8010242:	4603      	mov	r3, r0
 8010244:	e0ea      	b.n	801041c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801024c:	2b01      	cmp	r3, #1
 801024e:	d101      	bne.n	8010254 <HAL_SPI_Receive+0x52>
 8010250:	2302      	movs	r3, #2
 8010252:	e0e3      	b.n	801041c <HAL_SPI_Receive+0x21a>
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801025c:	f7fc fd5e 	bl	800cd1c <HAL_GetTick>
 8010260:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b01      	cmp	r3, #1
 801026c:	d002      	beq.n	8010274 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801026e:	2302      	movs	r3, #2
 8010270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010272:	e0ca      	b.n	801040a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d002      	beq.n	8010280 <HAL_SPI_Receive+0x7e>
 801027a:	88fb      	ldrh	r3, [r7, #6]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d102      	bne.n	8010286 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010284:	e0c1      	b.n	801040a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2204      	movs	r2, #4
 801028a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2200      	movs	r2, #0
 8010292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	88fa      	ldrh	r2, [r7, #6]
 801029e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	88fa      	ldrh	r2, [r7, #6]
 80102a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2200      	movs	r2, #0
 80102aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2200      	movs	r2, #0
 80102bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2200      	movs	r2, #0
 80102c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102cc:	d10f      	bne.n	80102ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80102dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80102ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102f8:	2b40      	cmp	r3, #64	; 0x40
 80102fa:	d007      	beq.n	801030c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801030a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d162      	bne.n	80103da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010314:	e02e      	b.n	8010374 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	f003 0301 	and.w	r3, r3, #1
 8010320:	2b01      	cmp	r3, #1
 8010322:	d115      	bne.n	8010350 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f103 020c 	add.w	r2, r3, #12
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010330:	7812      	ldrb	r2, [r2, #0]
 8010332:	b2d2      	uxtb	r2, r2
 8010334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801033a:	1c5a      	adds	r2, r3, #1
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010344:	b29b      	uxth	r3, r3
 8010346:	3b01      	subs	r3, #1
 8010348:	b29a      	uxth	r2, r3
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801034e:	e011      	b.n	8010374 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010350:	f7fc fce4 	bl	800cd1c <HAL_GetTick>
 8010354:	4602      	mov	r2, r0
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	429a      	cmp	r2, r3
 801035e:	d803      	bhi.n	8010368 <HAL_SPI_Receive+0x166>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010366:	d102      	bne.n	801036e <HAL_SPI_Receive+0x16c>
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801036e:	2303      	movs	r3, #3
 8010370:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010372:	e04a      	b.n	801040a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010378:	b29b      	uxth	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1cb      	bne.n	8010316 <HAL_SPI_Receive+0x114>
 801037e:	e031      	b.n	80103e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	689b      	ldr	r3, [r3, #8]
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b01      	cmp	r3, #1
 801038c:	d113      	bne.n	80103b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68da      	ldr	r2, [r3, #12]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010398:	b292      	uxth	r2, r2
 801039a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a0:	1c9a      	adds	r2, r3, #2
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	3b01      	subs	r3, #1
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80103b4:	e011      	b.n	80103da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80103b6:	f7fc fcb1 	bl	800cd1c <HAL_GetTick>
 80103ba:	4602      	mov	r2, r0
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	683a      	ldr	r2, [r7, #0]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d803      	bhi.n	80103ce <HAL_SPI_Receive+0x1cc>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103cc:	d102      	bne.n	80103d4 <HAL_SPI_Receive+0x1d2>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d102      	bne.n	80103da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80103d4:	2303      	movs	r3, #3
 80103d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80103d8:	e017      	b.n	801040a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103de:	b29b      	uxth	r3, r3
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1cd      	bne.n	8010380 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80103e4:	693a      	ldr	r2, [r7, #16]
 80103e6:	6839      	ldr	r1, [r7, #0]
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f000 fb63 	bl	8010ab4 <SPI_EndRxTransaction>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2220      	movs	r2, #32
 80103f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d002      	beq.n	8010408 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8010402:	2301      	movs	r3, #1
 8010404:	75fb      	strb	r3, [r7, #23]
 8010406:	e000      	b.n	801040a <HAL_SPI_Receive+0x208>
  }

error :
 8010408:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2201      	movs	r2, #1
 801040e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801041a:	7dfb      	ldrb	r3, [r7, #23]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08c      	sub	sp, #48	; 0x30
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010432:	2301      	movs	r3, #1
 8010434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010436:	2300      	movs	r3, #0
 8010438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010442:	2b01      	cmp	r3, #1
 8010444:	d101      	bne.n	801044a <HAL_SPI_TransmitReceive+0x26>
 8010446:	2302      	movs	r3, #2
 8010448:	e18a      	b.n	8010760 <HAL_SPI_TransmitReceive+0x33c>
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2201      	movs	r2, #1
 801044e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010452:	f7fc fc63 	bl	800cd1c <HAL_GetTick>
 8010456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801045e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010468:	887b      	ldrh	r3, [r7, #2]
 801046a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801046c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010470:	2b01      	cmp	r3, #1
 8010472:	d00f      	beq.n	8010494 <HAL_SPI_TransmitReceive+0x70>
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801047a:	d107      	bne.n	801048c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	689b      	ldr	r3, [r3, #8]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d103      	bne.n	801048c <HAL_SPI_TransmitReceive+0x68>
 8010484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010488:	2b04      	cmp	r3, #4
 801048a:	d003      	beq.n	8010494 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801048c:	2302      	movs	r3, #2
 801048e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010492:	e15b      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d005      	beq.n	80104a6 <HAL_SPI_TransmitReceive+0x82>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <HAL_SPI_TransmitReceive+0x82>
 80104a0:	887b      	ldrh	r3, [r7, #2]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d103      	bne.n	80104ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80104a6:	2301      	movs	r3, #1
 80104a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80104ac:	e14e      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	d003      	beq.n	80104c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2205      	movs	r2, #5
 80104be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2200      	movs	r2, #0
 80104c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	887a      	ldrh	r2, [r7, #2]
 80104d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	887a      	ldrh	r2, [r7, #2]
 80104d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	887a      	ldrh	r2, [r7, #2]
 80104e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	887a      	ldrh	r2, [r7, #2]
 80104ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2200      	movs	r2, #0
 80104f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010502:	2b40      	cmp	r3, #64	; 0x40
 8010504:	d007      	beq.n	8010516 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801051e:	d178      	bne.n	8010612 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d002      	beq.n	801052e <HAL_SPI_TransmitReceive+0x10a>
 8010528:	8b7b      	ldrh	r3, [r7, #26]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d166      	bne.n	80105fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010532:	881a      	ldrh	r2, [r3, #0]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053e:	1c9a      	adds	r2, r3, #2
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010548:	b29b      	uxth	r3, r3
 801054a:	3b01      	subs	r3, #1
 801054c:	b29a      	uxth	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010552:	e053      	b.n	80105fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	f003 0302 	and.w	r3, r3, #2
 801055e:	2b02      	cmp	r3, #2
 8010560:	d11b      	bne.n	801059a <HAL_SPI_TransmitReceive+0x176>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010566:	b29b      	uxth	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	d016      	beq.n	801059a <HAL_SPI_TransmitReceive+0x176>
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	2b01      	cmp	r3, #1
 8010570:	d113      	bne.n	801059a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010576:	881a      	ldrh	r2, [r3, #0]
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	1c9a      	adds	r2, r3, #2
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801058c:	b29b      	uxth	r3, r3
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010596:	2300      	movs	r3, #0
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d119      	bne.n	80105dc <HAL_SPI_TransmitReceive+0x1b8>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d014      	beq.n	80105dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68da      	ldr	r2, [r3, #12]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105bc:	b292      	uxth	r2, r2
 80105be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c4:	1c9a      	adds	r2, r3, #2
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80105d8:	2301      	movs	r3, #1
 80105da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80105dc:	f7fc fb9e 	bl	800cd1c <HAL_GetTick>
 80105e0:	4602      	mov	r2, r0
 80105e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d807      	bhi.n	80105fc <HAL_SPI_TransmitReceive+0x1d8>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d003      	beq.n	80105fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80105f4:	2303      	movs	r3, #3
 80105f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80105fa:	e0a7      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010600:	b29b      	uxth	r3, r3
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1a6      	bne.n	8010554 <HAL_SPI_TransmitReceive+0x130>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801060a:	b29b      	uxth	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1a1      	bne.n	8010554 <HAL_SPI_TransmitReceive+0x130>
 8010610:	e07c      	b.n	801070c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <HAL_SPI_TransmitReceive+0x1fc>
 801061a:	8b7b      	ldrh	r3, [r7, #26]
 801061c:	2b01      	cmp	r3, #1
 801061e:	d16b      	bne.n	80106f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	330c      	adds	r3, #12
 801062a:	7812      	ldrb	r2, [r2, #0]
 801062c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801063c:	b29b      	uxth	r3, r3
 801063e:	3b01      	subs	r3, #1
 8010640:	b29a      	uxth	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010646:	e057      	b.n	80106f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	689b      	ldr	r3, [r3, #8]
 801064e:	f003 0302 	and.w	r3, r3, #2
 8010652:	2b02      	cmp	r3, #2
 8010654:	d11c      	bne.n	8010690 <HAL_SPI_TransmitReceive+0x26c>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801065a:	b29b      	uxth	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d017      	beq.n	8010690 <HAL_SPI_TransmitReceive+0x26c>
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	2b01      	cmp	r3, #1
 8010664:	d114      	bne.n	8010690 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	330c      	adds	r3, #12
 8010670:	7812      	ldrb	r2, [r2, #0]
 8010672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010682:	b29b      	uxth	r3, r3
 8010684:	3b01      	subs	r3, #1
 8010686:	b29a      	uxth	r2, r3
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801068c:	2300      	movs	r3, #0
 801068e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	689b      	ldr	r3, [r3, #8]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b01      	cmp	r3, #1
 801069c:	d119      	bne.n	80106d2 <HAL_SPI_TransmitReceive+0x2ae>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d014      	beq.n	80106d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68da      	ldr	r2, [r3, #12]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b2:	b2d2      	uxtb	r2, r2
 80106b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	3b01      	subs	r3, #1
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80106ce:	2301      	movs	r3, #1
 80106d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80106d2:	f7fc fb23 	bl	800cd1c <HAL_GetTick>
 80106d6:	4602      	mov	r2, r0
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106de:	429a      	cmp	r2, r3
 80106e0:	d803      	bhi.n	80106ea <HAL_SPI_TransmitReceive+0x2c6>
 80106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e8:	d102      	bne.n	80106f0 <HAL_SPI_TransmitReceive+0x2cc>
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d103      	bne.n	80106f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80106f0:	2303      	movs	r3, #3
 80106f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80106f6:	e029      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1a2      	bne.n	8010648 <HAL_SPI_TransmitReceive+0x224>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010706:	b29b      	uxth	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d19d      	bne.n	8010648 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801070c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801070e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f000 fa35 	bl	8010b80 <SPI_EndRxTxTransaction>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d006      	beq.n	801072a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801071c:	2301      	movs	r3, #1
 801071e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2220      	movs	r2, #32
 8010726:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010728:	e010      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d10b      	bne.n	801074a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010732:	2300      	movs	r3, #0
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	617b      	str	r3, [r7, #20]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	617b      	str	r3, [r7, #20]
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	e000      	b.n	801074c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801074a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801075c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010760:	4618      	mov	r0, r3
 8010762:	3730      	adds	r7, #48	; 0x30
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b088      	sub	sp, #32
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	099b      	lsrs	r3, r3, #6
 8010784:	f003 0301 	and.w	r3, r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10f      	bne.n	80107ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00a      	beq.n	80107ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	099b      	lsrs	r3, r3, #6
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d004      	beq.n	80107ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	4798      	blx	r3
    return;
 80107aa:	e0d7      	b.n	801095c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	085b      	lsrs	r3, r3, #1
 80107b0:	f003 0301 	and.w	r3, r3, #1
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00a      	beq.n	80107ce <HAL_SPI_IRQHandler+0x66>
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	09db      	lsrs	r3, r3, #7
 80107bc:	f003 0301 	and.w	r3, r3, #1
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	4798      	blx	r3
    return;
 80107cc:	e0c6      	b.n	801095c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	095b      	lsrs	r3, r3, #5
 80107d2:	f003 0301 	and.w	r3, r3, #1
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d10c      	bne.n	80107f4 <HAL_SPI_IRQHandler+0x8c>
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	099b      	lsrs	r3, r3, #6
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d106      	bne.n	80107f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	0a1b      	lsrs	r3, r3, #8
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f000 80b4 	beq.w	801095c <HAL_SPI_IRQHandler+0x1f4>
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	095b      	lsrs	r3, r3, #5
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 80ad 	beq.w	801095c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	099b      	lsrs	r3, r3, #6
 8010806:	f003 0301 	and.w	r3, r3, #1
 801080a:	2b00      	cmp	r3, #0
 801080c:	d023      	beq.n	8010856 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b03      	cmp	r3, #3
 8010818:	d011      	beq.n	801083e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801081e:	f043 0204 	orr.w	r2, r3, #4
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010826:	2300      	movs	r3, #0
 8010828:	617b      	str	r3, [r7, #20]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	617b      	str	r3, [r7, #20]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	e00b      	b.n	8010856 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801083e:	2300      	movs	r3, #0
 8010840:	613b      	str	r3, [r7, #16]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	613b      	str	r3, [r7, #16]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	613b      	str	r3, [r7, #16]
 8010852:	693b      	ldr	r3, [r7, #16]
        return;
 8010854:	e082      	b.n	801095c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	095b      	lsrs	r3, r3, #5
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d014      	beq.n	801088c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010866:	f043 0201 	orr.w	r2, r3, #1
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	0a1b      	lsrs	r3, r3, #8
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00c      	beq.n	80108b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801089c:	f043 0208 	orr.w	r2, r3, #8
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80108a4:	2300      	movs	r3, #0
 80108a6:	60bb      	str	r3, [r7, #8]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	60bb      	str	r3, [r7, #8]
 80108b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d04f      	beq.n	801095a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80108c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	f003 0302 	and.w	r3, r3, #2
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <HAL_SPI_IRQHandler+0x17e>
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d034      	beq.n	8010950 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	685a      	ldr	r2, [r3, #4]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f022 0203 	bic.w	r2, r2, #3
 80108f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d011      	beq.n	8010922 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010902:	4a18      	ldr	r2, [pc, #96]	; (8010964 <HAL_SPI_IRQHandler+0x1fc>)
 8010904:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801090a:	4618      	mov	r0, r3
 801090c:	f7fd f898 	bl	800da40 <HAL_DMA_Abort_IT>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d005      	beq.n	8010922 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801091a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010926:	2b00      	cmp	r3, #0
 8010928:	d016      	beq.n	8010958 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801092e:	4a0d      	ldr	r2, [pc, #52]	; (8010964 <HAL_SPI_IRQHandler+0x1fc>)
 8010930:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010936:	4618      	mov	r0, r3
 8010938:	f7fd f882 	bl	800da40 <HAL_DMA_Abort_IT>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00a      	beq.n	8010958 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801094e:	e003      	b.n	8010958 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f809 	bl	8010968 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010956:	e000      	b.n	801095a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010958:	bf00      	nop
    return;
 801095a:	bf00      	nop
  }
}
 801095c:	3720      	adds	r7, #32
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	0801097d 	.word	0x0801097d

08010968 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010970:	bf00      	nop
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr

0801097c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010988:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2200      	movs	r2, #0
 801098e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2200      	movs	r2, #0
 8010994:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f7ff ffe6 	bl	8010968 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801099c:	bf00      	nop
 801099e:	3710      	adds	r7, #16
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b088      	sub	sp, #32
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	603b      	str	r3, [r7, #0]
 80109b0:	4613      	mov	r3, r2
 80109b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80109b4:	f7fc f9b2 	bl	800cd1c <HAL_GetTick>
 80109b8:	4602      	mov	r2, r0
 80109ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109bc:	1a9b      	subs	r3, r3, r2
 80109be:	683a      	ldr	r2, [r7, #0]
 80109c0:	4413      	add	r3, r2
 80109c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80109c4:	f7fc f9aa 	bl	800cd1c <HAL_GetTick>
 80109c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80109ca:	4b39      	ldr	r3, [pc, #228]	; (8010ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	015b      	lsls	r3, r3, #5
 80109d0:	0d1b      	lsrs	r3, r3, #20
 80109d2:	69fa      	ldr	r2, [r7, #28]
 80109d4:	fb02 f303 	mul.w	r3, r2, r3
 80109d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80109da:	e054      	b.n	8010a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e2:	d050      	beq.n	8010a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80109e4:	f7fc f99a 	bl	800cd1c <HAL_GetTick>
 80109e8:	4602      	mov	r2, r0
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	1ad3      	subs	r3, r2, r3
 80109ee:	69fa      	ldr	r2, [r7, #28]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d902      	bls.n	80109fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d13d      	bne.n	8010a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	685a      	ldr	r2, [r3, #4]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010a12:	d111      	bne.n	8010a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a1c:	d004      	beq.n	8010a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a26:	d107      	bne.n	8010a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a40:	d10f      	bne.n	8010a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2201      	movs	r2, #1
 8010a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010a72:	2303      	movs	r3, #3
 8010a74:	e017      	b.n	8010aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	3b01      	subs	r3, #1
 8010a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	689a      	ldr	r2, [r3, #8]
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	4013      	ands	r3, r2
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	bf0c      	ite	eq
 8010a96:	2301      	moveq	r3, #1
 8010a98:	2300      	movne	r3, #0
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	79fb      	ldrb	r3, [r7, #7]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d19b      	bne.n	80109dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000048 	.word	0x20000048

08010ab4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af02      	add	r7, sp, #8
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010ac8:	d111      	bne.n	8010aee <SPI_EndRxTransaction+0x3a>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ad2:	d004      	beq.n	8010ade <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010adc:	d107      	bne.n	8010aee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010aec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010af6:	d12a      	bne.n	8010b4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	689b      	ldr	r3, [r3, #8]
 8010afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b00:	d012      	beq.n	8010b28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	2180      	movs	r1, #128	; 0x80
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f7ff ff49 	bl	80109a4 <SPI_WaitFlagStateUntilTimeout>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d02d      	beq.n	8010b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b1c:	f043 0220 	orr.w	r2, r3, #32
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010b24:	2303      	movs	r3, #3
 8010b26:	e026      	b.n	8010b76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	2101      	movs	r1, #1
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7ff ff36 	bl	80109a4 <SPI_WaitFlagStateUntilTimeout>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d01a      	beq.n	8010b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b42:	f043 0220 	orr.w	r2, r3, #32
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	e013      	b.n	8010b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2200      	movs	r2, #0
 8010b56:	2101      	movs	r1, #1
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f7ff ff23 	bl	80109a4 <SPI_WaitFlagStateUntilTimeout>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d007      	beq.n	8010b74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b68:	f043 0220 	orr.w	r2, r3, #32
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010b70:	2303      	movs	r3, #3
 8010b72:	e000      	b.n	8010b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
	...

08010b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b088      	sub	sp, #32
 8010b84:	af02      	add	r7, sp, #8
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010b8c:	4b1b      	ldr	r3, [pc, #108]	; (8010bfc <SPI_EndRxTxTransaction+0x7c>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a1b      	ldr	r2, [pc, #108]	; (8010c00 <SPI_EndRxTxTransaction+0x80>)
 8010b92:	fba2 2303 	umull	r2, r3, r2, r3
 8010b96:	0d5b      	lsrs	r3, r3, #21
 8010b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010b9c:	fb02 f303 	mul.w	r3, r2, r3
 8010ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010baa:	d112      	bne.n	8010bd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	2180      	movs	r1, #128	; 0x80
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f7ff fef4 	bl	80109a4 <SPI_WaitFlagStateUntilTimeout>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d016      	beq.n	8010bf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc6:	f043 0220 	orr.w	r2, r3, #32
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010bce:	2303      	movs	r3, #3
 8010bd0:	e00f      	b.n	8010bf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00a      	beq.n	8010bee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010be8:	2b80      	cmp	r3, #128	; 0x80
 8010bea:	d0f2      	beq.n	8010bd2 <SPI_EndRxTxTransaction+0x52>
 8010bec:	e000      	b.n	8010bf0 <SPI_EndRxTxTransaction+0x70>
        break;
 8010bee:	bf00      	nop
  }

  return HAL_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3718      	adds	r7, #24
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	20000048 	.word	0x20000048
 8010c00:	165e9f81 	.word	0x165e9f81

08010c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d101      	bne.n	8010c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010c12:	2301      	movs	r3, #1
 8010c14:	e041      	b.n	8010c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d106      	bne.n	8010c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7fb fb52 	bl	800c2d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2202      	movs	r2, #2
 8010c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	3304      	adds	r3, #4
 8010c40:	4619      	mov	r1, r3
 8010c42:	4610      	mov	r0, r2
 8010c44:	f000 f9ce 	bl	8010fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
	...

08010ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d001      	beq.n	8010cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e04e      	b.n	8010d5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2202      	movs	r2, #2
 8010cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68da      	ldr	r2, [r3, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f042 0201 	orr.w	r2, r2, #1
 8010cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a23      	ldr	r2, [pc, #140]	; (8010d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d022      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ce6:	d01d      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a1f      	ldr	r2, [pc, #124]	; (8010d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d018      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a1e      	ldr	r2, [pc, #120]	; (8010d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d013      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a1c      	ldr	r2, [pc, #112]	; (8010d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d00e      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4a1b      	ldr	r2, [pc, #108]	; (8010d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d009      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a19      	ldr	r2, [pc, #100]	; (8010d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d004      	beq.n	8010d24 <HAL_TIM_Base_Start_IT+0x80>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4a18      	ldr	r2, [pc, #96]	; (8010d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d111      	bne.n	8010d48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	f003 0307 	and.w	r3, r3, #7
 8010d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b06      	cmp	r3, #6
 8010d34:	d010      	beq.n	8010d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f042 0201 	orr.w	r2, r2, #1
 8010d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d46:	e007      	b.n	8010d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f042 0201 	orr.w	r2, r2, #1
 8010d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	40010000 	.word	0x40010000
 8010d6c:	40000400 	.word	0x40000400
 8010d70:	40000800 	.word	0x40000800
 8010d74:	40000c00 	.word	0x40000c00
 8010d78:	40010400 	.word	0x40010400
 8010d7c:	40014000 	.word	0x40014000
 8010d80:	40001800 	.word	0x40001800

08010d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	f003 0302 	and.w	r3, r3, #2
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	d122      	bne.n	8010de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	68db      	ldr	r3, [r3, #12]
 8010da0:	f003 0302 	and.w	r3, r3, #2
 8010da4:	2b02      	cmp	r3, #2
 8010da6:	d11b      	bne.n	8010de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f06f 0202 	mvn.w	r2, #2
 8010db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2201      	movs	r2, #1
 8010db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	699b      	ldr	r3, [r3, #24]
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d003      	beq.n	8010dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f8ee 	bl	8010fa8 <HAL_TIM_IC_CaptureCallback>
 8010dcc:	e005      	b.n	8010dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 f8e0 	bl	8010f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f8f1 	bl	8010fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	2b04      	cmp	r3, #4
 8010dec:	d122      	bne.n	8010e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	2b04      	cmp	r3, #4
 8010dfa:	d11b      	bne.n	8010e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f06f 0204 	mvn.w	r2, #4
 8010e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2202      	movs	r2, #2
 8010e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	699b      	ldr	r3, [r3, #24]
 8010e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d003      	beq.n	8010e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f8c4 	bl	8010fa8 <HAL_TIM_IC_CaptureCallback>
 8010e20:	e005      	b.n	8010e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f8b6 	bl	8010f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 f8c7 	bl	8010fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	691b      	ldr	r3, [r3, #16]
 8010e3a:	f003 0308 	and.w	r3, r3, #8
 8010e3e:	2b08      	cmp	r3, #8
 8010e40:	d122      	bne.n	8010e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	f003 0308 	and.w	r3, r3, #8
 8010e4c:	2b08      	cmp	r3, #8
 8010e4e:	d11b      	bne.n	8010e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f06f 0208 	mvn.w	r2, #8
 8010e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2204      	movs	r2, #4
 8010e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	69db      	ldr	r3, [r3, #28]
 8010e66:	f003 0303 	and.w	r3, r3, #3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d003      	beq.n	8010e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f89a 	bl	8010fa8 <HAL_TIM_IC_CaptureCallback>
 8010e74:	e005      	b.n	8010e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 f88c 	bl	8010f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 f89d 	bl	8010fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	f003 0310 	and.w	r3, r3, #16
 8010e92:	2b10      	cmp	r3, #16
 8010e94:	d122      	bne.n	8010edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	f003 0310 	and.w	r3, r3, #16
 8010ea0:	2b10      	cmp	r3, #16
 8010ea2:	d11b      	bne.n	8010edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f06f 0210 	mvn.w	r2, #16
 8010eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2208      	movs	r2, #8
 8010eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d003      	beq.n	8010eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 f870 	bl	8010fa8 <HAL_TIM_IC_CaptureCallback>
 8010ec8:	e005      	b.n	8010ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f862 	bl	8010f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 f873 	bl	8010fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	691b      	ldr	r3, [r3, #16]
 8010ee2:	f003 0301 	and.w	r3, r3, #1
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d10e      	bne.n	8010f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	f003 0301 	and.w	r3, r3, #1
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d107      	bne.n	8010f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f06f 0201 	mvn.w	r2, #1
 8010f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7f9 fcc4 	bl	800a890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f12:	2b80      	cmp	r3, #128	; 0x80
 8010f14:	d10e      	bne.n	8010f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f20:	2b80      	cmp	r3, #128	; 0x80
 8010f22:	d107      	bne.n	8010f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f97e 	bl	8011230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f3e:	2b40      	cmp	r3, #64	; 0x40
 8010f40:	d10e      	bne.n	8010f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f4c:	2b40      	cmp	r3, #64	; 0x40
 8010f4e:	d107      	bne.n	8010f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f838 	bl	8010fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	f003 0320 	and.w	r3, r3, #32
 8010f6a:	2b20      	cmp	r3, #32
 8010f6c:	d10e      	bne.n	8010f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	f003 0320 	and.w	r3, r3, #32
 8010f78:	2b20      	cmp	r3, #32
 8010f7a:	d107      	bne.n	8010f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	f06f 0220 	mvn.w	r2, #32
 8010f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 f948 	bl	801121c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010f9c:	bf00      	nop
 8010f9e:	370c      	adds	r7, #12
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr

08010fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010fb0:	bf00      	nop
 8010fb2:	370c      	adds	r7, #12
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010fd8:	bf00      	nop
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	4a40      	ldr	r2, [pc, #256]	; (80110f8 <TIM_Base_SetConfig+0x114>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d013      	beq.n	8011024 <TIM_Base_SetConfig+0x40>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011002:	d00f      	beq.n	8011024 <TIM_Base_SetConfig+0x40>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4a3d      	ldr	r2, [pc, #244]	; (80110fc <TIM_Base_SetConfig+0x118>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d00b      	beq.n	8011024 <TIM_Base_SetConfig+0x40>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a3c      	ldr	r2, [pc, #240]	; (8011100 <TIM_Base_SetConfig+0x11c>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d007      	beq.n	8011024 <TIM_Base_SetConfig+0x40>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a3b      	ldr	r2, [pc, #236]	; (8011104 <TIM_Base_SetConfig+0x120>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d003      	beq.n	8011024 <TIM_Base_SetConfig+0x40>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a3a      	ldr	r2, [pc, #232]	; (8011108 <TIM_Base_SetConfig+0x124>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d108      	bne.n	8011036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801102a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	4313      	orrs	r3, r2
 8011034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4a2f      	ldr	r2, [pc, #188]	; (80110f8 <TIM_Base_SetConfig+0x114>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d02b      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011044:	d027      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4a2c      	ldr	r2, [pc, #176]	; (80110fc <TIM_Base_SetConfig+0x118>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d023      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4a2b      	ldr	r2, [pc, #172]	; (8011100 <TIM_Base_SetConfig+0x11c>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d01f      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4a2a      	ldr	r2, [pc, #168]	; (8011104 <TIM_Base_SetConfig+0x120>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d01b      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4a29      	ldr	r2, [pc, #164]	; (8011108 <TIM_Base_SetConfig+0x124>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d017      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4a28      	ldr	r2, [pc, #160]	; (801110c <TIM_Base_SetConfig+0x128>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d013      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4a27      	ldr	r2, [pc, #156]	; (8011110 <TIM_Base_SetConfig+0x12c>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d00f      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4a26      	ldr	r2, [pc, #152]	; (8011114 <TIM_Base_SetConfig+0x130>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d00b      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	4a25      	ldr	r2, [pc, #148]	; (8011118 <TIM_Base_SetConfig+0x134>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d007      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4a24      	ldr	r2, [pc, #144]	; (801111c <TIM_Base_SetConfig+0x138>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d003      	beq.n	8011096 <TIM_Base_SetConfig+0xb2>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4a23      	ldr	r2, [pc, #140]	; (8011120 <TIM_Base_SetConfig+0x13c>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d108      	bne.n	80110a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801109c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	4313      	orrs	r3, r2
 80110a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	689a      	ldr	r2, [r3, #8]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	4a0a      	ldr	r2, [pc, #40]	; (80110f8 <TIM_Base_SetConfig+0x114>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d003      	beq.n	80110dc <TIM_Base_SetConfig+0xf8>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4a0c      	ldr	r2, [pc, #48]	; (8011108 <TIM_Base_SetConfig+0x124>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d103      	bne.n	80110e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	691a      	ldr	r2, [r3, #16]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2201      	movs	r2, #1
 80110e8:	615a      	str	r2, [r3, #20]
}
 80110ea:	bf00      	nop
 80110ec:	3714      	adds	r7, #20
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop
 80110f8:	40010000 	.word	0x40010000
 80110fc:	40000400 	.word	0x40000400
 8011100:	40000800 	.word	0x40000800
 8011104:	40000c00 	.word	0x40000c00
 8011108:	40010400 	.word	0x40010400
 801110c:	40014000 	.word	0x40014000
 8011110:	40014400 	.word	0x40014400
 8011114:	40014800 	.word	0x40014800
 8011118:	40001800 	.word	0x40001800
 801111c:	40001c00 	.word	0x40001c00
 8011120:	40002000 	.word	0x40002000

08011124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011134:	2b01      	cmp	r3, #1
 8011136:	d101      	bne.n	801113c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011138:	2302      	movs	r3, #2
 801113a:	e05a      	b.n	80111f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2201      	movs	r2, #1
 8011140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2202      	movs	r2, #2
 8011148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	4313      	orrs	r3, r2
 801116c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	68fa      	ldr	r2, [r7, #12]
 8011174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	4a21      	ldr	r2, [pc, #132]	; (8011200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d022      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011188:	d01d      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4a1d      	ldr	r2, [pc, #116]	; (8011204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d018      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4a1b      	ldr	r2, [pc, #108]	; (8011208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d013      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4a1a      	ldr	r2, [pc, #104]	; (801120c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d00e      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4a18      	ldr	r2, [pc, #96]	; (8011210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d009      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	4a17      	ldr	r2, [pc, #92]	; (8011214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d004      	beq.n	80111c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a15      	ldr	r2, [pc, #84]	; (8011218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d10c      	bne.n	80111e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80111cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2201      	movs	r2, #1
 80111e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3714      	adds	r7, #20
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	40010000 	.word	0x40010000
 8011204:	40000400 	.word	0x40000400
 8011208:	40000800 	.word	0x40000800
 801120c:	40000c00 	.word	0x40000c00
 8011210:	40010400 	.word	0x40010400
 8011214:	40014000 	.word	0x40014000
 8011218:	40001800 	.word	0x40001800

0801121c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011224:	bf00      	nop
 8011226:	370c      	adds	r7, #12
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr

08011230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011230:	b480      	push	{r7}
 8011232:	b083      	sub	sp, #12
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011238:	bf00      	nop
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	e03f      	b.n	80112d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801125c:	b2db      	uxtb	r3, r3
 801125e:	2b00      	cmp	r3, #0
 8011260:	d106      	bne.n	8011270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7fb f9dc 	bl	800c628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2224      	movs	r2, #36	; 0x24
 8011274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f001 f869 	bl	8012360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801129c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	695a      	ldr	r2, [r3, #20]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80112ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	68da      	ldr	r2, [r3, #12]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80112bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2220      	movs	r2, #32
 80112c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2220      	movs	r2, #32
 80112d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80112d4:	2300      	movs	r3, #0
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3708      	adds	r7, #8
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b08a      	sub	sp, #40	; 0x28
 80112e2:	af02      	add	r7, sp, #8
 80112e4:	60f8      	str	r0, [r7, #12]
 80112e6:	60b9      	str	r1, [r7, #8]
 80112e8:	603b      	str	r3, [r7, #0]
 80112ea:	4613      	mov	r3, r2
 80112ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80112ee:	2300      	movs	r3, #0
 80112f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	2b20      	cmp	r3, #32
 80112fc:	d17c      	bne.n	80113f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <HAL_UART_Transmit+0x2c>
 8011304:	88fb      	ldrh	r3, [r7, #6]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d101      	bne.n	801130e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801130a:	2301      	movs	r3, #1
 801130c:	e075      	b.n	80113fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011314:	2b01      	cmp	r3, #1
 8011316:	d101      	bne.n	801131c <HAL_UART_Transmit+0x3e>
 8011318:	2302      	movs	r3, #2
 801131a:	e06e      	b.n	80113fa <HAL_UART_Transmit+0x11c>
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2201      	movs	r2, #1
 8011320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2221      	movs	r2, #33	; 0x21
 801132e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011332:	f7fb fcf3 	bl	800cd1c <HAL_GetTick>
 8011336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	88fa      	ldrh	r2, [r7, #6]
 801133c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	88fa      	ldrh	r2, [r7, #6]
 8011342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801134c:	d108      	bne.n	8011360 <HAL_UART_Transmit+0x82>
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	691b      	ldr	r3, [r3, #16]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d104      	bne.n	8011360 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011356:	2300      	movs	r3, #0
 8011358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	61bb      	str	r3, [r7, #24]
 801135e:	e003      	b.n	8011368 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011364:	2300      	movs	r3, #0
 8011366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011370:	e02a      	b.n	80113c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2200      	movs	r2, #0
 801137a:	2180      	movs	r1, #128	; 0x80
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f000 fd25 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011388:	2303      	movs	r3, #3
 801138a:	e036      	b.n	80113fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10b      	bne.n	80113aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80113a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	3302      	adds	r3, #2
 80113a6:	61bb      	str	r3, [r7, #24]
 80113a8:	e007      	b.n	80113ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	781a      	ldrb	r2, [r3, #0]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	3301      	adds	r3, #1
 80113b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80113be:	b29b      	uxth	r3, r3
 80113c0:	3b01      	subs	r3, #1
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d1cf      	bne.n	8011372 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	2200      	movs	r2, #0
 80113da:	2140      	movs	r1, #64	; 0x40
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 fcf5 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80113e8:	2303      	movs	r3, #3
 80113ea:	e006      	b.n	80113fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2220      	movs	r2, #32
 80113f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80113f4:	2300      	movs	r3, #0
 80113f6:	e000      	b.n	80113fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80113f8:	2302      	movs	r3, #2
  }
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3720      	adds	r7, #32
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b08a      	sub	sp, #40	; 0x28
 8011406:	af02      	add	r7, sp, #8
 8011408:	60f8      	str	r0, [r7, #12]
 801140a:	60b9      	str	r1, [r7, #8]
 801140c:	603b      	str	r3, [r7, #0]
 801140e:	4613      	mov	r3, r2
 8011410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011412:	2300      	movs	r3, #0
 8011414:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b20      	cmp	r3, #32
 8011420:	f040 808c 	bne.w	801153c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <HAL_UART_Receive+0x2e>
 801142a:	88fb      	ldrh	r3, [r7, #6]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d101      	bne.n	8011434 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8011430:	2301      	movs	r3, #1
 8011432:	e084      	b.n	801153e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801143a:	2b01      	cmp	r3, #1
 801143c:	d101      	bne.n	8011442 <HAL_UART_Receive+0x40>
 801143e:	2302      	movs	r3, #2
 8011440:	e07d      	b.n	801153e <HAL_UART_Receive+0x13c>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2201      	movs	r2, #1
 8011446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2200      	movs	r2, #0
 801144e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2222      	movs	r2, #34	; 0x22
 8011454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801145e:	f7fb fc5d 	bl	800cd1c <HAL_GetTick>
 8011462:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	88fa      	ldrh	r2, [r7, #6]
 8011468:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	88fa      	ldrh	r2, [r7, #6]
 801146e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011478:	d108      	bne.n	801148c <HAL_UART_Receive+0x8a>
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d104      	bne.n	801148c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8011482:	2300      	movs	r3, #0
 8011484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	61bb      	str	r3, [r7, #24]
 801148a:	e003      	b.n	8011494 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011490:	2300      	movs	r3, #0
 8011492:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801149c:	e043      	b.n	8011526 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	2200      	movs	r2, #0
 80114a6:	2120      	movs	r1, #32
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f000 fc8f 	bl	8011dcc <UART_WaitOnFlagUntilTimeout>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d001      	beq.n	80114b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80114b4:	2303      	movs	r3, #3
 80114b6:	e042      	b.n	801153e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10c      	bne.n	80114d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	3302      	adds	r3, #2
 80114d4:	61bb      	str	r3, [r7, #24]
 80114d6:	e01f      	b.n	8011518 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114e0:	d007      	beq.n	80114f2 <HAL_UART_Receive+0xf0>
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10a      	bne.n	8011500 <HAL_UART_Receive+0xfe>
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d106      	bne.n	8011500 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	e008      	b.n	8011512 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	b2db      	uxtb	r3, r3
 8011508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801150c:	b2da      	uxtb	r2, r3
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	3301      	adds	r3, #1
 8011516:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801151c:	b29b      	uxth	r3, r3
 801151e:	3b01      	subs	r3, #1
 8011520:	b29a      	uxth	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801152a:	b29b      	uxth	r3, r3
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1b6      	bne.n	801149e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2220      	movs	r2, #32
 8011534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8011538:	2300      	movs	r3, #0
 801153a:	e000      	b.n	801153e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 801153c:	2302      	movs	r3, #2
  }
}
 801153e:	4618      	mov	r0, r3
 8011540:	3720      	adds	r7, #32
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011546:	b480      	push	{r7}
 8011548:	b085      	sub	sp, #20
 801154a:	af00      	add	r7, sp, #0
 801154c:	60f8      	str	r0, [r7, #12]
 801154e:	60b9      	str	r1, [r7, #8]
 8011550:	4613      	mov	r3, r2
 8011552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801155a:	b2db      	uxtb	r3, r3
 801155c:	2b20      	cmp	r3, #32
 801155e:	d130      	bne.n	80115c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d002      	beq.n	801156c <HAL_UART_Transmit_IT+0x26>
 8011566:	88fb      	ldrh	r3, [r7, #6]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d101      	bne.n	8011570 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801156c:	2301      	movs	r3, #1
 801156e:	e029      	b.n	80115c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011576:	2b01      	cmp	r3, #1
 8011578:	d101      	bne.n	801157e <HAL_UART_Transmit_IT+0x38>
 801157a:	2302      	movs	r3, #2
 801157c:	e022      	b.n	80115c4 <HAL_UART_Transmit_IT+0x7e>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2201      	movs	r2, #1
 8011582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	88fa      	ldrh	r2, [r7, #6]
 8011590:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	88fa      	ldrh	r2, [r7, #6]
 8011596:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2221      	movs	r2, #33	; 0x21
 80115a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	68da      	ldr	r2, [r3, #12]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80115bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80115be:	2300      	movs	r3, #0
 80115c0:	e000      	b.n	80115c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80115c2:	2302      	movs	r3, #2
  }
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3714      	adds	r7, #20
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4613      	mov	r3, r2
 80115dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d11d      	bne.n	8011626 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d002      	beq.n	80115f6 <HAL_UART_Receive_DMA+0x26>
 80115f0:	88fb      	ldrh	r3, [r7, #6]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d101      	bne.n	80115fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80115f6:	2301      	movs	r3, #1
 80115f8:	e016      	b.n	8011628 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011600:	2b01      	cmp	r3, #1
 8011602:	d101      	bne.n	8011608 <HAL_UART_Receive_DMA+0x38>
 8011604:	2302      	movs	r3, #2
 8011606:	e00f      	b.n	8011628 <HAL_UART_Receive_DMA+0x58>
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2201      	movs	r2, #1
 801160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2200      	movs	r2, #0
 8011614:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011616:	88fb      	ldrh	r3, [r7, #6]
 8011618:	461a      	mov	r2, r3
 801161a:	68b9      	ldr	r1, [r7, #8]
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f000 fc43 	bl	8011ea8 <UART_Start_Receive_DMA>
 8011622:	4603      	mov	r3, r0
 8011624:	e000      	b.n	8011628 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011626:	2302      	movs	r3, #2
  }
}
 8011628:	4618      	mov	r0, r3
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b0ba      	sub	sp, #232	; 0xe8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	695b      	ldr	r3, [r3, #20]
 8011652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011656:	2300      	movs	r3, #0
 8011658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801165c:	2300      	movs	r3, #0
 801165e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011666:	f003 030f 	and.w	r3, r3, #15
 801166a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801166e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011672:	2b00      	cmp	r3, #0
 8011674:	d10f      	bne.n	8011696 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801167a:	f003 0320 	and.w	r3, r3, #32
 801167e:	2b00      	cmp	r3, #0
 8011680:	d009      	beq.n	8011696 <HAL_UART_IRQHandler+0x66>
 8011682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011686:	f003 0320 	and.w	r3, r3, #32
 801168a:	2b00      	cmp	r3, #0
 801168c:	d003      	beq.n	8011696 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f000 fdab 	bl	80121ea <UART_Receive_IT>
      return;
 8011694:	e256      	b.n	8011b44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8011696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 80de 	beq.w	801185c <HAL_UART_IRQHandler+0x22c>
 80116a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80116a4:	f003 0301 	and.w	r3, r3, #1
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d106      	bne.n	80116ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80116ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f000 80d1 	beq.w	801185c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80116ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116be:	f003 0301 	and.w	r3, r3, #1
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00b      	beq.n	80116de <HAL_UART_IRQHandler+0xae>
 80116c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d005      	beq.n	80116de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d6:	f043 0201 	orr.w	r2, r3, #1
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80116de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116e2:	f003 0304 	and.w	r3, r3, #4
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00b      	beq.n	8011702 <HAL_UART_IRQHandler+0xd2>
 80116ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80116ee:	f003 0301 	and.w	r3, r3, #1
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d005      	beq.n	8011702 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116fa:	f043 0202 	orr.w	r2, r3, #2
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011706:	f003 0302 	and.w	r3, r3, #2
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00b      	beq.n	8011726 <HAL_UART_IRQHandler+0xf6>
 801170e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011712:	f003 0301 	and.w	r3, r3, #1
 8011716:	2b00      	cmp	r3, #0
 8011718:	d005      	beq.n	8011726 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801171e:	f043 0204 	orr.w	r2, r3, #4
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801172a:	f003 0308 	and.w	r3, r3, #8
 801172e:	2b00      	cmp	r3, #0
 8011730:	d011      	beq.n	8011756 <HAL_UART_IRQHandler+0x126>
 8011732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011736:	f003 0320 	and.w	r3, r3, #32
 801173a:	2b00      	cmp	r3, #0
 801173c:	d105      	bne.n	801174a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801173e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011742:	f003 0301 	and.w	r3, r3, #1
 8011746:	2b00      	cmp	r3, #0
 8011748:	d005      	beq.n	8011756 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801174e:	f043 0208 	orr.w	r2, r3, #8
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175a:	2b00      	cmp	r3, #0
 801175c:	f000 81ed 	beq.w	8011b3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011764:	f003 0320 	and.w	r3, r3, #32
 8011768:	2b00      	cmp	r3, #0
 801176a:	d008      	beq.n	801177e <HAL_UART_IRQHandler+0x14e>
 801176c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011770:	f003 0320 	and.w	r3, r3, #32
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 fd36 	bl	80121ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011788:	2b40      	cmp	r3, #64	; 0x40
 801178a:	bf0c      	ite	eq
 801178c:	2301      	moveq	r3, #1
 801178e:	2300      	movne	r3, #0
 8011790:	b2db      	uxtb	r3, r3
 8011792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801179a:	f003 0308 	and.w	r3, r3, #8
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d103      	bne.n	80117aa <HAL_UART_IRQHandler+0x17a>
 80117a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d04f      	beq.n	801184a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fc3e 	bl	801202c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	695b      	ldr	r3, [r3, #20]
 80117b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117ba:	2b40      	cmp	r3, #64	; 0x40
 80117bc:	d141      	bne.n	8011842 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	3314      	adds	r3, #20
 80117c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80117cc:	e853 3f00 	ldrex	r3, [r3]
 80117d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80117d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3314      	adds	r3, #20
 80117e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80117ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80117ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80117f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80117fa:	e841 2300 	strex	r3, r2, [r1]
 80117fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1d9      	bne.n	80117be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801180e:	2b00      	cmp	r3, #0
 8011810:	d013      	beq.n	801183a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011816:	4a7d      	ldr	r2, [pc, #500]	; (8011a0c <HAL_UART_IRQHandler+0x3dc>)
 8011818:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801181e:	4618      	mov	r0, r3
 8011820:	f7fc f90e 	bl	800da40 <HAL_DMA_Abort_IT>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d016      	beq.n	8011858 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801182e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011834:	4610      	mov	r0, r2
 8011836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011838:	e00e      	b.n	8011858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f99a 	bl	8011b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011840:	e00a      	b.n	8011858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f996 	bl	8011b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011848:	e006      	b.n	8011858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f992 	bl	8011b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011856:	e170      	b.n	8011b3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011858:	bf00      	nop
    return;
 801185a:	e16e      	b.n	8011b3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011860:	2b01      	cmp	r3, #1
 8011862:	f040 814a 	bne.w	8011afa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801186a:	f003 0310 	and.w	r3, r3, #16
 801186e:	2b00      	cmp	r3, #0
 8011870:	f000 8143 	beq.w	8011afa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b00      	cmp	r3, #0
 801187e:	f000 813c 	beq.w	8011afa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011882:	2300      	movs	r3, #0
 8011884:	60bb      	str	r3, [r7, #8]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	60bb      	str	r3, [r7, #8]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	60bb      	str	r3, [r7, #8]
 8011896:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	695b      	ldr	r3, [r3, #20]
 801189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118a2:	2b40      	cmp	r3, #64	; 0x40
 80118a4:	f040 80b4 	bne.w	8011a10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80118b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 8140 	beq.w	8011b3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80118c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80118c6:	429a      	cmp	r2, r3
 80118c8:	f080 8139 	bcs.w	8011b3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80118d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d8:	69db      	ldr	r3, [r3, #28]
 80118da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118de:	f000 8088 	beq.w	80119f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	330c      	adds	r3, #12
 80118e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80118f0:	e853 3f00 	ldrex	r3, [r3]
 80118f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80118f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	330c      	adds	r3, #12
 801190a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801190e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801191a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801191e:	e841 2300 	strex	r3, r2, [r1]
 8011922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1d9      	bne.n	80118e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3314      	adds	r3, #20
 8011934:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011938:	e853 3f00 	ldrex	r3, [r3]
 801193c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801193e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011940:	f023 0301 	bic.w	r3, r3, #1
 8011944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	3314      	adds	r3, #20
 801194e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011952:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011956:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011958:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801195a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801195e:	e841 2300 	strex	r3, r2, [r1]
 8011962:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011966:	2b00      	cmp	r3, #0
 8011968:	d1e1      	bne.n	801192e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	3314      	adds	r3, #20
 8011970:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011974:	e853 3f00 	ldrex	r3, [r3]
 8011978:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801197a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801197c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	3314      	adds	r3, #20
 801198a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801198e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011990:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011994:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011996:	e841 2300 	strex	r3, r2, [r1]
 801199a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801199c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1e3      	bne.n	801196a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2220      	movs	r2, #32
 80119a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2200      	movs	r2, #0
 80119ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	330c      	adds	r3, #12
 80119b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ba:	e853 3f00 	ldrex	r3, [r3]
 80119be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80119c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119c2:	f023 0310 	bic.w	r3, r3, #16
 80119c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	330c      	adds	r3, #12
 80119d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80119d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80119d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80119dc:	e841 2300 	strex	r3, r2, [r1]
 80119e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80119e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1e3      	bne.n	80119b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fb ffb7 	bl	800d960 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	1ad3      	subs	r3, r2, r3
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	4619      	mov	r1, r3
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f8c0 	bl	8011b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011a08:	e099      	b.n	8011b3e <HAL_UART_IRQHandler+0x50e>
 8011a0a:	bf00      	nop
 8011a0c:	080120f3 	.word	0x080120f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 808b 	beq.w	8011b42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011a2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 8086 	beq.w	8011b42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	330c      	adds	r3, #12
 8011a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a40:	e853 3f00 	ldrex	r3, [r3]
 8011a44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	330c      	adds	r3, #12
 8011a56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011a5a:	647a      	str	r2, [r7, #68]	; 0x44
 8011a5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a62:	e841 2300 	strex	r3, r2, [r1]
 8011a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1e3      	bne.n	8011a36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	3314      	adds	r3, #20
 8011a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a78:	e853 3f00 	ldrex	r3, [r3]
 8011a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8011a7e:	6a3b      	ldr	r3, [r7, #32]
 8011a80:	f023 0301 	bic.w	r3, r3, #1
 8011a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	3314      	adds	r3, #20
 8011a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011a92:	633a      	str	r2, [r7, #48]	; 0x30
 8011a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a9a:	e841 2300 	strex	r3, r2, [r1]
 8011a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1e3      	bne.n	8011a6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2220      	movs	r2, #32
 8011aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	330c      	adds	r3, #12
 8011aba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	e853 3f00 	ldrex	r3, [r3]
 8011ac2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f023 0310 	bic.w	r3, r3, #16
 8011aca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	330c      	adds	r3, #12
 8011ad4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011ad8:	61fa      	str	r2, [r7, #28]
 8011ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011adc:	69b9      	ldr	r1, [r7, #24]
 8011ade:	69fa      	ldr	r2, [r7, #28]
 8011ae0:	e841 2300 	strex	r3, r2, [r1]
 8011ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d1e3      	bne.n	8011ab4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011af0:	4619      	mov	r1, r3
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 f848 	bl	8011b88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011af8:	e023      	b.n	8011b42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d009      	beq.n	8011b1a <HAL_UART_IRQHandler+0x4ea>
 8011b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d003      	beq.n	8011b1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fb01 	bl	801211a <UART_Transmit_IT>
    return;
 8011b18:	e014      	b.n	8011b44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00e      	beq.n	8011b44 <HAL_UART_IRQHandler+0x514>
 8011b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d008      	beq.n	8011b44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fb41 	bl	80121ba <UART_EndTransmit_IT>
    return;
 8011b38:	e004      	b.n	8011b44 <HAL_UART_IRQHandler+0x514>
    return;
 8011b3a:	bf00      	nop
 8011b3c:	e002      	b.n	8011b44 <HAL_UART_IRQHandler+0x514>
      return;
 8011b3e:	bf00      	nop
 8011b40:	e000      	b.n	8011b44 <HAL_UART_IRQHandler+0x514>
      return;
 8011b42:	bf00      	nop
  }
}
 8011b44:	37e8      	adds	r7, #232	; 0xe8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop

08011b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011b54:	bf00      	nop
 8011b56:	370c      	adds	r7, #12
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011b68:	bf00      	nop
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr

08011b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011b7c:	bf00      	nop
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	460b      	mov	r3, r1
 8011b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	60fb      	str	r3, [r7, #12]
 8011bac:	2300      	movs	r3, #0
 8011bae:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011bc0:	b2db      	uxtb	r3, r3
 8011bc2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	b2da      	uxtb	r2, r3
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	b2db      	uxtb	r3, r3
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	b2db      	uxtb	r3, r3
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3714      	adds	r7, #20
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr

08011bdc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b09c      	sub	sp, #112	; 0x70
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d172      	bne.n	8011cde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8011bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	330c      	adds	r3, #12
 8011c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c08:	e853 3f00 	ldrex	r3, [r3]
 8011c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	330c      	adds	r3, #12
 8011c1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8011c20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c26:	e841 2300 	strex	r3, r2, [r1]
 8011c2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d1e5      	bne.n	8011bfe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	3314      	adds	r3, #20
 8011c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3c:	e853 3f00 	ldrex	r3, [r3]
 8011c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c44:	f023 0301 	bic.w	r3, r3, #1
 8011c48:	667b      	str	r3, [r7, #100]	; 0x64
 8011c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	3314      	adds	r3, #20
 8011c50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c52:	647a      	str	r2, [r7, #68]	; 0x44
 8011c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c5a:	e841 2300 	strex	r3, r2, [r1]
 8011c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1e5      	bne.n	8011c32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	3314      	adds	r3, #20
 8011c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c70:	e853 3f00 	ldrex	r3, [r3]
 8011c74:	623b      	str	r3, [r7, #32]
   return(result);
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8011c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3314      	adds	r3, #20
 8011c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c86:	633a      	str	r2, [r7, #48]	; 0x30
 8011c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c8e:	e841 2300 	strex	r3, r2, [r1]
 8011c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1e5      	bne.n	8011c66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c9c:	2220      	movs	r2, #32
 8011c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d119      	bne.n	8011cde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	330c      	adds	r3, #12
 8011cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	e853 3f00 	ldrex	r3, [r3]
 8011cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f023 0310 	bic.w	r3, r3, #16
 8011cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	330c      	adds	r3, #12
 8011cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011cca:	61fa      	str	r2, [r7, #28]
 8011ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cce:	69b9      	ldr	r1, [r7, #24]
 8011cd0:	69fa      	ldr	r2, [r7, #28]
 8011cd2:	e841 2300 	strex	r3, r2, [r1]
 8011cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d1e5      	bne.n	8011caa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d106      	bne.n	8011cf4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011cea:	4619      	mov	r1, r3
 8011cec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011cee:	f7ff ff4b 	bl	8011b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cf2:	e002      	b.n	8011cfa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8011cf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011cf6:	f7f8 fe6d 	bl	800a9d4 <HAL_UART_RxCpltCallback>
}
 8011cfa:	bf00      	nop
 8011cfc:	3770      	adds	r7, #112	; 0x70
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d108      	bne.n	8011d2a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011d1c:	085b      	lsrs	r3, r3, #1
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	4619      	mov	r1, r3
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f7ff ff30 	bl	8011b88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d28:	e002      	b.n	8011d30 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f7ff ff18 	bl	8011b60 <HAL_UART_RxHalfCpltCallback>
}
 8011d30:	bf00      	nop
 8011d32:	3710      	adds	r7, #16
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011d40:	2300      	movs	r3, #0
 8011d42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	695b      	ldr	r3, [r3, #20]
 8011d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d54:	2b80      	cmp	r3, #128	; 0x80
 8011d56:	bf0c      	ite	eq
 8011d58:	2301      	moveq	r3, #1
 8011d5a:	2300      	movne	r3, #0
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	2b21      	cmp	r3, #33	; 0x21
 8011d6a:	d108      	bne.n	8011d7e <UART_DMAError+0x46>
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d005      	beq.n	8011d7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	2200      	movs	r2, #0
 8011d76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011d78:	68b8      	ldr	r0, [r7, #8]
 8011d7a:	f000 f92f 	bl	8011fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	695b      	ldr	r3, [r3, #20]
 8011d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d88:	2b40      	cmp	r3, #64	; 0x40
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2301      	moveq	r3, #1
 8011d8e:	2300      	movne	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	2b22      	cmp	r3, #34	; 0x22
 8011d9e:	d108      	bne.n	8011db2 <UART_DMAError+0x7a>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2200      	movs	r2, #0
 8011daa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011dac:	68b8      	ldr	r0, [r7, #8]
 8011dae:	f000 f93d 	bl	801202c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011db6:	f043 0210 	orr.w	r2, r3, #16
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011dbe:	68b8      	ldr	r0, [r7, #8]
 8011dc0:	f7ff fed8 	bl	8011b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dc4:	bf00      	nop
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b090      	sub	sp, #64	; 0x40
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	603b      	str	r3, [r7, #0]
 8011dd8:	4613      	mov	r3, r2
 8011dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ddc:	e050      	b.n	8011e80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de4:	d04c      	beq.n	8011e80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d007      	beq.n	8011dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8011dec:	f7fa ff96 	bl	800cd1c <HAL_GetTick>
 8011df0:	4602      	mov	r2, r0
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d241      	bcs.n	8011e80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	330c      	adds	r3, #12
 8011e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e06:	e853 3f00 	ldrex	r3, [r3]
 8011e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	330c      	adds	r3, #12
 8011e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8011e1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e24:	e841 2300 	strex	r3, r2, [r1]
 8011e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1e5      	bne.n	8011dfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3314      	adds	r3, #20
 8011e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	e853 3f00 	ldrex	r3, [r3]
 8011e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	f023 0301 	bic.w	r3, r3, #1
 8011e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	3314      	adds	r3, #20
 8011e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e50:	623a      	str	r2, [r7, #32]
 8011e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e54:	69f9      	ldr	r1, [r7, #28]
 8011e56:	6a3a      	ldr	r2, [r7, #32]
 8011e58:	e841 2300 	strex	r3, r2, [r1]
 8011e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1e5      	bne.n	8011e30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2220      	movs	r2, #32
 8011e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2220      	movs	r2, #32
 8011e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e00f      	b.n	8011ea0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	4013      	ands	r3, r2
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	bf0c      	ite	eq
 8011e90:	2301      	moveq	r3, #1
 8011e92:	2300      	movne	r3, #0
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	461a      	mov	r2, r3
 8011e98:	79fb      	ldrb	r3, [r7, #7]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d09f      	beq.n	8011dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3740      	adds	r7, #64	; 0x40
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b098      	sub	sp, #96	; 0x60
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	88fa      	ldrh	r2, [r7, #6]
 8011ec0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2222      	movs	r2, #34	; 0x22
 8011ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed4:	4a3e      	ldr	r2, [pc, #248]	; (8011fd0 <UART_Start_Receive_DMA+0x128>)
 8011ed6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011edc:	4a3d      	ldr	r2, [pc, #244]	; (8011fd4 <UART_Start_Receive_DMA+0x12c>)
 8011ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ee4:	4a3c      	ldr	r2, [pc, #240]	; (8011fd8 <UART_Start_Receive_DMA+0x130>)
 8011ee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eec:	2200      	movs	r2, #0
 8011eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011ef0:	f107 0308 	add.w	r3, r7, #8
 8011ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	3304      	adds	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	88fb      	ldrh	r3, [r7, #6]
 8011f08:	f7fb fcd2 	bl	800d8b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	613b      	str	r3, [r7, #16]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	613b      	str	r3, [r7, #16]
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	613b      	str	r3, [r7, #16]
 8011f20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	330c      	adds	r3, #12
 8011f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f34:	e853 3f00 	ldrex	r3, [r3]
 8011f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	330c      	adds	r3, #12
 8011f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f52:	e841 2300 	strex	r3, r2, [r1]
 8011f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1e5      	bne.n	8011f2a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	3314      	adds	r3, #20
 8011f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f68:	e853 3f00 	ldrex	r3, [r3]
 8011f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	f043 0301 	orr.w	r3, r3, #1
 8011f74:	657b      	str	r3, [r7, #84]	; 0x54
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	3314      	adds	r3, #20
 8011f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8011f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f86:	e841 2300 	strex	r3, r2, [r1]
 8011f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d1e5      	bne.n	8011f5e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	3314      	adds	r3, #20
 8011f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f9a:	69bb      	ldr	r3, [r7, #24]
 8011f9c:	e853 3f00 	ldrex	r3, [r3]
 8011fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	3314      	adds	r3, #20
 8011fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8011fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb6:	6a39      	ldr	r1, [r7, #32]
 8011fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fba:	e841 2300 	strex	r3, r2, [r1]
 8011fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d1e5      	bne.n	8011f92 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3760      	adds	r7, #96	; 0x60
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	08011bdd 	.word	0x08011bdd
 8011fd4:	08011d03 	.word	0x08011d03
 8011fd8:	08011d39 	.word	0x08011d39

08011fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b089      	sub	sp, #36	; 0x24
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	330c      	adds	r3, #12
 8011fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	e853 3f00 	ldrex	r3, [r3]
 8011ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011ffa:	61fb      	str	r3, [r7, #28]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	330c      	adds	r3, #12
 8012002:	69fa      	ldr	r2, [r7, #28]
 8012004:	61ba      	str	r2, [r7, #24]
 8012006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012008:	6979      	ldr	r1, [r7, #20]
 801200a:	69ba      	ldr	r2, [r7, #24]
 801200c:	e841 2300 	strex	r3, r2, [r1]
 8012010:	613b      	str	r3, [r7, #16]
   return(result);
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1e5      	bne.n	8011fe4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2220      	movs	r2, #32
 801201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8012020:	bf00      	nop
 8012022:	3724      	adds	r7, #36	; 0x24
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801202c:	b480      	push	{r7}
 801202e:	b095      	sub	sp, #84	; 0x54
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	330c      	adds	r3, #12
 801203a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801203e:	e853 3f00 	ldrex	r3, [r3]
 8012042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801204a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	330c      	adds	r3, #12
 8012052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012054:	643a      	str	r2, [r7, #64]	; 0x40
 8012056:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801205a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801205c:	e841 2300 	strex	r3, r2, [r1]
 8012060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012064:	2b00      	cmp	r3, #0
 8012066:	d1e5      	bne.n	8012034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	3314      	adds	r3, #20
 801206e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012070:	6a3b      	ldr	r3, [r7, #32]
 8012072:	e853 3f00 	ldrex	r3, [r3]
 8012076:	61fb      	str	r3, [r7, #28]
   return(result);
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	f023 0301 	bic.w	r3, r3, #1
 801207e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3314      	adds	r3, #20
 8012086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012088:	62fa      	str	r2, [r7, #44]	; 0x2c
 801208a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801208c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801208e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012090:	e841 2300 	strex	r3, r2, [r1]
 8012094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1e5      	bne.n	8012068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d119      	bne.n	80120d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	330c      	adds	r3, #12
 80120aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	e853 3f00 	ldrex	r3, [r3]
 80120b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	f023 0310 	bic.w	r3, r3, #16
 80120ba:	647b      	str	r3, [r7, #68]	; 0x44
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	330c      	adds	r3, #12
 80120c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120c4:	61ba      	str	r2, [r7, #24]
 80120c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c8:	6979      	ldr	r1, [r7, #20]
 80120ca:	69ba      	ldr	r2, [r7, #24]
 80120cc:	e841 2300 	strex	r3, r2, [r1]
 80120d0:	613b      	str	r3, [r7, #16]
   return(result);
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d1e5      	bne.n	80120a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2220      	movs	r2, #32
 80120dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80120e6:	bf00      	nop
 80120e8:	3754      	adds	r7, #84	; 0x54
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr

080120f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b084      	sub	sp, #16
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2200      	movs	r2, #0
 8012104:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2200      	movs	r2, #0
 801210a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801210c:	68f8      	ldr	r0, [r7, #12]
 801210e:	f7ff fd31 	bl	8011b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012112:	bf00      	nop
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801211a:	b480      	push	{r7}
 801211c:	b085      	sub	sp, #20
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b21      	cmp	r3, #33	; 0x21
 801212c:	d13e      	bne.n	80121ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	689b      	ldr	r3, [r3, #8]
 8012132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012136:	d114      	bne.n	8012162 <UART_Transmit_IT+0x48>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	691b      	ldr	r3, [r3, #16]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d110      	bne.n	8012162 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6a1b      	ldr	r3, [r3, #32]
 8012144:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	881b      	ldrh	r3, [r3, #0]
 801214a:	461a      	mov	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012154:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6a1b      	ldr	r3, [r3, #32]
 801215a:	1c9a      	adds	r2, r3, #2
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	621a      	str	r2, [r3, #32]
 8012160:	e008      	b.n	8012174 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6a1b      	ldr	r3, [r3, #32]
 8012166:	1c59      	adds	r1, r3, #1
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	6211      	str	r1, [r2, #32]
 801216c:	781a      	ldrb	r2, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012178:	b29b      	uxth	r3, r3
 801217a:	3b01      	subs	r3, #1
 801217c:	b29b      	uxth	r3, r3
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	4619      	mov	r1, r3
 8012182:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012184:	2b00      	cmp	r3, #0
 8012186:	d10f      	bne.n	80121a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	68da      	ldr	r2, [r3, #12]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012196:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80121a8:	2300      	movs	r3, #0
 80121aa:	e000      	b.n	80121ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80121ac:	2302      	movs	r3, #2
  }
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b082      	sub	sp, #8
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	68da      	ldr	r2, [r3, #12]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80121d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2220      	movs	r2, #32
 80121d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7ff fcb6 	bl	8011b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80121e0:	2300      	movs	r3, #0
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b08c      	sub	sp, #48	; 0x30
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	2b22      	cmp	r3, #34	; 0x22
 80121fc:	f040 80ab 	bne.w	8012356 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012208:	d117      	bne.n	801223a <UART_Receive_IT+0x50>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	691b      	ldr	r3, [r3, #16]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d113      	bne.n	801223a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801221a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	b29b      	uxth	r3, r3
 8012224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012228:	b29a      	uxth	r2, r3
 801222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012232:	1c9a      	adds	r2, r3, #2
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	629a      	str	r2, [r3, #40]	; 0x28
 8012238:	e026      	b.n	8012288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801223e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8012240:	2300      	movs	r3, #0
 8012242:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801224c:	d007      	beq.n	801225e <UART_Receive_IT+0x74>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d10a      	bne.n	801226c <UART_Receive_IT+0x82>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	691b      	ldr	r3, [r3, #16]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	b2da      	uxtb	r2, r3
 8012266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012268:	701a      	strb	r2, [r3, #0]
 801226a:	e008      	b.n	801227e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	b2db      	uxtb	r3, r3
 8012274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012278:	b2da      	uxtb	r2, r3
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801228c:	b29b      	uxth	r3, r3
 801228e:	3b01      	subs	r3, #1
 8012290:	b29b      	uxth	r3, r3
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	4619      	mov	r1, r3
 8012296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012298:	2b00      	cmp	r3, #0
 801229a:	d15a      	bne.n	8012352 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	68da      	ldr	r2, [r3, #12]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f022 0220 	bic.w	r2, r2, #32
 80122aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68da      	ldr	r2, [r3, #12]
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80122ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	695a      	ldr	r2, [r3, #20]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f022 0201 	bic.w	r2, r2, #1
 80122ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2220      	movs	r2, #32
 80122d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d135      	bne.n	8012348 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	330c      	adds	r3, #12
 80122e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	e853 3f00 	ldrex	r3, [r3]
 80122f0:	613b      	str	r3, [r7, #16]
   return(result);
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	f023 0310 	bic.w	r3, r3, #16
 80122f8:	627b      	str	r3, [r7, #36]	; 0x24
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	330c      	adds	r3, #12
 8012300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012302:	623a      	str	r2, [r7, #32]
 8012304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012306:	69f9      	ldr	r1, [r7, #28]
 8012308:	6a3a      	ldr	r2, [r7, #32]
 801230a:	e841 2300 	strex	r3, r2, [r1]
 801230e:	61bb      	str	r3, [r7, #24]
   return(result);
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1e5      	bne.n	80122e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f003 0310 	and.w	r3, r3, #16
 8012320:	2b10      	cmp	r3, #16
 8012322:	d10a      	bne.n	801233a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012324:	2300      	movs	r3, #0
 8012326:	60fb      	str	r3, [r7, #12]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	60fb      	str	r3, [r7, #12]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	60fb      	str	r3, [r7, #12]
 8012338:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801233e:	4619      	mov	r1, r3
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff fc21 	bl	8011b88 <HAL_UARTEx_RxEventCallback>
 8012346:	e002      	b.n	801234e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7f8 fb43 	bl	800a9d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801234e:	2300      	movs	r3, #0
 8012350:	e002      	b.n	8012358 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012352:	2300      	movs	r3, #0
 8012354:	e000      	b.n	8012358 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8012356:	2302      	movs	r3, #2
  }
}
 8012358:	4618      	mov	r0, r3
 801235a:	3730      	adds	r7, #48	; 0x30
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	b09f      	sub	sp, #124	; 0x7c
 8012366:	af00      	add	r7, sp, #0
 8012368:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	691b      	ldr	r3, [r3, #16]
 8012370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012376:	68d9      	ldr	r1, [r3, #12]
 8012378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	ea40 0301 	orr.w	r3, r0, r1
 8012380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012384:	689a      	ldr	r2, [r3, #8]
 8012386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012388:	691b      	ldr	r3, [r3, #16]
 801238a:	431a      	orrs	r2, r3
 801238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801238e:	695b      	ldr	r3, [r3, #20]
 8012390:	431a      	orrs	r2, r3
 8012392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012394:	69db      	ldr	r3, [r3, #28]
 8012396:	4313      	orrs	r3, r2
 8012398:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801239a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80123a4:	f021 010c 	bic.w	r1, r1, #12
 80123a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123ae:	430b      	orrs	r3, r1
 80123b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80123b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80123bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123be:	6999      	ldr	r1, [r3, #24]
 80123c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	ea40 0301 	orr.w	r3, r0, r1
 80123c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80123ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	4bc5      	ldr	r3, [pc, #788]	; (80126e4 <UART_SetConfig+0x384>)
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d004      	beq.n	80123de <UART_SetConfig+0x7e>
 80123d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	4bc3      	ldr	r3, [pc, #780]	; (80126e8 <UART_SetConfig+0x388>)
 80123da:	429a      	cmp	r2, r3
 80123dc:	d103      	bne.n	80123e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80123de:	f7fd fd37 	bl	800fe50 <HAL_RCC_GetPCLK2Freq>
 80123e2:	6778      	str	r0, [r7, #116]	; 0x74
 80123e4:	e002      	b.n	80123ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80123e6:	f7fd fd1f 	bl	800fe28 <HAL_RCC_GetPCLK1Freq>
 80123ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123ee:	69db      	ldr	r3, [r3, #28]
 80123f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123f4:	f040 80b6 	bne.w	8012564 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80123f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123fa:	461c      	mov	r4, r3
 80123fc:	f04f 0500 	mov.w	r5, #0
 8012400:	4622      	mov	r2, r4
 8012402:	462b      	mov	r3, r5
 8012404:	1891      	adds	r1, r2, r2
 8012406:	6439      	str	r1, [r7, #64]	; 0x40
 8012408:	415b      	adcs	r3, r3
 801240a:	647b      	str	r3, [r7, #68]	; 0x44
 801240c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012410:	1912      	adds	r2, r2, r4
 8012412:	eb45 0303 	adc.w	r3, r5, r3
 8012416:	f04f 0000 	mov.w	r0, #0
 801241a:	f04f 0100 	mov.w	r1, #0
 801241e:	00d9      	lsls	r1, r3, #3
 8012420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012424:	00d0      	lsls	r0, r2, #3
 8012426:	4602      	mov	r2, r0
 8012428:	460b      	mov	r3, r1
 801242a:	1911      	adds	r1, r2, r4
 801242c:	6639      	str	r1, [r7, #96]	; 0x60
 801242e:	416b      	adcs	r3, r5
 8012430:	667b      	str	r3, [r7, #100]	; 0x64
 8012432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	461a      	mov	r2, r3
 8012438:	f04f 0300 	mov.w	r3, #0
 801243c:	1891      	adds	r1, r2, r2
 801243e:	63b9      	str	r1, [r7, #56]	; 0x38
 8012440:	415b      	adcs	r3, r3
 8012442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012448:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801244c:	f7ee fb56 	bl	8000afc <__aeabi_uldivmod>
 8012450:	4602      	mov	r2, r0
 8012452:	460b      	mov	r3, r1
 8012454:	4ba5      	ldr	r3, [pc, #660]	; (80126ec <UART_SetConfig+0x38c>)
 8012456:	fba3 2302 	umull	r2, r3, r3, r2
 801245a:	095b      	lsrs	r3, r3, #5
 801245c:	011e      	lsls	r6, r3, #4
 801245e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012460:	461c      	mov	r4, r3
 8012462:	f04f 0500 	mov.w	r5, #0
 8012466:	4622      	mov	r2, r4
 8012468:	462b      	mov	r3, r5
 801246a:	1891      	adds	r1, r2, r2
 801246c:	6339      	str	r1, [r7, #48]	; 0x30
 801246e:	415b      	adcs	r3, r3
 8012470:	637b      	str	r3, [r7, #52]	; 0x34
 8012472:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012476:	1912      	adds	r2, r2, r4
 8012478:	eb45 0303 	adc.w	r3, r5, r3
 801247c:	f04f 0000 	mov.w	r0, #0
 8012480:	f04f 0100 	mov.w	r1, #0
 8012484:	00d9      	lsls	r1, r3, #3
 8012486:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801248a:	00d0      	lsls	r0, r2, #3
 801248c:	4602      	mov	r2, r0
 801248e:	460b      	mov	r3, r1
 8012490:	1911      	adds	r1, r2, r4
 8012492:	65b9      	str	r1, [r7, #88]	; 0x58
 8012494:	416b      	adcs	r3, r5
 8012496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	461a      	mov	r2, r3
 801249e:	f04f 0300 	mov.w	r3, #0
 80124a2:	1891      	adds	r1, r2, r2
 80124a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80124a6:	415b      	adcs	r3, r3
 80124a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80124ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80124b2:	f7ee fb23 	bl	8000afc <__aeabi_uldivmod>
 80124b6:	4602      	mov	r2, r0
 80124b8:	460b      	mov	r3, r1
 80124ba:	4b8c      	ldr	r3, [pc, #560]	; (80126ec <UART_SetConfig+0x38c>)
 80124bc:	fba3 1302 	umull	r1, r3, r3, r2
 80124c0:	095b      	lsrs	r3, r3, #5
 80124c2:	2164      	movs	r1, #100	; 0x64
 80124c4:	fb01 f303 	mul.w	r3, r1, r3
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	3332      	adds	r3, #50	; 0x32
 80124ce:	4a87      	ldr	r2, [pc, #540]	; (80126ec <UART_SetConfig+0x38c>)
 80124d0:	fba2 2303 	umull	r2, r3, r2, r3
 80124d4:	095b      	lsrs	r3, r3, #5
 80124d6:	005b      	lsls	r3, r3, #1
 80124d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80124dc:	441e      	add	r6, r3
 80124de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80124e0:	4618      	mov	r0, r3
 80124e2:	f04f 0100 	mov.w	r1, #0
 80124e6:	4602      	mov	r2, r0
 80124e8:	460b      	mov	r3, r1
 80124ea:	1894      	adds	r4, r2, r2
 80124ec:	623c      	str	r4, [r7, #32]
 80124ee:	415b      	adcs	r3, r3
 80124f0:	627b      	str	r3, [r7, #36]	; 0x24
 80124f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80124f6:	1812      	adds	r2, r2, r0
 80124f8:	eb41 0303 	adc.w	r3, r1, r3
 80124fc:	f04f 0400 	mov.w	r4, #0
 8012500:	f04f 0500 	mov.w	r5, #0
 8012504:	00dd      	lsls	r5, r3, #3
 8012506:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801250a:	00d4      	lsls	r4, r2, #3
 801250c:	4622      	mov	r2, r4
 801250e:	462b      	mov	r3, r5
 8012510:	1814      	adds	r4, r2, r0
 8012512:	653c      	str	r4, [r7, #80]	; 0x50
 8012514:	414b      	adcs	r3, r1
 8012516:	657b      	str	r3, [r7, #84]	; 0x54
 8012518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	461a      	mov	r2, r3
 801251e:	f04f 0300 	mov.w	r3, #0
 8012522:	1891      	adds	r1, r2, r2
 8012524:	61b9      	str	r1, [r7, #24]
 8012526:	415b      	adcs	r3, r3
 8012528:	61fb      	str	r3, [r7, #28]
 801252a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801252e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012532:	f7ee fae3 	bl	8000afc <__aeabi_uldivmod>
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	4b6c      	ldr	r3, [pc, #432]	; (80126ec <UART_SetConfig+0x38c>)
 801253c:	fba3 1302 	umull	r1, r3, r3, r2
 8012540:	095b      	lsrs	r3, r3, #5
 8012542:	2164      	movs	r1, #100	; 0x64
 8012544:	fb01 f303 	mul.w	r3, r1, r3
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	3332      	adds	r3, #50	; 0x32
 801254e:	4a67      	ldr	r2, [pc, #412]	; (80126ec <UART_SetConfig+0x38c>)
 8012550:	fba2 2303 	umull	r2, r3, r2, r3
 8012554:	095b      	lsrs	r3, r3, #5
 8012556:	f003 0207 	and.w	r2, r3, #7
 801255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	4432      	add	r2, r6
 8012560:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012562:	e0b9      	b.n	80126d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012566:	461c      	mov	r4, r3
 8012568:	f04f 0500 	mov.w	r5, #0
 801256c:	4622      	mov	r2, r4
 801256e:	462b      	mov	r3, r5
 8012570:	1891      	adds	r1, r2, r2
 8012572:	6139      	str	r1, [r7, #16]
 8012574:	415b      	adcs	r3, r3
 8012576:	617b      	str	r3, [r7, #20]
 8012578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801257c:	1912      	adds	r2, r2, r4
 801257e:	eb45 0303 	adc.w	r3, r5, r3
 8012582:	f04f 0000 	mov.w	r0, #0
 8012586:	f04f 0100 	mov.w	r1, #0
 801258a:	00d9      	lsls	r1, r3, #3
 801258c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012590:	00d0      	lsls	r0, r2, #3
 8012592:	4602      	mov	r2, r0
 8012594:	460b      	mov	r3, r1
 8012596:	eb12 0804 	adds.w	r8, r2, r4
 801259a:	eb43 0905 	adc.w	r9, r3, r5
 801259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f04f 0100 	mov.w	r1, #0
 80125a8:	f04f 0200 	mov.w	r2, #0
 80125ac:	f04f 0300 	mov.w	r3, #0
 80125b0:	008b      	lsls	r3, r1, #2
 80125b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80125b6:	0082      	lsls	r2, r0, #2
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	f7ee fa9e 	bl	8000afc <__aeabi_uldivmod>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4b49      	ldr	r3, [pc, #292]	; (80126ec <UART_SetConfig+0x38c>)
 80125c6:	fba3 2302 	umull	r2, r3, r3, r2
 80125ca:	095b      	lsrs	r3, r3, #5
 80125cc:	011e      	lsls	r6, r3, #4
 80125ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125d0:	4618      	mov	r0, r3
 80125d2:	f04f 0100 	mov.w	r1, #0
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	1894      	adds	r4, r2, r2
 80125dc:	60bc      	str	r4, [r7, #8]
 80125de:	415b      	adcs	r3, r3
 80125e0:	60fb      	str	r3, [r7, #12]
 80125e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80125e6:	1812      	adds	r2, r2, r0
 80125e8:	eb41 0303 	adc.w	r3, r1, r3
 80125ec:	f04f 0400 	mov.w	r4, #0
 80125f0:	f04f 0500 	mov.w	r5, #0
 80125f4:	00dd      	lsls	r5, r3, #3
 80125f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80125fa:	00d4      	lsls	r4, r2, #3
 80125fc:	4622      	mov	r2, r4
 80125fe:	462b      	mov	r3, r5
 8012600:	1814      	adds	r4, r2, r0
 8012602:	64bc      	str	r4, [r7, #72]	; 0x48
 8012604:	414b      	adcs	r3, r1
 8012606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f04f 0100 	mov.w	r1, #0
 8012612:	f04f 0200 	mov.w	r2, #0
 8012616:	f04f 0300 	mov.w	r3, #0
 801261a:	008b      	lsls	r3, r1, #2
 801261c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012620:	0082      	lsls	r2, r0, #2
 8012622:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8012626:	f7ee fa69 	bl	8000afc <__aeabi_uldivmod>
 801262a:	4602      	mov	r2, r0
 801262c:	460b      	mov	r3, r1
 801262e:	4b2f      	ldr	r3, [pc, #188]	; (80126ec <UART_SetConfig+0x38c>)
 8012630:	fba3 1302 	umull	r1, r3, r3, r2
 8012634:	095b      	lsrs	r3, r3, #5
 8012636:	2164      	movs	r1, #100	; 0x64
 8012638:	fb01 f303 	mul.w	r3, r1, r3
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	011b      	lsls	r3, r3, #4
 8012640:	3332      	adds	r3, #50	; 0x32
 8012642:	4a2a      	ldr	r2, [pc, #168]	; (80126ec <UART_SetConfig+0x38c>)
 8012644:	fba2 2303 	umull	r2, r3, r2, r3
 8012648:	095b      	lsrs	r3, r3, #5
 801264a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801264e:	441e      	add	r6, r3
 8012650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012652:	4618      	mov	r0, r3
 8012654:	f04f 0100 	mov.w	r1, #0
 8012658:	4602      	mov	r2, r0
 801265a:	460b      	mov	r3, r1
 801265c:	1894      	adds	r4, r2, r2
 801265e:	603c      	str	r4, [r7, #0]
 8012660:	415b      	adcs	r3, r3
 8012662:	607b      	str	r3, [r7, #4]
 8012664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012668:	1812      	adds	r2, r2, r0
 801266a:	eb41 0303 	adc.w	r3, r1, r3
 801266e:	f04f 0400 	mov.w	r4, #0
 8012672:	f04f 0500 	mov.w	r5, #0
 8012676:	00dd      	lsls	r5, r3, #3
 8012678:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801267c:	00d4      	lsls	r4, r2, #3
 801267e:	4622      	mov	r2, r4
 8012680:	462b      	mov	r3, r5
 8012682:	eb12 0a00 	adds.w	sl, r2, r0
 8012686:	eb43 0b01 	adc.w	fp, r3, r1
 801268a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	f04f 0100 	mov.w	r1, #0
 8012694:	f04f 0200 	mov.w	r2, #0
 8012698:	f04f 0300 	mov.w	r3, #0
 801269c:	008b      	lsls	r3, r1, #2
 801269e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80126a2:	0082      	lsls	r2, r0, #2
 80126a4:	4650      	mov	r0, sl
 80126a6:	4659      	mov	r1, fp
 80126a8:	f7ee fa28 	bl	8000afc <__aeabi_uldivmod>
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	4b0e      	ldr	r3, [pc, #56]	; (80126ec <UART_SetConfig+0x38c>)
 80126b2:	fba3 1302 	umull	r1, r3, r3, r2
 80126b6:	095b      	lsrs	r3, r3, #5
 80126b8:	2164      	movs	r1, #100	; 0x64
 80126ba:	fb01 f303 	mul.w	r3, r1, r3
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	011b      	lsls	r3, r3, #4
 80126c2:	3332      	adds	r3, #50	; 0x32
 80126c4:	4a09      	ldr	r2, [pc, #36]	; (80126ec <UART_SetConfig+0x38c>)
 80126c6:	fba2 2303 	umull	r2, r3, r2, r3
 80126ca:	095b      	lsrs	r3, r3, #5
 80126cc:	f003 020f 	and.w	r2, r3, #15
 80126d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4432      	add	r2, r6
 80126d6:	609a      	str	r2, [r3, #8]
}
 80126d8:	bf00      	nop
 80126da:	377c      	adds	r7, #124	; 0x7c
 80126dc:	46bd      	mov	sp, r7
 80126de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e2:	bf00      	nop
 80126e4:	40011000 	.word	0x40011000
 80126e8:	40011400 	.word	0x40011400
 80126ec:	51eb851f 	.word	0x51eb851f

080126f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80126f0:	b084      	sub	sp, #16
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b084      	sub	sp, #16
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	f107 001c 	add.w	r0, r7, #28
 80126fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012704:	2b01      	cmp	r3, #1
 8012706:	d122      	bne.n	801274e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801270c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012732:	2b01      	cmp	r3, #1
 8012734:	d105      	bne.n	8012742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f001 fb1c 	bl	8013d80 <USB_CoreReset>
 8012748:	4603      	mov	r3, r0
 801274a:	73fb      	strb	r3, [r7, #15]
 801274c:	e01a      	b.n	8012784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f001 fb10 	bl	8013d80 <USB_CoreReset>
 8012760:	4603      	mov	r3, r0
 8012762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801276e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	639a      	str	r2, [r3, #56]	; 0x38
 8012776:	e005      	b.n	8012784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801277c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012786:	2b01      	cmp	r3, #1
 8012788:	d10b      	bne.n	80127a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	689b      	ldr	r3, [r3, #8]
 801278e:	f043 0206 	orr.w	r2, r3, #6
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	689b      	ldr	r3, [r3, #8]
 801279a:	f043 0220 	orr.w	r2, r3, #32
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80127a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80127ae:	b004      	add	sp, #16
 80127b0:	4770      	bx	lr
	...

080127b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b087      	sub	sp, #28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	4613      	mov	r3, r2
 80127c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80127c2:	79fb      	ldrb	r3, [r7, #7]
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	d165      	bne.n	8012894 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	4a41      	ldr	r2, [pc, #260]	; (80128d0 <USB_SetTurnaroundTime+0x11c>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d906      	bls.n	80127de <USB_SetTurnaroundTime+0x2a>
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	4a40      	ldr	r2, [pc, #256]	; (80128d4 <USB_SetTurnaroundTime+0x120>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d202      	bcs.n	80127de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80127d8:	230f      	movs	r3, #15
 80127da:	617b      	str	r3, [r7, #20]
 80127dc:	e062      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	4a3c      	ldr	r2, [pc, #240]	; (80128d4 <USB_SetTurnaroundTime+0x120>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d306      	bcc.n	80127f4 <USB_SetTurnaroundTime+0x40>
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	4a3b      	ldr	r2, [pc, #236]	; (80128d8 <USB_SetTurnaroundTime+0x124>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d202      	bcs.n	80127f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80127ee:	230e      	movs	r3, #14
 80127f0:	617b      	str	r3, [r7, #20]
 80127f2:	e057      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	4a38      	ldr	r2, [pc, #224]	; (80128d8 <USB_SetTurnaroundTime+0x124>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d306      	bcc.n	801280a <USB_SetTurnaroundTime+0x56>
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	4a37      	ldr	r2, [pc, #220]	; (80128dc <USB_SetTurnaroundTime+0x128>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d202      	bcs.n	801280a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012804:	230d      	movs	r3, #13
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	e04c      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	4a33      	ldr	r2, [pc, #204]	; (80128dc <USB_SetTurnaroundTime+0x128>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d306      	bcc.n	8012820 <USB_SetTurnaroundTime+0x6c>
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	4a32      	ldr	r2, [pc, #200]	; (80128e0 <USB_SetTurnaroundTime+0x12c>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d802      	bhi.n	8012820 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801281a:	230c      	movs	r3, #12
 801281c:	617b      	str	r3, [r7, #20]
 801281e:	e041      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	4a2f      	ldr	r2, [pc, #188]	; (80128e0 <USB_SetTurnaroundTime+0x12c>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d906      	bls.n	8012836 <USB_SetTurnaroundTime+0x82>
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	4a2e      	ldr	r2, [pc, #184]	; (80128e4 <USB_SetTurnaroundTime+0x130>)
 801282c:	4293      	cmp	r3, r2
 801282e:	d802      	bhi.n	8012836 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012830:	230b      	movs	r3, #11
 8012832:	617b      	str	r3, [r7, #20]
 8012834:	e036      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	4a2a      	ldr	r2, [pc, #168]	; (80128e4 <USB_SetTurnaroundTime+0x130>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d906      	bls.n	801284c <USB_SetTurnaroundTime+0x98>
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	4a29      	ldr	r2, [pc, #164]	; (80128e8 <USB_SetTurnaroundTime+0x134>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d802      	bhi.n	801284c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012846:	230a      	movs	r3, #10
 8012848:	617b      	str	r3, [r7, #20]
 801284a:	e02b      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	4a26      	ldr	r2, [pc, #152]	; (80128e8 <USB_SetTurnaroundTime+0x134>)
 8012850:	4293      	cmp	r3, r2
 8012852:	d906      	bls.n	8012862 <USB_SetTurnaroundTime+0xae>
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	4a25      	ldr	r2, [pc, #148]	; (80128ec <USB_SetTurnaroundTime+0x138>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d202      	bcs.n	8012862 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801285c:	2309      	movs	r3, #9
 801285e:	617b      	str	r3, [r7, #20]
 8012860:	e020      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	4a21      	ldr	r2, [pc, #132]	; (80128ec <USB_SetTurnaroundTime+0x138>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d306      	bcc.n	8012878 <USB_SetTurnaroundTime+0xc4>
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	4a20      	ldr	r2, [pc, #128]	; (80128f0 <USB_SetTurnaroundTime+0x13c>)
 801286e:	4293      	cmp	r3, r2
 8012870:	d802      	bhi.n	8012878 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012872:	2308      	movs	r3, #8
 8012874:	617b      	str	r3, [r7, #20]
 8012876:	e015      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	4a1d      	ldr	r2, [pc, #116]	; (80128f0 <USB_SetTurnaroundTime+0x13c>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d906      	bls.n	801288e <USB_SetTurnaroundTime+0xda>
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	4a1c      	ldr	r2, [pc, #112]	; (80128f4 <USB_SetTurnaroundTime+0x140>)
 8012884:	4293      	cmp	r3, r2
 8012886:	d202      	bcs.n	801288e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012888:	2307      	movs	r3, #7
 801288a:	617b      	str	r3, [r7, #20]
 801288c:	e00a      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801288e:	2306      	movs	r3, #6
 8012890:	617b      	str	r3, [r7, #20]
 8012892:	e007      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012894:	79fb      	ldrb	r3, [r7, #7]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d102      	bne.n	80128a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801289a:	2309      	movs	r3, #9
 801289c:	617b      	str	r3, [r7, #20]
 801289e:	e001      	b.n	80128a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80128a0:	2309      	movs	r3, #9
 80128a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	68da      	ldr	r2, [r3, #12]
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	029b      	lsls	r3, r3, #10
 80128b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80128bc:	431a      	orrs	r2, r3
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	371c      	adds	r7, #28
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	00d8acbf 	.word	0x00d8acbf
 80128d4:	00e4e1c0 	.word	0x00e4e1c0
 80128d8:	00f42400 	.word	0x00f42400
 80128dc:	01067380 	.word	0x01067380
 80128e0:	011a499f 	.word	0x011a499f
 80128e4:	01312cff 	.word	0x01312cff
 80128e8:	014ca43f 	.word	0x014ca43f
 80128ec:	016e3600 	.word	0x016e3600
 80128f0:	01a6ab1f 	.word	0x01a6ab1f
 80128f4:	01e84800 	.word	0x01e84800

080128f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80128f8:	b480      	push	{r7}
 80128fa:	b083      	sub	sp, #12
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	689b      	ldr	r3, [r3, #8]
 8012904:	f043 0201 	orr.w	r2, r3, #1
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801290c:	2300      	movs	r3, #0
}
 801290e:	4618      	mov	r0, r3
 8012910:	370c      	adds	r7, #12
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr

0801291a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801291a:	b480      	push	{r7}
 801291c:	b083      	sub	sp, #12
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	689b      	ldr	r3, [r3, #8]
 8012926:	f023 0201 	bic.w	r2, r3, #1
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b084      	sub	sp, #16
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	460b      	mov	r3, r1
 8012946:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012948:	2300      	movs	r3, #0
 801294a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012958:	78fb      	ldrb	r3, [r7, #3]
 801295a:	2b01      	cmp	r3, #1
 801295c:	d115      	bne.n	801298a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	68db      	ldr	r3, [r3, #12]
 8012962:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801296a:	2001      	movs	r0, #1
 801296c:	f7fa f9e2 	bl	800cd34 <HAL_Delay>
      ms++;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	3301      	adds	r3, #1
 8012974:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f001 f972 	bl	8013c60 <USB_GetMode>
 801297c:	4603      	mov	r3, r0
 801297e:	2b01      	cmp	r3, #1
 8012980:	d01e      	beq.n	80129c0 <USB_SetCurrentMode+0x84>
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2b31      	cmp	r3, #49	; 0x31
 8012986:	d9f0      	bls.n	801296a <USB_SetCurrentMode+0x2e>
 8012988:	e01a      	b.n	80129c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801298a:	78fb      	ldrb	r3, [r7, #3]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d115      	bne.n	80129bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801299c:	2001      	movs	r0, #1
 801299e:	f7fa f9c9 	bl	800cd34 <HAL_Delay>
      ms++;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3301      	adds	r3, #1
 80129a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f001 f959 	bl	8013c60 <USB_GetMode>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d005      	beq.n	80129c0 <USB_SetCurrentMode+0x84>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2b31      	cmp	r3, #49	; 0x31
 80129b8:	d9f0      	bls.n	801299c <USB_SetCurrentMode+0x60>
 80129ba:	e001      	b.n	80129c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80129bc:	2301      	movs	r3, #1
 80129be:	e005      	b.n	80129cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2b32      	cmp	r3, #50	; 0x32
 80129c4:	d101      	bne.n	80129ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80129c6:	2301      	movs	r3, #1
 80129c8:	e000      	b.n	80129cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80129ca:	2300      	movs	r3, #0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3710      	adds	r7, #16
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80129d4:	b084      	sub	sp, #16
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b086      	sub	sp, #24
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
 80129de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80129e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80129e6:	2300      	movs	r3, #0
 80129e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80129ee:	2300      	movs	r3, #0
 80129f0:	613b      	str	r3, [r7, #16]
 80129f2:	e009      	b.n	8012a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	3340      	adds	r3, #64	; 0x40
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	4413      	add	r3, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	3301      	adds	r3, #1
 8012a06:	613b      	str	r3, [r7, #16]
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	2b0e      	cmp	r3, #14
 8012a0c:	d9f2      	bls.n	80129f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d11c      	bne.n	8012a4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a22:	f043 0302 	orr.w	r3, r3, #2
 8012a26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8012a4c:	e00b      	b.n	8012a66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	2300      	movs	r3, #0
 8012a70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a78:	4619      	mov	r1, r3
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a80:	461a      	mov	r2, r3
 8012a82:	680b      	ldr	r3, [r1, #0]
 8012a84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d10c      	bne.n	8012aa6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d104      	bne.n	8012a9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012a92:	2100      	movs	r1, #0
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 f945 	bl	8012d24 <USB_SetDevSpeed>
 8012a9a:	e008      	b.n	8012aae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012a9c:	2101      	movs	r1, #1
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f940 	bl	8012d24 <USB_SetDevSpeed>
 8012aa4:	e003      	b.n	8012aae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012aa6:	2103      	movs	r1, #3
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f93b 	bl	8012d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012aae:	2110      	movs	r1, #16
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f000 f8f3 	bl	8012c9c <USB_FlushTxFifo>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d001      	beq.n	8012ac0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8012abc:	2301      	movs	r3, #1
 8012abe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 f90f 	bl	8012ce4 <USB_FlushRxFifo>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8012acc:	2301      	movs	r3, #1
 8012ace:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	2300      	movs	r3, #0
 8012ada:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aee:	461a      	mov	r2, r3
 8012af0:	2300      	movs	r3, #0
 8012af2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012af4:	2300      	movs	r3, #0
 8012af6:	613b      	str	r3, [r7, #16]
 8012af8:	e043      	b.n	8012b82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	015a      	lsls	r2, r3, #5
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	4413      	add	r3, r2
 8012b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b10:	d118      	bne.n	8012b44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10a      	bne.n	8012b2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	015a      	lsls	r2, r3, #5
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	4413      	add	r3, r2
 8012b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b24:	461a      	mov	r2, r3
 8012b26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012b2a:	6013      	str	r3, [r2, #0]
 8012b2c:	e013      	b.n	8012b56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	015a      	lsls	r2, r3, #5
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	4413      	add	r3, r2
 8012b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012b40:	6013      	str	r3, [r2, #0]
 8012b42:	e008      	b.n	8012b56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	015a      	lsls	r2, r3, #5
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b50:	461a      	mov	r2, r3
 8012b52:	2300      	movs	r3, #0
 8012b54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	015a      	lsls	r2, r3, #5
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b62:	461a      	mov	r2, r3
 8012b64:	2300      	movs	r3, #0
 8012b66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	015a      	lsls	r2, r3, #5
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	4413      	add	r3, r2
 8012b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b74:	461a      	mov	r2, r3
 8012b76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	613b      	str	r3, [r7, #16]
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b84:	693a      	ldr	r2, [r7, #16]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d3b7      	bcc.n	8012afa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	613b      	str	r3, [r7, #16]
 8012b8e:	e043      	b.n	8012c18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	015a      	lsls	r2, r3, #5
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4413      	add	r3, r2
 8012b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ba6:	d118      	bne.n	8012bda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10a      	bne.n	8012bc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	015a      	lsls	r2, r3, #5
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bba:	461a      	mov	r2, r3
 8012bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012bc0:	6013      	str	r3, [r2, #0]
 8012bc2:	e013      	b.n	8012bec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	015a      	lsls	r2, r3, #5
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	4413      	add	r3, r2
 8012bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012bd6:	6013      	str	r3, [r2, #0]
 8012bd8:	e008      	b.n	8012bec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	015a      	lsls	r2, r3, #5
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	4413      	add	r3, r2
 8012be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be6:	461a      	mov	r2, r3
 8012be8:	2300      	movs	r3, #0
 8012bea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	015a      	lsls	r2, r3, #5
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	015a      	lsls	r2, r3, #5
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	4413      	add	r3, r2
 8012c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012c10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	3301      	adds	r3, #1
 8012c16:	613b      	str	r3, [r7, #16]
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	693a      	ldr	r2, [r7, #16]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d3b7      	bcc.n	8012b90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c26:	691b      	ldr	r3, [r3, #16]
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012c40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d105      	bne.n	8012c54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	699b      	ldr	r3, [r3, #24]
 8012c4c:	f043 0210 	orr.w	r2, r3, #16
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	699a      	ldr	r2, [r3, #24]
 8012c58:	4b0f      	ldr	r3, [pc, #60]	; (8012c98 <USB_DevInit+0x2c4>)
 8012c5a:	4313      	orrs	r3, r2
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d005      	beq.n	8012c72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	699b      	ldr	r3, [r3, #24]
 8012c6a:	f043 0208 	orr.w	r2, r3, #8
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d107      	bne.n	8012c88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c80:	f043 0304 	orr.w	r3, r3, #4
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3718      	adds	r7, #24
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012c94:	b004      	add	sp, #16
 8012c96:	4770      	bx	lr
 8012c98:	803c3800 	.word	0x803c3800

08012c9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	019b      	lsls	r3, r3, #6
 8012cae:	f043 0220 	orr.w	r2, r3, #32
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	60fb      	str	r3, [r7, #12]
 8012cbc:	4a08      	ldr	r2, [pc, #32]	; (8012ce0 <USB_FlushTxFifo+0x44>)
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d901      	bls.n	8012cc6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8012cc2:	2303      	movs	r3, #3
 8012cc4:	e006      	b.n	8012cd4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	691b      	ldr	r3, [r3, #16]
 8012cca:	f003 0320 	and.w	r3, r3, #32
 8012cce:	2b20      	cmp	r3, #32
 8012cd0:	d0f1      	beq.n	8012cb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3714      	adds	r7, #20
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr
 8012ce0:	00030d40 	.word	0x00030d40

08012ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b085      	sub	sp, #20
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012cec:	2300      	movs	r3, #0
 8012cee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2210      	movs	r2, #16
 8012cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	60fb      	str	r3, [r7, #12]
 8012cfc:	4a08      	ldr	r2, [pc, #32]	; (8012d20 <USB_FlushRxFifo+0x3c>)
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d901      	bls.n	8012d06 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8012d02:	2303      	movs	r3, #3
 8012d04:	e006      	b.n	8012d14 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	691b      	ldr	r3, [r3, #16]
 8012d0a:	f003 0310 	and.w	r3, r3, #16
 8012d0e:	2b10      	cmp	r3, #16
 8012d10:	d0f1      	beq.n	8012cf6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3714      	adds	r7, #20
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr
 8012d20:	00030d40 	.word	0x00030d40

08012d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b085      	sub	sp, #20
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	78fb      	ldrb	r3, [r7, #3]
 8012d3e:	68f9      	ldr	r1, [r7, #12]
 8012d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d44:	4313      	orrs	r3, r2
 8012d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012d48:	2300      	movs	r3, #0
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3714      	adds	r7, #20
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr

08012d56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012d56:	b480      	push	{r7}
 8012d58:	b087      	sub	sp, #28
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d68:	689b      	ldr	r3, [r3, #8]
 8012d6a:	f003 0306 	and.w	r3, r3, #6
 8012d6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d102      	bne.n	8012d7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012d76:	2300      	movs	r3, #0
 8012d78:	75fb      	strb	r3, [r7, #23]
 8012d7a:	e00a      	b.n	8012d92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d002      	beq.n	8012d88 <USB_GetDevSpeed+0x32>
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b06      	cmp	r3, #6
 8012d86:	d102      	bne.n	8012d8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012d88:	2302      	movs	r3, #2
 8012d8a:	75fb      	strb	r3, [r7, #23]
 8012d8c:	e001      	b.n	8012d92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012d8e:	230f      	movs	r3, #15
 8012d90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	371c      	adds	r7, #28
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	785b      	ldrb	r3, [r3, #1]
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d13a      	bne.n	8012e32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dc2:	69da      	ldr	r2, [r3, #28]
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	f003 030f 	and.w	r3, r3, #15
 8012dcc:	2101      	movs	r1, #1
 8012dce:	fa01 f303 	lsl.w	r3, r1, r3
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	68f9      	ldr	r1, [r7, #12]
 8012dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	015a      	lsls	r2, r3, #5
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	4413      	add	r3, r2
 8012de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d155      	bne.n	8012ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	015a      	lsls	r2, r3, #5
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	689b      	ldr	r3, [r3, #8]
 8012e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	78db      	ldrb	r3, [r3, #3]
 8012e0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	059b      	lsls	r3, r3, #22
 8012e16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	68ba      	ldr	r2, [r7, #8]
 8012e1c:	0151      	lsls	r1, r2, #5
 8012e1e:	68fa      	ldr	r2, [r7, #12]
 8012e20:	440a      	add	r2, r1
 8012e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e2e:	6013      	str	r3, [r2, #0]
 8012e30:	e036      	b.n	8012ea0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e38:	69da      	ldr	r2, [r3, #28]
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	f003 030f 	and.w	r3, r3, #15
 8012e42:	2101      	movs	r1, #1
 8012e44:	fa01 f303 	lsl.w	r3, r1, r3
 8012e48:	041b      	lsls	r3, r3, #16
 8012e4a:	68f9      	ldr	r1, [r7, #12]
 8012e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e50:	4313      	orrs	r3, r2
 8012e52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	015a      	lsls	r2, r3, #5
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	4413      	add	r3, r2
 8012e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d11a      	bne.n	8012ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	015a      	lsls	r2, r3, #5
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	4413      	add	r3, r2
 8012e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	78db      	ldrb	r3, [r3, #3]
 8012e84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012e86:	430b      	orrs	r3, r1
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	0151      	lsls	r1, r2, #5
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	440a      	add	r2, r1
 8012e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012ea0:	2300      	movs	r3, #0
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3714      	adds	r7, #20
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr
	...

08012eb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	785b      	ldrb	r3, [r3, #1]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d161      	bne.n	8012f90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	015a      	lsls	r2, r3, #5
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ee2:	d11f      	bne.n	8012f24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	015a      	lsls	r2, r3, #5
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	0151      	lsls	r1, r2, #5
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	440a      	add	r2, r1
 8012efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	015a      	lsls	r2, r3, #5
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	68ba      	ldr	r2, [r7, #8]
 8012f14:	0151      	lsls	r1, r2, #5
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	440a      	add	r2, r1
 8012f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	f003 030f 	and.w	r3, r3, #15
 8012f34:	2101      	movs	r1, #1
 8012f36:	fa01 f303 	lsl.w	r3, r1, r3
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	43db      	mvns	r3, r3
 8012f3e:	68f9      	ldr	r1, [r7, #12]
 8012f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f44:	4013      	ands	r3, r2
 8012f46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f4e:	69da      	ldr	r2, [r3, #28]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	f003 030f 	and.w	r3, r3, #15
 8012f58:	2101      	movs	r1, #1
 8012f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	43db      	mvns	r3, r3
 8012f62:	68f9      	ldr	r1, [r7, #12]
 8012f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f68:	4013      	ands	r3, r2
 8012f6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	015a      	lsls	r2, r3, #5
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	4413      	add	r3, r2
 8012f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	0159      	lsls	r1, r3, #5
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	440b      	add	r3, r1
 8012f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f86:	4619      	mov	r1, r3
 8012f88:	4b35      	ldr	r3, [pc, #212]	; (8013060 <USB_DeactivateEndpoint+0x1b0>)
 8012f8a:	4013      	ands	r3, r2
 8012f8c:	600b      	str	r3, [r1, #0]
 8012f8e:	e060      	b.n	8013052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	015a      	lsls	r2, r3, #5
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	4413      	add	r3, r2
 8012f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012fa6:	d11f      	bne.n	8012fe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	015a      	lsls	r2, r3, #5
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	0151      	lsls	r1, r2, #5
 8012fba:	68fa      	ldr	r2, [r7, #12]
 8012fbc:	440a      	add	r2, r1
 8012fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012fc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	015a      	lsls	r2, r3, #5
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	4413      	add	r3, r2
 8012fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	68ba      	ldr	r2, [r7, #8]
 8012fd8:	0151      	lsls	r1, r2, #5
 8012fda:	68fa      	ldr	r2, [r7, #12]
 8012fdc:	440a      	add	r2, r1
 8012fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 030f 	and.w	r3, r3, #15
 8012ff8:	2101      	movs	r1, #1
 8012ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8012ffe:	041b      	lsls	r3, r3, #16
 8013000:	43db      	mvns	r3, r3
 8013002:	68f9      	ldr	r1, [r7, #12]
 8013004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013008:	4013      	ands	r3, r2
 801300a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013012:	69da      	ldr	r2, [r3, #28]
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f003 030f 	and.w	r3, r3, #15
 801301c:	2101      	movs	r1, #1
 801301e:	fa01 f303 	lsl.w	r3, r1, r3
 8013022:	041b      	lsls	r3, r3, #16
 8013024:	43db      	mvns	r3, r3
 8013026:	68f9      	ldr	r1, [r7, #12]
 8013028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801302c:	4013      	ands	r3, r2
 801302e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	015a      	lsls	r2, r3, #5
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	4413      	add	r3, r2
 8013038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801303c:	681a      	ldr	r2, [r3, #0]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	0159      	lsls	r1, r3, #5
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	440b      	add	r3, r1
 8013046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801304a:	4619      	mov	r1, r3
 801304c:	4b05      	ldr	r3, [pc, #20]	; (8013064 <USB_DeactivateEndpoint+0x1b4>)
 801304e:	4013      	ands	r3, r2
 8013050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3714      	adds	r7, #20
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr
 8013060:	ec337800 	.word	0xec337800
 8013064:	eff37800 	.word	0xeff37800

08013068 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b08a      	sub	sp, #40	; 0x28
 801306c:	af02      	add	r7, sp, #8
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	4613      	mov	r3, r2
 8013074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	785b      	ldrb	r3, [r3, #1]
 8013084:	2b01      	cmp	r3, #1
 8013086:	f040 815c 	bne.w	8013342 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	695b      	ldr	r3, [r3, #20]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d132      	bne.n	80130f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	015a      	lsls	r2, r3, #5
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	4413      	add	r3, r2
 801309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	69ba      	ldr	r2, [r7, #24]
 80130a2:	0151      	lsls	r1, r2, #5
 80130a4:	69fa      	ldr	r2, [r7, #28]
 80130a6:	440a      	add	r2, r1
 80130a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80130b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80130b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	015a      	lsls	r2, r3, #5
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	4413      	add	r3, r2
 80130be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c2:	691b      	ldr	r3, [r3, #16]
 80130c4:	69ba      	ldr	r2, [r7, #24]
 80130c6:	0151      	lsls	r1, r2, #5
 80130c8:	69fa      	ldr	r2, [r7, #28]
 80130ca:	440a      	add	r2, r1
 80130cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	015a      	lsls	r2, r3, #5
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	4413      	add	r3, r2
 80130de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e2:	691b      	ldr	r3, [r3, #16]
 80130e4:	69ba      	ldr	r2, [r7, #24]
 80130e6:	0151      	lsls	r1, r2, #5
 80130e8:	69fa      	ldr	r2, [r7, #28]
 80130ea:	440a      	add	r2, r1
 80130ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130f0:	0cdb      	lsrs	r3, r3, #19
 80130f2:	04db      	lsls	r3, r3, #19
 80130f4:	6113      	str	r3, [r2, #16]
 80130f6:	e074      	b.n	80131e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	015a      	lsls	r2, r3, #5
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	4413      	add	r3, r2
 8013100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	69ba      	ldr	r2, [r7, #24]
 8013108:	0151      	lsls	r1, r2, #5
 801310a:	69fa      	ldr	r2, [r7, #28]
 801310c:	440a      	add	r2, r1
 801310e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013112:	0cdb      	lsrs	r3, r3, #19
 8013114:	04db      	lsls	r3, r3, #19
 8013116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	015a      	lsls	r2, r3, #5
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	4413      	add	r3, r2
 8013120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	69ba      	ldr	r2, [r7, #24]
 8013128:	0151      	lsls	r1, r2, #5
 801312a:	69fa      	ldr	r2, [r7, #28]
 801312c:	440a      	add	r2, r1
 801312e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801313a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	015a      	lsls	r2, r3, #5
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	4413      	add	r3, r2
 8013144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013148:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	6959      	ldr	r1, [r3, #20]
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	689b      	ldr	r3, [r3, #8]
 8013152:	440b      	add	r3, r1
 8013154:	1e59      	subs	r1, r3, #1
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	689b      	ldr	r3, [r3, #8]
 801315a:	fbb1 f3f3 	udiv	r3, r1, r3
 801315e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013160:	4b9d      	ldr	r3, [pc, #628]	; (80133d8 <USB_EPStartXfer+0x370>)
 8013162:	400b      	ands	r3, r1
 8013164:	69b9      	ldr	r1, [r7, #24]
 8013166:	0148      	lsls	r0, r1, #5
 8013168:	69f9      	ldr	r1, [r7, #28]
 801316a:	4401      	add	r1, r0
 801316c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013170:	4313      	orrs	r3, r2
 8013172:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	015a      	lsls	r2, r3, #5
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	4413      	add	r3, r2
 801317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013180:	691a      	ldr	r2, [r3, #16]
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	695b      	ldr	r3, [r3, #20]
 8013186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801318a:	69b9      	ldr	r1, [r7, #24]
 801318c:	0148      	lsls	r0, r1, #5
 801318e:	69f9      	ldr	r1, [r7, #28]
 8013190:	4401      	add	r1, r0
 8013192:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013196:	4313      	orrs	r3, r2
 8013198:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	78db      	ldrb	r3, [r3, #3]
 801319e:	2b01      	cmp	r3, #1
 80131a0:	d11f      	bne.n	80131e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	015a      	lsls	r2, r3, #5
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	4413      	add	r3, r2
 80131aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ae:	691b      	ldr	r3, [r3, #16]
 80131b0:	69ba      	ldr	r2, [r7, #24]
 80131b2:	0151      	lsls	r1, r2, #5
 80131b4:	69fa      	ldr	r2, [r7, #28]
 80131b6:	440a      	add	r2, r1
 80131b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80131c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	015a      	lsls	r2, r3, #5
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	4413      	add	r3, r2
 80131ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	69ba      	ldr	r2, [r7, #24]
 80131d2:	0151      	lsls	r1, r2, #5
 80131d4:	69fa      	ldr	r2, [r7, #28]
 80131d6:	440a      	add	r2, r1
 80131d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80131e2:	79fb      	ldrb	r3, [r7, #7]
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d14b      	bne.n	8013280 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	691b      	ldr	r3, [r3, #16]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d009      	beq.n	8013204 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	015a      	lsls	r2, r3, #5
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	4413      	add	r3, r2
 80131f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131fc:	461a      	mov	r2, r3
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	691b      	ldr	r3, [r3, #16]
 8013202:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	78db      	ldrb	r3, [r3, #3]
 8013208:	2b01      	cmp	r3, #1
 801320a:	d128      	bne.n	801325e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013218:	2b00      	cmp	r3, #0
 801321a:	d110      	bne.n	801323e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	015a      	lsls	r2, r3, #5
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	4413      	add	r3, r2
 8013224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	69ba      	ldr	r2, [r7, #24]
 801322c:	0151      	lsls	r1, r2, #5
 801322e:	69fa      	ldr	r2, [r7, #28]
 8013230:	440a      	add	r2, r1
 8013232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801323a:	6013      	str	r3, [r2, #0]
 801323c:	e00f      	b.n	801325e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	015a      	lsls	r2, r3, #5
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	4413      	add	r3, r2
 8013246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	69ba      	ldr	r2, [r7, #24]
 801324e:	0151      	lsls	r1, r2, #5
 8013250:	69fa      	ldr	r2, [r7, #28]
 8013252:	440a      	add	r2, r1
 8013254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801325c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	015a      	lsls	r2, r3, #5
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	4413      	add	r3, r2
 8013266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	69ba      	ldr	r2, [r7, #24]
 801326e:	0151      	lsls	r1, r2, #5
 8013270:	69fa      	ldr	r2, [r7, #28]
 8013272:	440a      	add	r2, r1
 8013274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013278:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801327c:	6013      	str	r3, [r2, #0]
 801327e:	e12f      	b.n	80134e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	69ba      	ldr	r2, [r7, #24]
 8013290:	0151      	lsls	r1, r2, #5
 8013292:	69fa      	ldr	r2, [r7, #28]
 8013294:	440a      	add	r2, r1
 8013296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801329a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801329e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	78db      	ldrb	r3, [r3, #3]
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d015      	beq.n	80132d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	695b      	ldr	r3, [r3, #20]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 8117 	beq.w	80134e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	f003 030f 	and.w	r3, r3, #15
 80132c2:	2101      	movs	r1, #1
 80132c4:	fa01 f303 	lsl.w	r3, r1, r3
 80132c8:	69f9      	ldr	r1, [r7, #28]
 80132ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132ce:	4313      	orrs	r3, r2
 80132d0:	634b      	str	r3, [r1, #52]	; 0x34
 80132d2:	e105      	b.n	80134e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132da:	689b      	ldr	r3, [r3, #8]
 80132dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d110      	bne.n	8013306 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	69ba      	ldr	r2, [r7, #24]
 80132f4:	0151      	lsls	r1, r2, #5
 80132f6:	69fa      	ldr	r2, [r7, #28]
 80132f8:	440a      	add	r2, r1
 80132fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013302:	6013      	str	r3, [r2, #0]
 8013304:	e00f      	b.n	8013326 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	015a      	lsls	r2, r3, #5
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	4413      	add	r3, r2
 801330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	69ba      	ldr	r2, [r7, #24]
 8013316:	0151      	lsls	r1, r2, #5
 8013318:	69fa      	ldr	r2, [r7, #28]
 801331a:	440a      	add	r2, r1
 801331c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013324:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	68d9      	ldr	r1, [r3, #12]
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	781a      	ldrb	r2, [r3, #0]
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	b298      	uxth	r0, r3
 8013334:	79fb      	ldrb	r3, [r7, #7]
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	4603      	mov	r3, r0
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f000 fa2b 	bl	8013796 <USB_WritePacket>
 8013340:	e0ce      	b.n	80134e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	015a      	lsls	r2, r3, #5
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	4413      	add	r3, r2
 801334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801334e:	691b      	ldr	r3, [r3, #16]
 8013350:	69ba      	ldr	r2, [r7, #24]
 8013352:	0151      	lsls	r1, r2, #5
 8013354:	69fa      	ldr	r2, [r7, #28]
 8013356:	440a      	add	r2, r1
 8013358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801335c:	0cdb      	lsrs	r3, r3, #19
 801335e:	04db      	lsls	r3, r3, #19
 8013360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	015a      	lsls	r2, r3, #5
 8013366:	69fb      	ldr	r3, [r7, #28]
 8013368:	4413      	add	r3, r2
 801336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801336e:	691b      	ldr	r3, [r3, #16]
 8013370:	69ba      	ldr	r2, [r7, #24]
 8013372:	0151      	lsls	r1, r2, #5
 8013374:	69fa      	ldr	r2, [r7, #28]
 8013376:	440a      	add	r2, r1
 8013378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801337c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013380:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013384:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	695b      	ldr	r3, [r3, #20]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d126      	bne.n	80133dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	015a      	lsls	r2, r3, #5
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	4413      	add	r3, r2
 8013396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339a:	691a      	ldr	r2, [r3, #16]
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133a4:	69b9      	ldr	r1, [r7, #24]
 80133a6:	0148      	lsls	r0, r1, #5
 80133a8:	69f9      	ldr	r1, [r7, #28]
 80133aa:	4401      	add	r1, r0
 80133ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133b0:	4313      	orrs	r3, r2
 80133b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	015a      	lsls	r2, r3, #5
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	4413      	add	r3, r2
 80133bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c0:	691b      	ldr	r3, [r3, #16]
 80133c2:	69ba      	ldr	r2, [r7, #24]
 80133c4:	0151      	lsls	r1, r2, #5
 80133c6:	69fa      	ldr	r2, [r7, #28]
 80133c8:	440a      	add	r2, r1
 80133ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133d2:	6113      	str	r3, [r2, #16]
 80133d4:	e036      	b.n	8013444 <USB_EPStartXfer+0x3dc>
 80133d6:	bf00      	nop
 80133d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	695a      	ldr	r2, [r3, #20]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	4413      	add	r3, r2
 80133e6:	1e5a      	subs	r2, r3, #1
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80133f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	015a      	lsls	r2, r3, #5
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	4413      	add	r3, r2
 80133fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133fe:	691a      	ldr	r2, [r3, #16]
 8013400:	8afb      	ldrh	r3, [r7, #22]
 8013402:	04d9      	lsls	r1, r3, #19
 8013404:	4b39      	ldr	r3, [pc, #228]	; (80134ec <USB_EPStartXfer+0x484>)
 8013406:	400b      	ands	r3, r1
 8013408:	69b9      	ldr	r1, [r7, #24]
 801340a:	0148      	lsls	r0, r1, #5
 801340c:	69f9      	ldr	r1, [r7, #28]
 801340e:	4401      	add	r1, r0
 8013410:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013414:	4313      	orrs	r3, r2
 8013416:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	015a      	lsls	r2, r3, #5
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	4413      	add	r3, r2
 8013420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013424:	691a      	ldr	r2, [r3, #16]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	689b      	ldr	r3, [r3, #8]
 801342a:	8af9      	ldrh	r1, [r7, #22]
 801342c:	fb01 f303 	mul.w	r3, r1, r3
 8013430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013434:	69b9      	ldr	r1, [r7, #24]
 8013436:	0148      	lsls	r0, r1, #5
 8013438:	69f9      	ldr	r1, [r7, #28]
 801343a:	4401      	add	r1, r0
 801343c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013440:	4313      	orrs	r3, r2
 8013442:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d10d      	bne.n	8013466 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d009      	beq.n	8013466 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	68d9      	ldr	r1, [r3, #12]
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	015a      	lsls	r2, r3, #5
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	4413      	add	r3, r2
 801345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013462:	460a      	mov	r2, r1
 8013464:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	78db      	ldrb	r3, [r3, #3]
 801346a:	2b01      	cmp	r3, #1
 801346c:	d128      	bne.n	80134c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013474:	689b      	ldr	r3, [r3, #8]
 8013476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801347a:	2b00      	cmp	r3, #0
 801347c:	d110      	bne.n	80134a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	015a      	lsls	r2, r3, #5
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	4413      	add	r3, r2
 8013486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	69ba      	ldr	r2, [r7, #24]
 801348e:	0151      	lsls	r1, r2, #5
 8013490:	69fa      	ldr	r2, [r7, #28]
 8013492:	440a      	add	r2, r1
 8013494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801349c:	6013      	str	r3, [r2, #0]
 801349e:	e00f      	b.n	80134c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	015a      	lsls	r2, r3, #5
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	4413      	add	r3, r2
 80134a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	69ba      	ldr	r2, [r7, #24]
 80134b0:	0151      	lsls	r1, r2, #5
 80134b2:	69fa      	ldr	r2, [r7, #28]
 80134b4:	440a      	add	r2, r1
 80134b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80134be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	015a      	lsls	r2, r3, #5
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	4413      	add	r3, r2
 80134c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	69ba      	ldr	r2, [r7, #24]
 80134d0:	0151      	lsls	r1, r2, #5
 80134d2:	69fa      	ldr	r2, [r7, #28]
 80134d4:	440a      	add	r2, r1
 80134d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80134de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3720      	adds	r7, #32
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	1ff80000 	.word	0x1ff80000

080134f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b087      	sub	sp, #28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	4613      	mov	r3, r2
 80134fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	785b      	ldrb	r3, [r3, #1]
 801350c:	2b01      	cmp	r3, #1
 801350e:	f040 80cd 	bne.w	80136ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	695b      	ldr	r3, [r3, #20]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d132      	bne.n	8013580 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	015a      	lsls	r2, r3, #5
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	4413      	add	r3, r2
 8013522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013526:	691b      	ldr	r3, [r3, #16]
 8013528:	693a      	ldr	r2, [r7, #16]
 801352a:	0151      	lsls	r1, r2, #5
 801352c:	697a      	ldr	r2, [r7, #20]
 801352e:	440a      	add	r2, r1
 8013530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801353c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	015a      	lsls	r2, r3, #5
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	4413      	add	r3, r2
 8013546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801354a:	691b      	ldr	r3, [r3, #16]
 801354c:	693a      	ldr	r2, [r7, #16]
 801354e:	0151      	lsls	r1, r2, #5
 8013550:	697a      	ldr	r2, [r7, #20]
 8013552:	440a      	add	r2, r1
 8013554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801355c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	015a      	lsls	r2, r3, #5
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	4413      	add	r3, r2
 8013566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	693a      	ldr	r2, [r7, #16]
 801356e:	0151      	lsls	r1, r2, #5
 8013570:	697a      	ldr	r2, [r7, #20]
 8013572:	440a      	add	r2, r1
 8013574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013578:	0cdb      	lsrs	r3, r3, #19
 801357a:	04db      	lsls	r3, r3, #19
 801357c:	6113      	str	r3, [r2, #16]
 801357e:	e04e      	b.n	801361e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	691b      	ldr	r3, [r3, #16]
 801358e:	693a      	ldr	r2, [r7, #16]
 8013590:	0151      	lsls	r1, r2, #5
 8013592:	697a      	ldr	r2, [r7, #20]
 8013594:	440a      	add	r2, r1
 8013596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801359a:	0cdb      	lsrs	r3, r3, #19
 801359c:	04db      	lsls	r3, r3, #19
 801359e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	015a      	lsls	r2, r3, #5
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	4413      	add	r3, r2
 80135a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ac:	691b      	ldr	r3, [r3, #16]
 80135ae:	693a      	ldr	r2, [r7, #16]
 80135b0:	0151      	lsls	r1, r2, #5
 80135b2:	697a      	ldr	r2, [r7, #20]
 80135b4:	440a      	add	r2, r1
 80135b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80135be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80135c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	695a      	ldr	r2, [r3, #20]
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d903      	bls.n	80135d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	689a      	ldr	r2, [r3, #8]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	015a      	lsls	r2, r3, #5
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	4413      	add	r3, r2
 80135e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135e4:	691b      	ldr	r3, [r3, #16]
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	0151      	lsls	r1, r2, #5
 80135ea:	697a      	ldr	r2, [r7, #20]
 80135ec:	440a      	add	r2, r1
 80135ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80135f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013604:	691a      	ldr	r2, [r3, #16]
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	695b      	ldr	r3, [r3, #20]
 801360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801360e:	6939      	ldr	r1, [r7, #16]
 8013610:	0148      	lsls	r0, r1, #5
 8013612:	6979      	ldr	r1, [r7, #20]
 8013614:	4401      	add	r1, r0
 8013616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801361a:	4313      	orrs	r3, r2
 801361c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801361e:	79fb      	ldrb	r3, [r7, #7]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d11e      	bne.n	8013662 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	691b      	ldr	r3, [r3, #16]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d009      	beq.n	8013640 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	015a      	lsls	r2, r3, #5
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	4413      	add	r3, r2
 8013634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013638:	461a      	mov	r2, r3
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	691b      	ldr	r3, [r3, #16]
 801363e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	693a      	ldr	r2, [r7, #16]
 8013650:	0151      	lsls	r1, r2, #5
 8013652:	697a      	ldr	r2, [r7, #20]
 8013654:	440a      	add	r2, r1
 8013656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801365a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801365e:	6013      	str	r3, [r2, #0]
 8013660:	e092      	b.n	8013788 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	015a      	lsls	r2, r3, #5
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	4413      	add	r3, r2
 801366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	693a      	ldr	r2, [r7, #16]
 8013672:	0151      	lsls	r1, r2, #5
 8013674:	697a      	ldr	r2, [r7, #20]
 8013676:	440a      	add	r2, r1
 8013678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801367c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013680:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	695b      	ldr	r3, [r3, #20]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d07e      	beq.n	8013788 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	f003 030f 	and.w	r3, r3, #15
 801369a:	2101      	movs	r1, #1
 801369c:	fa01 f303 	lsl.w	r3, r1, r3
 80136a0:	6979      	ldr	r1, [r7, #20]
 80136a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136a6:	4313      	orrs	r3, r2
 80136a8:	634b      	str	r3, [r1, #52]	; 0x34
 80136aa:	e06d      	b.n	8013788 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	015a      	lsls	r2, r3, #5
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	4413      	add	r3, r2
 80136b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b8:	691b      	ldr	r3, [r3, #16]
 80136ba:	693a      	ldr	r2, [r7, #16]
 80136bc:	0151      	lsls	r1, r2, #5
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	440a      	add	r2, r1
 80136c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136c6:	0cdb      	lsrs	r3, r3, #19
 80136c8:	04db      	lsls	r3, r3, #19
 80136ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	015a      	lsls	r2, r3, #5
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	4413      	add	r3, r2
 80136d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d8:	691b      	ldr	r3, [r3, #16]
 80136da:	693a      	ldr	r2, [r7, #16]
 80136dc:	0151      	lsls	r1, r2, #5
 80136de:	697a      	ldr	r2, [r7, #20]
 80136e0:	440a      	add	r2, r1
 80136e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80136ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80136ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d003      	beq.n	8013700 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	689a      	ldr	r2, [r3, #8]
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	0151      	lsls	r1, r2, #5
 8013712:	697a      	ldr	r2, [r7, #20]
 8013714:	440a      	add	r2, r1
 8013716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801371a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801371e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	015a      	lsls	r2, r3, #5
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	4413      	add	r3, r2
 8013728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372c:	691a      	ldr	r2, [r3, #16]
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013736:	6939      	ldr	r1, [r7, #16]
 8013738:	0148      	lsls	r0, r1, #5
 801373a:	6979      	ldr	r1, [r7, #20]
 801373c:	4401      	add	r1, r0
 801373e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013742:	4313      	orrs	r3, r2
 8013744:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013746:	79fb      	ldrb	r3, [r7, #7]
 8013748:	2b01      	cmp	r3, #1
 801374a:	d10d      	bne.n	8013768 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d009      	beq.n	8013768 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	68d9      	ldr	r1, [r3, #12]
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	015a      	lsls	r2, r3, #5
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	4413      	add	r3, r2
 8013760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013764:	460a      	mov	r2, r1
 8013766:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	015a      	lsls	r2, r3, #5
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	4413      	add	r3, r2
 8013770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	693a      	ldr	r2, [r7, #16]
 8013778:	0151      	lsls	r1, r2, #5
 801377a:	697a      	ldr	r2, [r7, #20]
 801377c:	440a      	add	r2, r1
 801377e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	371c      	adds	r7, #28
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr

08013796 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013796:	b480      	push	{r7}
 8013798:	b089      	sub	sp, #36	; 0x24
 801379a:	af00      	add	r7, sp, #0
 801379c:	60f8      	str	r0, [r7, #12]
 801379e:	60b9      	str	r1, [r7, #8]
 80137a0:	4611      	mov	r1, r2
 80137a2:	461a      	mov	r2, r3
 80137a4:	460b      	mov	r3, r1
 80137a6:	71fb      	strb	r3, [r7, #7]
 80137a8:	4613      	mov	r3, r2
 80137aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80137b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d123      	bne.n	8013804 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80137bc:	88bb      	ldrh	r3, [r7, #4]
 80137be:	3303      	adds	r3, #3
 80137c0:	089b      	lsrs	r3, r3, #2
 80137c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80137c4:	2300      	movs	r3, #0
 80137c6:	61bb      	str	r3, [r7, #24]
 80137c8:	e018      	b.n	80137fc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80137ca:	79fb      	ldrb	r3, [r7, #7]
 80137cc:	031a      	lsls	r2, r3, #12
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	4413      	add	r3, r2
 80137d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137d6:	461a      	mov	r2, r3
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	3301      	adds	r3, #1
 80137e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	3301      	adds	r3, #1
 80137e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	3301      	adds	r3, #1
 80137ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	3301      	adds	r3, #1
 80137f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	3301      	adds	r3, #1
 80137fa:	61bb      	str	r3, [r7, #24]
 80137fc:	69ba      	ldr	r2, [r7, #24]
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	429a      	cmp	r2, r3
 8013802:	d3e2      	bcc.n	80137ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3724      	adds	r7, #36	; 0x24
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr

08013812 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013812:	b480      	push	{r7}
 8013814:	b08b      	sub	sp, #44	; 0x2c
 8013816:	af00      	add	r7, sp, #0
 8013818:	60f8      	str	r0, [r7, #12]
 801381a:	60b9      	str	r1, [r7, #8]
 801381c:	4613      	mov	r3, r2
 801381e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013828:	88fb      	ldrh	r3, [r7, #6]
 801382a:	089b      	lsrs	r3, r3, #2
 801382c:	b29b      	uxth	r3, r3
 801382e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013830:	88fb      	ldrh	r3, [r7, #6]
 8013832:	f003 0303 	and.w	r3, r3, #3
 8013836:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013838:	2300      	movs	r3, #0
 801383a:	623b      	str	r3, [r7, #32]
 801383c:	e014      	b.n	8013868 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	601a      	str	r2, [r3, #0]
    pDest++;
 801384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384c:	3301      	adds	r3, #1
 801384e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	3301      	adds	r3, #1
 8013854:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013858:	3301      	adds	r3, #1
 801385a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	3301      	adds	r3, #1
 8013860:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013862:	6a3b      	ldr	r3, [r7, #32]
 8013864:	3301      	adds	r3, #1
 8013866:	623b      	str	r3, [r7, #32]
 8013868:	6a3a      	ldr	r2, [r7, #32]
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	429a      	cmp	r2, r3
 801386e:	d3e6      	bcc.n	801383e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013870:	8bfb      	ldrh	r3, [r7, #30]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d01e      	beq.n	80138b4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013876:	2300      	movs	r3, #0
 8013878:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013880:	461a      	mov	r2, r3
 8013882:	f107 0310 	add.w	r3, r7, #16
 8013886:	6812      	ldr	r2, [r2, #0]
 8013888:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801388a:	693a      	ldr	r2, [r7, #16]
 801388c:	6a3b      	ldr	r3, [r7, #32]
 801388e:	b2db      	uxtb	r3, r3
 8013890:	00db      	lsls	r3, r3, #3
 8013892:	fa22 f303 	lsr.w	r3, r2, r3
 8013896:	b2da      	uxtb	r2, r3
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	701a      	strb	r2, [r3, #0]
      i++;
 801389c:	6a3b      	ldr	r3, [r7, #32]
 801389e:	3301      	adds	r3, #1
 80138a0:	623b      	str	r3, [r7, #32]
      pDest++;
 80138a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a4:	3301      	adds	r3, #1
 80138a6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80138a8:	8bfb      	ldrh	r3, [r7, #30]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80138ae:	8bfb      	ldrh	r3, [r7, #30]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1ea      	bne.n	801388a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80138b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	372c      	adds	r7, #44	; 0x2c
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr

080138c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138c2:	b480      	push	{r7}
 80138c4:	b085      	sub	sp, #20
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	785b      	ldrb	r3, [r3, #1]
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d12c      	bne.n	8013938 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	015a      	lsls	r2, r3, #5
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	4413      	add	r3, r2
 80138e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	db12      	blt.n	8013916 <USB_EPSetStall+0x54>
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d00f      	beq.n	8013916 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	015a      	lsls	r2, r3, #5
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	4413      	add	r3, r2
 80138fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	0151      	lsls	r1, r2, #5
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	440a      	add	r2, r1
 801390c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013910:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013914:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	015a      	lsls	r2, r3, #5
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	4413      	add	r3, r2
 801391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	68ba      	ldr	r2, [r7, #8]
 8013926:	0151      	lsls	r1, r2, #5
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	440a      	add	r2, r1
 801392c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013934:	6013      	str	r3, [r2, #0]
 8013936:	e02b      	b.n	8013990 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	015a      	lsls	r2, r3, #5
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	4413      	add	r3, r2
 8013940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	db12      	blt.n	8013970 <USB_EPSetStall+0xae>
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00f      	beq.n	8013970 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	015a      	lsls	r2, r3, #5
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	4413      	add	r3, r2
 8013958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	68ba      	ldr	r2, [r7, #8]
 8013960:	0151      	lsls	r1, r2, #5
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	440a      	add	r2, r1
 8013966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801396a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801396e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	015a      	lsls	r2, r3, #5
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	4413      	add	r3, r2
 8013978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	0151      	lsls	r1, r2, #5
 8013982:	68fa      	ldr	r2, [r7, #12]
 8013984:	440a      	add	r2, r1
 8013986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801398a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801398e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3714      	adds	r7, #20
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr

0801399e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801399e:	b480      	push	{r7}
 80139a0:	b085      	sub	sp, #20
 80139a2:	af00      	add	r7, sp, #0
 80139a4:	6078      	str	r0, [r7, #4]
 80139a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d128      	bne.n	8013a0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	015a      	lsls	r2, r3, #5
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	4413      	add	r3, r2
 80139c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	0151      	lsls	r1, r2, #5
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	440a      	add	r2, r1
 80139d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	78db      	ldrb	r3, [r3, #3]
 80139de:	2b03      	cmp	r3, #3
 80139e0:	d003      	beq.n	80139ea <USB_EPClearStall+0x4c>
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	78db      	ldrb	r3, [r3, #3]
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	d138      	bne.n	8013a5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	015a      	lsls	r2, r3, #5
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	4413      	add	r3, r2
 80139f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	68ba      	ldr	r2, [r7, #8]
 80139fa:	0151      	lsls	r1, r2, #5
 80139fc:	68fa      	ldr	r2, [r7, #12]
 80139fe:	440a      	add	r2, r1
 8013a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a08:	6013      	str	r3, [r2, #0]
 8013a0a:	e027      	b.n	8013a5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	015a      	lsls	r2, r3, #5
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	68ba      	ldr	r2, [r7, #8]
 8013a1c:	0151      	lsls	r1, r2, #5
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	440a      	add	r2, r1
 8013a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	78db      	ldrb	r3, [r3, #3]
 8013a30:	2b03      	cmp	r3, #3
 8013a32:	d003      	beq.n	8013a3c <USB_EPClearStall+0x9e>
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	78db      	ldrb	r3, [r3, #3]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d10f      	bne.n	8013a5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	0151      	lsls	r1, r2, #5
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	440a      	add	r2, r1
 8013a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3714      	adds	r7, #20
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b085      	sub	sp, #20
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	460b      	mov	r3, r1
 8013a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013a8c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	78fb      	ldrb	r3, [r7, #3]
 8013a98:	011b      	lsls	r3, r3, #4
 8013a9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013a9e:	68f9      	ldr	r1, [r7, #12]
 8013aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3714      	adds	r7, #20
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr

08013ab6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013ab6:	b480      	push	{r7}
 8013ab8:	b085      	sub	sp, #20
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ad0:	f023 0303 	bic.w	r3, r3, #3
 8013ad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	68fa      	ldr	r2, [r7, #12]
 8013ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ae4:	f023 0302 	bic.w	r3, r3, #2
 8013ae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013aea:	2300      	movs	r3, #0
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3714      	adds	r7, #20
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b085      	sub	sp, #20
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b12:	f023 0303 	bic.w	r3, r3, #3
 8013b16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b26:	f043 0302 	orr.w	r3, r3, #2
 8013b2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3714      	adds	r7, #20
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013b3a:	b480      	push	{r7}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	695b      	ldr	r3, [r3, #20]
 8013b46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	699b      	ldr	r3, [r3, #24]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	4013      	ands	r3, r2
 8013b50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013b52:	68fb      	ldr	r3, [r7, #12]
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3714      	adds	r7, #20
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b72:	699b      	ldr	r3, [r3, #24]
 8013b74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b7c:	69db      	ldr	r3, [r3, #28]
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	4013      	ands	r3, r2
 8013b82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	0c1b      	lsrs	r3, r3, #16
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3714      	adds	r7, #20
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr

08013b94 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ba6:	699b      	ldr	r3, [r3, #24]
 8013ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb0:	69db      	ldr	r3, [r3, #28]
 8013bb2:	68ba      	ldr	r2, [r7, #8]
 8013bb4:	4013      	ands	r3, r2
 8013bb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	b29b      	uxth	r3, r3
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3714      	adds	r7, #20
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc6:	4770      	bx	lr

08013bc8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b085      	sub	sp, #20
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013bd8:	78fb      	ldrb	r3, [r7, #3]
 8013bda:	015a      	lsls	r2, r3, #5
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	4413      	add	r3, r2
 8013be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bee:	695b      	ldr	r3, [r3, #20]
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	4013      	ands	r3, r2
 8013bf4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013bf6:	68bb      	ldr	r3, [r7, #8]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3714      	adds	r7, #20
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b087      	sub	sp, #28
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c1a:	691b      	ldr	r3, [r3, #16]
 8013c1c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c26:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013c28:	78fb      	ldrb	r3, [r7, #3]
 8013c2a:	f003 030f 	and.w	r3, r3, #15
 8013c2e:	68fa      	ldr	r2, [r7, #12]
 8013c30:	fa22 f303 	lsr.w	r3, r2, r3
 8013c34:	01db      	lsls	r3, r3, #7
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	693a      	ldr	r2, [r7, #16]
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013c3e:	78fb      	ldrb	r3, [r7, #3]
 8013c40:	015a      	lsls	r2, r3, #5
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	4413      	add	r3, r2
 8013c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	693a      	ldr	r2, [r7, #16]
 8013c4e:	4013      	ands	r3, r2
 8013c50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013c52:	68bb      	ldr	r3, [r7, #8]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	371c      	adds	r7, #28
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr

08013c60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	f003 0301 	and.w	r3, r3, #1
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b085      	sub	sp, #20
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013c9a:	f023 0307 	bic.w	r3, r3, #7
 8013c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cb4:	2300      	movs	r3, #0
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3714      	adds	r7, #20
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
	...

08013cc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b087      	sub	sp, #28
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	333c      	adds	r3, #60	; 0x3c
 8013cda:	3304      	adds	r3, #4
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	4a26      	ldr	r2, [pc, #152]	; (8013d7c <USB_EP0_OutStart+0xb8>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d90a      	bls.n	8013cfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013cf8:	d101      	bne.n	8013cfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e037      	b.n	8013d6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d04:	461a      	mov	r2, r3
 8013d06:	2300      	movs	r3, #0
 8013d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	697a      	ldr	r2, [r7, #20]
 8013d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	697a      	ldr	r2, [r7, #20]
 8013d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d2c:	f043 0318 	orr.w	r3, r3, #24
 8013d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d38:	691b      	ldr	r3, [r3, #16]
 8013d3a:	697a      	ldr	r2, [r7, #20]
 8013d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013d44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013d46:	7afb      	ldrb	r3, [r7, #11]
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d10f      	bne.n	8013d6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d52:	461a      	mov	r2, r3
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	697a      	ldr	r2, [r7, #20]
 8013d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	371c      	adds	r7, #28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr
 8013d7a:	bf00      	nop
 8013d7c:	4f54300a 	.word	0x4f54300a

08013d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b085      	sub	sp, #20
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	60fb      	str	r3, [r7, #12]
 8013d92:	4a13      	ldr	r2, [pc, #76]	; (8013de0 <USB_CoreReset+0x60>)
 8013d94:	4293      	cmp	r3, r2
 8013d96:	d901      	bls.n	8013d9c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8013d98:	2303      	movs	r3, #3
 8013d9a:	e01a      	b.n	8013dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	691b      	ldr	r3, [r3, #16]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	daf3      	bge.n	8013d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013da4:	2300      	movs	r3, #0
 8013da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	691b      	ldr	r3, [r3, #16]
 8013dac:	f043 0201 	orr.w	r2, r3, #1
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	3301      	adds	r3, #1
 8013db8:	60fb      	str	r3, [r7, #12]
 8013dba:	4a09      	ldr	r2, [pc, #36]	; (8013de0 <USB_CoreReset+0x60>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d901      	bls.n	8013dc4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8013dc0:	2303      	movs	r3, #3
 8013dc2:	e006      	b.n	8013dd2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	691b      	ldr	r3, [r3, #16]
 8013dc8:	f003 0301 	and.w	r3, r3, #1
 8013dcc:	2b01      	cmp	r3, #1
 8013dce:	d0f1      	beq.n	8013db4 <USB_CoreReset+0x34>

  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3714      	adds	r7, #20
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop
 8013de0:	00030d40 	.word	0x00030d40

08013de4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013df0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013df4:	f002 f906 	bl	8016004 <USBD_static_malloc>
 8013df8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d105      	bne.n	8013e0c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2200      	movs	r2, #0
 8013e04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013e08:	2302      	movs	r3, #2
 8013e0a:	e066      	b.n	8013eda <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	68fa      	ldr	r2, [r7, #12]
 8013e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7c1b      	ldrb	r3, [r3, #16]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d119      	bne.n	8013e50 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e20:	2202      	movs	r2, #2
 8013e22:	2181      	movs	r1, #129	; 0x81
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f001 ffca 	bl	8015dbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e34:	2202      	movs	r2, #2
 8013e36:	2101      	movs	r1, #1
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f001 ffc0 	bl	8015dbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2201      	movs	r2, #1
 8013e42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2210      	movs	r2, #16
 8013e4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013e4e:	e016      	b.n	8013e7e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013e50:	2340      	movs	r3, #64	; 0x40
 8013e52:	2202      	movs	r2, #2
 8013e54:	2181      	movs	r1, #129	; 0x81
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f001 ffb1 	bl	8015dbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2201      	movs	r2, #1
 8013e60:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013e62:	2340      	movs	r3, #64	; 0x40
 8013e64:	2202      	movs	r2, #2
 8013e66:	2101      	movs	r1, #1
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f001 ffa8 	bl	8015dbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2201      	movs	r2, #1
 8013e72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2210      	movs	r2, #16
 8013e7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013e7e:	2308      	movs	r3, #8
 8013e80:	2203      	movs	r2, #3
 8013e82:	2182      	movs	r1, #130	; 0x82
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f001 ff9a 	bl	8015dbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	7c1b      	ldrb	r3, [r3, #16]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d109      	bne.n	8013ec8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f002 f86b 	bl	8015f9c <USBD_LL_PrepareReceive>
 8013ec6:	e007      	b.n	8013ed8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013ece:	2340      	movs	r3, #64	; 0x40
 8013ed0:	2101      	movs	r1, #1
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f002 f862 	bl	8015f9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013ed8:	2300      	movs	r3, #0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ee2:	b580      	push	{r7, lr}
 8013ee4:	b082      	sub	sp, #8
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
 8013eea:	460b      	mov	r3, r1
 8013eec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013eee:	2181      	movs	r1, #129	; 0x81
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f001 ff8a 	bl	8015e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013efc:	2101      	movs	r1, #1
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f001 ff83 	bl	8015e0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013f0c:	2182      	movs	r1, #130	; 0x82
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f001 ff7b 	bl	8015e0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2200      	movs	r2, #0
 8013f20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00e      	beq.n	8013f4c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f002 f86e 	bl	8016020 <USBD_static_free>
    pdev->pClassData = NULL;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013f4c:	2300      	movs	r3, #0
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3708      	adds	r7, #8
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}
	...

08013f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b086      	sub	sp, #24
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f72:	2300      	movs	r3, #0
 8013f74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d101      	bne.n	8013f80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013f7c:	2303      	movs	r3, #3
 8013f7e:	e0af      	b.n	80140e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d03f      	beq.n	801400c <USBD_CDC_Setup+0xb4>
 8013f8c:	2b20      	cmp	r3, #32
 8013f8e:	f040 809f 	bne.w	80140d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	88db      	ldrh	r3, [r3, #6]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d02e      	beq.n	8013ff8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	b25b      	sxtb	r3, r3
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	da16      	bge.n	8013fd2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013faa:	689b      	ldr	r3, [r3, #8]
 8013fac:	683a      	ldr	r2, [r7, #0]
 8013fae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013fb0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013fb2:	683a      	ldr	r2, [r7, #0]
 8013fb4:	88d2      	ldrh	r2, [r2, #6]
 8013fb6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	88db      	ldrh	r3, [r3, #6]
 8013fbc:	2b07      	cmp	r3, #7
 8013fbe:	bf28      	it	cs
 8013fc0:	2307      	movcs	r3, #7
 8013fc2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	89fa      	ldrh	r2, [r7, #14]
 8013fc8:	4619      	mov	r1, r3
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f001 fae9 	bl	80155a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013fd0:	e085      	b.n	80140de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	785a      	ldrb	r2, [r3, #1]
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	88db      	ldrh	r3, [r3, #6]
 8013fe0:	b2da      	uxtb	r2, r3
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013fe8:	6939      	ldr	r1, [r7, #16]
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	88db      	ldrh	r3, [r3, #6]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f001 fb02 	bl	80155fa <USBD_CtlPrepareRx>
      break;
 8013ff6:	e072      	b.n	80140de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ffe:	689b      	ldr	r3, [r3, #8]
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	7850      	ldrb	r0, [r2, #1]
 8014004:	2200      	movs	r2, #0
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	4798      	blx	r3
      break;
 801400a:	e068      	b.n	80140de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	785b      	ldrb	r3, [r3, #1]
 8014010:	2b0b      	cmp	r3, #11
 8014012:	d852      	bhi.n	80140ba <USBD_CDC_Setup+0x162>
 8014014:	a201      	add	r2, pc, #4	; (adr r2, 801401c <USBD_CDC_Setup+0xc4>)
 8014016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801401a:	bf00      	nop
 801401c:	0801404d 	.word	0x0801404d
 8014020:	080140c9 	.word	0x080140c9
 8014024:	080140bb 	.word	0x080140bb
 8014028:	080140bb 	.word	0x080140bb
 801402c:	080140bb 	.word	0x080140bb
 8014030:	080140bb 	.word	0x080140bb
 8014034:	080140bb 	.word	0x080140bb
 8014038:	080140bb 	.word	0x080140bb
 801403c:	080140bb 	.word	0x080140bb
 8014040:	080140bb 	.word	0x080140bb
 8014044:	08014077 	.word	0x08014077
 8014048:	080140a1 	.word	0x080140a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014052:	b2db      	uxtb	r3, r3
 8014054:	2b03      	cmp	r3, #3
 8014056:	d107      	bne.n	8014068 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014058:	f107 030a 	add.w	r3, r7, #10
 801405c:	2202      	movs	r2, #2
 801405e:	4619      	mov	r1, r3
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f001 fa9e 	bl	80155a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014066:	e032      	b.n	80140ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014068:	6839      	ldr	r1, [r7, #0]
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f001 fa28 	bl	80154c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8014070:	2303      	movs	r3, #3
 8014072:	75fb      	strb	r3, [r7, #23]
          break;
 8014074:	e02b      	b.n	80140ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b03      	cmp	r3, #3
 8014080:	d107      	bne.n	8014092 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014082:	f107 030d 	add.w	r3, r7, #13
 8014086:	2201      	movs	r2, #1
 8014088:	4619      	mov	r1, r3
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f001 fa89 	bl	80155a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014090:	e01d      	b.n	80140ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014092:	6839      	ldr	r1, [r7, #0]
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f001 fa13 	bl	80154c0 <USBD_CtlError>
            ret = USBD_FAIL;
 801409a:	2303      	movs	r3, #3
 801409c:	75fb      	strb	r3, [r7, #23]
          break;
 801409e:	e016      	b.n	80140ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b03      	cmp	r3, #3
 80140aa:	d00f      	beq.n	80140cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80140ac:	6839      	ldr	r1, [r7, #0]
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f001 fa06 	bl	80154c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80140b4:	2303      	movs	r3, #3
 80140b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80140b8:	e008      	b.n	80140cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80140ba:	6839      	ldr	r1, [r7, #0]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f001 f9ff 	bl	80154c0 <USBD_CtlError>
          ret = USBD_FAIL;
 80140c2:	2303      	movs	r3, #3
 80140c4:	75fb      	strb	r3, [r7, #23]
          break;
 80140c6:	e002      	b.n	80140ce <USBD_CDC_Setup+0x176>
          break;
 80140c8:	bf00      	nop
 80140ca:	e008      	b.n	80140de <USBD_CDC_Setup+0x186>
          break;
 80140cc:	bf00      	nop
      }
      break;
 80140ce:	e006      	b.n	80140de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80140d0:	6839      	ldr	r1, [r7, #0]
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f001 f9f4 	bl	80154c0 <USBD_CtlError>
      ret = USBD_FAIL;
 80140d8:	2303      	movs	r3, #3
 80140da:	75fb      	strb	r3, [r7, #23]
      break;
 80140dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80140de:	7dfb      	ldrb	r3, [r7, #23]
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3718      	adds	r7, #24
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	460b      	mov	r3, r1
 80140f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80140fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014102:	2b00      	cmp	r3, #0
 8014104:	d101      	bne.n	801410a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014106:	2303      	movs	r3, #3
 8014108:	e04f      	b.n	80141aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014110:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014112:	78fa      	ldrb	r2, [r7, #3]
 8014114:	6879      	ldr	r1, [r7, #4]
 8014116:	4613      	mov	r3, r2
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	4413      	add	r3, r2
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	440b      	add	r3, r1
 8014120:	3318      	adds	r3, #24
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d029      	beq.n	801417c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014128:	78fa      	ldrb	r2, [r7, #3]
 801412a:	6879      	ldr	r1, [r7, #4]
 801412c:	4613      	mov	r3, r2
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	4413      	add	r3, r2
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	440b      	add	r3, r1
 8014136:	3318      	adds	r3, #24
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	78f9      	ldrb	r1, [r7, #3]
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	460b      	mov	r3, r1
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	1a5b      	subs	r3, r3, r1
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	4403      	add	r3, r0
 8014148:	3344      	adds	r3, #68	; 0x44
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014150:	fb03 f301 	mul.w	r3, r3, r1
 8014154:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014156:	2b00      	cmp	r3, #0
 8014158:	d110      	bne.n	801417c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801415a:	78fa      	ldrb	r2, [r7, #3]
 801415c:	6879      	ldr	r1, [r7, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4413      	add	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	440b      	add	r3, r1
 8014168:	3318      	adds	r3, #24
 801416a:	2200      	movs	r2, #0
 801416c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801416e:	78f9      	ldrb	r1, [r7, #3]
 8014170:	2300      	movs	r3, #0
 8014172:	2200      	movs	r2, #0
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f001 fef0 	bl	8015f5a <USBD_LL_Transmit>
 801417a:	e015      	b.n	80141a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2200      	movs	r2, #0
 8014180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d00b      	beq.n	80141a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014196:	691b      	ldr	r3, [r3, #16]
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801419e:	68ba      	ldr	r2, [r7, #8]
 80141a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80141a4:	78fa      	ldrb	r2, [r7, #3]
 80141a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80141a8:	2300      	movs	r3, #0
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3710      	adds	r7, #16
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}

080141b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80141b2:	b580      	push	{r7, lr}
 80141b4:	b084      	sub	sp, #16
 80141b6:	af00      	add	r7, sp, #0
 80141b8:	6078      	str	r0, [r7, #4]
 80141ba:	460b      	mov	r3, r1
 80141bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d101      	bne.n	80141d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80141d0:	2303      	movs	r3, #3
 80141d2:	e015      	b.n	8014200 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80141d4:	78fb      	ldrb	r3, [r7, #3]
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f001 ff00 	bl	8015fde <USBD_LL_GetRxDataSize>
 80141de:	4602      	mov	r2, r0
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	68fa      	ldr	r2, [r7, #12]
 80141f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80141f4:	68fa      	ldr	r2, [r7, #12]
 80141f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80141fa:	4611      	mov	r1, r2
 80141fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80141fe:	2300      	movs	r3, #0
}
 8014200:	4618      	mov	r0, r3
 8014202:	3710      	adds	r7, #16
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b084      	sub	sp, #16
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014216:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d101      	bne.n	8014222 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801421e:	2303      	movs	r3, #3
 8014220:	e01b      	b.n	801425a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d015      	beq.n	8014258 <USBD_CDC_EP0_RxReady+0x50>
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014232:	2bff      	cmp	r3, #255	; 0xff
 8014234:	d010      	beq.n	8014258 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	68fa      	ldr	r2, [r7, #12]
 8014240:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014244:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801424c:	b292      	uxth	r2, r2
 801424e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	22ff      	movs	r2, #255	; 0xff
 8014254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	3710      	adds	r7, #16
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
	...

08014264 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2243      	movs	r2, #67	; 0x43
 8014270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014272:	4b03      	ldr	r3, [pc, #12]	; (8014280 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014274:	4618      	mov	r0, r3
 8014276:	370c      	adds	r7, #12
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr
 8014280:	200000dc 	.word	0x200000dc

08014284 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2243      	movs	r2, #67	; 0x43
 8014290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014292:	4b03      	ldr	r3, [pc, #12]	; (80142a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014294:	4618      	mov	r0, r3
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr
 80142a0:	20000098 	.word	0x20000098

080142a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80142a4:	b480      	push	{r7}
 80142a6:	b083      	sub	sp, #12
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2243      	movs	r2, #67	; 0x43
 80142b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80142b2:	4b03      	ldr	r3, [pc, #12]	; (80142c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr
 80142c0:	20000120 	.word	0x20000120

080142c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80142c4:	b480      	push	{r7}
 80142c6:	b083      	sub	sp, #12
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	220a      	movs	r2, #10
 80142d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80142d2:	4b03      	ldr	r3, [pc, #12]	; (80142e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr
 80142e0:	20000054 	.word	0x20000054

080142e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d101      	bne.n	80142f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80142f4:	2303      	movs	r3, #3
 80142f6:	e004      	b.n	8014302 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	370c      	adds	r7, #12
 8014306:	46bd      	mov	sp, r7
 8014308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430c:	4770      	bx	lr

0801430e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801430e:	b480      	push	{r7}
 8014310:	b087      	sub	sp, #28
 8014312:	af00      	add	r7, sp, #0
 8014314:	60f8      	str	r0, [r7, #12]
 8014316:	60b9      	str	r1, [r7, #8]
 8014318:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014320:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014328:	2303      	movs	r3, #3
 801432a:	e008      	b.n	801433e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	68ba      	ldr	r2, [r7, #8]
 8014330:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801433c:	2300      	movs	r3, #0
}
 801433e:	4618      	mov	r0, r3
 8014340:	371c      	adds	r7, #28
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801434a:	b480      	push	{r7}
 801434c:	b085      	sub	sp, #20
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
 8014352:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801435a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d101      	bne.n	8014366 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014362:	2303      	movs	r3, #3
 8014364:	e004      	b.n	8014370 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3714      	adds	r7, #20
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr

0801437c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801438a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014396:	2303      	movs	r3, #3
 8014398:	e016      	b.n	80143c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	7c1b      	ldrb	r3, [r3, #16]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d109      	bne.n	80143b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143ac:	2101      	movs	r1, #1
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f001 fdf4 	bl	8015f9c <USBD_LL_PrepareReceive>
 80143b4:	e007      	b.n	80143c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143bc:	2340      	movs	r3, #64	; 0x40
 80143be:	2101      	movs	r1, #1
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f001 fdeb 	bl	8015f9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3710      	adds	r7, #16
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b086      	sub	sp, #24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	4613      	mov	r3, r2
 80143dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d101      	bne.n	80143e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80143e4:	2303      	movs	r3, #3
 80143e6:	e01f      	b.n	8014428 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2200      	movs	r2, #0
 80143ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2200      	movs	r2, #0
 80143f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d003      	beq.n	801440e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	68ba      	ldr	r2, [r7, #8]
 801440a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2201      	movs	r2, #1
 8014412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	79fa      	ldrb	r2, [r7, #7]
 801441a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f001 fc67 	bl	8015cf0 <USBD_LL_Init>
 8014422:	4603      	mov	r3, r0
 8014424:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014426:	7dfb      	ldrb	r3, [r7, #23]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801443a:	2300      	movs	r3, #0
 801443c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014444:	2303      	movs	r3, #3
 8014446:	e016      	b.n	8014476 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	683a      	ldr	r2, [r7, #0]
 801444c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00b      	beq.n	8014474 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014464:	f107 020e 	add.w	r2, r7, #14
 8014468:	4610      	mov	r0, r2
 801446a:	4798      	blx	r3
 801446c:	4602      	mov	r2, r0
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801447e:	b580      	push	{r7, lr}
 8014480:	b082      	sub	sp, #8
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f001 fc7e 	bl	8015d88 <USBD_LL_Start>
 801448c:	4603      	mov	r3, r0
}
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014496:	b480      	push	{r7}
 8014498:	b083      	sub	sp, #12
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801449e:	2300      	movs	r3, #0
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	460b      	mov	r3, r1
 80144b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80144b8:	2303      	movs	r3, #3
 80144ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d009      	beq.n	80144da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	78fa      	ldrb	r2, [r7, #3]
 80144d0:	4611      	mov	r1, r2
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	4798      	blx	r3
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80144da:	7bfb      	ldrb	r3, [r7, #15]
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3710      	adds	r7, #16
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	460b      	mov	r3, r1
 80144ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	78fa      	ldrb	r2, [r7, #3]
 8014504:	4611      	mov	r1, r2
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	4798      	blx	r3
  }

  return USBD_OK;
 801450a:	2300      	movs	r3, #0
}
 801450c:	4618      	mov	r0, r3
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	4618      	mov	r0, r3
 8014528:	f000 ff90 	bl	801544c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2201      	movs	r2, #1
 8014530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801453a:	461a      	mov	r2, r3
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014548:	f003 031f 	and.w	r3, r3, #31
 801454c:	2b02      	cmp	r3, #2
 801454e:	d01a      	beq.n	8014586 <USBD_LL_SetupStage+0x72>
 8014550:	2b02      	cmp	r3, #2
 8014552:	d822      	bhi.n	801459a <USBD_LL_SetupStage+0x86>
 8014554:	2b00      	cmp	r3, #0
 8014556:	d002      	beq.n	801455e <USBD_LL_SetupStage+0x4a>
 8014558:	2b01      	cmp	r3, #1
 801455a:	d00a      	beq.n	8014572 <USBD_LL_SetupStage+0x5e>
 801455c:	e01d      	b.n	801459a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014564:	4619      	mov	r1, r3
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 fa62 	bl	8014a30 <USBD_StdDevReq>
 801456c:	4603      	mov	r3, r0
 801456e:	73fb      	strb	r3, [r7, #15]
      break;
 8014570:	e020      	b.n	80145b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014578:	4619      	mov	r1, r3
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fac6 	bl	8014b0c <USBD_StdItfReq>
 8014580:	4603      	mov	r3, r0
 8014582:	73fb      	strb	r3, [r7, #15]
      break;
 8014584:	e016      	b.n	80145b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801458c:	4619      	mov	r1, r3
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 fb05 	bl	8014b9e <USBD_StdEPReq>
 8014594:	4603      	mov	r3, r0
 8014596:	73fb      	strb	r3, [r7, #15]
      break;
 8014598:	e00c      	b.n	80145b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80145a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	4619      	mov	r1, r3
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f001 fc4d 	bl	8015e48 <USBD_LL_StallEP>
 80145ae:	4603      	mov	r3, r0
 80145b0:	73fb      	strb	r3, [r7, #15]
      break;
 80145b2:	bf00      	nop
  }

  return ret;
 80145b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}

080145be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80145be:	b580      	push	{r7, lr}
 80145c0:	b086      	sub	sp, #24
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	60f8      	str	r0, [r7, #12]
 80145c6:	460b      	mov	r3, r1
 80145c8:	607a      	str	r2, [r7, #4]
 80145ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80145cc:	7afb      	ldrb	r3, [r7, #11]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d138      	bne.n	8014644 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80145d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145e0:	2b03      	cmp	r3, #3
 80145e2:	d14a      	bne.n	801467a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	689a      	ldr	r2, [r3, #8]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d913      	bls.n	8014618 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	689a      	ldr	r2, [r3, #8]
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	1ad2      	subs	r2, r2, r3
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	68da      	ldr	r2, [r3, #12]
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	4293      	cmp	r3, r2
 8014608:	bf28      	it	cs
 801460a:	4613      	movcs	r3, r2
 801460c:	461a      	mov	r2, r3
 801460e:	6879      	ldr	r1, [r7, #4]
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f001 f80f 	bl	8015634 <USBD_CtlContinueRx>
 8014616:	e030      	b.n	801467a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801461e:	b2db      	uxtb	r3, r3
 8014620:	2b03      	cmp	r3, #3
 8014622:	d10b      	bne.n	801463c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801462a:	691b      	ldr	r3, [r3, #16]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d005      	beq.n	801463c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014636:	691b      	ldr	r3, [r3, #16]
 8014638:	68f8      	ldr	r0, [r7, #12]
 801463a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801463c:	68f8      	ldr	r0, [r7, #12]
 801463e:	f001 f80a 	bl	8015656 <USBD_CtlSendStatus>
 8014642:	e01a      	b.n	801467a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801464a:	b2db      	uxtb	r3, r3
 801464c:	2b03      	cmp	r3, #3
 801464e:	d114      	bne.n	801467a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014656:	699b      	ldr	r3, [r3, #24]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00e      	beq.n	801467a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014662:	699b      	ldr	r3, [r3, #24]
 8014664:	7afa      	ldrb	r2, [r7, #11]
 8014666:	4611      	mov	r1, r2
 8014668:	68f8      	ldr	r0, [r7, #12]
 801466a:	4798      	blx	r3
 801466c:	4603      	mov	r3, r0
 801466e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014670:	7dfb      	ldrb	r3, [r7, #23]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d001      	beq.n	801467a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8014676:	7dfb      	ldrb	r3, [r7, #23]
 8014678:	e000      	b.n	801467c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801467a:	2300      	movs	r3, #0
}
 801467c:	4618      	mov	r0, r3
 801467e:	3718      	adds	r7, #24
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b086      	sub	sp, #24
 8014688:	af00      	add	r7, sp, #0
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	460b      	mov	r3, r1
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014692:	7afb      	ldrb	r3, [r7, #11]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d16b      	bne.n	8014770 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	3314      	adds	r3, #20
 801469c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80146a4:	2b02      	cmp	r3, #2
 80146a6:	d156      	bne.n	8014756 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80146a8:	693b      	ldr	r3, [r7, #16]
 80146aa:	689a      	ldr	r2, [r3, #8]
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d914      	bls.n	80146de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	689a      	ldr	r2, [r3, #8]
 80146b8:	693b      	ldr	r3, [r7, #16]
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	1ad2      	subs	r2, r2, r3
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	461a      	mov	r2, r3
 80146c8:	6879      	ldr	r1, [r7, #4]
 80146ca:	68f8      	ldr	r0, [r7, #12]
 80146cc:	f000 ff84 	bl	80155d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146d0:	2300      	movs	r3, #0
 80146d2:	2200      	movs	r2, #0
 80146d4:	2100      	movs	r1, #0
 80146d6:	68f8      	ldr	r0, [r7, #12]
 80146d8:	f001 fc60 	bl	8015f9c <USBD_LL_PrepareReceive>
 80146dc:	e03b      	b.n	8014756 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	68da      	ldr	r2, [r3, #12]
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d11c      	bne.n	8014724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d316      	bcc.n	8014724 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	685a      	ldr	r2, [r3, #4]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014700:	429a      	cmp	r2, r3
 8014702:	d20f      	bcs.n	8014724 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014704:	2200      	movs	r2, #0
 8014706:	2100      	movs	r1, #0
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f000 ff65 	bl	80155d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2200      	movs	r2, #0
 8014712:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014716:	2300      	movs	r3, #0
 8014718:	2200      	movs	r2, #0
 801471a:	2100      	movs	r1, #0
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f001 fc3d 	bl	8015f9c <USBD_LL_PrepareReceive>
 8014722:	e018      	b.n	8014756 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801472a:	b2db      	uxtb	r3, r3
 801472c:	2b03      	cmp	r3, #3
 801472e:	d10b      	bne.n	8014748 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014736:	68db      	ldr	r3, [r3, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d005      	beq.n	8014748 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014748:	2180      	movs	r1, #128	; 0x80
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f001 fb7c 	bl	8015e48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	f000 ff93 	bl	801567c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801475c:	2b01      	cmp	r3, #1
 801475e:	d122      	bne.n	80147a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014760:	68f8      	ldr	r0, [r7, #12]
 8014762:	f7ff fe98 	bl	8014496 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	2200      	movs	r2, #0
 801476a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801476e:	e01a      	b.n	80147a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014776:	b2db      	uxtb	r3, r3
 8014778:	2b03      	cmp	r3, #3
 801477a:	d114      	bne.n	80147a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014782:	695b      	ldr	r3, [r3, #20]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d00e      	beq.n	80147a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801478e:	695b      	ldr	r3, [r3, #20]
 8014790:	7afa      	ldrb	r2, [r7, #11]
 8014792:	4611      	mov	r1, r2
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	4798      	blx	r3
 8014798:	4603      	mov	r3, r0
 801479a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801479c:	7dfb      	ldrb	r3, [r7, #23]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d001      	beq.n	80147a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80147a2:	7dfb      	ldrb	r3, [r7, #23]
 80147a4:	e000      	b.n	80147a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3718      	adds	r7, #24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2201      	movs	r2, #1
 80147bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2200      	movs	r2, #0
 80147cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	2200      	movs	r2, #0
 80147d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d101      	bne.n	80147e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80147e0:	2303      	movs	r3, #3
 80147e2:	e02f      	b.n	8014844 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00f      	beq.n	801480e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d009      	beq.n	801480e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	6852      	ldr	r2, [r2, #4]
 8014806:	b2d2      	uxtb	r2, r2
 8014808:	4611      	mov	r1, r2
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801480e:	2340      	movs	r3, #64	; 0x40
 8014810:	2200      	movs	r2, #0
 8014812:	2100      	movs	r1, #0
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f001 fad2 	bl	8015dbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2201      	movs	r2, #1
 801481e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2240      	movs	r2, #64	; 0x40
 8014826:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801482a:	2340      	movs	r3, #64	; 0x40
 801482c:	2200      	movs	r2, #0
 801482e:	2180      	movs	r1, #128	; 0x80
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f001 fac4 	bl	8015dbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2201      	movs	r2, #1
 801483a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2240      	movs	r2, #64	; 0x40
 8014840:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014842:	2300      	movs	r3, #0
}
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	460b      	mov	r3, r1
 8014856:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	78fa      	ldrb	r2, [r7, #3]
 801485c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801485e:	2300      	movs	r3, #0
}
 8014860:	4618      	mov	r0, r3
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801487a:	b2da      	uxtb	r2, r3
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2204      	movs	r2, #4
 8014886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr

08014898 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014898:	b480      	push	{r7}
 801489a:	b083      	sub	sp, #12
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	2b04      	cmp	r3, #4
 80148aa:	d106      	bne.n	80148ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80148b2:	b2da      	uxtb	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80148ba:	2300      	movs	r3, #0
}
 80148bc:	4618      	mov	r0, r3
 80148be:	370c      	adds	r7, #12
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr

080148c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d101      	bne.n	80148de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80148da:	2303      	movs	r3, #3
 80148dc:	e012      	b.n	8014904 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b03      	cmp	r3, #3
 80148e8:	d10b      	bne.n	8014902 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148f0:	69db      	ldr	r3, [r3, #28]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d005      	beq.n	8014902 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fc:	69db      	ldr	r3, [r3, #28]
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014902:	2300      	movs	r3, #0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3708      	adds	r7, #8
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	460b      	mov	r3, r1
 8014916:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801491e:	2b00      	cmp	r3, #0
 8014920:	d101      	bne.n	8014926 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014922:	2303      	movs	r3, #3
 8014924:	e014      	b.n	8014950 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801492c:	b2db      	uxtb	r3, r3
 801492e:	2b03      	cmp	r3, #3
 8014930:	d10d      	bne.n	801494e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014938:	6a1b      	ldr	r3, [r3, #32]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d007      	beq.n	801494e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014944:	6a1b      	ldr	r3, [r3, #32]
 8014946:	78fa      	ldrb	r2, [r7, #3]
 8014948:	4611      	mov	r1, r2
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	460b      	mov	r3, r1
 8014962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801496a:	2b00      	cmp	r3, #0
 801496c:	d101      	bne.n	8014972 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801496e:	2303      	movs	r3, #3
 8014970:	e014      	b.n	801499c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014978:	b2db      	uxtb	r3, r3
 801497a:	2b03      	cmp	r3, #3
 801497c:	d10d      	bne.n	801499a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014986:	2b00      	cmp	r3, #0
 8014988:	d007      	beq.n	801499a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014992:	78fa      	ldrb	r2, [r7, #3]
 8014994:	4611      	mov	r1, r2
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801499a:	2300      	movs	r3, #0
}
 801499c:	4618      	mov	r0, r3
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	370c      	adds	r7, #12
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr

080149ba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80149ba:	b580      	push	{r7, lr}
 80149bc:	b082      	sub	sp, #8
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2201      	movs	r2, #1
 80149c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d009      	beq.n	80149e8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	6852      	ldr	r2, [r2, #4]
 80149e0:	b2d2      	uxtb	r2, r2
 80149e2:	4611      	mov	r1, r2
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	4798      	blx	r3
  }

  return USBD_OK;
 80149e8:	2300      	movs	r3, #0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80149f2:	b480      	push	{r7}
 80149f4:	b087      	sub	sp, #28
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	3301      	adds	r3, #1
 8014a08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014a10:	8a3b      	ldrh	r3, [r7, #16]
 8014a12:	021b      	lsls	r3, r3, #8
 8014a14:	b21a      	sxth	r2, r3
 8014a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a1a:	4313      	orrs	r3, r2
 8014a1c:	b21b      	sxth	r3, r3
 8014a1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014a20:	89fb      	ldrh	r3, [r7, #14]
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	371c      	adds	r7, #28
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr
	...

08014a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a46:	2b40      	cmp	r3, #64	; 0x40
 8014a48:	d005      	beq.n	8014a56 <USBD_StdDevReq+0x26>
 8014a4a:	2b40      	cmp	r3, #64	; 0x40
 8014a4c:	d853      	bhi.n	8014af6 <USBD_StdDevReq+0xc6>
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00b      	beq.n	8014a6a <USBD_StdDevReq+0x3a>
 8014a52:	2b20      	cmp	r3, #32
 8014a54:	d14f      	bne.n	8014af6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a5c:	689b      	ldr	r3, [r3, #8]
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	4798      	blx	r3
 8014a64:	4603      	mov	r3, r0
 8014a66:	73fb      	strb	r3, [r7, #15]
      break;
 8014a68:	e04a      	b.n	8014b00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	785b      	ldrb	r3, [r3, #1]
 8014a6e:	2b09      	cmp	r3, #9
 8014a70:	d83b      	bhi.n	8014aea <USBD_StdDevReq+0xba>
 8014a72:	a201      	add	r2, pc, #4	; (adr r2, 8014a78 <USBD_StdDevReq+0x48>)
 8014a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a78:	08014acd 	.word	0x08014acd
 8014a7c:	08014ae1 	.word	0x08014ae1
 8014a80:	08014aeb 	.word	0x08014aeb
 8014a84:	08014ad7 	.word	0x08014ad7
 8014a88:	08014aeb 	.word	0x08014aeb
 8014a8c:	08014aab 	.word	0x08014aab
 8014a90:	08014aa1 	.word	0x08014aa1
 8014a94:	08014aeb 	.word	0x08014aeb
 8014a98:	08014ac3 	.word	0x08014ac3
 8014a9c:	08014ab5 	.word	0x08014ab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014aa0:	6839      	ldr	r1, [r7, #0]
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f000 f9de 	bl	8014e64 <USBD_GetDescriptor>
          break;
 8014aa8:	e024      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 fb43 	bl	8015138 <USBD_SetAddress>
          break;
 8014ab2:	e01f      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014ab4:	6839      	ldr	r1, [r7, #0]
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f000 fb82 	bl	80151c0 <USBD_SetConfig>
 8014abc:	4603      	mov	r3, r0
 8014abe:	73fb      	strb	r3, [r7, #15]
          break;
 8014ac0:	e018      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014ac2:	6839      	ldr	r1, [r7, #0]
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 fc21 	bl	801530c <USBD_GetConfig>
          break;
 8014aca:	e013      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014acc:	6839      	ldr	r1, [r7, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fc52 	bl	8015378 <USBD_GetStatus>
          break;
 8014ad4:	e00e      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f000 fc81 	bl	80153e0 <USBD_SetFeature>
          break;
 8014ade:	e009      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014ae0:	6839      	ldr	r1, [r7, #0]
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 fc90 	bl	8015408 <USBD_ClrFeature>
          break;
 8014ae8:	e004      	b.n	8014af4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fce7 	bl	80154c0 <USBD_CtlError>
          break;
 8014af2:	bf00      	nop
      }
      break;
 8014af4:	e004      	b.n	8014b00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 fce1 	bl	80154c0 <USBD_CtlError>
      break;
 8014afe:	bf00      	nop
  }

  return ret;
 8014b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b02:	4618      	mov	r0, r3
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop

08014b0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b16:	2300      	movs	r3, #0
 8014b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b22:	2b40      	cmp	r3, #64	; 0x40
 8014b24:	d005      	beq.n	8014b32 <USBD_StdItfReq+0x26>
 8014b26:	2b40      	cmp	r3, #64	; 0x40
 8014b28:	d82f      	bhi.n	8014b8a <USBD_StdItfReq+0x7e>
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <USBD_StdItfReq+0x26>
 8014b2e:	2b20      	cmp	r3, #32
 8014b30:	d12b      	bne.n	8014b8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	3b01      	subs	r3, #1
 8014b3c:	2b02      	cmp	r3, #2
 8014b3e:	d81d      	bhi.n	8014b7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	889b      	ldrh	r3, [r3, #4]
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d813      	bhi.n	8014b72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	6839      	ldr	r1, [r7, #0]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	4798      	blx	r3
 8014b58:	4603      	mov	r3, r0
 8014b5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	88db      	ldrh	r3, [r3, #6]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d110      	bne.n	8014b86 <USBD_StdItfReq+0x7a>
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d10d      	bne.n	8014b86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 fd73 	bl	8015656 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014b70:	e009      	b.n	8014b86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014b72:	6839      	ldr	r1, [r7, #0]
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 fca3 	bl	80154c0 <USBD_CtlError>
          break;
 8014b7a:	e004      	b.n	8014b86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014b7c:	6839      	ldr	r1, [r7, #0]
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f000 fc9e 	bl	80154c0 <USBD_CtlError>
          break;
 8014b84:	e000      	b.n	8014b88 <USBD_StdItfReq+0x7c>
          break;
 8014b86:	bf00      	nop
      }
      break;
 8014b88:	e004      	b.n	8014b94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 fc97 	bl	80154c0 <USBD_CtlError>
      break;
 8014b92:	bf00      	nop
  }

  return ret;
 8014b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3710      	adds	r7, #16
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	889b      	ldrh	r3, [r3, #4]
 8014bb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bba:	2b40      	cmp	r3, #64	; 0x40
 8014bbc:	d007      	beq.n	8014bce <USBD_StdEPReq+0x30>
 8014bbe:	2b40      	cmp	r3, #64	; 0x40
 8014bc0:	f200 8145 	bhi.w	8014e4e <USBD_StdEPReq+0x2b0>
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d00c      	beq.n	8014be2 <USBD_StdEPReq+0x44>
 8014bc8:	2b20      	cmp	r3, #32
 8014bca:	f040 8140 	bne.w	8014e4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	4798      	blx	r3
 8014bdc:	4603      	mov	r3, r0
 8014bde:	73fb      	strb	r3, [r7, #15]
      break;
 8014be0:	e13a      	b.n	8014e58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b03      	cmp	r3, #3
 8014be8:	d007      	beq.n	8014bfa <USBD_StdEPReq+0x5c>
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	f300 8129 	bgt.w	8014e42 <USBD_StdEPReq+0x2a4>
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d07f      	beq.n	8014cf4 <USBD_StdEPReq+0x156>
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d03c      	beq.n	8014c72 <USBD_StdEPReq+0xd4>
 8014bf8:	e123      	b.n	8014e42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	2b02      	cmp	r3, #2
 8014c04:	d002      	beq.n	8014c0c <USBD_StdEPReq+0x6e>
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	d016      	beq.n	8014c38 <USBD_StdEPReq+0x9a>
 8014c0a:	e02c      	b.n	8014c66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c0c:	7bbb      	ldrb	r3, [r7, #14]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d00d      	beq.n	8014c2e <USBD_StdEPReq+0x90>
 8014c12:	7bbb      	ldrb	r3, [r7, #14]
 8014c14:	2b80      	cmp	r3, #128	; 0x80
 8014c16:	d00a      	beq.n	8014c2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c18:	7bbb      	ldrb	r3, [r7, #14]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f001 f913 	bl	8015e48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c22:	2180      	movs	r1, #128	; 0x80
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f001 f90f 	bl	8015e48 <USBD_LL_StallEP>
 8014c2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c2c:	e020      	b.n	8014c70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	6878      	ldr	r0, [r7, #4]
 8014c32:	f000 fc45 	bl	80154c0 <USBD_CtlError>
              break;
 8014c36:	e01b      	b.n	8014c70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	885b      	ldrh	r3, [r3, #2]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d10e      	bne.n	8014c5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014c40:	7bbb      	ldrb	r3, [r7, #14]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00b      	beq.n	8014c5e <USBD_StdEPReq+0xc0>
 8014c46:	7bbb      	ldrb	r3, [r7, #14]
 8014c48:	2b80      	cmp	r3, #128	; 0x80
 8014c4a:	d008      	beq.n	8014c5e <USBD_StdEPReq+0xc0>
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	88db      	ldrh	r3, [r3, #6]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d104      	bne.n	8014c5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
 8014c56:	4619      	mov	r1, r3
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f001 f8f5 	bl	8015e48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fcf9 	bl	8015656 <USBD_CtlSendStatus>

              break;
 8014c64:	e004      	b.n	8014c70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fc29 	bl	80154c0 <USBD_CtlError>
              break;
 8014c6e:	bf00      	nop
          }
          break;
 8014c70:	e0ec      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	d002      	beq.n	8014c84 <USBD_StdEPReq+0xe6>
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d016      	beq.n	8014cb0 <USBD_StdEPReq+0x112>
 8014c82:	e030      	b.n	8014ce6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c84:	7bbb      	ldrb	r3, [r7, #14]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d00d      	beq.n	8014ca6 <USBD_StdEPReq+0x108>
 8014c8a:	7bbb      	ldrb	r3, [r7, #14]
 8014c8c:	2b80      	cmp	r3, #128	; 0x80
 8014c8e:	d00a      	beq.n	8014ca6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c90:	7bbb      	ldrb	r3, [r7, #14]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f001 f8d7 	bl	8015e48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c9a:	2180      	movs	r1, #128	; 0x80
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f001 f8d3 	bl	8015e48 <USBD_LL_StallEP>
 8014ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ca4:	e025      	b.n	8014cf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014ca6:	6839      	ldr	r1, [r7, #0]
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f000 fc09 	bl	80154c0 <USBD_CtlError>
              break;
 8014cae:	e020      	b.n	8014cf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	885b      	ldrh	r3, [r3, #2]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d11b      	bne.n	8014cf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014cb8:	7bbb      	ldrb	r3, [r7, #14]
 8014cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d004      	beq.n	8014ccc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014cc2:	7bbb      	ldrb	r3, [r7, #14]
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	f001 f8dd 	bl	8015e86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f000 fcc2 	bl	8015656 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014cd8:	689b      	ldr	r3, [r3, #8]
 8014cda:	6839      	ldr	r1, [r7, #0]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	4798      	blx	r3
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014ce4:	e004      	b.n	8014cf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 fbe9 	bl	80154c0 <USBD_CtlError>
              break;
 8014cee:	e000      	b.n	8014cf2 <USBD_StdEPReq+0x154>
              break;
 8014cf0:	bf00      	nop
          }
          break;
 8014cf2:	e0ab      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	2b02      	cmp	r3, #2
 8014cfe:	d002      	beq.n	8014d06 <USBD_StdEPReq+0x168>
 8014d00:	2b03      	cmp	r3, #3
 8014d02:	d032      	beq.n	8014d6a <USBD_StdEPReq+0x1cc>
 8014d04:	e097      	b.n	8014e36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d06:	7bbb      	ldrb	r3, [r7, #14]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d007      	beq.n	8014d1c <USBD_StdEPReq+0x17e>
 8014d0c:	7bbb      	ldrb	r3, [r7, #14]
 8014d0e:	2b80      	cmp	r3, #128	; 0x80
 8014d10:	d004      	beq.n	8014d1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 fbd3 	bl	80154c0 <USBD_CtlError>
                break;
 8014d1a:	e091      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	da0b      	bge.n	8014d3c <USBD_StdEPReq+0x19e>
 8014d24:	7bbb      	ldrb	r3, [r7, #14]
 8014d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4413      	add	r3, r2
 8014d30:	009b      	lsls	r3, r3, #2
 8014d32:	3310      	adds	r3, #16
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	4413      	add	r3, r2
 8014d38:	3304      	adds	r3, #4
 8014d3a:	e00b      	b.n	8014d54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d3c:	7bbb      	ldrb	r3, [r7, #14]
 8014d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d42:	4613      	mov	r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	4413      	add	r3, r2
 8014d52:	3304      	adds	r3, #4
 8014d54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	2202      	movs	r2, #2
 8014d60:	4619      	mov	r1, r3
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f000 fc1d 	bl	80155a2 <USBD_CtlSendData>
              break;
 8014d68:	e06a      	b.n	8014e40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	da11      	bge.n	8014d96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014d72:	7bbb      	ldrb	r3, [r7, #14]
 8014d74:	f003 020f 	and.w	r2, r3, #15
 8014d78:	6879      	ldr	r1, [r7, #4]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	009b      	lsls	r3, r3, #2
 8014d7e:	4413      	add	r3, r2
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	440b      	add	r3, r1
 8014d84:	3324      	adds	r3, #36	; 0x24
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d117      	bne.n	8014dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014d8c:	6839      	ldr	r1, [r7, #0]
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 fb96 	bl	80154c0 <USBD_CtlError>
                  break;
 8014d94:	e054      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014d96:	7bbb      	ldrb	r3, [r7, #14]
 8014d98:	f003 020f 	and.w	r2, r3, #15
 8014d9c:	6879      	ldr	r1, [r7, #4]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	4413      	add	r3, r2
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	440b      	add	r3, r1
 8014da8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d104      	bne.n	8014dbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f000 fb83 	bl	80154c0 <USBD_CtlError>
                  break;
 8014dba:	e041      	b.n	8014e40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	da0b      	bge.n	8014ddc <USBD_StdEPReq+0x23e>
 8014dc4:	7bbb      	ldrb	r3, [r7, #14]
 8014dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dca:	4613      	mov	r3, r2
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	4413      	add	r3, r2
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	3310      	adds	r3, #16
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	3304      	adds	r3, #4
 8014dda:	e00b      	b.n	8014df4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ddc:	7bbb      	ldrb	r3, [r7, #14]
 8014dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014de2:	4613      	mov	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	4413      	add	r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	4413      	add	r3, r2
 8014df2:	3304      	adds	r3, #4
 8014df4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014df6:	7bbb      	ldrb	r3, [r7, #14]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d002      	beq.n	8014e02 <USBD_StdEPReq+0x264>
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	2b80      	cmp	r3, #128	; 0x80
 8014e00:	d103      	bne.n	8014e0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	2200      	movs	r2, #0
 8014e06:	601a      	str	r2, [r3, #0]
 8014e08:	e00e      	b.n	8014e28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014e0a:	7bbb      	ldrb	r3, [r7, #14]
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f001 f858 	bl	8015ec4 <USBD_LL_IsStallEP>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d003      	beq.n	8014e22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	e002      	b.n	8014e28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	2200      	movs	r2, #0
 8014e26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 fbb7 	bl	80155a2 <USBD_CtlSendData>
              break;
 8014e34:	e004      	b.n	8014e40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014e36:	6839      	ldr	r1, [r7, #0]
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f000 fb41 	bl	80154c0 <USBD_CtlError>
              break;
 8014e3e:	bf00      	nop
          }
          break;
 8014e40:	e004      	b.n	8014e4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014e42:	6839      	ldr	r1, [r7, #0]
 8014e44:	6878      	ldr	r0, [r7, #4]
 8014e46:	f000 fb3b 	bl	80154c0 <USBD_CtlError>
          break;
 8014e4a:	bf00      	nop
      }
      break;
 8014e4c:	e004      	b.n	8014e58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014e4e:	6839      	ldr	r1, [r7, #0]
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f000 fb35 	bl	80154c0 <USBD_CtlError>
      break;
 8014e56:	bf00      	nop
  }

  return ret;
 8014e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3710      	adds	r7, #16
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014e72:	2300      	movs	r3, #0
 8014e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014e76:	2300      	movs	r3, #0
 8014e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	885b      	ldrh	r3, [r3, #2]
 8014e7e:	0a1b      	lsrs	r3, r3, #8
 8014e80:	b29b      	uxth	r3, r3
 8014e82:	3b01      	subs	r3, #1
 8014e84:	2b06      	cmp	r3, #6
 8014e86:	f200 8128 	bhi.w	80150da <USBD_GetDescriptor+0x276>
 8014e8a:	a201      	add	r2, pc, #4	; (adr r2, 8014e90 <USBD_GetDescriptor+0x2c>)
 8014e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e90:	08014ead 	.word	0x08014ead
 8014e94:	08014ec5 	.word	0x08014ec5
 8014e98:	08014f05 	.word	0x08014f05
 8014e9c:	080150db 	.word	0x080150db
 8014ea0:	080150db 	.word	0x080150db
 8014ea4:	0801507b 	.word	0x0801507b
 8014ea8:	080150a7 	.word	0x080150a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	7c12      	ldrb	r2, [r2, #16]
 8014eb8:	f107 0108 	add.w	r1, r7, #8
 8014ebc:	4610      	mov	r0, r2
 8014ebe:	4798      	blx	r3
 8014ec0:	60f8      	str	r0, [r7, #12]
      break;
 8014ec2:	e112      	b.n	80150ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	7c1b      	ldrb	r3, [r3, #16]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d10d      	bne.n	8014ee8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ed4:	f107 0208 	add.w	r2, r7, #8
 8014ed8:	4610      	mov	r0, r2
 8014eda:	4798      	blx	r3
 8014edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	3301      	adds	r3, #1
 8014ee2:	2202      	movs	r2, #2
 8014ee4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014ee6:	e100      	b.n	80150ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef0:	f107 0208 	add.w	r2, r7, #8
 8014ef4:	4610      	mov	r0, r2
 8014ef6:	4798      	blx	r3
 8014ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	3301      	adds	r3, #1
 8014efe:	2202      	movs	r2, #2
 8014f00:	701a      	strb	r2, [r3, #0]
      break;
 8014f02:	e0f2      	b.n	80150ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	885b      	ldrh	r3, [r3, #2]
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	2b05      	cmp	r3, #5
 8014f0c:	f200 80ac 	bhi.w	8015068 <USBD_GetDescriptor+0x204>
 8014f10:	a201      	add	r2, pc, #4	; (adr r2, 8014f18 <USBD_GetDescriptor+0xb4>)
 8014f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f16:	bf00      	nop
 8014f18:	08014f31 	.word	0x08014f31
 8014f1c:	08014f65 	.word	0x08014f65
 8014f20:	08014f99 	.word	0x08014f99
 8014f24:	08014fcd 	.word	0x08014fcd
 8014f28:	08015001 	.word	0x08015001
 8014f2c:	08015035 	.word	0x08015035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d00b      	beq.n	8014f54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	7c12      	ldrb	r2, [r2, #16]
 8014f48:	f107 0108 	add.w	r1, r7, #8
 8014f4c:	4610      	mov	r0, r2
 8014f4e:	4798      	blx	r3
 8014f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f52:	e091      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f54:	6839      	ldr	r1, [r7, #0]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f000 fab2 	bl	80154c0 <USBD_CtlError>
            err++;
 8014f5c:	7afb      	ldrb	r3, [r7, #11]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	72fb      	strb	r3, [r7, #11]
          break;
 8014f62:	e089      	b.n	8015078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f6a:	689b      	ldr	r3, [r3, #8]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d00b      	beq.n	8014f88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	7c12      	ldrb	r2, [r2, #16]
 8014f7c:	f107 0108 	add.w	r1, r7, #8
 8014f80:	4610      	mov	r0, r2
 8014f82:	4798      	blx	r3
 8014f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f86:	e077      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f88:	6839      	ldr	r1, [r7, #0]
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f000 fa98 	bl	80154c0 <USBD_CtlError>
            err++;
 8014f90:	7afb      	ldrb	r3, [r7, #11]
 8014f92:	3301      	adds	r3, #1
 8014f94:	72fb      	strb	r3, [r7, #11]
          break;
 8014f96:	e06f      	b.n	8015078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00b      	beq.n	8014fbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	7c12      	ldrb	r2, [r2, #16]
 8014fb0:	f107 0108 	add.w	r1, r7, #8
 8014fb4:	4610      	mov	r0, r2
 8014fb6:	4798      	blx	r3
 8014fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fba:	e05d      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014fbc:	6839      	ldr	r1, [r7, #0]
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 fa7e 	bl	80154c0 <USBD_CtlError>
            err++;
 8014fc4:	7afb      	ldrb	r3, [r7, #11]
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8014fca:	e055      	b.n	8015078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fd2:	691b      	ldr	r3, [r3, #16]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d00b      	beq.n	8014ff0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fde:	691b      	ldr	r3, [r3, #16]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	7c12      	ldrb	r2, [r2, #16]
 8014fe4:	f107 0108 	add.w	r1, r7, #8
 8014fe8:	4610      	mov	r0, r2
 8014fea:	4798      	blx	r3
 8014fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fee:	e043      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ff0:	6839      	ldr	r1, [r7, #0]
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 fa64 	bl	80154c0 <USBD_CtlError>
            err++;
 8014ff8:	7afb      	ldrb	r3, [r7, #11]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8014ffe:	e03b      	b.n	8015078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015006:	695b      	ldr	r3, [r3, #20]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d00b      	beq.n	8015024 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015012:	695b      	ldr	r3, [r3, #20]
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	7c12      	ldrb	r2, [r2, #16]
 8015018:	f107 0108 	add.w	r1, r7, #8
 801501c:	4610      	mov	r0, r2
 801501e:	4798      	blx	r3
 8015020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015022:	e029      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015024:	6839      	ldr	r1, [r7, #0]
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fa4a 	bl	80154c0 <USBD_CtlError>
            err++;
 801502c:	7afb      	ldrb	r3, [r7, #11]
 801502e:	3301      	adds	r3, #1
 8015030:	72fb      	strb	r3, [r7, #11]
          break;
 8015032:	e021      	b.n	8015078 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801503a:	699b      	ldr	r3, [r3, #24]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00b      	beq.n	8015058 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015046:	699b      	ldr	r3, [r3, #24]
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	7c12      	ldrb	r2, [r2, #16]
 801504c:	f107 0108 	add.w	r1, r7, #8
 8015050:	4610      	mov	r0, r2
 8015052:	4798      	blx	r3
 8015054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015056:	e00f      	b.n	8015078 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015058:	6839      	ldr	r1, [r7, #0]
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 fa30 	bl	80154c0 <USBD_CtlError>
            err++;
 8015060:	7afb      	ldrb	r3, [r7, #11]
 8015062:	3301      	adds	r3, #1
 8015064:	72fb      	strb	r3, [r7, #11]
          break;
 8015066:	e007      	b.n	8015078 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015068:	6839      	ldr	r1, [r7, #0]
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 fa28 	bl	80154c0 <USBD_CtlError>
          err++;
 8015070:	7afb      	ldrb	r3, [r7, #11]
 8015072:	3301      	adds	r3, #1
 8015074:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015076:	bf00      	nop
      }
      break;
 8015078:	e037      	b.n	80150ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	7c1b      	ldrb	r3, [r3, #16]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d109      	bne.n	8015096 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801508a:	f107 0208 	add.w	r2, r7, #8
 801508e:	4610      	mov	r0, r2
 8015090:	4798      	blx	r3
 8015092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015094:	e029      	b.n	80150ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 fa11 	bl	80154c0 <USBD_CtlError>
        err++;
 801509e:	7afb      	ldrb	r3, [r7, #11]
 80150a0:	3301      	adds	r3, #1
 80150a2:	72fb      	strb	r3, [r7, #11]
      break;
 80150a4:	e021      	b.n	80150ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	7c1b      	ldrb	r3, [r3, #16]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10d      	bne.n	80150ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150b6:	f107 0208 	add.w	r2, r7, #8
 80150ba:	4610      	mov	r0, r2
 80150bc:	4798      	blx	r3
 80150be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	3301      	adds	r3, #1
 80150c4:	2207      	movs	r2, #7
 80150c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80150c8:	e00f      	b.n	80150ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80150ca:	6839      	ldr	r1, [r7, #0]
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f000 f9f7 	bl	80154c0 <USBD_CtlError>
        err++;
 80150d2:	7afb      	ldrb	r3, [r7, #11]
 80150d4:	3301      	adds	r3, #1
 80150d6:	72fb      	strb	r3, [r7, #11]
      break;
 80150d8:	e007      	b.n	80150ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80150da:	6839      	ldr	r1, [r7, #0]
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 f9ef 	bl	80154c0 <USBD_CtlError>
      err++;
 80150e2:	7afb      	ldrb	r3, [r7, #11]
 80150e4:	3301      	adds	r3, #1
 80150e6:	72fb      	strb	r3, [r7, #11]
      break;
 80150e8:	bf00      	nop
  }

  if (err != 0U)
 80150ea:	7afb      	ldrb	r3, [r7, #11]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d11e      	bne.n	801512e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	88db      	ldrh	r3, [r3, #6]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d016      	beq.n	8015126 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80150f8:	893b      	ldrh	r3, [r7, #8]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d00e      	beq.n	801511c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	88da      	ldrh	r2, [r3, #6]
 8015102:	893b      	ldrh	r3, [r7, #8]
 8015104:	4293      	cmp	r3, r2
 8015106:	bf28      	it	cs
 8015108:	4613      	movcs	r3, r2
 801510a:	b29b      	uxth	r3, r3
 801510c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801510e:	893b      	ldrh	r3, [r7, #8]
 8015110:	461a      	mov	r2, r3
 8015112:	68f9      	ldr	r1, [r7, #12]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 fa44 	bl	80155a2 <USBD_CtlSendData>
 801511a:	e009      	b.n	8015130 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f000 f9ce 	bl	80154c0 <USBD_CtlError>
 8015124:	e004      	b.n	8015130 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f000 fa95 	bl	8015656 <USBD_CtlSendStatus>
 801512c:	e000      	b.n	8015130 <USBD_GetDescriptor+0x2cc>
    return;
 801512e:	bf00      	nop
  }
}
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop

08015138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	889b      	ldrh	r3, [r3, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d131      	bne.n	80151ae <USBD_SetAddress+0x76>
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	88db      	ldrh	r3, [r3, #6]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d12d      	bne.n	80151ae <USBD_SetAddress+0x76>
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	885b      	ldrh	r3, [r3, #2]
 8015156:	2b7f      	cmp	r3, #127	; 0x7f
 8015158:	d829      	bhi.n	80151ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	885b      	ldrh	r3, [r3, #2]
 801515e:	b2db      	uxtb	r3, r3
 8015160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801516c:	b2db      	uxtb	r3, r3
 801516e:	2b03      	cmp	r3, #3
 8015170:	d104      	bne.n	801517c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015172:	6839      	ldr	r1, [r7, #0]
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 f9a3 	bl	80154c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801517a:	e01d      	b.n	80151b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	7bfa      	ldrb	r2, [r7, #15]
 8015180:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015184:	7bfb      	ldrb	r3, [r7, #15]
 8015186:	4619      	mov	r1, r3
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f000 fec7 	bl	8015f1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 fa61 	bl	8015656 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015194:	7bfb      	ldrb	r3, [r7, #15]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d004      	beq.n	80151a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2202      	movs	r2, #2
 801519e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151a2:	e009      	b.n	80151b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2201      	movs	r2, #1
 80151a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ac:	e004      	b.n	80151b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80151ae:	6839      	ldr	r1, [r7, #0]
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f000 f985 	bl	80154c0 <USBD_CtlError>
  }
}
 80151b6:	bf00      	nop
 80151b8:	bf00      	nop
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80151ca:	2300      	movs	r3, #0
 80151cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	885b      	ldrh	r3, [r3, #2]
 80151d2:	b2da      	uxtb	r2, r3
 80151d4:	4b4c      	ldr	r3, [pc, #304]	; (8015308 <USBD_SetConfig+0x148>)
 80151d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80151d8:	4b4b      	ldr	r3, [pc, #300]	; (8015308 <USBD_SetConfig+0x148>)
 80151da:	781b      	ldrb	r3, [r3, #0]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d905      	bls.n	80151ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80151e0:	6839      	ldr	r1, [r7, #0]
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 f96c 	bl	80154c0 <USBD_CtlError>
    return USBD_FAIL;
 80151e8:	2303      	movs	r3, #3
 80151ea:	e088      	b.n	80152fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151f2:	b2db      	uxtb	r3, r3
 80151f4:	2b02      	cmp	r3, #2
 80151f6:	d002      	beq.n	80151fe <USBD_SetConfig+0x3e>
 80151f8:	2b03      	cmp	r3, #3
 80151fa:	d025      	beq.n	8015248 <USBD_SetConfig+0x88>
 80151fc:	e071      	b.n	80152e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80151fe:	4b42      	ldr	r3, [pc, #264]	; (8015308 <USBD_SetConfig+0x148>)
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d01c      	beq.n	8015240 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015206:	4b40      	ldr	r3, [pc, #256]	; (8015308 <USBD_SetConfig+0x148>)
 8015208:	781b      	ldrb	r3, [r3, #0]
 801520a:	461a      	mov	r2, r3
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015210:	4b3d      	ldr	r3, [pc, #244]	; (8015308 <USBD_SetConfig+0x148>)
 8015212:	781b      	ldrb	r3, [r3, #0]
 8015214:	4619      	mov	r1, r3
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff f948 	bl	80144ac <USBD_SetClassConfig>
 801521c:	4603      	mov	r3, r0
 801521e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015220:	7bfb      	ldrb	r3, [r7, #15]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d004      	beq.n	8015230 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015226:	6839      	ldr	r1, [r7, #0]
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f000 f949 	bl	80154c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801522e:	e065      	b.n	80152fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f000 fa10 	bl	8015656 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2203      	movs	r2, #3
 801523a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801523e:	e05d      	b.n	80152fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f000 fa08 	bl	8015656 <USBD_CtlSendStatus>
      break;
 8015246:	e059      	b.n	80152fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015248:	4b2f      	ldr	r3, [pc, #188]	; (8015308 <USBD_SetConfig+0x148>)
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d112      	bne.n	8015276 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2202      	movs	r2, #2
 8015254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015258:	4b2b      	ldr	r3, [pc, #172]	; (8015308 <USBD_SetConfig+0x148>)
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	461a      	mov	r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015262:	4b29      	ldr	r3, [pc, #164]	; (8015308 <USBD_SetConfig+0x148>)
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	4619      	mov	r1, r3
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f7ff f93b 	bl	80144e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801526e:	6878      	ldr	r0, [r7, #4]
 8015270:	f000 f9f1 	bl	8015656 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015274:	e042      	b.n	80152fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015276:	4b24      	ldr	r3, [pc, #144]	; (8015308 <USBD_SetConfig+0x148>)
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	461a      	mov	r2, r3
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	429a      	cmp	r2, r3
 8015282:	d02a      	beq.n	80152da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	b2db      	uxtb	r3, r3
 801528a:	4619      	mov	r1, r3
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f7ff f929 	bl	80144e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015292:	4b1d      	ldr	r3, [pc, #116]	; (8015308 <USBD_SetConfig+0x148>)
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	461a      	mov	r2, r3
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801529c:	4b1a      	ldr	r3, [pc, #104]	; (8015308 <USBD_SetConfig+0x148>)
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	4619      	mov	r1, r3
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7ff f902 	bl	80144ac <USBD_SetClassConfig>
 80152a8:	4603      	mov	r3, r0
 80152aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80152ac:	7bfb      	ldrb	r3, [r7, #15]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00f      	beq.n	80152d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80152b2:	6839      	ldr	r1, [r7, #0]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f000 f903 	bl	80154c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	685b      	ldr	r3, [r3, #4]
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	4619      	mov	r1, r3
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f7ff f90e 	bl	80144e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2202      	movs	r2, #2
 80152cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80152d0:	e014      	b.n	80152fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f000 f9bf 	bl	8015656 <USBD_CtlSendStatus>
      break;
 80152d8:	e010      	b.n	80152fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 f9bb 	bl	8015656 <USBD_CtlSendStatus>
      break;
 80152e0:	e00c      	b.n	80152fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80152e2:	6839      	ldr	r1, [r7, #0]
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f000 f8eb 	bl	80154c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80152ea:	4b07      	ldr	r3, [pc, #28]	; (8015308 <USBD_SetConfig+0x148>)
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	4619      	mov	r1, r3
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f7ff f8f7 	bl	80144e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80152f6:	2303      	movs	r3, #3
 80152f8:	73fb      	strb	r3, [r7, #15]
      break;
 80152fa:	bf00      	nop
  }

  return ret;
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3710      	adds	r7, #16
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	2000036c 	.word	0x2000036c

0801530c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b082      	sub	sp, #8
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	88db      	ldrh	r3, [r3, #6]
 801531a:	2b01      	cmp	r3, #1
 801531c:	d004      	beq.n	8015328 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801531e:	6839      	ldr	r1, [r7, #0]
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f000 f8cd 	bl	80154c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015326:	e023      	b.n	8015370 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801532e:	b2db      	uxtb	r3, r3
 8015330:	2b02      	cmp	r3, #2
 8015332:	dc02      	bgt.n	801533a <USBD_GetConfig+0x2e>
 8015334:	2b00      	cmp	r3, #0
 8015336:	dc03      	bgt.n	8015340 <USBD_GetConfig+0x34>
 8015338:	e015      	b.n	8015366 <USBD_GetConfig+0x5a>
 801533a:	2b03      	cmp	r3, #3
 801533c:	d00b      	beq.n	8015356 <USBD_GetConfig+0x4a>
 801533e:	e012      	b.n	8015366 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2200      	movs	r2, #0
 8015344:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	3308      	adds	r3, #8
 801534a:	2201      	movs	r2, #1
 801534c:	4619      	mov	r1, r3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 f927 	bl	80155a2 <USBD_CtlSendData>
        break;
 8015354:	e00c      	b.n	8015370 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	3304      	adds	r3, #4
 801535a:	2201      	movs	r2, #1
 801535c:	4619      	mov	r1, r3
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 f91f 	bl	80155a2 <USBD_CtlSendData>
        break;
 8015364:	e004      	b.n	8015370 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015366:	6839      	ldr	r1, [r7, #0]
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f000 f8a9 	bl	80154c0 <USBD_CtlError>
        break;
 801536e:	bf00      	nop
}
 8015370:	bf00      	nop
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015388:	b2db      	uxtb	r3, r3
 801538a:	3b01      	subs	r3, #1
 801538c:	2b02      	cmp	r3, #2
 801538e:	d81e      	bhi.n	80153ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	88db      	ldrh	r3, [r3, #6]
 8015394:	2b02      	cmp	r3, #2
 8015396:	d004      	beq.n	80153a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f000 f890 	bl	80154c0 <USBD_CtlError>
        break;
 80153a0:	e01a      	b.n	80153d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2201      	movs	r2, #1
 80153a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d005      	beq.n	80153be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	68db      	ldr	r3, [r3, #12]
 80153b6:	f043 0202 	orr.w	r2, r3, #2
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	330c      	adds	r3, #12
 80153c2:	2202      	movs	r2, #2
 80153c4:	4619      	mov	r1, r3
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 f8eb 	bl	80155a2 <USBD_CtlSendData>
      break;
 80153cc:	e004      	b.n	80153d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80153ce:	6839      	ldr	r1, [r7, #0]
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f000 f875 	bl	80154c0 <USBD_CtlError>
      break;
 80153d6:	bf00      	nop
  }
}
 80153d8:	bf00      	nop
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}

080153e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	885b      	ldrh	r3, [r3, #2]
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d106      	bne.n	8015400 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2201      	movs	r2, #1
 80153f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 f92b 	bl	8015656 <USBD_CtlSendStatus>
  }
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015418:	b2db      	uxtb	r3, r3
 801541a:	3b01      	subs	r3, #1
 801541c:	2b02      	cmp	r3, #2
 801541e:	d80b      	bhi.n	8015438 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	885b      	ldrh	r3, [r3, #2]
 8015424:	2b01      	cmp	r3, #1
 8015426:	d10c      	bne.n	8015442 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2200      	movs	r2, #0
 801542c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f000 f910 	bl	8015656 <USBD_CtlSendStatus>
      }
      break;
 8015436:	e004      	b.n	8015442 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015438:	6839      	ldr	r1, [r7, #0]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 f840 	bl	80154c0 <USBD_CtlError>
      break;
 8015440:	e000      	b.n	8015444 <USBD_ClrFeature+0x3c>
      break;
 8015442:	bf00      	nop
  }
}
 8015444:	bf00      	nop
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	781a      	ldrb	r2, [r3, #0]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	3301      	adds	r3, #1
 8015466:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	781a      	ldrb	r2, [r3, #0]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	3301      	adds	r3, #1
 8015474:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f7ff fabb 	bl	80149f2 <SWAPBYTE>
 801547c:	4603      	mov	r3, r0
 801547e:	461a      	mov	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	3301      	adds	r3, #1
 8015488:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	3301      	adds	r3, #1
 801548e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	f7ff faae 	bl	80149f2 <SWAPBYTE>
 8015496:	4603      	mov	r3, r0
 8015498:	461a      	mov	r2, r3
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	3301      	adds	r3, #1
 80154a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	3301      	adds	r3, #1
 80154a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f7ff faa1 	bl	80149f2 <SWAPBYTE>
 80154b0:	4603      	mov	r3, r0
 80154b2:	461a      	mov	r2, r3
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	80da      	strh	r2, [r3, #6]
}
 80154b8:	bf00      	nop
 80154ba:	3710      	adds	r7, #16
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}

080154c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80154ca:	2180      	movs	r1, #128	; 0x80
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f000 fcbb 	bl	8015e48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80154d2:	2100      	movs	r1, #0
 80154d4:	6878      	ldr	r0, [r7, #4]
 80154d6:	f000 fcb7 	bl	8015e48 <USBD_LL_StallEP>
}
 80154da:	bf00      	nop
 80154dc:	3708      	adds	r7, #8
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b086      	sub	sp, #24
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	60f8      	str	r0, [r7, #12]
 80154ea:	60b9      	str	r1, [r7, #8]
 80154ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80154ee:	2300      	movs	r3, #0
 80154f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d036      	beq.n	8015566 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80154fc:	6938      	ldr	r0, [r7, #16]
 80154fe:	f000 f836 	bl	801556e <USBD_GetLen>
 8015502:	4603      	mov	r3, r0
 8015504:	3301      	adds	r3, #1
 8015506:	b29b      	uxth	r3, r3
 8015508:	005b      	lsls	r3, r3, #1
 801550a:	b29a      	uxth	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	4413      	add	r3, r2
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	7812      	ldrb	r2, [r2, #0]
 801551a:	701a      	strb	r2, [r3, #0]
  idx++;
 801551c:	7dfb      	ldrb	r3, [r7, #23]
 801551e:	3301      	adds	r3, #1
 8015520:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015522:	7dfb      	ldrb	r3, [r7, #23]
 8015524:	68ba      	ldr	r2, [r7, #8]
 8015526:	4413      	add	r3, r2
 8015528:	2203      	movs	r2, #3
 801552a:	701a      	strb	r2, [r3, #0]
  idx++;
 801552c:	7dfb      	ldrb	r3, [r7, #23]
 801552e:	3301      	adds	r3, #1
 8015530:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015532:	e013      	b.n	801555c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015534:	7dfb      	ldrb	r3, [r7, #23]
 8015536:	68ba      	ldr	r2, [r7, #8]
 8015538:	4413      	add	r3, r2
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	7812      	ldrb	r2, [r2, #0]
 801553e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	3301      	adds	r3, #1
 8015544:	613b      	str	r3, [r7, #16]
    idx++;
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	3301      	adds	r3, #1
 801554a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801554c:	7dfb      	ldrb	r3, [r7, #23]
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	4413      	add	r3, r2
 8015552:	2200      	movs	r2, #0
 8015554:	701a      	strb	r2, [r3, #0]
    idx++;
 8015556:	7dfb      	ldrb	r3, [r7, #23]
 8015558:	3301      	adds	r3, #1
 801555a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d1e7      	bne.n	8015534 <USBD_GetString+0x52>
 8015564:	e000      	b.n	8015568 <USBD_GetString+0x86>
    return;
 8015566:	bf00      	nop
  }
}
 8015568:	3718      	adds	r7, #24
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}

0801556e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801556e:	b480      	push	{r7}
 8015570:	b085      	sub	sp, #20
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015576:	2300      	movs	r3, #0
 8015578:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801557e:	e005      	b.n	801558c <USBD_GetLen+0x1e>
  {
    len++;
 8015580:	7bfb      	ldrb	r3, [r7, #15]
 8015582:	3301      	adds	r3, #1
 8015584:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	3301      	adds	r3, #1
 801558a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	781b      	ldrb	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1f5      	bne.n	8015580 <USBD_GetLen+0x12>
  }

  return len;
 8015594:	7bfb      	ldrb	r3, [r7, #15]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3714      	adds	r7, #20
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80155a2:	b580      	push	{r7, lr}
 80155a4:	b084      	sub	sp, #16
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	60f8      	str	r0, [r7, #12]
 80155aa:	60b9      	str	r1, [r7, #8]
 80155ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	2202      	movs	r2, #2
 80155b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	2100      	movs	r1, #0
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f000 fcc6 	bl	8015f5a <USBD_LL_Transmit>

  return USBD_OK;
 80155ce:	2300      	movs	r3, #0
}
 80155d0:	4618      	mov	r0, r3
 80155d2:	3710      	adds	r7, #16
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	2100      	movs	r1, #0
 80155ea:	68f8      	ldr	r0, [r7, #12]
 80155ec:	f000 fcb5 	bl	8015f5a <USBD_LL_Transmit>

  return USBD_OK;
 80155f0:	2300      	movs	r3, #0
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3710      	adds	r7, #16
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}

080155fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80155fa:	b580      	push	{r7, lr}
 80155fc:	b084      	sub	sp, #16
 80155fe:	af00      	add	r7, sp, #0
 8015600:	60f8      	str	r0, [r7, #12]
 8015602:	60b9      	str	r1, [r7, #8]
 8015604:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	2203      	movs	r2, #3
 801560a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	68ba      	ldr	r2, [r7, #8]
 8015622:	2100      	movs	r1, #0
 8015624:	68f8      	ldr	r0, [r7, #12]
 8015626:	f000 fcb9 	bl	8015f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801562a:	2300      	movs	r3, #0
}
 801562c:	4618      	mov	r0, r3
 801562e:	3710      	adds	r7, #16
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	af00      	add	r7, sp, #0
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	2100      	movs	r1, #0
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	f000 fca8 	bl	8015f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801564c:	2300      	movs	r3, #0
}
 801564e:	4618      	mov	r0, r3
 8015650:	3710      	adds	r7, #16
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2204      	movs	r2, #4
 8015662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015666:	2300      	movs	r3, #0
 8015668:	2200      	movs	r2, #0
 801566a:	2100      	movs	r1, #0
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f000 fc74 	bl	8015f5a <USBD_LL_Transmit>

  return USBD_OK;
 8015672:	2300      	movs	r3, #0
}
 8015674:	4618      	mov	r0, r3
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2205      	movs	r2, #5
 8015688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801568c:	2300      	movs	r3, #0
 801568e:	2200      	movs	r2, #0
 8015690:	2100      	movs	r1, #0
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f000 fc82 	bl	8015f9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015698:	2300      	movs	r3, #0
}
 801569a:	4618      	mov	r0, r3
 801569c:	3708      	adds	r7, #8
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80156a8:	2200      	movs	r2, #0
 80156aa:	4912      	ldr	r1, [pc, #72]	; (80156f4 <MX_USB_DEVICE_Init+0x50>)
 80156ac:	4812      	ldr	r0, [pc, #72]	; (80156f8 <MX_USB_DEVICE_Init+0x54>)
 80156ae:	f7fe fe8f 	bl	80143d0 <USBD_Init>
 80156b2:	4603      	mov	r3, r0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d001      	beq.n	80156bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80156b8:	f7f5 fc2a 	bl	800af10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80156bc:	490f      	ldr	r1, [pc, #60]	; (80156fc <MX_USB_DEVICE_Init+0x58>)
 80156be:	480e      	ldr	r0, [pc, #56]	; (80156f8 <MX_USB_DEVICE_Init+0x54>)
 80156c0:	f7fe feb6 	bl	8014430 <USBD_RegisterClass>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d001      	beq.n	80156ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80156ca:	f7f5 fc21 	bl	800af10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80156ce:	490c      	ldr	r1, [pc, #48]	; (8015700 <MX_USB_DEVICE_Init+0x5c>)
 80156d0:	4809      	ldr	r0, [pc, #36]	; (80156f8 <MX_USB_DEVICE_Init+0x54>)
 80156d2:	f7fe fe07 	bl	80142e4 <USBD_CDC_RegisterInterface>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d001      	beq.n	80156e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80156dc:	f7f5 fc18 	bl	800af10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80156e0:	4805      	ldr	r0, [pc, #20]	; (80156f8 <MX_USB_DEVICE_Init+0x54>)
 80156e2:	f7fe fecc 	bl	801447e <USBD_Start>
 80156e6:	4603      	mov	r3, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d001      	beq.n	80156f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80156ec:	f7f5 fc10 	bl	800af10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80156f0:	bf00      	nop
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	20000178 	.word	0x20000178
 80156f8:	2000156c 	.word	0x2000156c
 80156fc:	20000060 	.word	0x20000060
 8015700:	20000164 	.word	0x20000164

08015704 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015708:	2200      	movs	r2, #0
 801570a:	4905      	ldr	r1, [pc, #20]	; (8015720 <CDC_Init_FS+0x1c>)
 801570c:	4805      	ldr	r0, [pc, #20]	; (8015724 <CDC_Init_FS+0x20>)
 801570e:	f7fe fdfe 	bl	801430e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015712:	4905      	ldr	r1, [pc, #20]	; (8015728 <CDC_Init_FS+0x24>)
 8015714:	4803      	ldr	r0, [pc, #12]	; (8015724 <CDC_Init_FS+0x20>)
 8015716:	f7fe fe18 	bl	801434a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801571a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801571c:	4618      	mov	r0, r3
 801571e:	bd80      	pop	{r7, pc}
 8015720:	2000203c 	.word	0x2000203c
 8015724:	2000156c 	.word	0x2000156c
 8015728:	2000183c 	.word	0x2000183c

0801572c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801572c:	b480      	push	{r7}
 801572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015730:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015732:	4618      	mov	r0, r3
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801573c:	b480      	push	{r7}
 801573e:	b083      	sub	sp, #12
 8015740:	af00      	add	r7, sp, #0
 8015742:	4603      	mov	r3, r0
 8015744:	6039      	str	r1, [r7, #0]
 8015746:	71fb      	strb	r3, [r7, #7]
 8015748:	4613      	mov	r3, r2
 801574a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801574c:	79fb      	ldrb	r3, [r7, #7]
 801574e:	2b23      	cmp	r3, #35	; 0x23
 8015750:	d84a      	bhi.n	80157e8 <CDC_Control_FS+0xac>
 8015752:	a201      	add	r2, pc, #4	; (adr r2, 8015758 <CDC_Control_FS+0x1c>)
 8015754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015758:	080157e9 	.word	0x080157e9
 801575c:	080157e9 	.word	0x080157e9
 8015760:	080157e9 	.word	0x080157e9
 8015764:	080157e9 	.word	0x080157e9
 8015768:	080157e9 	.word	0x080157e9
 801576c:	080157e9 	.word	0x080157e9
 8015770:	080157e9 	.word	0x080157e9
 8015774:	080157e9 	.word	0x080157e9
 8015778:	080157e9 	.word	0x080157e9
 801577c:	080157e9 	.word	0x080157e9
 8015780:	080157e9 	.word	0x080157e9
 8015784:	080157e9 	.word	0x080157e9
 8015788:	080157e9 	.word	0x080157e9
 801578c:	080157e9 	.word	0x080157e9
 8015790:	080157e9 	.word	0x080157e9
 8015794:	080157e9 	.word	0x080157e9
 8015798:	080157e9 	.word	0x080157e9
 801579c:	080157e9 	.word	0x080157e9
 80157a0:	080157e9 	.word	0x080157e9
 80157a4:	080157e9 	.word	0x080157e9
 80157a8:	080157e9 	.word	0x080157e9
 80157ac:	080157e9 	.word	0x080157e9
 80157b0:	080157e9 	.word	0x080157e9
 80157b4:	080157e9 	.word	0x080157e9
 80157b8:	080157e9 	.word	0x080157e9
 80157bc:	080157e9 	.word	0x080157e9
 80157c0:	080157e9 	.word	0x080157e9
 80157c4:	080157e9 	.word	0x080157e9
 80157c8:	080157e9 	.word	0x080157e9
 80157cc:	080157e9 	.word	0x080157e9
 80157d0:	080157e9 	.word	0x080157e9
 80157d4:	080157e9 	.word	0x080157e9
 80157d8:	080157e9 	.word	0x080157e9
 80157dc:	080157e9 	.word	0x080157e9
 80157e0:	080157e9 	.word	0x080157e9
 80157e4:	080157e9 	.word	0x080157e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80157e8:	bf00      	nop
  }

  return (USBD_OK);
 80157ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015802:	6879      	ldr	r1, [r7, #4]
 8015804:	4805      	ldr	r0, [pc, #20]	; (801581c <CDC_Receive_FS+0x24>)
 8015806:	f7fe fda0 	bl	801434a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801580a:	4804      	ldr	r0, [pc, #16]	; (801581c <CDC_Receive_FS+0x24>)
 801580c:	f7fe fdb6 	bl	801437c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015810:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015812:	4618      	mov	r0, r3
 8015814:	3708      	adds	r7, #8
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
 801581a:	bf00      	nop
 801581c:	2000156c 	.word	0x2000156c

08015820 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015820:	b480      	push	{r7}
 8015822:	b087      	sub	sp, #28
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	60b9      	str	r1, [r7, #8]
 801582a:	4613      	mov	r3, r2
 801582c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801582e:	2300      	movs	r3, #0
 8015830:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015836:	4618      	mov	r0, r3
 8015838:	371c      	adds	r7, #28
 801583a:	46bd      	mov	sp, r7
 801583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015840:	4770      	bx	lr
	...

08015844 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015844:	b480      	push	{r7}
 8015846:	b083      	sub	sp, #12
 8015848:	af00      	add	r7, sp, #0
 801584a:	4603      	mov	r3, r0
 801584c:	6039      	str	r1, [r7, #0]
 801584e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	2212      	movs	r2, #18
 8015854:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015856:	4b03      	ldr	r3, [pc, #12]	; (8015864 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015858:	4618      	mov	r0, r3
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr
 8015864:	20000194 	.word	0x20000194

08015868 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	6039      	str	r1, [r7, #0]
 8015872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	2204      	movs	r2, #4
 8015878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801587a:	4b03      	ldr	r3, [pc, #12]	; (8015888 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr
 8015888:	200001a8 	.word	0x200001a8

0801588c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	4603      	mov	r3, r0
 8015894:	6039      	str	r1, [r7, #0]
 8015896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015898:	79fb      	ldrb	r3, [r7, #7]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d105      	bne.n	80158aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801589e:	683a      	ldr	r2, [r7, #0]
 80158a0:	4907      	ldr	r1, [pc, #28]	; (80158c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80158a2:	4808      	ldr	r0, [pc, #32]	; (80158c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80158a4:	f7ff fe1d 	bl	80154e2 <USBD_GetString>
 80158a8:	e004      	b.n	80158b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80158aa:	683a      	ldr	r2, [r7, #0]
 80158ac:	4904      	ldr	r1, [pc, #16]	; (80158c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80158ae:	4805      	ldr	r0, [pc, #20]	; (80158c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80158b0:	f7ff fe17 	bl	80154e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80158b4:	4b02      	ldr	r3, [pc, #8]	; (80158c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3708      	adds	r7, #8
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}
 80158be:	bf00      	nop
 80158c0:	2000283c 	.word	0x2000283c
 80158c4:	08019338 	.word	0x08019338

080158c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	4603      	mov	r3, r0
 80158d0:	6039      	str	r1, [r7, #0]
 80158d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80158d4:	683a      	ldr	r2, [r7, #0]
 80158d6:	4904      	ldr	r1, [pc, #16]	; (80158e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80158d8:	4804      	ldr	r0, [pc, #16]	; (80158ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80158da:	f7ff fe02 	bl	80154e2 <USBD_GetString>
  return USBD_StrDesc;
 80158de:	4b02      	ldr	r3, [pc, #8]	; (80158e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	2000283c 	.word	0x2000283c
 80158ec:	08019350 	.word	0x08019350

080158f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	4603      	mov	r3, r0
 80158f8:	6039      	str	r1, [r7, #0]
 80158fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	221a      	movs	r2, #26
 8015900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015902:	f000 f843 	bl	801598c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015906:	4b02      	ldr	r3, [pc, #8]	; (8015910 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015908:	4618      	mov	r0, r3
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	200001ac 	.word	0x200001ac

08015914 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	4603      	mov	r3, r0
 801591c:	6039      	str	r1, [r7, #0]
 801591e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015920:	79fb      	ldrb	r3, [r7, #7]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d105      	bne.n	8015932 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015926:	683a      	ldr	r2, [r7, #0]
 8015928:	4907      	ldr	r1, [pc, #28]	; (8015948 <USBD_FS_ConfigStrDescriptor+0x34>)
 801592a:	4808      	ldr	r0, [pc, #32]	; (801594c <USBD_FS_ConfigStrDescriptor+0x38>)
 801592c:	f7ff fdd9 	bl	80154e2 <USBD_GetString>
 8015930:	e004      	b.n	801593c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015932:	683a      	ldr	r2, [r7, #0]
 8015934:	4904      	ldr	r1, [pc, #16]	; (8015948 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015936:	4805      	ldr	r0, [pc, #20]	; (801594c <USBD_FS_ConfigStrDescriptor+0x38>)
 8015938:	f7ff fdd3 	bl	80154e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801593c:	4b02      	ldr	r3, [pc, #8]	; (8015948 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801593e:	4618      	mov	r0, r3
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	2000283c 	.word	0x2000283c
 801594c:	08019364 	.word	0x08019364

08015950 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	6039      	str	r1, [r7, #0]
 801595a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801595c:	79fb      	ldrb	r3, [r7, #7]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d105      	bne.n	801596e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015962:	683a      	ldr	r2, [r7, #0]
 8015964:	4907      	ldr	r1, [pc, #28]	; (8015984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015966:	4808      	ldr	r0, [pc, #32]	; (8015988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015968:	f7ff fdbb 	bl	80154e2 <USBD_GetString>
 801596c:	e004      	b.n	8015978 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801596e:	683a      	ldr	r2, [r7, #0]
 8015970:	4904      	ldr	r1, [pc, #16]	; (8015984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015972:	4805      	ldr	r0, [pc, #20]	; (8015988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015974:	f7ff fdb5 	bl	80154e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015978:	4b02      	ldr	r3, [pc, #8]	; (8015984 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801597a:	4618      	mov	r0, r3
 801597c:	3708      	adds	r7, #8
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
 8015982:	bf00      	nop
 8015984:	2000283c 	.word	0x2000283c
 8015988:	08019370 	.word	0x08019370

0801598c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015992:	4b0f      	ldr	r3, [pc, #60]	; (80159d0 <Get_SerialNum+0x44>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015998:	4b0e      	ldr	r3, [pc, #56]	; (80159d4 <Get_SerialNum+0x48>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801599e:	4b0e      	ldr	r3, [pc, #56]	; (80159d8 <Get_SerialNum+0x4c>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80159a4:	68fa      	ldr	r2, [r7, #12]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	4413      	add	r3, r2
 80159aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d009      	beq.n	80159c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80159b2:	2208      	movs	r2, #8
 80159b4:	4909      	ldr	r1, [pc, #36]	; (80159dc <Get_SerialNum+0x50>)
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f000 f814 	bl	80159e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80159bc:	2204      	movs	r2, #4
 80159be:	4908      	ldr	r1, [pc, #32]	; (80159e0 <Get_SerialNum+0x54>)
 80159c0:	68b8      	ldr	r0, [r7, #8]
 80159c2:	f000 f80f 	bl	80159e4 <IntToUnicode>
  }
}
 80159c6:	bf00      	nop
 80159c8:	3710      	adds	r7, #16
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	1fff7a10 	.word	0x1fff7a10
 80159d4:	1fff7a14 	.word	0x1fff7a14
 80159d8:	1fff7a18 	.word	0x1fff7a18
 80159dc:	200001ae 	.word	0x200001ae
 80159e0:	200001be 	.word	0x200001be

080159e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b087      	sub	sp, #28
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	4613      	mov	r3, r2
 80159f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80159f2:	2300      	movs	r3, #0
 80159f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80159f6:	2300      	movs	r3, #0
 80159f8:	75fb      	strb	r3, [r7, #23]
 80159fa:	e027      	b.n	8015a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	0f1b      	lsrs	r3, r3, #28
 8015a00:	2b09      	cmp	r3, #9
 8015a02:	d80b      	bhi.n	8015a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	0f1b      	lsrs	r3, r3, #28
 8015a08:	b2da      	uxtb	r2, r3
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	005b      	lsls	r3, r3, #1
 8015a0e:	4619      	mov	r1, r3
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	440b      	add	r3, r1
 8015a14:	3230      	adds	r2, #48	; 0x30
 8015a16:	b2d2      	uxtb	r2, r2
 8015a18:	701a      	strb	r2, [r3, #0]
 8015a1a:	e00a      	b.n	8015a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	0f1b      	lsrs	r3, r3, #28
 8015a20:	b2da      	uxtb	r2, r3
 8015a22:	7dfb      	ldrb	r3, [r7, #23]
 8015a24:	005b      	lsls	r3, r3, #1
 8015a26:	4619      	mov	r1, r3
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	440b      	add	r3, r1
 8015a2c:	3237      	adds	r2, #55	; 0x37
 8015a2e:	b2d2      	uxtb	r2, r2
 8015a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	011b      	lsls	r3, r3, #4
 8015a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015a38:	7dfb      	ldrb	r3, [r7, #23]
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	3301      	adds	r3, #1
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	4413      	add	r3, r2
 8015a42:	2200      	movs	r2, #0
 8015a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015a46:	7dfb      	ldrb	r3, [r7, #23]
 8015a48:	3301      	adds	r3, #1
 8015a4a:	75fb      	strb	r3, [r7, #23]
 8015a4c:	7dfa      	ldrb	r2, [r7, #23]
 8015a4e:	79fb      	ldrb	r3, [r7, #7]
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d3d3      	bcc.n	80159fc <IntToUnicode+0x18>
  }
}
 8015a54:	bf00      	nop
 8015a56:	bf00      	nop
 8015a58:	371c      	adds	r7, #28
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a60:	4770      	bx	lr
	...

08015a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b08a      	sub	sp, #40	; 0x28
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a6c:	f107 0314 	add.w	r3, r7, #20
 8015a70:	2200      	movs	r2, #0
 8015a72:	601a      	str	r2, [r3, #0]
 8015a74:	605a      	str	r2, [r3, #4]
 8015a76:	609a      	str	r2, [r3, #8]
 8015a78:	60da      	str	r2, [r3, #12]
 8015a7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015a84:	d13a      	bne.n	8015afc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a86:	2300      	movs	r3, #0
 8015a88:	613b      	str	r3, [r7, #16]
 8015a8a:	4b1e      	ldr	r3, [pc, #120]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a8e:	4a1d      	ldr	r2, [pc, #116]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015a90:	f043 0301 	orr.w	r3, r3, #1
 8015a94:	6313      	str	r3, [r2, #48]	; 0x30
 8015a96:	4b1b      	ldr	r3, [pc, #108]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a9a:	f003 0301 	and.w	r3, r3, #1
 8015a9e:	613b      	str	r3, [r7, #16]
 8015aa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015aac:	2300      	movs	r3, #0
 8015aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ab0:	2303      	movs	r3, #3
 8015ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015ab4:	230a      	movs	r3, #10
 8015ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ab8:	f107 0314 	add.w	r3, r7, #20
 8015abc:	4619      	mov	r1, r3
 8015abe:	4812      	ldr	r0, [pc, #72]	; (8015b08 <HAL_PCD_MspInit+0xa4>)
 8015ac0:	f7f8 fa4a 	bl	800df58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015ac4:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ac8:	4a0e      	ldr	r2, [pc, #56]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ace:	6353      	str	r3, [r2, #52]	; 0x34
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	60fb      	str	r3, [r7, #12]
 8015ad4:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ad8:	4a0a      	ldr	r2, [pc, #40]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015ade:	6453      	str	r3, [r2, #68]	; 0x44
 8015ae0:	4b08      	ldr	r3, [pc, #32]	; (8015b04 <HAL_PCD_MspInit+0xa0>)
 8015ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ae8:	60fb      	str	r3, [r7, #12]
 8015aea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015aec:	2200      	movs	r2, #0
 8015aee:	2100      	movs	r1, #0
 8015af0:	2043      	movs	r0, #67	; 0x43
 8015af2:	f7f7 fdf8 	bl	800d6e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015af6:	2043      	movs	r0, #67	; 0x43
 8015af8:	f7f7 fe11 	bl	800d71e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015afc:	bf00      	nop
 8015afe:	3728      	adds	r7, #40	; 0x28
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	40023800 	.word	0x40023800
 8015b08:	40020000 	.word	0x40020000

08015b0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015b20:	4619      	mov	r1, r3
 8015b22:	4610      	mov	r0, r2
 8015b24:	f7fe fcf6 	bl	8014514 <USBD_LL_SetupStage>
}
 8015b28:	bf00      	nop
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	460b      	mov	r3, r1
 8015b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b42:	78fa      	ldrb	r2, [r7, #3]
 8015b44:	6879      	ldr	r1, [r7, #4]
 8015b46:	4613      	mov	r3, r2
 8015b48:	00db      	lsls	r3, r3, #3
 8015b4a:	1a9b      	subs	r3, r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	440b      	add	r3, r1
 8015b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	78fb      	ldrb	r3, [r7, #3]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	f7fe fd30 	bl	80145be <USBD_LL_DataOutStage>
}
 8015b5e:	bf00      	nop
 8015b60:	3708      	adds	r7, #8
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}

08015b66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b66:	b580      	push	{r7, lr}
 8015b68:	b082      	sub	sp, #8
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]
 8015b6e:	460b      	mov	r3, r1
 8015b70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015b78:	78fa      	ldrb	r2, [r7, #3]
 8015b7a:	6879      	ldr	r1, [r7, #4]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	00db      	lsls	r3, r3, #3
 8015b80:	1a9b      	subs	r3, r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	440b      	add	r3, r1
 8015b86:	3348      	adds	r3, #72	; 0x48
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	78fb      	ldrb	r3, [r7, #3]
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	f7fe fd79 	bl	8014684 <USBD_LL_DataInStage>
}
 8015b92:	bf00      	nop
 8015b94:	3708      	adds	r7, #8
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b082      	sub	sp, #8
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7fe fe8d 	bl	80148c8 <USBD_LL_SOF>
}
 8015bae:	bf00      	nop
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}

08015bb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bb6:	b580      	push	{r7, lr}
 8015bb8:	b084      	sub	sp, #16
 8015bba:	af00      	add	r7, sp, #0
 8015bbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d102      	bne.n	8015bd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	73fb      	strb	r3, [r7, #15]
 8015bce:	e008      	b.n	8015be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	2b02      	cmp	r3, #2
 8015bd6:	d102      	bne.n	8015bde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	73fb      	strb	r3, [r7, #15]
 8015bdc:	e001      	b.n	8015be2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015bde:	f7f5 f997 	bl	800af10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015be8:	7bfa      	ldrb	r2, [r7, #15]
 8015bea:	4611      	mov	r1, r2
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fe fe2d 	bl	801484c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7fe fdd9 	bl	80147b0 <USBD_LL_Reset>
}
 8015bfe:	bf00      	nop
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
	...

08015c08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fe fe28 	bl	801486c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	6812      	ldr	r2, [r2, #0]
 8015c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c2e:	f043 0301 	orr.w	r3, r3, #1
 8015c32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6a1b      	ldr	r3, [r3, #32]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d005      	beq.n	8015c48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c3c:	4b04      	ldr	r3, [pc, #16]	; (8015c50 <HAL_PCD_SuspendCallback+0x48>)
 8015c3e:	691b      	ldr	r3, [r3, #16]
 8015c40:	4a03      	ldr	r2, [pc, #12]	; (8015c50 <HAL_PCD_SuspendCallback+0x48>)
 8015c42:	f043 0306 	orr.w	r3, r3, #6
 8015c46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015c48:	bf00      	nop
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	e000ed00 	.word	0xe000ed00

08015c54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fe fe18 	bl	8014898 <USBD_LL_Resume>
}
 8015c68:	bf00      	nop
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	460b      	mov	r3, r1
 8015c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c82:	78fa      	ldrb	r2, [r7, #3]
 8015c84:	4611      	mov	r1, r2
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7fe fe66 	bl	8014958 <USBD_LL_IsoOUTIncomplete>
}
 8015c8c:	bf00      	nop
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}

08015c94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ca6:	78fa      	ldrb	r2, [r7, #3]
 8015ca8:	4611      	mov	r1, r2
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fe fe2e 	bl	801490c <USBD_LL_IsoINIncomplete>
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b082      	sub	sp, #8
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fe fe6c 	bl	80149a4 <USBD_LL_DevConnected>
}
 8015ccc:	bf00      	nop
 8015cce:	3708      	adds	r7, #8
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}

08015cd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7fe fe69 	bl	80149ba <USBD_LL_DevDisconnected>
}
 8015ce8:	bf00      	nop
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d13c      	bne.n	8015d7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015d00:	4a20      	ldr	r2, [pc, #128]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4a1e      	ldr	r2, [pc, #120]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015d10:	4b1c      	ldr	r3, [pc, #112]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015d18:	4b1a      	ldr	r3, [pc, #104]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d1a:	2204      	movs	r2, #4
 8015d1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015d1e:	4b19      	ldr	r3, [pc, #100]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d20:	2202      	movs	r2, #2
 8015d22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015d24:	4b17      	ldr	r3, [pc, #92]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d26:	2200      	movs	r2, #0
 8015d28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015d2a:	4b16      	ldr	r3, [pc, #88]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d2c:	2202      	movs	r2, #2
 8015d2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015d30:	4b14      	ldr	r3, [pc, #80]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d32:	2200      	movs	r2, #0
 8015d34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015d36:	4b13      	ldr	r3, [pc, #76]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d38:	2200      	movs	r2, #0
 8015d3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015d3c:	4b11      	ldr	r3, [pc, #68]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d3e:	2200      	movs	r2, #0
 8015d40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015d42:	4b10      	ldr	r3, [pc, #64]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d44:	2200      	movs	r2, #0
 8015d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015d48:	4b0e      	ldr	r3, [pc, #56]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015d4e:	480d      	ldr	r0, [pc, #52]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d50:	f7f8 fac7 	bl	800e2e2 <HAL_PCD_Init>
 8015d54:	4603      	mov	r3, r0
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d001      	beq.n	8015d5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015d5a:	f7f5 f8d9 	bl	800af10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015d5e:	2180      	movs	r1, #128	; 0x80
 8015d60:	4808      	ldr	r0, [pc, #32]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d62:	f7f9 fc24 	bl	800f5ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015d66:	2240      	movs	r2, #64	; 0x40
 8015d68:	2100      	movs	r1, #0
 8015d6a:	4806      	ldr	r0, [pc, #24]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d6c:	f7f9 fbd8 	bl	800f520 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015d70:	2280      	movs	r2, #128	; 0x80
 8015d72:	2101      	movs	r1, #1
 8015d74:	4803      	ldr	r0, [pc, #12]	; (8015d84 <USBD_LL_Init+0x94>)
 8015d76:	f7f9 fbd3 	bl	800f520 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015d7a:	2300      	movs	r3, #0
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	20002a3c 	.word	0x20002a3c

08015d88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d90:	2300      	movs	r3, #0
 8015d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d94:	2300      	movs	r3, #0
 8015d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7f8 fbbc 	bl	800e51c <HAL_PCD_Start>
 8015da4:	4603      	mov	r3, r0
 8015da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015da8:	7bfb      	ldrb	r3, [r7, #15]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f000 f942 	bl	8016034 <USBD_Get_USB_Status>
 8015db0:	4603      	mov	r3, r0
 8015db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}

08015dbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b084      	sub	sp, #16
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	6078      	str	r0, [r7, #4]
 8015dc6:	4608      	mov	r0, r1
 8015dc8:	4611      	mov	r1, r2
 8015dca:	461a      	mov	r2, r3
 8015dcc:	4603      	mov	r3, r0
 8015dce:	70fb      	strb	r3, [r7, #3]
 8015dd0:	460b      	mov	r3, r1
 8015dd2:	70bb      	strb	r3, [r7, #2]
 8015dd4:	4613      	mov	r3, r2
 8015dd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015de6:	78bb      	ldrb	r3, [r7, #2]
 8015de8:	883a      	ldrh	r2, [r7, #0]
 8015dea:	78f9      	ldrb	r1, [r7, #3]
 8015dec:	f7f8 ffa0 	bl	800ed30 <HAL_PCD_EP_Open>
 8015df0:	4603      	mov	r3, r0
 8015df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015df4:	7bfb      	ldrb	r3, [r7, #15]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f000 f91c 	bl	8016034 <USBD_Get_USB_Status>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}

08015e0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e0a:	b580      	push	{r7, lr}
 8015e0c:	b084      	sub	sp, #16
 8015e0e:	af00      	add	r7, sp, #0
 8015e10:	6078      	str	r0, [r7, #4]
 8015e12:	460b      	mov	r3, r1
 8015e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e16:	2300      	movs	r3, #0
 8015e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e24:	78fa      	ldrb	r2, [r7, #3]
 8015e26:	4611      	mov	r1, r2
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f8 ffe9 	bl	800ee00 <HAL_PCD_EP_Close>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e32:	7bfb      	ldrb	r3, [r7, #15]
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 f8fd 	bl	8016034 <USBD_Get_USB_Status>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3710      	adds	r7, #16
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	460b      	mov	r3, r1
 8015e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e54:	2300      	movs	r3, #0
 8015e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e62:	78fa      	ldrb	r2, [r7, #3]
 8015e64:	4611      	mov	r1, r2
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7f9 f8c1 	bl	800efee <HAL_PCD_EP_SetStall>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e70:	7bfb      	ldrb	r3, [r7, #15]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 f8de 	bl	8016034 <USBD_Get_USB_Status>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3710      	adds	r7, #16
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b084      	sub	sp, #16
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
 8015e8e:	460b      	mov	r3, r1
 8015e90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e92:	2300      	movs	r3, #0
 8015e94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e96:	2300      	movs	r3, #0
 8015e98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ea0:	78fa      	ldrb	r2, [r7, #3]
 8015ea2:	4611      	mov	r1, r2
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7f9 f906 	bl	800f0b6 <HAL_PCD_EP_ClrStall>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eae:	7bfb      	ldrb	r3, [r7, #15]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f000 f8bf 	bl	8016034 <USBD_Get_USB_Status>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3710      	adds	r7, #16
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	460b      	mov	r3, r1
 8015ece:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ed6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	da0b      	bge.n	8015ef8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ee0:	78fb      	ldrb	r3, [r7, #3]
 8015ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ee6:	68f9      	ldr	r1, [r7, #12]
 8015ee8:	4613      	mov	r3, r2
 8015eea:	00db      	lsls	r3, r3, #3
 8015eec:	1a9b      	subs	r3, r3, r2
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	440b      	add	r3, r1
 8015ef2:	333e      	adds	r3, #62	; 0x3e
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	e00b      	b.n	8015f10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ef8:	78fb      	ldrb	r3, [r7, #3]
 8015efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015efe:	68f9      	ldr	r1, [r7, #12]
 8015f00:	4613      	mov	r3, r2
 8015f02:	00db      	lsls	r3, r3, #3
 8015f04:	1a9b      	subs	r3, r3, r2
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	440b      	add	r3, r1
 8015f0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015f0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3714      	adds	r7, #20
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	460b      	mov	r3, r1
 8015f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f36:	78fa      	ldrb	r2, [r7, #3]
 8015f38:	4611      	mov	r1, r2
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7f8 fed3 	bl	800ece6 <HAL_PCD_SetAddress>
 8015f40:	4603      	mov	r3, r0
 8015f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f44:	7bfb      	ldrb	r3, [r7, #15]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f000 f874 	bl	8016034 <USBD_Get_USB_Status>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3710      	adds	r7, #16
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}

08015f5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f5a:	b580      	push	{r7, lr}
 8015f5c:	b086      	sub	sp, #24
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	60f8      	str	r0, [r7, #12]
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	603b      	str	r3, [r7, #0]
 8015f66:	460b      	mov	r3, r1
 8015f68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015f78:	7af9      	ldrb	r1, [r7, #11]
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	f7f8 ffec 	bl	800ef5a <HAL_PCD_EP_Transmit>
 8015f82:	4603      	mov	r3, r0
 8015f84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f86:	7dfb      	ldrb	r3, [r7, #23]
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 f853 	bl	8016034 <USBD_Get_USB_Status>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f92:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3718      	adds	r7, #24
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}

08015f9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b086      	sub	sp, #24
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	60f8      	str	r0, [r7, #12]
 8015fa4:	607a      	str	r2, [r7, #4]
 8015fa6:	603b      	str	r3, [r7, #0]
 8015fa8:	460b      	mov	r3, r1
 8015faa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fac:	2300      	movs	r3, #0
 8015fae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015fba:	7af9      	ldrb	r1, [r7, #11]
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	f7f8 ff68 	bl	800ee94 <HAL_PCD_EP_Receive>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fc8:	7dfb      	ldrb	r3, [r7, #23]
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f000 f832 	bl	8016034 <USBD_Get_USB_Status>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015fd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3718      	adds	r7, #24
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}

08015fde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b082      	sub	sp, #8
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	6078      	str	r0, [r7, #4]
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ff0:	78fa      	ldrb	r2, [r7, #3]
 8015ff2:	4611      	mov	r1, r2
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7f8 ff98 	bl	800ef2a <HAL_PCD_EP_GetRxCount>
 8015ffa:	4603      	mov	r3, r0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3708      	adds	r7, #8
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801600c:	4b03      	ldr	r3, [pc, #12]	; (801601c <USBD_static_malloc+0x18>)
}
 801600e:	4618      	mov	r0, r3
 8016010:	370c      	adds	r7, #12
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop
 801601c:	20000370 	.word	0x20000370

08016020 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016020:	b480      	push	{r7}
 8016022:	b083      	sub	sp, #12
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]

}
 8016028:	bf00      	nop
 801602a:	370c      	adds	r7, #12
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr

08016034 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016034:	b480      	push	{r7}
 8016036:	b085      	sub	sp, #20
 8016038:	af00      	add	r7, sp, #0
 801603a:	4603      	mov	r3, r0
 801603c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801603e:	2300      	movs	r3, #0
 8016040:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016042:	79fb      	ldrb	r3, [r7, #7]
 8016044:	2b03      	cmp	r3, #3
 8016046:	d817      	bhi.n	8016078 <USBD_Get_USB_Status+0x44>
 8016048:	a201      	add	r2, pc, #4	; (adr r2, 8016050 <USBD_Get_USB_Status+0x1c>)
 801604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801604e:	bf00      	nop
 8016050:	08016061 	.word	0x08016061
 8016054:	08016067 	.word	0x08016067
 8016058:	0801606d 	.word	0x0801606d
 801605c:	08016073 	.word	0x08016073
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016060:	2300      	movs	r3, #0
 8016062:	73fb      	strb	r3, [r7, #15]
    break;
 8016064:	e00b      	b.n	801607e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016066:	2303      	movs	r3, #3
 8016068:	73fb      	strb	r3, [r7, #15]
    break;
 801606a:	e008      	b.n	801607e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801606c:	2301      	movs	r3, #1
 801606e:	73fb      	strb	r3, [r7, #15]
    break;
 8016070:	e005      	b.n	801607e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016072:	2303      	movs	r3, #3
 8016074:	73fb      	strb	r3, [r7, #15]
    break;
 8016076:	e002      	b.n	801607e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016078:	2303      	movs	r3, #3
 801607a:	73fb      	strb	r3, [r7, #15]
    break;
 801607c:	bf00      	nop
  }
  return usb_status;
 801607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016080:	4618      	mov	r0, r3
 8016082:	3714      	adds	r7, #20
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr

0801608c <__assert_func>:
 801608c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801608e:	4614      	mov	r4, r2
 8016090:	461a      	mov	r2, r3
 8016092:	4b09      	ldr	r3, [pc, #36]	; (80160b8 <__assert_func+0x2c>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4605      	mov	r5, r0
 8016098:	68d8      	ldr	r0, [r3, #12]
 801609a:	b14c      	cbz	r4, 80160b0 <__assert_func+0x24>
 801609c:	4b07      	ldr	r3, [pc, #28]	; (80160bc <__assert_func+0x30>)
 801609e:	9100      	str	r1, [sp, #0]
 80160a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80160a4:	4906      	ldr	r1, [pc, #24]	; (80160c0 <__assert_func+0x34>)
 80160a6:	462b      	mov	r3, r5
 80160a8:	f000 f814 	bl	80160d4 <fiprintf>
 80160ac:	f000 fe4a 	bl	8016d44 <abort>
 80160b0:	4b04      	ldr	r3, [pc, #16]	; (80160c4 <__assert_func+0x38>)
 80160b2:	461c      	mov	r4, r3
 80160b4:	e7f3      	b.n	801609e <__assert_func+0x12>
 80160b6:	bf00      	nop
 80160b8:	200001c8 	.word	0x200001c8
 80160bc:	08019550 	.word	0x08019550
 80160c0:	0801955d 	.word	0x0801955d
 80160c4:	0801958b 	.word	0x0801958b

080160c8 <__errno>:
 80160c8:	4b01      	ldr	r3, [pc, #4]	; (80160d0 <__errno+0x8>)
 80160ca:	6818      	ldr	r0, [r3, #0]
 80160cc:	4770      	bx	lr
 80160ce:	bf00      	nop
 80160d0:	200001c8 	.word	0x200001c8

080160d4 <fiprintf>:
 80160d4:	b40e      	push	{r1, r2, r3}
 80160d6:	b503      	push	{r0, r1, lr}
 80160d8:	4601      	mov	r1, r0
 80160da:	ab03      	add	r3, sp, #12
 80160dc:	4805      	ldr	r0, [pc, #20]	; (80160f4 <fiprintf+0x20>)
 80160de:	f853 2b04 	ldr.w	r2, [r3], #4
 80160e2:	6800      	ldr	r0, [r0, #0]
 80160e4:	9301      	str	r3, [sp, #4]
 80160e6:	f000 f933 	bl	8016350 <_vfiprintf_r>
 80160ea:	b002      	add	sp, #8
 80160ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80160f0:	b003      	add	sp, #12
 80160f2:	4770      	bx	lr
 80160f4:	200001c8 	.word	0x200001c8

080160f8 <__libc_init_array>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	4d0d      	ldr	r5, [pc, #52]	; (8016130 <__libc_init_array+0x38>)
 80160fc:	4c0d      	ldr	r4, [pc, #52]	; (8016134 <__libc_init_array+0x3c>)
 80160fe:	1b64      	subs	r4, r4, r5
 8016100:	10a4      	asrs	r4, r4, #2
 8016102:	2600      	movs	r6, #0
 8016104:	42a6      	cmp	r6, r4
 8016106:	d109      	bne.n	801611c <__libc_init_array+0x24>
 8016108:	4d0b      	ldr	r5, [pc, #44]	; (8016138 <__libc_init_array+0x40>)
 801610a:	4c0c      	ldr	r4, [pc, #48]	; (801613c <__libc_init_array+0x44>)
 801610c:	f001 faf8 	bl	8017700 <_init>
 8016110:	1b64      	subs	r4, r4, r5
 8016112:	10a4      	asrs	r4, r4, #2
 8016114:	2600      	movs	r6, #0
 8016116:	42a6      	cmp	r6, r4
 8016118:	d105      	bne.n	8016126 <__libc_init_array+0x2e>
 801611a:	bd70      	pop	{r4, r5, r6, pc}
 801611c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016120:	4798      	blx	r3
 8016122:	3601      	adds	r6, #1
 8016124:	e7ee      	b.n	8016104 <__libc_init_array+0xc>
 8016126:	f855 3b04 	ldr.w	r3, [r5], #4
 801612a:	4798      	blx	r3
 801612c:	3601      	adds	r6, #1
 801612e:	e7f2      	b.n	8016116 <__libc_init_array+0x1e>
 8016130:	0801962c 	.word	0x0801962c
 8016134:	0801962c 	.word	0x0801962c
 8016138:	0801962c 	.word	0x0801962c
 801613c:	08019630 	.word	0x08019630

08016140 <malloc>:
 8016140:	4b02      	ldr	r3, [pc, #8]	; (801614c <malloc+0xc>)
 8016142:	4601      	mov	r1, r0
 8016144:	6818      	ldr	r0, [r3, #0]
 8016146:	f000 b87f 	b.w	8016248 <_malloc_r>
 801614a:	bf00      	nop
 801614c:	200001c8 	.word	0x200001c8

08016150 <free>:
 8016150:	4b02      	ldr	r3, [pc, #8]	; (801615c <free+0xc>)
 8016152:	4601      	mov	r1, r0
 8016154:	6818      	ldr	r0, [r3, #0]
 8016156:	f000 b827 	b.w	80161a8 <_free_r>
 801615a:	bf00      	nop
 801615c:	200001c8 	.word	0x200001c8

08016160 <memcmp>:
 8016160:	b530      	push	{r4, r5, lr}
 8016162:	3901      	subs	r1, #1
 8016164:	2400      	movs	r4, #0
 8016166:	42a2      	cmp	r2, r4
 8016168:	d101      	bne.n	801616e <memcmp+0xe>
 801616a:	2000      	movs	r0, #0
 801616c:	e005      	b.n	801617a <memcmp+0x1a>
 801616e:	5d03      	ldrb	r3, [r0, r4]
 8016170:	3401      	adds	r4, #1
 8016172:	5d0d      	ldrb	r5, [r1, r4]
 8016174:	42ab      	cmp	r3, r5
 8016176:	d0f6      	beq.n	8016166 <memcmp+0x6>
 8016178:	1b58      	subs	r0, r3, r5
 801617a:	bd30      	pop	{r4, r5, pc}

0801617c <memcpy>:
 801617c:	440a      	add	r2, r1
 801617e:	4291      	cmp	r1, r2
 8016180:	f100 33ff 	add.w	r3, r0, #4294967295
 8016184:	d100      	bne.n	8016188 <memcpy+0xc>
 8016186:	4770      	bx	lr
 8016188:	b510      	push	{r4, lr}
 801618a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801618e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016192:	4291      	cmp	r1, r2
 8016194:	d1f9      	bne.n	801618a <memcpy+0xe>
 8016196:	bd10      	pop	{r4, pc}

08016198 <memset>:
 8016198:	4402      	add	r2, r0
 801619a:	4603      	mov	r3, r0
 801619c:	4293      	cmp	r3, r2
 801619e:	d100      	bne.n	80161a2 <memset+0xa>
 80161a0:	4770      	bx	lr
 80161a2:	f803 1b01 	strb.w	r1, [r3], #1
 80161a6:	e7f9      	b.n	801619c <memset+0x4>

080161a8 <_free_r>:
 80161a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161aa:	2900      	cmp	r1, #0
 80161ac:	d048      	beq.n	8016240 <_free_r+0x98>
 80161ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161b2:	9001      	str	r0, [sp, #4]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f1a1 0404 	sub.w	r4, r1, #4
 80161ba:	bfb8      	it	lt
 80161bc:	18e4      	addlt	r4, r4, r3
 80161be:	f001 f801 	bl	80171c4 <__malloc_lock>
 80161c2:	4a20      	ldr	r2, [pc, #128]	; (8016244 <_free_r+0x9c>)
 80161c4:	9801      	ldr	r0, [sp, #4]
 80161c6:	6813      	ldr	r3, [r2, #0]
 80161c8:	4615      	mov	r5, r2
 80161ca:	b933      	cbnz	r3, 80161da <_free_r+0x32>
 80161cc:	6063      	str	r3, [r4, #4]
 80161ce:	6014      	str	r4, [r2, #0]
 80161d0:	b003      	add	sp, #12
 80161d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80161d6:	f000 bffb 	b.w	80171d0 <__malloc_unlock>
 80161da:	42a3      	cmp	r3, r4
 80161dc:	d90b      	bls.n	80161f6 <_free_r+0x4e>
 80161de:	6821      	ldr	r1, [r4, #0]
 80161e0:	1862      	adds	r2, r4, r1
 80161e2:	4293      	cmp	r3, r2
 80161e4:	bf04      	itt	eq
 80161e6:	681a      	ldreq	r2, [r3, #0]
 80161e8:	685b      	ldreq	r3, [r3, #4]
 80161ea:	6063      	str	r3, [r4, #4]
 80161ec:	bf04      	itt	eq
 80161ee:	1852      	addeq	r2, r2, r1
 80161f0:	6022      	streq	r2, [r4, #0]
 80161f2:	602c      	str	r4, [r5, #0]
 80161f4:	e7ec      	b.n	80161d0 <_free_r+0x28>
 80161f6:	461a      	mov	r2, r3
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	b10b      	cbz	r3, 8016200 <_free_r+0x58>
 80161fc:	42a3      	cmp	r3, r4
 80161fe:	d9fa      	bls.n	80161f6 <_free_r+0x4e>
 8016200:	6811      	ldr	r1, [r2, #0]
 8016202:	1855      	adds	r5, r2, r1
 8016204:	42a5      	cmp	r5, r4
 8016206:	d10b      	bne.n	8016220 <_free_r+0x78>
 8016208:	6824      	ldr	r4, [r4, #0]
 801620a:	4421      	add	r1, r4
 801620c:	1854      	adds	r4, r2, r1
 801620e:	42a3      	cmp	r3, r4
 8016210:	6011      	str	r1, [r2, #0]
 8016212:	d1dd      	bne.n	80161d0 <_free_r+0x28>
 8016214:	681c      	ldr	r4, [r3, #0]
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	6053      	str	r3, [r2, #4]
 801621a:	4421      	add	r1, r4
 801621c:	6011      	str	r1, [r2, #0]
 801621e:	e7d7      	b.n	80161d0 <_free_r+0x28>
 8016220:	d902      	bls.n	8016228 <_free_r+0x80>
 8016222:	230c      	movs	r3, #12
 8016224:	6003      	str	r3, [r0, #0]
 8016226:	e7d3      	b.n	80161d0 <_free_r+0x28>
 8016228:	6825      	ldr	r5, [r4, #0]
 801622a:	1961      	adds	r1, r4, r5
 801622c:	428b      	cmp	r3, r1
 801622e:	bf04      	itt	eq
 8016230:	6819      	ldreq	r1, [r3, #0]
 8016232:	685b      	ldreq	r3, [r3, #4]
 8016234:	6063      	str	r3, [r4, #4]
 8016236:	bf04      	itt	eq
 8016238:	1949      	addeq	r1, r1, r5
 801623a:	6021      	streq	r1, [r4, #0]
 801623c:	6054      	str	r4, [r2, #4]
 801623e:	e7c7      	b.n	80161d0 <_free_r+0x28>
 8016240:	b003      	add	sp, #12
 8016242:	bd30      	pop	{r4, r5, pc}
 8016244:	20000590 	.word	0x20000590

08016248 <_malloc_r>:
 8016248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801624a:	1ccd      	adds	r5, r1, #3
 801624c:	f025 0503 	bic.w	r5, r5, #3
 8016250:	3508      	adds	r5, #8
 8016252:	2d0c      	cmp	r5, #12
 8016254:	bf38      	it	cc
 8016256:	250c      	movcc	r5, #12
 8016258:	2d00      	cmp	r5, #0
 801625a:	4606      	mov	r6, r0
 801625c:	db01      	blt.n	8016262 <_malloc_r+0x1a>
 801625e:	42a9      	cmp	r1, r5
 8016260:	d903      	bls.n	801626a <_malloc_r+0x22>
 8016262:	230c      	movs	r3, #12
 8016264:	6033      	str	r3, [r6, #0]
 8016266:	2000      	movs	r0, #0
 8016268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801626a:	f000 ffab 	bl	80171c4 <__malloc_lock>
 801626e:	4921      	ldr	r1, [pc, #132]	; (80162f4 <_malloc_r+0xac>)
 8016270:	680a      	ldr	r2, [r1, #0]
 8016272:	4614      	mov	r4, r2
 8016274:	b99c      	cbnz	r4, 801629e <_malloc_r+0x56>
 8016276:	4f20      	ldr	r7, [pc, #128]	; (80162f8 <_malloc_r+0xb0>)
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	b923      	cbnz	r3, 8016286 <_malloc_r+0x3e>
 801627c:	4621      	mov	r1, r4
 801627e:	4630      	mov	r0, r6
 8016280:	f000 fbb8 	bl	80169f4 <_sbrk_r>
 8016284:	6038      	str	r0, [r7, #0]
 8016286:	4629      	mov	r1, r5
 8016288:	4630      	mov	r0, r6
 801628a:	f000 fbb3 	bl	80169f4 <_sbrk_r>
 801628e:	1c43      	adds	r3, r0, #1
 8016290:	d123      	bne.n	80162da <_malloc_r+0x92>
 8016292:	230c      	movs	r3, #12
 8016294:	6033      	str	r3, [r6, #0]
 8016296:	4630      	mov	r0, r6
 8016298:	f000 ff9a 	bl	80171d0 <__malloc_unlock>
 801629c:	e7e3      	b.n	8016266 <_malloc_r+0x1e>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	1b5b      	subs	r3, r3, r5
 80162a2:	d417      	bmi.n	80162d4 <_malloc_r+0x8c>
 80162a4:	2b0b      	cmp	r3, #11
 80162a6:	d903      	bls.n	80162b0 <_malloc_r+0x68>
 80162a8:	6023      	str	r3, [r4, #0]
 80162aa:	441c      	add	r4, r3
 80162ac:	6025      	str	r5, [r4, #0]
 80162ae:	e004      	b.n	80162ba <_malloc_r+0x72>
 80162b0:	6863      	ldr	r3, [r4, #4]
 80162b2:	42a2      	cmp	r2, r4
 80162b4:	bf0c      	ite	eq
 80162b6:	600b      	streq	r3, [r1, #0]
 80162b8:	6053      	strne	r3, [r2, #4]
 80162ba:	4630      	mov	r0, r6
 80162bc:	f000 ff88 	bl	80171d0 <__malloc_unlock>
 80162c0:	f104 000b 	add.w	r0, r4, #11
 80162c4:	1d23      	adds	r3, r4, #4
 80162c6:	f020 0007 	bic.w	r0, r0, #7
 80162ca:	1ac2      	subs	r2, r0, r3
 80162cc:	d0cc      	beq.n	8016268 <_malloc_r+0x20>
 80162ce:	1a1b      	subs	r3, r3, r0
 80162d0:	50a3      	str	r3, [r4, r2]
 80162d2:	e7c9      	b.n	8016268 <_malloc_r+0x20>
 80162d4:	4622      	mov	r2, r4
 80162d6:	6864      	ldr	r4, [r4, #4]
 80162d8:	e7cc      	b.n	8016274 <_malloc_r+0x2c>
 80162da:	1cc4      	adds	r4, r0, #3
 80162dc:	f024 0403 	bic.w	r4, r4, #3
 80162e0:	42a0      	cmp	r0, r4
 80162e2:	d0e3      	beq.n	80162ac <_malloc_r+0x64>
 80162e4:	1a21      	subs	r1, r4, r0
 80162e6:	4630      	mov	r0, r6
 80162e8:	f000 fb84 	bl	80169f4 <_sbrk_r>
 80162ec:	3001      	adds	r0, #1
 80162ee:	d1dd      	bne.n	80162ac <_malloc_r+0x64>
 80162f0:	e7cf      	b.n	8016292 <_malloc_r+0x4a>
 80162f2:	bf00      	nop
 80162f4:	20000590 	.word	0x20000590
 80162f8:	20000594 	.word	0x20000594

080162fc <__sfputc_r>:
 80162fc:	6893      	ldr	r3, [r2, #8]
 80162fe:	3b01      	subs	r3, #1
 8016300:	2b00      	cmp	r3, #0
 8016302:	b410      	push	{r4}
 8016304:	6093      	str	r3, [r2, #8]
 8016306:	da08      	bge.n	801631a <__sfputc_r+0x1e>
 8016308:	6994      	ldr	r4, [r2, #24]
 801630a:	42a3      	cmp	r3, r4
 801630c:	db01      	blt.n	8016312 <__sfputc_r+0x16>
 801630e:	290a      	cmp	r1, #10
 8016310:	d103      	bne.n	801631a <__sfputc_r+0x1e>
 8016312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016316:	f000 bc43 	b.w	8016ba0 <__swbuf_r>
 801631a:	6813      	ldr	r3, [r2, #0]
 801631c:	1c58      	adds	r0, r3, #1
 801631e:	6010      	str	r0, [r2, #0]
 8016320:	7019      	strb	r1, [r3, #0]
 8016322:	4608      	mov	r0, r1
 8016324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016328:	4770      	bx	lr

0801632a <__sfputs_r>:
 801632a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801632c:	4606      	mov	r6, r0
 801632e:	460f      	mov	r7, r1
 8016330:	4614      	mov	r4, r2
 8016332:	18d5      	adds	r5, r2, r3
 8016334:	42ac      	cmp	r4, r5
 8016336:	d101      	bne.n	801633c <__sfputs_r+0x12>
 8016338:	2000      	movs	r0, #0
 801633a:	e007      	b.n	801634c <__sfputs_r+0x22>
 801633c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016340:	463a      	mov	r2, r7
 8016342:	4630      	mov	r0, r6
 8016344:	f7ff ffda 	bl	80162fc <__sfputc_r>
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	d1f3      	bne.n	8016334 <__sfputs_r+0xa>
 801634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016350 <_vfiprintf_r>:
 8016350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016354:	460d      	mov	r5, r1
 8016356:	b09d      	sub	sp, #116	; 0x74
 8016358:	4614      	mov	r4, r2
 801635a:	4698      	mov	r8, r3
 801635c:	4606      	mov	r6, r0
 801635e:	b118      	cbz	r0, 8016368 <_vfiprintf_r+0x18>
 8016360:	6983      	ldr	r3, [r0, #24]
 8016362:	b90b      	cbnz	r3, 8016368 <_vfiprintf_r+0x18>
 8016364:	f000 fe10 	bl	8016f88 <__sinit>
 8016368:	4b89      	ldr	r3, [pc, #548]	; (8016590 <_vfiprintf_r+0x240>)
 801636a:	429d      	cmp	r5, r3
 801636c:	d11b      	bne.n	80163a6 <_vfiprintf_r+0x56>
 801636e:	6875      	ldr	r5, [r6, #4]
 8016370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016372:	07d9      	lsls	r1, r3, #31
 8016374:	d405      	bmi.n	8016382 <_vfiprintf_r+0x32>
 8016376:	89ab      	ldrh	r3, [r5, #12]
 8016378:	059a      	lsls	r2, r3, #22
 801637a:	d402      	bmi.n	8016382 <_vfiprintf_r+0x32>
 801637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801637e:	f000 fea1 	bl	80170c4 <__retarget_lock_acquire_recursive>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	071b      	lsls	r3, r3, #28
 8016386:	d501      	bpl.n	801638c <_vfiprintf_r+0x3c>
 8016388:	692b      	ldr	r3, [r5, #16]
 801638a:	b9eb      	cbnz	r3, 80163c8 <_vfiprintf_r+0x78>
 801638c:	4629      	mov	r1, r5
 801638e:	4630      	mov	r0, r6
 8016390:	f000 fc6a 	bl	8016c68 <__swsetup_r>
 8016394:	b1c0      	cbz	r0, 80163c8 <_vfiprintf_r+0x78>
 8016396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016398:	07dc      	lsls	r4, r3, #31
 801639a:	d50e      	bpl.n	80163ba <_vfiprintf_r+0x6a>
 801639c:	f04f 30ff 	mov.w	r0, #4294967295
 80163a0:	b01d      	add	sp, #116	; 0x74
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	4b7b      	ldr	r3, [pc, #492]	; (8016594 <_vfiprintf_r+0x244>)
 80163a8:	429d      	cmp	r5, r3
 80163aa:	d101      	bne.n	80163b0 <_vfiprintf_r+0x60>
 80163ac:	68b5      	ldr	r5, [r6, #8]
 80163ae:	e7df      	b.n	8016370 <_vfiprintf_r+0x20>
 80163b0:	4b79      	ldr	r3, [pc, #484]	; (8016598 <_vfiprintf_r+0x248>)
 80163b2:	429d      	cmp	r5, r3
 80163b4:	bf08      	it	eq
 80163b6:	68f5      	ldreq	r5, [r6, #12]
 80163b8:	e7da      	b.n	8016370 <_vfiprintf_r+0x20>
 80163ba:	89ab      	ldrh	r3, [r5, #12]
 80163bc:	0598      	lsls	r0, r3, #22
 80163be:	d4ed      	bmi.n	801639c <_vfiprintf_r+0x4c>
 80163c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163c2:	f000 fe80 	bl	80170c6 <__retarget_lock_release_recursive>
 80163c6:	e7e9      	b.n	801639c <_vfiprintf_r+0x4c>
 80163c8:	2300      	movs	r3, #0
 80163ca:	9309      	str	r3, [sp, #36]	; 0x24
 80163cc:	2320      	movs	r3, #32
 80163ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80163d6:	2330      	movs	r3, #48	; 0x30
 80163d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801659c <_vfiprintf_r+0x24c>
 80163dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163e0:	f04f 0901 	mov.w	r9, #1
 80163e4:	4623      	mov	r3, r4
 80163e6:	469a      	mov	sl, r3
 80163e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163ec:	b10a      	cbz	r2, 80163f2 <_vfiprintf_r+0xa2>
 80163ee:	2a25      	cmp	r2, #37	; 0x25
 80163f0:	d1f9      	bne.n	80163e6 <_vfiprintf_r+0x96>
 80163f2:	ebba 0b04 	subs.w	fp, sl, r4
 80163f6:	d00b      	beq.n	8016410 <_vfiprintf_r+0xc0>
 80163f8:	465b      	mov	r3, fp
 80163fa:	4622      	mov	r2, r4
 80163fc:	4629      	mov	r1, r5
 80163fe:	4630      	mov	r0, r6
 8016400:	f7ff ff93 	bl	801632a <__sfputs_r>
 8016404:	3001      	adds	r0, #1
 8016406:	f000 80aa 	beq.w	801655e <_vfiprintf_r+0x20e>
 801640a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801640c:	445a      	add	r2, fp
 801640e:	9209      	str	r2, [sp, #36]	; 0x24
 8016410:	f89a 3000 	ldrb.w	r3, [sl]
 8016414:	2b00      	cmp	r3, #0
 8016416:	f000 80a2 	beq.w	801655e <_vfiprintf_r+0x20e>
 801641a:	2300      	movs	r3, #0
 801641c:	f04f 32ff 	mov.w	r2, #4294967295
 8016420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016424:	f10a 0a01 	add.w	sl, sl, #1
 8016428:	9304      	str	r3, [sp, #16]
 801642a:	9307      	str	r3, [sp, #28]
 801642c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016430:	931a      	str	r3, [sp, #104]	; 0x68
 8016432:	4654      	mov	r4, sl
 8016434:	2205      	movs	r2, #5
 8016436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801643a:	4858      	ldr	r0, [pc, #352]	; (801659c <_vfiprintf_r+0x24c>)
 801643c:	f7e9 fef0 	bl	8000220 <memchr>
 8016440:	9a04      	ldr	r2, [sp, #16]
 8016442:	b9d8      	cbnz	r0, 801647c <_vfiprintf_r+0x12c>
 8016444:	06d1      	lsls	r1, r2, #27
 8016446:	bf44      	itt	mi
 8016448:	2320      	movmi	r3, #32
 801644a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801644e:	0713      	lsls	r3, r2, #28
 8016450:	bf44      	itt	mi
 8016452:	232b      	movmi	r3, #43	; 0x2b
 8016454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016458:	f89a 3000 	ldrb.w	r3, [sl]
 801645c:	2b2a      	cmp	r3, #42	; 0x2a
 801645e:	d015      	beq.n	801648c <_vfiprintf_r+0x13c>
 8016460:	9a07      	ldr	r2, [sp, #28]
 8016462:	4654      	mov	r4, sl
 8016464:	2000      	movs	r0, #0
 8016466:	f04f 0c0a 	mov.w	ip, #10
 801646a:	4621      	mov	r1, r4
 801646c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016470:	3b30      	subs	r3, #48	; 0x30
 8016472:	2b09      	cmp	r3, #9
 8016474:	d94e      	bls.n	8016514 <_vfiprintf_r+0x1c4>
 8016476:	b1b0      	cbz	r0, 80164a6 <_vfiprintf_r+0x156>
 8016478:	9207      	str	r2, [sp, #28]
 801647a:	e014      	b.n	80164a6 <_vfiprintf_r+0x156>
 801647c:	eba0 0308 	sub.w	r3, r0, r8
 8016480:	fa09 f303 	lsl.w	r3, r9, r3
 8016484:	4313      	orrs	r3, r2
 8016486:	9304      	str	r3, [sp, #16]
 8016488:	46a2      	mov	sl, r4
 801648a:	e7d2      	b.n	8016432 <_vfiprintf_r+0xe2>
 801648c:	9b03      	ldr	r3, [sp, #12]
 801648e:	1d19      	adds	r1, r3, #4
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	9103      	str	r1, [sp, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	bfbb      	ittet	lt
 8016498:	425b      	neglt	r3, r3
 801649a:	f042 0202 	orrlt.w	r2, r2, #2
 801649e:	9307      	strge	r3, [sp, #28]
 80164a0:	9307      	strlt	r3, [sp, #28]
 80164a2:	bfb8      	it	lt
 80164a4:	9204      	strlt	r2, [sp, #16]
 80164a6:	7823      	ldrb	r3, [r4, #0]
 80164a8:	2b2e      	cmp	r3, #46	; 0x2e
 80164aa:	d10c      	bne.n	80164c6 <_vfiprintf_r+0x176>
 80164ac:	7863      	ldrb	r3, [r4, #1]
 80164ae:	2b2a      	cmp	r3, #42	; 0x2a
 80164b0:	d135      	bne.n	801651e <_vfiprintf_r+0x1ce>
 80164b2:	9b03      	ldr	r3, [sp, #12]
 80164b4:	1d1a      	adds	r2, r3, #4
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	9203      	str	r2, [sp, #12]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	bfb8      	it	lt
 80164be:	f04f 33ff 	movlt.w	r3, #4294967295
 80164c2:	3402      	adds	r4, #2
 80164c4:	9305      	str	r3, [sp, #20]
 80164c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80165ac <_vfiprintf_r+0x25c>
 80164ca:	7821      	ldrb	r1, [r4, #0]
 80164cc:	2203      	movs	r2, #3
 80164ce:	4650      	mov	r0, sl
 80164d0:	f7e9 fea6 	bl	8000220 <memchr>
 80164d4:	b140      	cbz	r0, 80164e8 <_vfiprintf_r+0x198>
 80164d6:	2340      	movs	r3, #64	; 0x40
 80164d8:	eba0 000a 	sub.w	r0, r0, sl
 80164dc:	fa03 f000 	lsl.w	r0, r3, r0
 80164e0:	9b04      	ldr	r3, [sp, #16]
 80164e2:	4303      	orrs	r3, r0
 80164e4:	3401      	adds	r4, #1
 80164e6:	9304      	str	r3, [sp, #16]
 80164e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164ec:	482c      	ldr	r0, [pc, #176]	; (80165a0 <_vfiprintf_r+0x250>)
 80164ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164f2:	2206      	movs	r2, #6
 80164f4:	f7e9 fe94 	bl	8000220 <memchr>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d03f      	beq.n	801657c <_vfiprintf_r+0x22c>
 80164fc:	4b29      	ldr	r3, [pc, #164]	; (80165a4 <_vfiprintf_r+0x254>)
 80164fe:	bb1b      	cbnz	r3, 8016548 <_vfiprintf_r+0x1f8>
 8016500:	9b03      	ldr	r3, [sp, #12]
 8016502:	3307      	adds	r3, #7
 8016504:	f023 0307 	bic.w	r3, r3, #7
 8016508:	3308      	adds	r3, #8
 801650a:	9303      	str	r3, [sp, #12]
 801650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801650e:	443b      	add	r3, r7
 8016510:	9309      	str	r3, [sp, #36]	; 0x24
 8016512:	e767      	b.n	80163e4 <_vfiprintf_r+0x94>
 8016514:	fb0c 3202 	mla	r2, ip, r2, r3
 8016518:	460c      	mov	r4, r1
 801651a:	2001      	movs	r0, #1
 801651c:	e7a5      	b.n	801646a <_vfiprintf_r+0x11a>
 801651e:	2300      	movs	r3, #0
 8016520:	3401      	adds	r4, #1
 8016522:	9305      	str	r3, [sp, #20]
 8016524:	4619      	mov	r1, r3
 8016526:	f04f 0c0a 	mov.w	ip, #10
 801652a:	4620      	mov	r0, r4
 801652c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016530:	3a30      	subs	r2, #48	; 0x30
 8016532:	2a09      	cmp	r2, #9
 8016534:	d903      	bls.n	801653e <_vfiprintf_r+0x1ee>
 8016536:	2b00      	cmp	r3, #0
 8016538:	d0c5      	beq.n	80164c6 <_vfiprintf_r+0x176>
 801653a:	9105      	str	r1, [sp, #20]
 801653c:	e7c3      	b.n	80164c6 <_vfiprintf_r+0x176>
 801653e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016542:	4604      	mov	r4, r0
 8016544:	2301      	movs	r3, #1
 8016546:	e7f0      	b.n	801652a <_vfiprintf_r+0x1da>
 8016548:	ab03      	add	r3, sp, #12
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	462a      	mov	r2, r5
 801654e:	4b16      	ldr	r3, [pc, #88]	; (80165a8 <_vfiprintf_r+0x258>)
 8016550:	a904      	add	r1, sp, #16
 8016552:	4630      	mov	r0, r6
 8016554:	f3af 8000 	nop.w
 8016558:	4607      	mov	r7, r0
 801655a:	1c78      	adds	r0, r7, #1
 801655c:	d1d6      	bne.n	801650c <_vfiprintf_r+0x1bc>
 801655e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016560:	07d9      	lsls	r1, r3, #31
 8016562:	d405      	bmi.n	8016570 <_vfiprintf_r+0x220>
 8016564:	89ab      	ldrh	r3, [r5, #12]
 8016566:	059a      	lsls	r2, r3, #22
 8016568:	d402      	bmi.n	8016570 <_vfiprintf_r+0x220>
 801656a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801656c:	f000 fdab 	bl	80170c6 <__retarget_lock_release_recursive>
 8016570:	89ab      	ldrh	r3, [r5, #12]
 8016572:	065b      	lsls	r3, r3, #25
 8016574:	f53f af12 	bmi.w	801639c <_vfiprintf_r+0x4c>
 8016578:	9809      	ldr	r0, [sp, #36]	; 0x24
 801657a:	e711      	b.n	80163a0 <_vfiprintf_r+0x50>
 801657c:	ab03      	add	r3, sp, #12
 801657e:	9300      	str	r3, [sp, #0]
 8016580:	462a      	mov	r2, r5
 8016582:	4b09      	ldr	r3, [pc, #36]	; (80165a8 <_vfiprintf_r+0x258>)
 8016584:	a904      	add	r1, sp, #16
 8016586:	4630      	mov	r0, r6
 8016588:	f000 f880 	bl	801668c <_printf_i>
 801658c:	e7e4      	b.n	8016558 <_vfiprintf_r+0x208>
 801658e:	bf00      	nop
 8016590:	080195e4 	.word	0x080195e4
 8016594:	08019604 	.word	0x08019604
 8016598:	080195c4 	.word	0x080195c4
 801659c:	08019590 	.word	0x08019590
 80165a0:	0801959a 	.word	0x0801959a
 80165a4:	00000000 	.word	0x00000000
 80165a8:	0801632b 	.word	0x0801632b
 80165ac:	08019596 	.word	0x08019596

080165b0 <_printf_common>:
 80165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b4:	4616      	mov	r6, r2
 80165b6:	4699      	mov	r9, r3
 80165b8:	688a      	ldr	r2, [r1, #8]
 80165ba:	690b      	ldr	r3, [r1, #16]
 80165bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165c0:	4293      	cmp	r3, r2
 80165c2:	bfb8      	it	lt
 80165c4:	4613      	movlt	r3, r2
 80165c6:	6033      	str	r3, [r6, #0]
 80165c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165cc:	4607      	mov	r7, r0
 80165ce:	460c      	mov	r4, r1
 80165d0:	b10a      	cbz	r2, 80165d6 <_printf_common+0x26>
 80165d2:	3301      	adds	r3, #1
 80165d4:	6033      	str	r3, [r6, #0]
 80165d6:	6823      	ldr	r3, [r4, #0]
 80165d8:	0699      	lsls	r1, r3, #26
 80165da:	bf42      	ittt	mi
 80165dc:	6833      	ldrmi	r3, [r6, #0]
 80165de:	3302      	addmi	r3, #2
 80165e0:	6033      	strmi	r3, [r6, #0]
 80165e2:	6825      	ldr	r5, [r4, #0]
 80165e4:	f015 0506 	ands.w	r5, r5, #6
 80165e8:	d106      	bne.n	80165f8 <_printf_common+0x48>
 80165ea:	f104 0a19 	add.w	sl, r4, #25
 80165ee:	68e3      	ldr	r3, [r4, #12]
 80165f0:	6832      	ldr	r2, [r6, #0]
 80165f2:	1a9b      	subs	r3, r3, r2
 80165f4:	42ab      	cmp	r3, r5
 80165f6:	dc26      	bgt.n	8016646 <_printf_common+0x96>
 80165f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80165fc:	1e13      	subs	r3, r2, #0
 80165fe:	6822      	ldr	r2, [r4, #0]
 8016600:	bf18      	it	ne
 8016602:	2301      	movne	r3, #1
 8016604:	0692      	lsls	r2, r2, #26
 8016606:	d42b      	bmi.n	8016660 <_printf_common+0xb0>
 8016608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801660c:	4649      	mov	r1, r9
 801660e:	4638      	mov	r0, r7
 8016610:	47c0      	blx	r8
 8016612:	3001      	adds	r0, #1
 8016614:	d01e      	beq.n	8016654 <_printf_common+0xa4>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	68e5      	ldr	r5, [r4, #12]
 801661a:	6832      	ldr	r2, [r6, #0]
 801661c:	f003 0306 	and.w	r3, r3, #6
 8016620:	2b04      	cmp	r3, #4
 8016622:	bf08      	it	eq
 8016624:	1aad      	subeq	r5, r5, r2
 8016626:	68a3      	ldr	r3, [r4, #8]
 8016628:	6922      	ldr	r2, [r4, #16]
 801662a:	bf0c      	ite	eq
 801662c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016630:	2500      	movne	r5, #0
 8016632:	4293      	cmp	r3, r2
 8016634:	bfc4      	itt	gt
 8016636:	1a9b      	subgt	r3, r3, r2
 8016638:	18ed      	addgt	r5, r5, r3
 801663a:	2600      	movs	r6, #0
 801663c:	341a      	adds	r4, #26
 801663e:	42b5      	cmp	r5, r6
 8016640:	d11a      	bne.n	8016678 <_printf_common+0xc8>
 8016642:	2000      	movs	r0, #0
 8016644:	e008      	b.n	8016658 <_printf_common+0xa8>
 8016646:	2301      	movs	r3, #1
 8016648:	4652      	mov	r2, sl
 801664a:	4649      	mov	r1, r9
 801664c:	4638      	mov	r0, r7
 801664e:	47c0      	blx	r8
 8016650:	3001      	adds	r0, #1
 8016652:	d103      	bne.n	801665c <_printf_common+0xac>
 8016654:	f04f 30ff 	mov.w	r0, #4294967295
 8016658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801665c:	3501      	adds	r5, #1
 801665e:	e7c6      	b.n	80165ee <_printf_common+0x3e>
 8016660:	18e1      	adds	r1, r4, r3
 8016662:	1c5a      	adds	r2, r3, #1
 8016664:	2030      	movs	r0, #48	; 0x30
 8016666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801666a:	4422      	add	r2, r4
 801666c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016674:	3302      	adds	r3, #2
 8016676:	e7c7      	b.n	8016608 <_printf_common+0x58>
 8016678:	2301      	movs	r3, #1
 801667a:	4622      	mov	r2, r4
 801667c:	4649      	mov	r1, r9
 801667e:	4638      	mov	r0, r7
 8016680:	47c0      	blx	r8
 8016682:	3001      	adds	r0, #1
 8016684:	d0e6      	beq.n	8016654 <_printf_common+0xa4>
 8016686:	3601      	adds	r6, #1
 8016688:	e7d9      	b.n	801663e <_printf_common+0x8e>
	...

0801668c <_printf_i>:
 801668c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016690:	460c      	mov	r4, r1
 8016692:	4691      	mov	r9, r2
 8016694:	7e27      	ldrb	r7, [r4, #24]
 8016696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016698:	2f78      	cmp	r7, #120	; 0x78
 801669a:	4680      	mov	r8, r0
 801669c:	469a      	mov	sl, r3
 801669e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166a2:	d807      	bhi.n	80166b4 <_printf_i+0x28>
 80166a4:	2f62      	cmp	r7, #98	; 0x62
 80166a6:	d80a      	bhi.n	80166be <_printf_i+0x32>
 80166a8:	2f00      	cmp	r7, #0
 80166aa:	f000 80d8 	beq.w	801685e <_printf_i+0x1d2>
 80166ae:	2f58      	cmp	r7, #88	; 0x58
 80166b0:	f000 80a3 	beq.w	80167fa <_printf_i+0x16e>
 80166b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80166b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166bc:	e03a      	b.n	8016734 <_printf_i+0xa8>
 80166be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166c2:	2b15      	cmp	r3, #21
 80166c4:	d8f6      	bhi.n	80166b4 <_printf_i+0x28>
 80166c6:	a001      	add	r0, pc, #4	; (adr r0, 80166cc <_printf_i+0x40>)
 80166c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80166cc:	08016725 	.word	0x08016725
 80166d0:	08016739 	.word	0x08016739
 80166d4:	080166b5 	.word	0x080166b5
 80166d8:	080166b5 	.word	0x080166b5
 80166dc:	080166b5 	.word	0x080166b5
 80166e0:	080166b5 	.word	0x080166b5
 80166e4:	08016739 	.word	0x08016739
 80166e8:	080166b5 	.word	0x080166b5
 80166ec:	080166b5 	.word	0x080166b5
 80166f0:	080166b5 	.word	0x080166b5
 80166f4:	080166b5 	.word	0x080166b5
 80166f8:	08016845 	.word	0x08016845
 80166fc:	08016769 	.word	0x08016769
 8016700:	08016827 	.word	0x08016827
 8016704:	080166b5 	.word	0x080166b5
 8016708:	080166b5 	.word	0x080166b5
 801670c:	08016867 	.word	0x08016867
 8016710:	080166b5 	.word	0x080166b5
 8016714:	08016769 	.word	0x08016769
 8016718:	080166b5 	.word	0x080166b5
 801671c:	080166b5 	.word	0x080166b5
 8016720:	0801682f 	.word	0x0801682f
 8016724:	680b      	ldr	r3, [r1, #0]
 8016726:	1d1a      	adds	r2, r3, #4
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	600a      	str	r2, [r1, #0]
 801672c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016734:	2301      	movs	r3, #1
 8016736:	e0a3      	b.n	8016880 <_printf_i+0x1f4>
 8016738:	6825      	ldr	r5, [r4, #0]
 801673a:	6808      	ldr	r0, [r1, #0]
 801673c:	062e      	lsls	r6, r5, #24
 801673e:	f100 0304 	add.w	r3, r0, #4
 8016742:	d50a      	bpl.n	801675a <_printf_i+0xce>
 8016744:	6805      	ldr	r5, [r0, #0]
 8016746:	600b      	str	r3, [r1, #0]
 8016748:	2d00      	cmp	r5, #0
 801674a:	da03      	bge.n	8016754 <_printf_i+0xc8>
 801674c:	232d      	movs	r3, #45	; 0x2d
 801674e:	426d      	negs	r5, r5
 8016750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016754:	485e      	ldr	r0, [pc, #376]	; (80168d0 <_printf_i+0x244>)
 8016756:	230a      	movs	r3, #10
 8016758:	e019      	b.n	801678e <_printf_i+0x102>
 801675a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801675e:	6805      	ldr	r5, [r0, #0]
 8016760:	600b      	str	r3, [r1, #0]
 8016762:	bf18      	it	ne
 8016764:	b22d      	sxthne	r5, r5
 8016766:	e7ef      	b.n	8016748 <_printf_i+0xbc>
 8016768:	680b      	ldr	r3, [r1, #0]
 801676a:	6825      	ldr	r5, [r4, #0]
 801676c:	1d18      	adds	r0, r3, #4
 801676e:	6008      	str	r0, [r1, #0]
 8016770:	0628      	lsls	r0, r5, #24
 8016772:	d501      	bpl.n	8016778 <_printf_i+0xec>
 8016774:	681d      	ldr	r5, [r3, #0]
 8016776:	e002      	b.n	801677e <_printf_i+0xf2>
 8016778:	0669      	lsls	r1, r5, #25
 801677a:	d5fb      	bpl.n	8016774 <_printf_i+0xe8>
 801677c:	881d      	ldrh	r5, [r3, #0]
 801677e:	4854      	ldr	r0, [pc, #336]	; (80168d0 <_printf_i+0x244>)
 8016780:	2f6f      	cmp	r7, #111	; 0x6f
 8016782:	bf0c      	ite	eq
 8016784:	2308      	moveq	r3, #8
 8016786:	230a      	movne	r3, #10
 8016788:	2100      	movs	r1, #0
 801678a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801678e:	6866      	ldr	r6, [r4, #4]
 8016790:	60a6      	str	r6, [r4, #8]
 8016792:	2e00      	cmp	r6, #0
 8016794:	bfa2      	ittt	ge
 8016796:	6821      	ldrge	r1, [r4, #0]
 8016798:	f021 0104 	bicge.w	r1, r1, #4
 801679c:	6021      	strge	r1, [r4, #0]
 801679e:	b90d      	cbnz	r5, 80167a4 <_printf_i+0x118>
 80167a0:	2e00      	cmp	r6, #0
 80167a2:	d04d      	beq.n	8016840 <_printf_i+0x1b4>
 80167a4:	4616      	mov	r6, r2
 80167a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80167aa:	fb03 5711 	mls	r7, r3, r1, r5
 80167ae:	5dc7      	ldrb	r7, [r0, r7]
 80167b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167b4:	462f      	mov	r7, r5
 80167b6:	42bb      	cmp	r3, r7
 80167b8:	460d      	mov	r5, r1
 80167ba:	d9f4      	bls.n	80167a6 <_printf_i+0x11a>
 80167bc:	2b08      	cmp	r3, #8
 80167be:	d10b      	bne.n	80167d8 <_printf_i+0x14c>
 80167c0:	6823      	ldr	r3, [r4, #0]
 80167c2:	07df      	lsls	r7, r3, #31
 80167c4:	d508      	bpl.n	80167d8 <_printf_i+0x14c>
 80167c6:	6923      	ldr	r3, [r4, #16]
 80167c8:	6861      	ldr	r1, [r4, #4]
 80167ca:	4299      	cmp	r1, r3
 80167cc:	bfde      	ittt	le
 80167ce:	2330      	movle	r3, #48	; 0x30
 80167d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80167d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80167d8:	1b92      	subs	r2, r2, r6
 80167da:	6122      	str	r2, [r4, #16]
 80167dc:	f8cd a000 	str.w	sl, [sp]
 80167e0:	464b      	mov	r3, r9
 80167e2:	aa03      	add	r2, sp, #12
 80167e4:	4621      	mov	r1, r4
 80167e6:	4640      	mov	r0, r8
 80167e8:	f7ff fee2 	bl	80165b0 <_printf_common>
 80167ec:	3001      	adds	r0, #1
 80167ee:	d14c      	bne.n	801688a <_printf_i+0x1fe>
 80167f0:	f04f 30ff 	mov.w	r0, #4294967295
 80167f4:	b004      	add	sp, #16
 80167f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167fa:	4835      	ldr	r0, [pc, #212]	; (80168d0 <_printf_i+0x244>)
 80167fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016800:	6823      	ldr	r3, [r4, #0]
 8016802:	680e      	ldr	r6, [r1, #0]
 8016804:	061f      	lsls	r7, r3, #24
 8016806:	f856 5b04 	ldr.w	r5, [r6], #4
 801680a:	600e      	str	r6, [r1, #0]
 801680c:	d514      	bpl.n	8016838 <_printf_i+0x1ac>
 801680e:	07d9      	lsls	r1, r3, #31
 8016810:	bf44      	itt	mi
 8016812:	f043 0320 	orrmi.w	r3, r3, #32
 8016816:	6023      	strmi	r3, [r4, #0]
 8016818:	b91d      	cbnz	r5, 8016822 <_printf_i+0x196>
 801681a:	6823      	ldr	r3, [r4, #0]
 801681c:	f023 0320 	bic.w	r3, r3, #32
 8016820:	6023      	str	r3, [r4, #0]
 8016822:	2310      	movs	r3, #16
 8016824:	e7b0      	b.n	8016788 <_printf_i+0xfc>
 8016826:	6823      	ldr	r3, [r4, #0]
 8016828:	f043 0320 	orr.w	r3, r3, #32
 801682c:	6023      	str	r3, [r4, #0]
 801682e:	2378      	movs	r3, #120	; 0x78
 8016830:	4828      	ldr	r0, [pc, #160]	; (80168d4 <_printf_i+0x248>)
 8016832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016836:	e7e3      	b.n	8016800 <_printf_i+0x174>
 8016838:	065e      	lsls	r6, r3, #25
 801683a:	bf48      	it	mi
 801683c:	b2ad      	uxthmi	r5, r5
 801683e:	e7e6      	b.n	801680e <_printf_i+0x182>
 8016840:	4616      	mov	r6, r2
 8016842:	e7bb      	b.n	80167bc <_printf_i+0x130>
 8016844:	680b      	ldr	r3, [r1, #0]
 8016846:	6826      	ldr	r6, [r4, #0]
 8016848:	6960      	ldr	r0, [r4, #20]
 801684a:	1d1d      	adds	r5, r3, #4
 801684c:	600d      	str	r5, [r1, #0]
 801684e:	0635      	lsls	r5, r6, #24
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	d501      	bpl.n	8016858 <_printf_i+0x1cc>
 8016854:	6018      	str	r0, [r3, #0]
 8016856:	e002      	b.n	801685e <_printf_i+0x1d2>
 8016858:	0671      	lsls	r1, r6, #25
 801685a:	d5fb      	bpl.n	8016854 <_printf_i+0x1c8>
 801685c:	8018      	strh	r0, [r3, #0]
 801685e:	2300      	movs	r3, #0
 8016860:	6123      	str	r3, [r4, #16]
 8016862:	4616      	mov	r6, r2
 8016864:	e7ba      	b.n	80167dc <_printf_i+0x150>
 8016866:	680b      	ldr	r3, [r1, #0]
 8016868:	1d1a      	adds	r2, r3, #4
 801686a:	600a      	str	r2, [r1, #0]
 801686c:	681e      	ldr	r6, [r3, #0]
 801686e:	6862      	ldr	r2, [r4, #4]
 8016870:	2100      	movs	r1, #0
 8016872:	4630      	mov	r0, r6
 8016874:	f7e9 fcd4 	bl	8000220 <memchr>
 8016878:	b108      	cbz	r0, 801687e <_printf_i+0x1f2>
 801687a:	1b80      	subs	r0, r0, r6
 801687c:	6060      	str	r0, [r4, #4]
 801687e:	6863      	ldr	r3, [r4, #4]
 8016880:	6123      	str	r3, [r4, #16]
 8016882:	2300      	movs	r3, #0
 8016884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016888:	e7a8      	b.n	80167dc <_printf_i+0x150>
 801688a:	6923      	ldr	r3, [r4, #16]
 801688c:	4632      	mov	r2, r6
 801688e:	4649      	mov	r1, r9
 8016890:	4640      	mov	r0, r8
 8016892:	47d0      	blx	sl
 8016894:	3001      	adds	r0, #1
 8016896:	d0ab      	beq.n	80167f0 <_printf_i+0x164>
 8016898:	6823      	ldr	r3, [r4, #0]
 801689a:	079b      	lsls	r3, r3, #30
 801689c:	d413      	bmi.n	80168c6 <_printf_i+0x23a>
 801689e:	68e0      	ldr	r0, [r4, #12]
 80168a0:	9b03      	ldr	r3, [sp, #12]
 80168a2:	4298      	cmp	r0, r3
 80168a4:	bfb8      	it	lt
 80168a6:	4618      	movlt	r0, r3
 80168a8:	e7a4      	b.n	80167f4 <_printf_i+0x168>
 80168aa:	2301      	movs	r3, #1
 80168ac:	4632      	mov	r2, r6
 80168ae:	4649      	mov	r1, r9
 80168b0:	4640      	mov	r0, r8
 80168b2:	47d0      	blx	sl
 80168b4:	3001      	adds	r0, #1
 80168b6:	d09b      	beq.n	80167f0 <_printf_i+0x164>
 80168b8:	3501      	adds	r5, #1
 80168ba:	68e3      	ldr	r3, [r4, #12]
 80168bc:	9903      	ldr	r1, [sp, #12]
 80168be:	1a5b      	subs	r3, r3, r1
 80168c0:	42ab      	cmp	r3, r5
 80168c2:	dcf2      	bgt.n	80168aa <_printf_i+0x21e>
 80168c4:	e7eb      	b.n	801689e <_printf_i+0x212>
 80168c6:	2500      	movs	r5, #0
 80168c8:	f104 0619 	add.w	r6, r4, #25
 80168cc:	e7f5      	b.n	80168ba <_printf_i+0x22e>
 80168ce:	bf00      	nop
 80168d0:	080195a1 	.word	0x080195a1
 80168d4:	080195b2 	.word	0x080195b2

080168d8 <iprintf>:
 80168d8:	b40f      	push	{r0, r1, r2, r3}
 80168da:	4b0a      	ldr	r3, [pc, #40]	; (8016904 <iprintf+0x2c>)
 80168dc:	b513      	push	{r0, r1, r4, lr}
 80168de:	681c      	ldr	r4, [r3, #0]
 80168e0:	b124      	cbz	r4, 80168ec <iprintf+0x14>
 80168e2:	69a3      	ldr	r3, [r4, #24]
 80168e4:	b913      	cbnz	r3, 80168ec <iprintf+0x14>
 80168e6:	4620      	mov	r0, r4
 80168e8:	f000 fb4e 	bl	8016f88 <__sinit>
 80168ec:	ab05      	add	r3, sp, #20
 80168ee:	9a04      	ldr	r2, [sp, #16]
 80168f0:	68a1      	ldr	r1, [r4, #8]
 80168f2:	9301      	str	r3, [sp, #4]
 80168f4:	4620      	mov	r0, r4
 80168f6:	f7ff fd2b 	bl	8016350 <_vfiprintf_r>
 80168fa:	b002      	add	sp, #8
 80168fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016900:	b004      	add	sp, #16
 8016902:	4770      	bx	lr
 8016904:	200001c8 	.word	0x200001c8

08016908 <_puts_r>:
 8016908:	b570      	push	{r4, r5, r6, lr}
 801690a:	460e      	mov	r6, r1
 801690c:	4605      	mov	r5, r0
 801690e:	b118      	cbz	r0, 8016918 <_puts_r+0x10>
 8016910:	6983      	ldr	r3, [r0, #24]
 8016912:	b90b      	cbnz	r3, 8016918 <_puts_r+0x10>
 8016914:	f000 fb38 	bl	8016f88 <__sinit>
 8016918:	69ab      	ldr	r3, [r5, #24]
 801691a:	68ac      	ldr	r4, [r5, #8]
 801691c:	b913      	cbnz	r3, 8016924 <_puts_r+0x1c>
 801691e:	4628      	mov	r0, r5
 8016920:	f000 fb32 	bl	8016f88 <__sinit>
 8016924:	4b2c      	ldr	r3, [pc, #176]	; (80169d8 <_puts_r+0xd0>)
 8016926:	429c      	cmp	r4, r3
 8016928:	d120      	bne.n	801696c <_puts_r+0x64>
 801692a:	686c      	ldr	r4, [r5, #4]
 801692c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801692e:	07db      	lsls	r3, r3, #31
 8016930:	d405      	bmi.n	801693e <_puts_r+0x36>
 8016932:	89a3      	ldrh	r3, [r4, #12]
 8016934:	0598      	lsls	r0, r3, #22
 8016936:	d402      	bmi.n	801693e <_puts_r+0x36>
 8016938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801693a:	f000 fbc3 	bl	80170c4 <__retarget_lock_acquire_recursive>
 801693e:	89a3      	ldrh	r3, [r4, #12]
 8016940:	0719      	lsls	r1, r3, #28
 8016942:	d51d      	bpl.n	8016980 <_puts_r+0x78>
 8016944:	6923      	ldr	r3, [r4, #16]
 8016946:	b1db      	cbz	r3, 8016980 <_puts_r+0x78>
 8016948:	3e01      	subs	r6, #1
 801694a:	68a3      	ldr	r3, [r4, #8]
 801694c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016950:	3b01      	subs	r3, #1
 8016952:	60a3      	str	r3, [r4, #8]
 8016954:	bb39      	cbnz	r1, 80169a6 <_puts_r+0x9e>
 8016956:	2b00      	cmp	r3, #0
 8016958:	da38      	bge.n	80169cc <_puts_r+0xc4>
 801695a:	4622      	mov	r2, r4
 801695c:	210a      	movs	r1, #10
 801695e:	4628      	mov	r0, r5
 8016960:	f000 f91e 	bl	8016ba0 <__swbuf_r>
 8016964:	3001      	adds	r0, #1
 8016966:	d011      	beq.n	801698c <_puts_r+0x84>
 8016968:	250a      	movs	r5, #10
 801696a:	e011      	b.n	8016990 <_puts_r+0x88>
 801696c:	4b1b      	ldr	r3, [pc, #108]	; (80169dc <_puts_r+0xd4>)
 801696e:	429c      	cmp	r4, r3
 8016970:	d101      	bne.n	8016976 <_puts_r+0x6e>
 8016972:	68ac      	ldr	r4, [r5, #8]
 8016974:	e7da      	b.n	801692c <_puts_r+0x24>
 8016976:	4b1a      	ldr	r3, [pc, #104]	; (80169e0 <_puts_r+0xd8>)
 8016978:	429c      	cmp	r4, r3
 801697a:	bf08      	it	eq
 801697c:	68ec      	ldreq	r4, [r5, #12]
 801697e:	e7d5      	b.n	801692c <_puts_r+0x24>
 8016980:	4621      	mov	r1, r4
 8016982:	4628      	mov	r0, r5
 8016984:	f000 f970 	bl	8016c68 <__swsetup_r>
 8016988:	2800      	cmp	r0, #0
 801698a:	d0dd      	beq.n	8016948 <_puts_r+0x40>
 801698c:	f04f 35ff 	mov.w	r5, #4294967295
 8016990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016992:	07da      	lsls	r2, r3, #31
 8016994:	d405      	bmi.n	80169a2 <_puts_r+0x9a>
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	059b      	lsls	r3, r3, #22
 801699a:	d402      	bmi.n	80169a2 <_puts_r+0x9a>
 801699c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801699e:	f000 fb92 	bl	80170c6 <__retarget_lock_release_recursive>
 80169a2:	4628      	mov	r0, r5
 80169a4:	bd70      	pop	{r4, r5, r6, pc}
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	da04      	bge.n	80169b4 <_puts_r+0xac>
 80169aa:	69a2      	ldr	r2, [r4, #24]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	dc06      	bgt.n	80169be <_puts_r+0xb6>
 80169b0:	290a      	cmp	r1, #10
 80169b2:	d004      	beq.n	80169be <_puts_r+0xb6>
 80169b4:	6823      	ldr	r3, [r4, #0]
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	6022      	str	r2, [r4, #0]
 80169ba:	7019      	strb	r1, [r3, #0]
 80169bc:	e7c5      	b.n	801694a <_puts_r+0x42>
 80169be:	4622      	mov	r2, r4
 80169c0:	4628      	mov	r0, r5
 80169c2:	f000 f8ed 	bl	8016ba0 <__swbuf_r>
 80169c6:	3001      	adds	r0, #1
 80169c8:	d1bf      	bne.n	801694a <_puts_r+0x42>
 80169ca:	e7df      	b.n	801698c <_puts_r+0x84>
 80169cc:	6823      	ldr	r3, [r4, #0]
 80169ce:	250a      	movs	r5, #10
 80169d0:	1c5a      	adds	r2, r3, #1
 80169d2:	6022      	str	r2, [r4, #0]
 80169d4:	701d      	strb	r5, [r3, #0]
 80169d6:	e7db      	b.n	8016990 <_puts_r+0x88>
 80169d8:	080195e4 	.word	0x080195e4
 80169dc:	08019604 	.word	0x08019604
 80169e0:	080195c4 	.word	0x080195c4

080169e4 <puts>:
 80169e4:	4b02      	ldr	r3, [pc, #8]	; (80169f0 <puts+0xc>)
 80169e6:	4601      	mov	r1, r0
 80169e8:	6818      	ldr	r0, [r3, #0]
 80169ea:	f7ff bf8d 	b.w	8016908 <_puts_r>
 80169ee:	bf00      	nop
 80169f0:	200001c8 	.word	0x200001c8

080169f4 <_sbrk_r>:
 80169f4:	b538      	push	{r3, r4, r5, lr}
 80169f6:	4d06      	ldr	r5, [pc, #24]	; (8016a10 <_sbrk_r+0x1c>)
 80169f8:	2300      	movs	r3, #0
 80169fa:	4604      	mov	r4, r0
 80169fc:	4608      	mov	r0, r1
 80169fe:	602b      	str	r3, [r5, #0]
 8016a00:	f7f5 fbb4 	bl	800c16c <_sbrk>
 8016a04:	1c43      	adds	r3, r0, #1
 8016a06:	d102      	bne.n	8016a0e <_sbrk_r+0x1a>
 8016a08:	682b      	ldr	r3, [r5, #0]
 8016a0a:	b103      	cbz	r3, 8016a0e <_sbrk_r+0x1a>
 8016a0c:	6023      	str	r3, [r4, #0]
 8016a0e:	bd38      	pop	{r3, r4, r5, pc}
 8016a10:	20002e50 	.word	0x20002e50

08016a14 <sniprintf>:
 8016a14:	b40c      	push	{r2, r3}
 8016a16:	b530      	push	{r4, r5, lr}
 8016a18:	4b17      	ldr	r3, [pc, #92]	; (8016a78 <sniprintf+0x64>)
 8016a1a:	1e0c      	subs	r4, r1, #0
 8016a1c:	681d      	ldr	r5, [r3, #0]
 8016a1e:	b09d      	sub	sp, #116	; 0x74
 8016a20:	da08      	bge.n	8016a34 <sniprintf+0x20>
 8016a22:	238b      	movs	r3, #139	; 0x8b
 8016a24:	602b      	str	r3, [r5, #0]
 8016a26:	f04f 30ff 	mov.w	r0, #4294967295
 8016a2a:	b01d      	add	sp, #116	; 0x74
 8016a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a30:	b002      	add	sp, #8
 8016a32:	4770      	bx	lr
 8016a34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016a38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016a3c:	bf14      	ite	ne
 8016a3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016a42:	4623      	moveq	r3, r4
 8016a44:	9304      	str	r3, [sp, #16]
 8016a46:	9307      	str	r3, [sp, #28]
 8016a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a4c:	9002      	str	r0, [sp, #8]
 8016a4e:	9006      	str	r0, [sp, #24]
 8016a50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016a56:	ab21      	add	r3, sp, #132	; 0x84
 8016a58:	a902      	add	r1, sp, #8
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	9301      	str	r3, [sp, #4]
 8016a5e:	f000 fc3f 	bl	80172e0 <_svfiprintf_r>
 8016a62:	1c43      	adds	r3, r0, #1
 8016a64:	bfbc      	itt	lt
 8016a66:	238b      	movlt	r3, #139	; 0x8b
 8016a68:	602b      	strlt	r3, [r5, #0]
 8016a6a:	2c00      	cmp	r4, #0
 8016a6c:	d0dd      	beq.n	8016a2a <sniprintf+0x16>
 8016a6e:	9b02      	ldr	r3, [sp, #8]
 8016a70:	2200      	movs	r2, #0
 8016a72:	701a      	strb	r2, [r3, #0]
 8016a74:	e7d9      	b.n	8016a2a <sniprintf+0x16>
 8016a76:	bf00      	nop
 8016a78:	200001c8 	.word	0x200001c8

08016a7c <siprintf>:
 8016a7c:	b40e      	push	{r1, r2, r3}
 8016a7e:	b500      	push	{lr}
 8016a80:	b09c      	sub	sp, #112	; 0x70
 8016a82:	ab1d      	add	r3, sp, #116	; 0x74
 8016a84:	9002      	str	r0, [sp, #8]
 8016a86:	9006      	str	r0, [sp, #24]
 8016a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a8c:	4809      	ldr	r0, [pc, #36]	; (8016ab4 <siprintf+0x38>)
 8016a8e:	9107      	str	r1, [sp, #28]
 8016a90:	9104      	str	r1, [sp, #16]
 8016a92:	4909      	ldr	r1, [pc, #36]	; (8016ab8 <siprintf+0x3c>)
 8016a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a98:	9105      	str	r1, [sp, #20]
 8016a9a:	6800      	ldr	r0, [r0, #0]
 8016a9c:	9301      	str	r3, [sp, #4]
 8016a9e:	a902      	add	r1, sp, #8
 8016aa0:	f000 fc1e 	bl	80172e0 <_svfiprintf_r>
 8016aa4:	9b02      	ldr	r3, [sp, #8]
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	701a      	strb	r2, [r3, #0]
 8016aaa:	b01c      	add	sp, #112	; 0x70
 8016aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ab0:	b003      	add	sp, #12
 8016ab2:	4770      	bx	lr
 8016ab4:	200001c8 	.word	0x200001c8
 8016ab8:	ffff0208 	.word	0xffff0208

08016abc <strchr>:
 8016abc:	b2c9      	uxtb	r1, r1
 8016abe:	4603      	mov	r3, r0
 8016ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ac4:	b11a      	cbz	r2, 8016ace <strchr+0x12>
 8016ac6:	428a      	cmp	r2, r1
 8016ac8:	d1f9      	bne.n	8016abe <strchr+0x2>
 8016aca:	4618      	mov	r0, r3
 8016acc:	4770      	bx	lr
 8016ace:	2900      	cmp	r1, #0
 8016ad0:	bf18      	it	ne
 8016ad2:	2300      	movne	r3, #0
 8016ad4:	e7f9      	b.n	8016aca <strchr+0xe>

08016ad6 <strcspn>:
 8016ad6:	b570      	push	{r4, r5, r6, lr}
 8016ad8:	4603      	mov	r3, r0
 8016ada:	461e      	mov	r6, r3
 8016adc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8016ae0:	b144      	cbz	r4, 8016af4 <strcspn+0x1e>
 8016ae2:	1e4a      	subs	r2, r1, #1
 8016ae4:	e001      	b.n	8016aea <strcspn+0x14>
 8016ae6:	42a5      	cmp	r5, r4
 8016ae8:	d004      	beq.n	8016af4 <strcspn+0x1e>
 8016aea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016aee:	2d00      	cmp	r5, #0
 8016af0:	d1f9      	bne.n	8016ae6 <strcspn+0x10>
 8016af2:	e7f2      	b.n	8016ada <strcspn+0x4>
 8016af4:	1a30      	subs	r0, r6, r0
 8016af6:	bd70      	pop	{r4, r5, r6, pc}

08016af8 <strspn>:
 8016af8:	b570      	push	{r4, r5, r6, lr}
 8016afa:	4603      	mov	r3, r0
 8016afc:	461e      	mov	r6, r3
 8016afe:	f813 4b01 	ldrb.w	r4, [r3], #1
 8016b02:	b13c      	cbz	r4, 8016b14 <strspn+0x1c>
 8016b04:	1e4a      	subs	r2, r1, #1
 8016b06:	e001      	b.n	8016b0c <strspn+0x14>
 8016b08:	42a5      	cmp	r5, r4
 8016b0a:	d0f7      	beq.n	8016afc <strspn+0x4>
 8016b0c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016b10:	2d00      	cmp	r5, #0
 8016b12:	d1f9      	bne.n	8016b08 <strspn+0x10>
 8016b14:	1a30      	subs	r0, r6, r0
 8016b16:	bd70      	pop	{r4, r5, r6, pc}

08016b18 <write>:
 8016b18:	4613      	mov	r3, r2
 8016b1a:	460a      	mov	r2, r1
 8016b1c:	4601      	mov	r1, r0
 8016b1e:	4802      	ldr	r0, [pc, #8]	; (8016b28 <write+0x10>)
 8016b20:	6800      	ldr	r0, [r0, #0]
 8016b22:	f000 b88f 	b.w	8016c44 <_write_r>
 8016b26:	bf00      	nop
 8016b28:	200001c8 	.word	0x200001c8

08016b2c <_vsniprintf_r>:
 8016b2c:	b530      	push	{r4, r5, lr}
 8016b2e:	1e14      	subs	r4, r2, #0
 8016b30:	4605      	mov	r5, r0
 8016b32:	b09b      	sub	sp, #108	; 0x6c
 8016b34:	4618      	mov	r0, r3
 8016b36:	da05      	bge.n	8016b44 <_vsniprintf_r+0x18>
 8016b38:	238b      	movs	r3, #139	; 0x8b
 8016b3a:	602b      	str	r3, [r5, #0]
 8016b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b40:	b01b      	add	sp, #108	; 0x6c
 8016b42:	bd30      	pop	{r4, r5, pc}
 8016b44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016b4c:	bf14      	ite	ne
 8016b4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016b52:	4623      	moveq	r3, r4
 8016b54:	9302      	str	r3, [sp, #8]
 8016b56:	9305      	str	r3, [sp, #20]
 8016b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b5c:	9100      	str	r1, [sp, #0]
 8016b5e:	9104      	str	r1, [sp, #16]
 8016b60:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016b64:	4602      	mov	r2, r0
 8016b66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016b68:	4669      	mov	r1, sp
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	f000 fbb8 	bl	80172e0 <_svfiprintf_r>
 8016b70:	1c43      	adds	r3, r0, #1
 8016b72:	bfbc      	itt	lt
 8016b74:	238b      	movlt	r3, #139	; 0x8b
 8016b76:	602b      	strlt	r3, [r5, #0]
 8016b78:	2c00      	cmp	r4, #0
 8016b7a:	d0e1      	beq.n	8016b40 <_vsniprintf_r+0x14>
 8016b7c:	9b00      	ldr	r3, [sp, #0]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	701a      	strb	r2, [r3, #0]
 8016b82:	e7dd      	b.n	8016b40 <_vsniprintf_r+0x14>

08016b84 <vsniprintf>:
 8016b84:	b507      	push	{r0, r1, r2, lr}
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	4613      	mov	r3, r2
 8016b8a:	460a      	mov	r2, r1
 8016b8c:	4601      	mov	r1, r0
 8016b8e:	4803      	ldr	r0, [pc, #12]	; (8016b9c <vsniprintf+0x18>)
 8016b90:	6800      	ldr	r0, [r0, #0]
 8016b92:	f7ff ffcb 	bl	8016b2c <_vsniprintf_r>
 8016b96:	b003      	add	sp, #12
 8016b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b9c:	200001c8 	.word	0x200001c8

08016ba0 <__swbuf_r>:
 8016ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ba2:	460e      	mov	r6, r1
 8016ba4:	4614      	mov	r4, r2
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	b118      	cbz	r0, 8016bb2 <__swbuf_r+0x12>
 8016baa:	6983      	ldr	r3, [r0, #24]
 8016bac:	b90b      	cbnz	r3, 8016bb2 <__swbuf_r+0x12>
 8016bae:	f000 f9eb 	bl	8016f88 <__sinit>
 8016bb2:	4b21      	ldr	r3, [pc, #132]	; (8016c38 <__swbuf_r+0x98>)
 8016bb4:	429c      	cmp	r4, r3
 8016bb6:	d12b      	bne.n	8016c10 <__swbuf_r+0x70>
 8016bb8:	686c      	ldr	r4, [r5, #4]
 8016bba:	69a3      	ldr	r3, [r4, #24]
 8016bbc:	60a3      	str	r3, [r4, #8]
 8016bbe:	89a3      	ldrh	r3, [r4, #12]
 8016bc0:	071a      	lsls	r2, r3, #28
 8016bc2:	d52f      	bpl.n	8016c24 <__swbuf_r+0x84>
 8016bc4:	6923      	ldr	r3, [r4, #16]
 8016bc6:	b36b      	cbz	r3, 8016c24 <__swbuf_r+0x84>
 8016bc8:	6923      	ldr	r3, [r4, #16]
 8016bca:	6820      	ldr	r0, [r4, #0]
 8016bcc:	1ac0      	subs	r0, r0, r3
 8016bce:	6963      	ldr	r3, [r4, #20]
 8016bd0:	b2f6      	uxtb	r6, r6
 8016bd2:	4283      	cmp	r3, r0
 8016bd4:	4637      	mov	r7, r6
 8016bd6:	dc04      	bgt.n	8016be2 <__swbuf_r+0x42>
 8016bd8:	4621      	mov	r1, r4
 8016bda:	4628      	mov	r0, r5
 8016bdc:	f000 f940 	bl	8016e60 <_fflush_r>
 8016be0:	bb30      	cbnz	r0, 8016c30 <__swbuf_r+0x90>
 8016be2:	68a3      	ldr	r3, [r4, #8]
 8016be4:	3b01      	subs	r3, #1
 8016be6:	60a3      	str	r3, [r4, #8]
 8016be8:	6823      	ldr	r3, [r4, #0]
 8016bea:	1c5a      	adds	r2, r3, #1
 8016bec:	6022      	str	r2, [r4, #0]
 8016bee:	701e      	strb	r6, [r3, #0]
 8016bf0:	6963      	ldr	r3, [r4, #20]
 8016bf2:	3001      	adds	r0, #1
 8016bf4:	4283      	cmp	r3, r0
 8016bf6:	d004      	beq.n	8016c02 <__swbuf_r+0x62>
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	07db      	lsls	r3, r3, #31
 8016bfc:	d506      	bpl.n	8016c0c <__swbuf_r+0x6c>
 8016bfe:	2e0a      	cmp	r6, #10
 8016c00:	d104      	bne.n	8016c0c <__swbuf_r+0x6c>
 8016c02:	4621      	mov	r1, r4
 8016c04:	4628      	mov	r0, r5
 8016c06:	f000 f92b 	bl	8016e60 <_fflush_r>
 8016c0a:	b988      	cbnz	r0, 8016c30 <__swbuf_r+0x90>
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c10:	4b0a      	ldr	r3, [pc, #40]	; (8016c3c <__swbuf_r+0x9c>)
 8016c12:	429c      	cmp	r4, r3
 8016c14:	d101      	bne.n	8016c1a <__swbuf_r+0x7a>
 8016c16:	68ac      	ldr	r4, [r5, #8]
 8016c18:	e7cf      	b.n	8016bba <__swbuf_r+0x1a>
 8016c1a:	4b09      	ldr	r3, [pc, #36]	; (8016c40 <__swbuf_r+0xa0>)
 8016c1c:	429c      	cmp	r4, r3
 8016c1e:	bf08      	it	eq
 8016c20:	68ec      	ldreq	r4, [r5, #12]
 8016c22:	e7ca      	b.n	8016bba <__swbuf_r+0x1a>
 8016c24:	4621      	mov	r1, r4
 8016c26:	4628      	mov	r0, r5
 8016c28:	f000 f81e 	bl	8016c68 <__swsetup_r>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d0cb      	beq.n	8016bc8 <__swbuf_r+0x28>
 8016c30:	f04f 37ff 	mov.w	r7, #4294967295
 8016c34:	e7ea      	b.n	8016c0c <__swbuf_r+0x6c>
 8016c36:	bf00      	nop
 8016c38:	080195e4 	.word	0x080195e4
 8016c3c:	08019604 	.word	0x08019604
 8016c40:	080195c4 	.word	0x080195c4

08016c44 <_write_r>:
 8016c44:	b538      	push	{r3, r4, r5, lr}
 8016c46:	4d07      	ldr	r5, [pc, #28]	; (8016c64 <_write_r+0x20>)
 8016c48:	4604      	mov	r4, r0
 8016c4a:	4608      	mov	r0, r1
 8016c4c:	4611      	mov	r1, r2
 8016c4e:	2200      	movs	r2, #0
 8016c50:	602a      	str	r2, [r5, #0]
 8016c52:	461a      	mov	r2, r3
 8016c54:	f7f5 fa39 	bl	800c0ca <_write>
 8016c58:	1c43      	adds	r3, r0, #1
 8016c5a:	d102      	bne.n	8016c62 <_write_r+0x1e>
 8016c5c:	682b      	ldr	r3, [r5, #0]
 8016c5e:	b103      	cbz	r3, 8016c62 <_write_r+0x1e>
 8016c60:	6023      	str	r3, [r4, #0]
 8016c62:	bd38      	pop	{r3, r4, r5, pc}
 8016c64:	20002e50 	.word	0x20002e50

08016c68 <__swsetup_r>:
 8016c68:	4b32      	ldr	r3, [pc, #200]	; (8016d34 <__swsetup_r+0xcc>)
 8016c6a:	b570      	push	{r4, r5, r6, lr}
 8016c6c:	681d      	ldr	r5, [r3, #0]
 8016c6e:	4606      	mov	r6, r0
 8016c70:	460c      	mov	r4, r1
 8016c72:	b125      	cbz	r5, 8016c7e <__swsetup_r+0x16>
 8016c74:	69ab      	ldr	r3, [r5, #24]
 8016c76:	b913      	cbnz	r3, 8016c7e <__swsetup_r+0x16>
 8016c78:	4628      	mov	r0, r5
 8016c7a:	f000 f985 	bl	8016f88 <__sinit>
 8016c7e:	4b2e      	ldr	r3, [pc, #184]	; (8016d38 <__swsetup_r+0xd0>)
 8016c80:	429c      	cmp	r4, r3
 8016c82:	d10f      	bne.n	8016ca4 <__swsetup_r+0x3c>
 8016c84:	686c      	ldr	r4, [r5, #4]
 8016c86:	89a3      	ldrh	r3, [r4, #12]
 8016c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c8c:	0719      	lsls	r1, r3, #28
 8016c8e:	d42c      	bmi.n	8016cea <__swsetup_r+0x82>
 8016c90:	06dd      	lsls	r5, r3, #27
 8016c92:	d411      	bmi.n	8016cb8 <__swsetup_r+0x50>
 8016c94:	2309      	movs	r3, #9
 8016c96:	6033      	str	r3, [r6, #0]
 8016c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016c9c:	81a3      	strh	r3, [r4, #12]
 8016c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8016ca2:	e03e      	b.n	8016d22 <__swsetup_r+0xba>
 8016ca4:	4b25      	ldr	r3, [pc, #148]	; (8016d3c <__swsetup_r+0xd4>)
 8016ca6:	429c      	cmp	r4, r3
 8016ca8:	d101      	bne.n	8016cae <__swsetup_r+0x46>
 8016caa:	68ac      	ldr	r4, [r5, #8]
 8016cac:	e7eb      	b.n	8016c86 <__swsetup_r+0x1e>
 8016cae:	4b24      	ldr	r3, [pc, #144]	; (8016d40 <__swsetup_r+0xd8>)
 8016cb0:	429c      	cmp	r4, r3
 8016cb2:	bf08      	it	eq
 8016cb4:	68ec      	ldreq	r4, [r5, #12]
 8016cb6:	e7e6      	b.n	8016c86 <__swsetup_r+0x1e>
 8016cb8:	0758      	lsls	r0, r3, #29
 8016cba:	d512      	bpl.n	8016ce2 <__swsetup_r+0x7a>
 8016cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cbe:	b141      	cbz	r1, 8016cd2 <__swsetup_r+0x6a>
 8016cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cc4:	4299      	cmp	r1, r3
 8016cc6:	d002      	beq.n	8016cce <__swsetup_r+0x66>
 8016cc8:	4630      	mov	r0, r6
 8016cca:	f7ff fa6d 	bl	80161a8 <_free_r>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8016cd2:	89a3      	ldrh	r3, [r4, #12]
 8016cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016cd8:	81a3      	strh	r3, [r4, #12]
 8016cda:	2300      	movs	r3, #0
 8016cdc:	6063      	str	r3, [r4, #4]
 8016cde:	6923      	ldr	r3, [r4, #16]
 8016ce0:	6023      	str	r3, [r4, #0]
 8016ce2:	89a3      	ldrh	r3, [r4, #12]
 8016ce4:	f043 0308 	orr.w	r3, r3, #8
 8016ce8:	81a3      	strh	r3, [r4, #12]
 8016cea:	6923      	ldr	r3, [r4, #16]
 8016cec:	b94b      	cbnz	r3, 8016d02 <__swsetup_r+0x9a>
 8016cee:	89a3      	ldrh	r3, [r4, #12]
 8016cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016cf8:	d003      	beq.n	8016d02 <__swsetup_r+0x9a>
 8016cfa:	4621      	mov	r1, r4
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f000 fa07 	bl	8017110 <__smakebuf_r>
 8016d02:	89a0      	ldrh	r0, [r4, #12]
 8016d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d08:	f010 0301 	ands.w	r3, r0, #1
 8016d0c:	d00a      	beq.n	8016d24 <__swsetup_r+0xbc>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	60a3      	str	r3, [r4, #8]
 8016d12:	6963      	ldr	r3, [r4, #20]
 8016d14:	425b      	negs	r3, r3
 8016d16:	61a3      	str	r3, [r4, #24]
 8016d18:	6923      	ldr	r3, [r4, #16]
 8016d1a:	b943      	cbnz	r3, 8016d2e <__swsetup_r+0xc6>
 8016d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016d20:	d1ba      	bne.n	8016c98 <__swsetup_r+0x30>
 8016d22:	bd70      	pop	{r4, r5, r6, pc}
 8016d24:	0781      	lsls	r1, r0, #30
 8016d26:	bf58      	it	pl
 8016d28:	6963      	ldrpl	r3, [r4, #20]
 8016d2a:	60a3      	str	r3, [r4, #8]
 8016d2c:	e7f4      	b.n	8016d18 <__swsetup_r+0xb0>
 8016d2e:	2000      	movs	r0, #0
 8016d30:	e7f7      	b.n	8016d22 <__swsetup_r+0xba>
 8016d32:	bf00      	nop
 8016d34:	200001c8 	.word	0x200001c8
 8016d38:	080195e4 	.word	0x080195e4
 8016d3c:	08019604 	.word	0x08019604
 8016d40:	080195c4 	.word	0x080195c4

08016d44 <abort>:
 8016d44:	b508      	push	{r3, lr}
 8016d46:	2006      	movs	r0, #6
 8016d48:	f000 fbf2 	bl	8017530 <raise>
 8016d4c:	2001      	movs	r0, #1
 8016d4e:	f7f5 f995 	bl	800c07c <_exit>
	...

08016d54 <__sflush_r>:
 8016d54:	898a      	ldrh	r2, [r1, #12]
 8016d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	0710      	lsls	r0, r2, #28
 8016d5e:	460c      	mov	r4, r1
 8016d60:	d458      	bmi.n	8016e14 <__sflush_r+0xc0>
 8016d62:	684b      	ldr	r3, [r1, #4]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	dc05      	bgt.n	8016d74 <__sflush_r+0x20>
 8016d68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	dc02      	bgt.n	8016d74 <__sflush_r+0x20>
 8016d6e:	2000      	movs	r0, #0
 8016d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d76:	2e00      	cmp	r6, #0
 8016d78:	d0f9      	beq.n	8016d6e <__sflush_r+0x1a>
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d80:	682f      	ldr	r7, [r5, #0]
 8016d82:	602b      	str	r3, [r5, #0]
 8016d84:	d032      	beq.n	8016dec <__sflush_r+0x98>
 8016d86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d88:	89a3      	ldrh	r3, [r4, #12]
 8016d8a:	075a      	lsls	r2, r3, #29
 8016d8c:	d505      	bpl.n	8016d9a <__sflush_r+0x46>
 8016d8e:	6863      	ldr	r3, [r4, #4]
 8016d90:	1ac0      	subs	r0, r0, r3
 8016d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d94:	b10b      	cbz	r3, 8016d9a <__sflush_r+0x46>
 8016d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d98:	1ac0      	subs	r0, r0, r3
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	4602      	mov	r2, r0
 8016d9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016da0:	6a21      	ldr	r1, [r4, #32]
 8016da2:	4628      	mov	r0, r5
 8016da4:	47b0      	blx	r6
 8016da6:	1c43      	adds	r3, r0, #1
 8016da8:	89a3      	ldrh	r3, [r4, #12]
 8016daa:	d106      	bne.n	8016dba <__sflush_r+0x66>
 8016dac:	6829      	ldr	r1, [r5, #0]
 8016dae:	291d      	cmp	r1, #29
 8016db0:	d82c      	bhi.n	8016e0c <__sflush_r+0xb8>
 8016db2:	4a2a      	ldr	r2, [pc, #168]	; (8016e5c <__sflush_r+0x108>)
 8016db4:	40ca      	lsrs	r2, r1
 8016db6:	07d6      	lsls	r6, r2, #31
 8016db8:	d528      	bpl.n	8016e0c <__sflush_r+0xb8>
 8016dba:	2200      	movs	r2, #0
 8016dbc:	6062      	str	r2, [r4, #4]
 8016dbe:	04d9      	lsls	r1, r3, #19
 8016dc0:	6922      	ldr	r2, [r4, #16]
 8016dc2:	6022      	str	r2, [r4, #0]
 8016dc4:	d504      	bpl.n	8016dd0 <__sflush_r+0x7c>
 8016dc6:	1c42      	adds	r2, r0, #1
 8016dc8:	d101      	bne.n	8016dce <__sflush_r+0x7a>
 8016dca:	682b      	ldr	r3, [r5, #0]
 8016dcc:	b903      	cbnz	r3, 8016dd0 <__sflush_r+0x7c>
 8016dce:	6560      	str	r0, [r4, #84]	; 0x54
 8016dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016dd2:	602f      	str	r7, [r5, #0]
 8016dd4:	2900      	cmp	r1, #0
 8016dd6:	d0ca      	beq.n	8016d6e <__sflush_r+0x1a>
 8016dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ddc:	4299      	cmp	r1, r3
 8016dde:	d002      	beq.n	8016de6 <__sflush_r+0x92>
 8016de0:	4628      	mov	r0, r5
 8016de2:	f7ff f9e1 	bl	80161a8 <_free_r>
 8016de6:	2000      	movs	r0, #0
 8016de8:	6360      	str	r0, [r4, #52]	; 0x34
 8016dea:	e7c1      	b.n	8016d70 <__sflush_r+0x1c>
 8016dec:	6a21      	ldr	r1, [r4, #32]
 8016dee:	2301      	movs	r3, #1
 8016df0:	4628      	mov	r0, r5
 8016df2:	47b0      	blx	r6
 8016df4:	1c41      	adds	r1, r0, #1
 8016df6:	d1c7      	bne.n	8016d88 <__sflush_r+0x34>
 8016df8:	682b      	ldr	r3, [r5, #0]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d0c4      	beq.n	8016d88 <__sflush_r+0x34>
 8016dfe:	2b1d      	cmp	r3, #29
 8016e00:	d001      	beq.n	8016e06 <__sflush_r+0xb2>
 8016e02:	2b16      	cmp	r3, #22
 8016e04:	d101      	bne.n	8016e0a <__sflush_r+0xb6>
 8016e06:	602f      	str	r7, [r5, #0]
 8016e08:	e7b1      	b.n	8016d6e <__sflush_r+0x1a>
 8016e0a:	89a3      	ldrh	r3, [r4, #12]
 8016e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e10:	81a3      	strh	r3, [r4, #12]
 8016e12:	e7ad      	b.n	8016d70 <__sflush_r+0x1c>
 8016e14:	690f      	ldr	r7, [r1, #16]
 8016e16:	2f00      	cmp	r7, #0
 8016e18:	d0a9      	beq.n	8016d6e <__sflush_r+0x1a>
 8016e1a:	0793      	lsls	r3, r2, #30
 8016e1c:	680e      	ldr	r6, [r1, #0]
 8016e1e:	bf08      	it	eq
 8016e20:	694b      	ldreq	r3, [r1, #20]
 8016e22:	600f      	str	r7, [r1, #0]
 8016e24:	bf18      	it	ne
 8016e26:	2300      	movne	r3, #0
 8016e28:	eba6 0807 	sub.w	r8, r6, r7
 8016e2c:	608b      	str	r3, [r1, #8]
 8016e2e:	f1b8 0f00 	cmp.w	r8, #0
 8016e32:	dd9c      	ble.n	8016d6e <__sflush_r+0x1a>
 8016e34:	6a21      	ldr	r1, [r4, #32]
 8016e36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e38:	4643      	mov	r3, r8
 8016e3a:	463a      	mov	r2, r7
 8016e3c:	4628      	mov	r0, r5
 8016e3e:	47b0      	blx	r6
 8016e40:	2800      	cmp	r0, #0
 8016e42:	dc06      	bgt.n	8016e52 <__sflush_r+0xfe>
 8016e44:	89a3      	ldrh	r3, [r4, #12]
 8016e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e4a:	81a3      	strh	r3, [r4, #12]
 8016e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e50:	e78e      	b.n	8016d70 <__sflush_r+0x1c>
 8016e52:	4407      	add	r7, r0
 8016e54:	eba8 0800 	sub.w	r8, r8, r0
 8016e58:	e7e9      	b.n	8016e2e <__sflush_r+0xda>
 8016e5a:	bf00      	nop
 8016e5c:	20400001 	.word	0x20400001

08016e60 <_fflush_r>:
 8016e60:	b538      	push	{r3, r4, r5, lr}
 8016e62:	690b      	ldr	r3, [r1, #16]
 8016e64:	4605      	mov	r5, r0
 8016e66:	460c      	mov	r4, r1
 8016e68:	b913      	cbnz	r3, 8016e70 <_fflush_r+0x10>
 8016e6a:	2500      	movs	r5, #0
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	bd38      	pop	{r3, r4, r5, pc}
 8016e70:	b118      	cbz	r0, 8016e7a <_fflush_r+0x1a>
 8016e72:	6983      	ldr	r3, [r0, #24]
 8016e74:	b90b      	cbnz	r3, 8016e7a <_fflush_r+0x1a>
 8016e76:	f000 f887 	bl	8016f88 <__sinit>
 8016e7a:	4b14      	ldr	r3, [pc, #80]	; (8016ecc <_fflush_r+0x6c>)
 8016e7c:	429c      	cmp	r4, r3
 8016e7e:	d11b      	bne.n	8016eb8 <_fflush_r+0x58>
 8016e80:	686c      	ldr	r4, [r5, #4]
 8016e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d0ef      	beq.n	8016e6a <_fflush_r+0xa>
 8016e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e8c:	07d0      	lsls	r0, r2, #31
 8016e8e:	d404      	bmi.n	8016e9a <_fflush_r+0x3a>
 8016e90:	0599      	lsls	r1, r3, #22
 8016e92:	d402      	bmi.n	8016e9a <_fflush_r+0x3a>
 8016e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e96:	f000 f915 	bl	80170c4 <__retarget_lock_acquire_recursive>
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	4621      	mov	r1, r4
 8016e9e:	f7ff ff59 	bl	8016d54 <__sflush_r>
 8016ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ea4:	07da      	lsls	r2, r3, #31
 8016ea6:	4605      	mov	r5, r0
 8016ea8:	d4e0      	bmi.n	8016e6c <_fflush_r+0xc>
 8016eaa:	89a3      	ldrh	r3, [r4, #12]
 8016eac:	059b      	lsls	r3, r3, #22
 8016eae:	d4dd      	bmi.n	8016e6c <_fflush_r+0xc>
 8016eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016eb2:	f000 f908 	bl	80170c6 <__retarget_lock_release_recursive>
 8016eb6:	e7d9      	b.n	8016e6c <_fflush_r+0xc>
 8016eb8:	4b05      	ldr	r3, [pc, #20]	; (8016ed0 <_fflush_r+0x70>)
 8016eba:	429c      	cmp	r4, r3
 8016ebc:	d101      	bne.n	8016ec2 <_fflush_r+0x62>
 8016ebe:	68ac      	ldr	r4, [r5, #8]
 8016ec0:	e7df      	b.n	8016e82 <_fflush_r+0x22>
 8016ec2:	4b04      	ldr	r3, [pc, #16]	; (8016ed4 <_fflush_r+0x74>)
 8016ec4:	429c      	cmp	r4, r3
 8016ec6:	bf08      	it	eq
 8016ec8:	68ec      	ldreq	r4, [r5, #12]
 8016eca:	e7da      	b.n	8016e82 <_fflush_r+0x22>
 8016ecc:	080195e4 	.word	0x080195e4
 8016ed0:	08019604 	.word	0x08019604
 8016ed4:	080195c4 	.word	0x080195c4

08016ed8 <std>:
 8016ed8:	2300      	movs	r3, #0
 8016eda:	b510      	push	{r4, lr}
 8016edc:	4604      	mov	r4, r0
 8016ede:	e9c0 3300 	strd	r3, r3, [r0]
 8016ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ee6:	6083      	str	r3, [r0, #8]
 8016ee8:	8181      	strh	r1, [r0, #12]
 8016eea:	6643      	str	r3, [r0, #100]	; 0x64
 8016eec:	81c2      	strh	r2, [r0, #14]
 8016eee:	6183      	str	r3, [r0, #24]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	2208      	movs	r2, #8
 8016ef4:	305c      	adds	r0, #92	; 0x5c
 8016ef6:	f7ff f94f 	bl	8016198 <memset>
 8016efa:	4b05      	ldr	r3, [pc, #20]	; (8016f10 <std+0x38>)
 8016efc:	6263      	str	r3, [r4, #36]	; 0x24
 8016efe:	4b05      	ldr	r3, [pc, #20]	; (8016f14 <std+0x3c>)
 8016f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8016f02:	4b05      	ldr	r3, [pc, #20]	; (8016f18 <std+0x40>)
 8016f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016f06:	4b05      	ldr	r3, [pc, #20]	; (8016f1c <std+0x44>)
 8016f08:	6224      	str	r4, [r4, #32]
 8016f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8016f0c:	bd10      	pop	{r4, pc}
 8016f0e:	bf00      	nop
 8016f10:	08017569 	.word	0x08017569
 8016f14:	0801758b 	.word	0x0801758b
 8016f18:	080175c3 	.word	0x080175c3
 8016f1c:	080175e7 	.word	0x080175e7

08016f20 <_cleanup_r>:
 8016f20:	4901      	ldr	r1, [pc, #4]	; (8016f28 <_cleanup_r+0x8>)
 8016f22:	f000 b8af 	b.w	8017084 <_fwalk_reent>
 8016f26:	bf00      	nop
 8016f28:	08016e61 	.word	0x08016e61

08016f2c <__sfmoreglue>:
 8016f2c:	b570      	push	{r4, r5, r6, lr}
 8016f2e:	1e4a      	subs	r2, r1, #1
 8016f30:	2568      	movs	r5, #104	; 0x68
 8016f32:	4355      	muls	r5, r2
 8016f34:	460e      	mov	r6, r1
 8016f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016f3a:	f7ff f985 	bl	8016248 <_malloc_r>
 8016f3e:	4604      	mov	r4, r0
 8016f40:	b140      	cbz	r0, 8016f54 <__sfmoreglue+0x28>
 8016f42:	2100      	movs	r1, #0
 8016f44:	e9c0 1600 	strd	r1, r6, [r0]
 8016f48:	300c      	adds	r0, #12
 8016f4a:	60a0      	str	r0, [r4, #8]
 8016f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016f50:	f7ff f922 	bl	8016198 <memset>
 8016f54:	4620      	mov	r0, r4
 8016f56:	bd70      	pop	{r4, r5, r6, pc}

08016f58 <__sfp_lock_acquire>:
 8016f58:	4801      	ldr	r0, [pc, #4]	; (8016f60 <__sfp_lock_acquire+0x8>)
 8016f5a:	f000 b8b3 	b.w	80170c4 <__retarget_lock_acquire_recursive>
 8016f5e:	bf00      	nop
 8016f60:	20002e4c 	.word	0x20002e4c

08016f64 <__sfp_lock_release>:
 8016f64:	4801      	ldr	r0, [pc, #4]	; (8016f6c <__sfp_lock_release+0x8>)
 8016f66:	f000 b8ae 	b.w	80170c6 <__retarget_lock_release_recursive>
 8016f6a:	bf00      	nop
 8016f6c:	20002e4c 	.word	0x20002e4c

08016f70 <__sinit_lock_acquire>:
 8016f70:	4801      	ldr	r0, [pc, #4]	; (8016f78 <__sinit_lock_acquire+0x8>)
 8016f72:	f000 b8a7 	b.w	80170c4 <__retarget_lock_acquire_recursive>
 8016f76:	bf00      	nop
 8016f78:	20002e47 	.word	0x20002e47

08016f7c <__sinit_lock_release>:
 8016f7c:	4801      	ldr	r0, [pc, #4]	; (8016f84 <__sinit_lock_release+0x8>)
 8016f7e:	f000 b8a2 	b.w	80170c6 <__retarget_lock_release_recursive>
 8016f82:	bf00      	nop
 8016f84:	20002e47 	.word	0x20002e47

08016f88 <__sinit>:
 8016f88:	b510      	push	{r4, lr}
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	f7ff fff0 	bl	8016f70 <__sinit_lock_acquire>
 8016f90:	69a3      	ldr	r3, [r4, #24]
 8016f92:	b11b      	cbz	r3, 8016f9c <__sinit+0x14>
 8016f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f98:	f7ff bff0 	b.w	8016f7c <__sinit_lock_release>
 8016f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8016fa2:	4b13      	ldr	r3, [pc, #76]	; (8016ff0 <__sinit+0x68>)
 8016fa4:	4a13      	ldr	r2, [pc, #76]	; (8016ff4 <__sinit+0x6c>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8016faa:	42a3      	cmp	r3, r4
 8016fac:	bf04      	itt	eq
 8016fae:	2301      	moveq	r3, #1
 8016fb0:	61a3      	streq	r3, [r4, #24]
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f000 f820 	bl	8016ff8 <__sfp>
 8016fb8:	6060      	str	r0, [r4, #4]
 8016fba:	4620      	mov	r0, r4
 8016fbc:	f000 f81c 	bl	8016ff8 <__sfp>
 8016fc0:	60a0      	str	r0, [r4, #8]
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f000 f818 	bl	8016ff8 <__sfp>
 8016fc8:	2200      	movs	r2, #0
 8016fca:	60e0      	str	r0, [r4, #12]
 8016fcc:	2104      	movs	r1, #4
 8016fce:	6860      	ldr	r0, [r4, #4]
 8016fd0:	f7ff ff82 	bl	8016ed8 <std>
 8016fd4:	68a0      	ldr	r0, [r4, #8]
 8016fd6:	2201      	movs	r2, #1
 8016fd8:	2109      	movs	r1, #9
 8016fda:	f7ff ff7d 	bl	8016ed8 <std>
 8016fde:	68e0      	ldr	r0, [r4, #12]
 8016fe0:	2202      	movs	r2, #2
 8016fe2:	2112      	movs	r1, #18
 8016fe4:	f7ff ff78 	bl	8016ed8 <std>
 8016fe8:	2301      	movs	r3, #1
 8016fea:	61a3      	str	r3, [r4, #24]
 8016fec:	e7d2      	b.n	8016f94 <__sinit+0xc>
 8016fee:	bf00      	nop
 8016ff0:	0801958c 	.word	0x0801958c
 8016ff4:	08016f21 	.word	0x08016f21

08016ff8 <__sfp>:
 8016ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ffa:	4607      	mov	r7, r0
 8016ffc:	f7ff ffac 	bl	8016f58 <__sfp_lock_acquire>
 8017000:	4b1e      	ldr	r3, [pc, #120]	; (801707c <__sfp+0x84>)
 8017002:	681e      	ldr	r6, [r3, #0]
 8017004:	69b3      	ldr	r3, [r6, #24]
 8017006:	b913      	cbnz	r3, 801700e <__sfp+0x16>
 8017008:	4630      	mov	r0, r6
 801700a:	f7ff ffbd 	bl	8016f88 <__sinit>
 801700e:	3648      	adds	r6, #72	; 0x48
 8017010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017014:	3b01      	subs	r3, #1
 8017016:	d503      	bpl.n	8017020 <__sfp+0x28>
 8017018:	6833      	ldr	r3, [r6, #0]
 801701a:	b30b      	cbz	r3, 8017060 <__sfp+0x68>
 801701c:	6836      	ldr	r6, [r6, #0]
 801701e:	e7f7      	b.n	8017010 <__sfp+0x18>
 8017020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017024:	b9d5      	cbnz	r5, 801705c <__sfp+0x64>
 8017026:	4b16      	ldr	r3, [pc, #88]	; (8017080 <__sfp+0x88>)
 8017028:	60e3      	str	r3, [r4, #12]
 801702a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801702e:	6665      	str	r5, [r4, #100]	; 0x64
 8017030:	f000 f847 	bl	80170c2 <__retarget_lock_init_recursive>
 8017034:	f7ff ff96 	bl	8016f64 <__sfp_lock_release>
 8017038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801703c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017040:	6025      	str	r5, [r4, #0]
 8017042:	61a5      	str	r5, [r4, #24]
 8017044:	2208      	movs	r2, #8
 8017046:	4629      	mov	r1, r5
 8017048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801704c:	f7ff f8a4 	bl	8016198 <memset>
 8017050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017058:	4620      	mov	r0, r4
 801705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801705c:	3468      	adds	r4, #104	; 0x68
 801705e:	e7d9      	b.n	8017014 <__sfp+0x1c>
 8017060:	2104      	movs	r1, #4
 8017062:	4638      	mov	r0, r7
 8017064:	f7ff ff62 	bl	8016f2c <__sfmoreglue>
 8017068:	4604      	mov	r4, r0
 801706a:	6030      	str	r0, [r6, #0]
 801706c:	2800      	cmp	r0, #0
 801706e:	d1d5      	bne.n	801701c <__sfp+0x24>
 8017070:	f7ff ff78 	bl	8016f64 <__sfp_lock_release>
 8017074:	230c      	movs	r3, #12
 8017076:	603b      	str	r3, [r7, #0]
 8017078:	e7ee      	b.n	8017058 <__sfp+0x60>
 801707a:	bf00      	nop
 801707c:	0801958c 	.word	0x0801958c
 8017080:	ffff0001 	.word	0xffff0001

08017084 <_fwalk_reent>:
 8017084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017088:	4606      	mov	r6, r0
 801708a:	4688      	mov	r8, r1
 801708c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017090:	2700      	movs	r7, #0
 8017092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017096:	f1b9 0901 	subs.w	r9, r9, #1
 801709a:	d505      	bpl.n	80170a8 <_fwalk_reent+0x24>
 801709c:	6824      	ldr	r4, [r4, #0]
 801709e:	2c00      	cmp	r4, #0
 80170a0:	d1f7      	bne.n	8017092 <_fwalk_reent+0xe>
 80170a2:	4638      	mov	r0, r7
 80170a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170a8:	89ab      	ldrh	r3, [r5, #12]
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d907      	bls.n	80170be <_fwalk_reent+0x3a>
 80170ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80170b2:	3301      	adds	r3, #1
 80170b4:	d003      	beq.n	80170be <_fwalk_reent+0x3a>
 80170b6:	4629      	mov	r1, r5
 80170b8:	4630      	mov	r0, r6
 80170ba:	47c0      	blx	r8
 80170bc:	4307      	orrs	r7, r0
 80170be:	3568      	adds	r5, #104	; 0x68
 80170c0:	e7e9      	b.n	8017096 <_fwalk_reent+0x12>

080170c2 <__retarget_lock_init_recursive>:
 80170c2:	4770      	bx	lr

080170c4 <__retarget_lock_acquire_recursive>:
 80170c4:	4770      	bx	lr

080170c6 <__retarget_lock_release_recursive>:
 80170c6:	4770      	bx	lr

080170c8 <__swhatbuf_r>:
 80170c8:	b570      	push	{r4, r5, r6, lr}
 80170ca:	460e      	mov	r6, r1
 80170cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170d0:	2900      	cmp	r1, #0
 80170d2:	b096      	sub	sp, #88	; 0x58
 80170d4:	4614      	mov	r4, r2
 80170d6:	461d      	mov	r5, r3
 80170d8:	da07      	bge.n	80170ea <__swhatbuf_r+0x22>
 80170da:	2300      	movs	r3, #0
 80170dc:	602b      	str	r3, [r5, #0]
 80170de:	89b3      	ldrh	r3, [r6, #12]
 80170e0:	061a      	lsls	r2, r3, #24
 80170e2:	d410      	bmi.n	8017106 <__swhatbuf_r+0x3e>
 80170e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170e8:	e00e      	b.n	8017108 <__swhatbuf_r+0x40>
 80170ea:	466a      	mov	r2, sp
 80170ec:	f000 fa90 	bl	8017610 <_fstat_r>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	dbf2      	blt.n	80170da <__swhatbuf_r+0x12>
 80170f4:	9a01      	ldr	r2, [sp, #4]
 80170f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80170fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80170fe:	425a      	negs	r2, r3
 8017100:	415a      	adcs	r2, r3
 8017102:	602a      	str	r2, [r5, #0]
 8017104:	e7ee      	b.n	80170e4 <__swhatbuf_r+0x1c>
 8017106:	2340      	movs	r3, #64	; 0x40
 8017108:	2000      	movs	r0, #0
 801710a:	6023      	str	r3, [r4, #0]
 801710c:	b016      	add	sp, #88	; 0x58
 801710e:	bd70      	pop	{r4, r5, r6, pc}

08017110 <__smakebuf_r>:
 8017110:	898b      	ldrh	r3, [r1, #12]
 8017112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017114:	079d      	lsls	r5, r3, #30
 8017116:	4606      	mov	r6, r0
 8017118:	460c      	mov	r4, r1
 801711a:	d507      	bpl.n	801712c <__smakebuf_r+0x1c>
 801711c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017120:	6023      	str	r3, [r4, #0]
 8017122:	6123      	str	r3, [r4, #16]
 8017124:	2301      	movs	r3, #1
 8017126:	6163      	str	r3, [r4, #20]
 8017128:	b002      	add	sp, #8
 801712a:	bd70      	pop	{r4, r5, r6, pc}
 801712c:	ab01      	add	r3, sp, #4
 801712e:	466a      	mov	r2, sp
 8017130:	f7ff ffca 	bl	80170c8 <__swhatbuf_r>
 8017134:	9900      	ldr	r1, [sp, #0]
 8017136:	4605      	mov	r5, r0
 8017138:	4630      	mov	r0, r6
 801713a:	f7ff f885 	bl	8016248 <_malloc_r>
 801713e:	b948      	cbnz	r0, 8017154 <__smakebuf_r+0x44>
 8017140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017144:	059a      	lsls	r2, r3, #22
 8017146:	d4ef      	bmi.n	8017128 <__smakebuf_r+0x18>
 8017148:	f023 0303 	bic.w	r3, r3, #3
 801714c:	f043 0302 	orr.w	r3, r3, #2
 8017150:	81a3      	strh	r3, [r4, #12]
 8017152:	e7e3      	b.n	801711c <__smakebuf_r+0xc>
 8017154:	4b0d      	ldr	r3, [pc, #52]	; (801718c <__smakebuf_r+0x7c>)
 8017156:	62b3      	str	r3, [r6, #40]	; 0x28
 8017158:	89a3      	ldrh	r3, [r4, #12]
 801715a:	6020      	str	r0, [r4, #0]
 801715c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017160:	81a3      	strh	r3, [r4, #12]
 8017162:	9b00      	ldr	r3, [sp, #0]
 8017164:	6163      	str	r3, [r4, #20]
 8017166:	9b01      	ldr	r3, [sp, #4]
 8017168:	6120      	str	r0, [r4, #16]
 801716a:	b15b      	cbz	r3, 8017184 <__smakebuf_r+0x74>
 801716c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017170:	4630      	mov	r0, r6
 8017172:	f000 fa5f 	bl	8017634 <_isatty_r>
 8017176:	b128      	cbz	r0, 8017184 <__smakebuf_r+0x74>
 8017178:	89a3      	ldrh	r3, [r4, #12]
 801717a:	f023 0303 	bic.w	r3, r3, #3
 801717e:	f043 0301 	orr.w	r3, r3, #1
 8017182:	81a3      	strh	r3, [r4, #12]
 8017184:	89a0      	ldrh	r0, [r4, #12]
 8017186:	4305      	orrs	r5, r0
 8017188:	81a5      	strh	r5, [r4, #12]
 801718a:	e7cd      	b.n	8017128 <__smakebuf_r+0x18>
 801718c:	08016f21 	.word	0x08016f21

08017190 <memmove>:
 8017190:	4288      	cmp	r0, r1
 8017192:	b510      	push	{r4, lr}
 8017194:	eb01 0402 	add.w	r4, r1, r2
 8017198:	d902      	bls.n	80171a0 <memmove+0x10>
 801719a:	4284      	cmp	r4, r0
 801719c:	4623      	mov	r3, r4
 801719e:	d807      	bhi.n	80171b0 <memmove+0x20>
 80171a0:	1e43      	subs	r3, r0, #1
 80171a2:	42a1      	cmp	r1, r4
 80171a4:	d008      	beq.n	80171b8 <memmove+0x28>
 80171a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171ae:	e7f8      	b.n	80171a2 <memmove+0x12>
 80171b0:	4402      	add	r2, r0
 80171b2:	4601      	mov	r1, r0
 80171b4:	428a      	cmp	r2, r1
 80171b6:	d100      	bne.n	80171ba <memmove+0x2a>
 80171b8:	bd10      	pop	{r4, pc}
 80171ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171c2:	e7f7      	b.n	80171b4 <memmove+0x24>

080171c4 <__malloc_lock>:
 80171c4:	4801      	ldr	r0, [pc, #4]	; (80171cc <__malloc_lock+0x8>)
 80171c6:	f7ff bf7d 	b.w	80170c4 <__retarget_lock_acquire_recursive>
 80171ca:	bf00      	nop
 80171cc:	20002e48 	.word	0x20002e48

080171d0 <__malloc_unlock>:
 80171d0:	4801      	ldr	r0, [pc, #4]	; (80171d8 <__malloc_unlock+0x8>)
 80171d2:	f7ff bf78 	b.w	80170c6 <__retarget_lock_release_recursive>
 80171d6:	bf00      	nop
 80171d8:	20002e48 	.word	0x20002e48

080171dc <_realloc_r>:
 80171dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171de:	4607      	mov	r7, r0
 80171e0:	4614      	mov	r4, r2
 80171e2:	460e      	mov	r6, r1
 80171e4:	b921      	cbnz	r1, 80171f0 <_realloc_r+0x14>
 80171e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80171ea:	4611      	mov	r1, r2
 80171ec:	f7ff b82c 	b.w	8016248 <_malloc_r>
 80171f0:	b922      	cbnz	r2, 80171fc <_realloc_r+0x20>
 80171f2:	f7fe ffd9 	bl	80161a8 <_free_r>
 80171f6:	4625      	mov	r5, r4
 80171f8:	4628      	mov	r0, r5
 80171fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171fc:	f000 fa3c 	bl	8017678 <_malloc_usable_size_r>
 8017200:	42a0      	cmp	r0, r4
 8017202:	d20f      	bcs.n	8017224 <_realloc_r+0x48>
 8017204:	4621      	mov	r1, r4
 8017206:	4638      	mov	r0, r7
 8017208:	f7ff f81e 	bl	8016248 <_malloc_r>
 801720c:	4605      	mov	r5, r0
 801720e:	2800      	cmp	r0, #0
 8017210:	d0f2      	beq.n	80171f8 <_realloc_r+0x1c>
 8017212:	4631      	mov	r1, r6
 8017214:	4622      	mov	r2, r4
 8017216:	f7fe ffb1 	bl	801617c <memcpy>
 801721a:	4631      	mov	r1, r6
 801721c:	4638      	mov	r0, r7
 801721e:	f7fe ffc3 	bl	80161a8 <_free_r>
 8017222:	e7e9      	b.n	80171f8 <_realloc_r+0x1c>
 8017224:	4635      	mov	r5, r6
 8017226:	e7e7      	b.n	80171f8 <_realloc_r+0x1c>

08017228 <__ssputs_r>:
 8017228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801722c:	688e      	ldr	r6, [r1, #8]
 801722e:	429e      	cmp	r6, r3
 8017230:	4682      	mov	sl, r0
 8017232:	460c      	mov	r4, r1
 8017234:	4690      	mov	r8, r2
 8017236:	461f      	mov	r7, r3
 8017238:	d838      	bhi.n	80172ac <__ssputs_r+0x84>
 801723a:	898a      	ldrh	r2, [r1, #12]
 801723c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017240:	d032      	beq.n	80172a8 <__ssputs_r+0x80>
 8017242:	6825      	ldr	r5, [r4, #0]
 8017244:	6909      	ldr	r1, [r1, #16]
 8017246:	eba5 0901 	sub.w	r9, r5, r1
 801724a:	6965      	ldr	r5, [r4, #20]
 801724c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017254:	3301      	adds	r3, #1
 8017256:	444b      	add	r3, r9
 8017258:	106d      	asrs	r5, r5, #1
 801725a:	429d      	cmp	r5, r3
 801725c:	bf38      	it	cc
 801725e:	461d      	movcc	r5, r3
 8017260:	0553      	lsls	r3, r2, #21
 8017262:	d531      	bpl.n	80172c8 <__ssputs_r+0xa0>
 8017264:	4629      	mov	r1, r5
 8017266:	f7fe ffef 	bl	8016248 <_malloc_r>
 801726a:	4606      	mov	r6, r0
 801726c:	b950      	cbnz	r0, 8017284 <__ssputs_r+0x5c>
 801726e:	230c      	movs	r3, #12
 8017270:	f8ca 3000 	str.w	r3, [sl]
 8017274:	89a3      	ldrh	r3, [r4, #12]
 8017276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801727a:	81a3      	strh	r3, [r4, #12]
 801727c:	f04f 30ff 	mov.w	r0, #4294967295
 8017280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017284:	6921      	ldr	r1, [r4, #16]
 8017286:	464a      	mov	r2, r9
 8017288:	f7fe ff78 	bl	801617c <memcpy>
 801728c:	89a3      	ldrh	r3, [r4, #12]
 801728e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017296:	81a3      	strh	r3, [r4, #12]
 8017298:	6126      	str	r6, [r4, #16]
 801729a:	6165      	str	r5, [r4, #20]
 801729c:	444e      	add	r6, r9
 801729e:	eba5 0509 	sub.w	r5, r5, r9
 80172a2:	6026      	str	r6, [r4, #0]
 80172a4:	60a5      	str	r5, [r4, #8]
 80172a6:	463e      	mov	r6, r7
 80172a8:	42be      	cmp	r6, r7
 80172aa:	d900      	bls.n	80172ae <__ssputs_r+0x86>
 80172ac:	463e      	mov	r6, r7
 80172ae:	4632      	mov	r2, r6
 80172b0:	6820      	ldr	r0, [r4, #0]
 80172b2:	4641      	mov	r1, r8
 80172b4:	f7ff ff6c 	bl	8017190 <memmove>
 80172b8:	68a3      	ldr	r3, [r4, #8]
 80172ba:	6822      	ldr	r2, [r4, #0]
 80172bc:	1b9b      	subs	r3, r3, r6
 80172be:	4432      	add	r2, r6
 80172c0:	60a3      	str	r3, [r4, #8]
 80172c2:	6022      	str	r2, [r4, #0]
 80172c4:	2000      	movs	r0, #0
 80172c6:	e7db      	b.n	8017280 <__ssputs_r+0x58>
 80172c8:	462a      	mov	r2, r5
 80172ca:	f7ff ff87 	bl	80171dc <_realloc_r>
 80172ce:	4606      	mov	r6, r0
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d1e1      	bne.n	8017298 <__ssputs_r+0x70>
 80172d4:	6921      	ldr	r1, [r4, #16]
 80172d6:	4650      	mov	r0, sl
 80172d8:	f7fe ff66 	bl	80161a8 <_free_r>
 80172dc:	e7c7      	b.n	801726e <__ssputs_r+0x46>
	...

080172e0 <_svfiprintf_r>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	4698      	mov	r8, r3
 80172e6:	898b      	ldrh	r3, [r1, #12]
 80172e8:	061b      	lsls	r3, r3, #24
 80172ea:	b09d      	sub	sp, #116	; 0x74
 80172ec:	4607      	mov	r7, r0
 80172ee:	460d      	mov	r5, r1
 80172f0:	4614      	mov	r4, r2
 80172f2:	d50e      	bpl.n	8017312 <_svfiprintf_r+0x32>
 80172f4:	690b      	ldr	r3, [r1, #16]
 80172f6:	b963      	cbnz	r3, 8017312 <_svfiprintf_r+0x32>
 80172f8:	2140      	movs	r1, #64	; 0x40
 80172fa:	f7fe ffa5 	bl	8016248 <_malloc_r>
 80172fe:	6028      	str	r0, [r5, #0]
 8017300:	6128      	str	r0, [r5, #16]
 8017302:	b920      	cbnz	r0, 801730e <_svfiprintf_r+0x2e>
 8017304:	230c      	movs	r3, #12
 8017306:	603b      	str	r3, [r7, #0]
 8017308:	f04f 30ff 	mov.w	r0, #4294967295
 801730c:	e0d1      	b.n	80174b2 <_svfiprintf_r+0x1d2>
 801730e:	2340      	movs	r3, #64	; 0x40
 8017310:	616b      	str	r3, [r5, #20]
 8017312:	2300      	movs	r3, #0
 8017314:	9309      	str	r3, [sp, #36]	; 0x24
 8017316:	2320      	movs	r3, #32
 8017318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801731c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017320:	2330      	movs	r3, #48	; 0x30
 8017322:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80174cc <_svfiprintf_r+0x1ec>
 8017326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801732a:	f04f 0901 	mov.w	r9, #1
 801732e:	4623      	mov	r3, r4
 8017330:	469a      	mov	sl, r3
 8017332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017336:	b10a      	cbz	r2, 801733c <_svfiprintf_r+0x5c>
 8017338:	2a25      	cmp	r2, #37	; 0x25
 801733a:	d1f9      	bne.n	8017330 <_svfiprintf_r+0x50>
 801733c:	ebba 0b04 	subs.w	fp, sl, r4
 8017340:	d00b      	beq.n	801735a <_svfiprintf_r+0x7a>
 8017342:	465b      	mov	r3, fp
 8017344:	4622      	mov	r2, r4
 8017346:	4629      	mov	r1, r5
 8017348:	4638      	mov	r0, r7
 801734a:	f7ff ff6d 	bl	8017228 <__ssputs_r>
 801734e:	3001      	adds	r0, #1
 8017350:	f000 80aa 	beq.w	80174a8 <_svfiprintf_r+0x1c8>
 8017354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017356:	445a      	add	r2, fp
 8017358:	9209      	str	r2, [sp, #36]	; 0x24
 801735a:	f89a 3000 	ldrb.w	r3, [sl]
 801735e:	2b00      	cmp	r3, #0
 8017360:	f000 80a2 	beq.w	80174a8 <_svfiprintf_r+0x1c8>
 8017364:	2300      	movs	r3, #0
 8017366:	f04f 32ff 	mov.w	r2, #4294967295
 801736a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801736e:	f10a 0a01 	add.w	sl, sl, #1
 8017372:	9304      	str	r3, [sp, #16]
 8017374:	9307      	str	r3, [sp, #28]
 8017376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801737a:	931a      	str	r3, [sp, #104]	; 0x68
 801737c:	4654      	mov	r4, sl
 801737e:	2205      	movs	r2, #5
 8017380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017384:	4851      	ldr	r0, [pc, #324]	; (80174cc <_svfiprintf_r+0x1ec>)
 8017386:	f7e8 ff4b 	bl	8000220 <memchr>
 801738a:	9a04      	ldr	r2, [sp, #16]
 801738c:	b9d8      	cbnz	r0, 80173c6 <_svfiprintf_r+0xe6>
 801738e:	06d0      	lsls	r0, r2, #27
 8017390:	bf44      	itt	mi
 8017392:	2320      	movmi	r3, #32
 8017394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017398:	0711      	lsls	r1, r2, #28
 801739a:	bf44      	itt	mi
 801739c:	232b      	movmi	r3, #43	; 0x2b
 801739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173a2:	f89a 3000 	ldrb.w	r3, [sl]
 80173a6:	2b2a      	cmp	r3, #42	; 0x2a
 80173a8:	d015      	beq.n	80173d6 <_svfiprintf_r+0xf6>
 80173aa:	9a07      	ldr	r2, [sp, #28]
 80173ac:	4654      	mov	r4, sl
 80173ae:	2000      	movs	r0, #0
 80173b0:	f04f 0c0a 	mov.w	ip, #10
 80173b4:	4621      	mov	r1, r4
 80173b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173ba:	3b30      	subs	r3, #48	; 0x30
 80173bc:	2b09      	cmp	r3, #9
 80173be:	d94e      	bls.n	801745e <_svfiprintf_r+0x17e>
 80173c0:	b1b0      	cbz	r0, 80173f0 <_svfiprintf_r+0x110>
 80173c2:	9207      	str	r2, [sp, #28]
 80173c4:	e014      	b.n	80173f0 <_svfiprintf_r+0x110>
 80173c6:	eba0 0308 	sub.w	r3, r0, r8
 80173ca:	fa09 f303 	lsl.w	r3, r9, r3
 80173ce:	4313      	orrs	r3, r2
 80173d0:	9304      	str	r3, [sp, #16]
 80173d2:	46a2      	mov	sl, r4
 80173d4:	e7d2      	b.n	801737c <_svfiprintf_r+0x9c>
 80173d6:	9b03      	ldr	r3, [sp, #12]
 80173d8:	1d19      	adds	r1, r3, #4
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	9103      	str	r1, [sp, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	bfbb      	ittet	lt
 80173e2:	425b      	neglt	r3, r3
 80173e4:	f042 0202 	orrlt.w	r2, r2, #2
 80173e8:	9307      	strge	r3, [sp, #28]
 80173ea:	9307      	strlt	r3, [sp, #28]
 80173ec:	bfb8      	it	lt
 80173ee:	9204      	strlt	r2, [sp, #16]
 80173f0:	7823      	ldrb	r3, [r4, #0]
 80173f2:	2b2e      	cmp	r3, #46	; 0x2e
 80173f4:	d10c      	bne.n	8017410 <_svfiprintf_r+0x130>
 80173f6:	7863      	ldrb	r3, [r4, #1]
 80173f8:	2b2a      	cmp	r3, #42	; 0x2a
 80173fa:	d135      	bne.n	8017468 <_svfiprintf_r+0x188>
 80173fc:	9b03      	ldr	r3, [sp, #12]
 80173fe:	1d1a      	adds	r2, r3, #4
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	9203      	str	r2, [sp, #12]
 8017404:	2b00      	cmp	r3, #0
 8017406:	bfb8      	it	lt
 8017408:	f04f 33ff 	movlt.w	r3, #4294967295
 801740c:	3402      	adds	r4, #2
 801740e:	9305      	str	r3, [sp, #20]
 8017410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80174dc <_svfiprintf_r+0x1fc>
 8017414:	7821      	ldrb	r1, [r4, #0]
 8017416:	2203      	movs	r2, #3
 8017418:	4650      	mov	r0, sl
 801741a:	f7e8 ff01 	bl	8000220 <memchr>
 801741e:	b140      	cbz	r0, 8017432 <_svfiprintf_r+0x152>
 8017420:	2340      	movs	r3, #64	; 0x40
 8017422:	eba0 000a 	sub.w	r0, r0, sl
 8017426:	fa03 f000 	lsl.w	r0, r3, r0
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	4303      	orrs	r3, r0
 801742e:	3401      	adds	r4, #1
 8017430:	9304      	str	r3, [sp, #16]
 8017432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017436:	4826      	ldr	r0, [pc, #152]	; (80174d0 <_svfiprintf_r+0x1f0>)
 8017438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801743c:	2206      	movs	r2, #6
 801743e:	f7e8 feef 	bl	8000220 <memchr>
 8017442:	2800      	cmp	r0, #0
 8017444:	d038      	beq.n	80174b8 <_svfiprintf_r+0x1d8>
 8017446:	4b23      	ldr	r3, [pc, #140]	; (80174d4 <_svfiprintf_r+0x1f4>)
 8017448:	bb1b      	cbnz	r3, 8017492 <_svfiprintf_r+0x1b2>
 801744a:	9b03      	ldr	r3, [sp, #12]
 801744c:	3307      	adds	r3, #7
 801744e:	f023 0307 	bic.w	r3, r3, #7
 8017452:	3308      	adds	r3, #8
 8017454:	9303      	str	r3, [sp, #12]
 8017456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017458:	4433      	add	r3, r6
 801745a:	9309      	str	r3, [sp, #36]	; 0x24
 801745c:	e767      	b.n	801732e <_svfiprintf_r+0x4e>
 801745e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017462:	460c      	mov	r4, r1
 8017464:	2001      	movs	r0, #1
 8017466:	e7a5      	b.n	80173b4 <_svfiprintf_r+0xd4>
 8017468:	2300      	movs	r3, #0
 801746a:	3401      	adds	r4, #1
 801746c:	9305      	str	r3, [sp, #20]
 801746e:	4619      	mov	r1, r3
 8017470:	f04f 0c0a 	mov.w	ip, #10
 8017474:	4620      	mov	r0, r4
 8017476:	f810 2b01 	ldrb.w	r2, [r0], #1
 801747a:	3a30      	subs	r2, #48	; 0x30
 801747c:	2a09      	cmp	r2, #9
 801747e:	d903      	bls.n	8017488 <_svfiprintf_r+0x1a8>
 8017480:	2b00      	cmp	r3, #0
 8017482:	d0c5      	beq.n	8017410 <_svfiprintf_r+0x130>
 8017484:	9105      	str	r1, [sp, #20]
 8017486:	e7c3      	b.n	8017410 <_svfiprintf_r+0x130>
 8017488:	fb0c 2101 	mla	r1, ip, r1, r2
 801748c:	4604      	mov	r4, r0
 801748e:	2301      	movs	r3, #1
 8017490:	e7f0      	b.n	8017474 <_svfiprintf_r+0x194>
 8017492:	ab03      	add	r3, sp, #12
 8017494:	9300      	str	r3, [sp, #0]
 8017496:	462a      	mov	r2, r5
 8017498:	4b0f      	ldr	r3, [pc, #60]	; (80174d8 <_svfiprintf_r+0x1f8>)
 801749a:	a904      	add	r1, sp, #16
 801749c:	4638      	mov	r0, r7
 801749e:	f3af 8000 	nop.w
 80174a2:	1c42      	adds	r2, r0, #1
 80174a4:	4606      	mov	r6, r0
 80174a6:	d1d6      	bne.n	8017456 <_svfiprintf_r+0x176>
 80174a8:	89ab      	ldrh	r3, [r5, #12]
 80174aa:	065b      	lsls	r3, r3, #25
 80174ac:	f53f af2c 	bmi.w	8017308 <_svfiprintf_r+0x28>
 80174b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174b2:	b01d      	add	sp, #116	; 0x74
 80174b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b8:	ab03      	add	r3, sp, #12
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	462a      	mov	r2, r5
 80174be:	4b06      	ldr	r3, [pc, #24]	; (80174d8 <_svfiprintf_r+0x1f8>)
 80174c0:	a904      	add	r1, sp, #16
 80174c2:	4638      	mov	r0, r7
 80174c4:	f7ff f8e2 	bl	801668c <_printf_i>
 80174c8:	e7eb      	b.n	80174a2 <_svfiprintf_r+0x1c2>
 80174ca:	bf00      	nop
 80174cc:	08019590 	.word	0x08019590
 80174d0:	0801959a 	.word	0x0801959a
 80174d4:	00000000 	.word	0x00000000
 80174d8:	08017229 	.word	0x08017229
 80174dc:	08019596 	.word	0x08019596

080174e0 <_raise_r>:
 80174e0:	291f      	cmp	r1, #31
 80174e2:	b538      	push	{r3, r4, r5, lr}
 80174e4:	4604      	mov	r4, r0
 80174e6:	460d      	mov	r5, r1
 80174e8:	d904      	bls.n	80174f4 <_raise_r+0x14>
 80174ea:	2316      	movs	r3, #22
 80174ec:	6003      	str	r3, [r0, #0]
 80174ee:	f04f 30ff 	mov.w	r0, #4294967295
 80174f2:	bd38      	pop	{r3, r4, r5, pc}
 80174f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80174f6:	b112      	cbz	r2, 80174fe <_raise_r+0x1e>
 80174f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80174fc:	b94b      	cbnz	r3, 8017512 <_raise_r+0x32>
 80174fe:	4620      	mov	r0, r4
 8017500:	f000 f830 	bl	8017564 <_getpid_r>
 8017504:	462a      	mov	r2, r5
 8017506:	4601      	mov	r1, r0
 8017508:	4620      	mov	r0, r4
 801750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801750e:	f000 b817 	b.w	8017540 <_kill_r>
 8017512:	2b01      	cmp	r3, #1
 8017514:	d00a      	beq.n	801752c <_raise_r+0x4c>
 8017516:	1c59      	adds	r1, r3, #1
 8017518:	d103      	bne.n	8017522 <_raise_r+0x42>
 801751a:	2316      	movs	r3, #22
 801751c:	6003      	str	r3, [r0, #0]
 801751e:	2001      	movs	r0, #1
 8017520:	e7e7      	b.n	80174f2 <_raise_r+0x12>
 8017522:	2400      	movs	r4, #0
 8017524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017528:	4628      	mov	r0, r5
 801752a:	4798      	blx	r3
 801752c:	2000      	movs	r0, #0
 801752e:	e7e0      	b.n	80174f2 <_raise_r+0x12>

08017530 <raise>:
 8017530:	4b02      	ldr	r3, [pc, #8]	; (801753c <raise+0xc>)
 8017532:	4601      	mov	r1, r0
 8017534:	6818      	ldr	r0, [r3, #0]
 8017536:	f7ff bfd3 	b.w	80174e0 <_raise_r>
 801753a:	bf00      	nop
 801753c:	200001c8 	.word	0x200001c8

08017540 <_kill_r>:
 8017540:	b538      	push	{r3, r4, r5, lr}
 8017542:	4d07      	ldr	r5, [pc, #28]	; (8017560 <_kill_r+0x20>)
 8017544:	2300      	movs	r3, #0
 8017546:	4604      	mov	r4, r0
 8017548:	4608      	mov	r0, r1
 801754a:	4611      	mov	r1, r2
 801754c:	602b      	str	r3, [r5, #0]
 801754e:	f7f4 fd85 	bl	800c05c <_kill>
 8017552:	1c43      	adds	r3, r0, #1
 8017554:	d102      	bne.n	801755c <_kill_r+0x1c>
 8017556:	682b      	ldr	r3, [r5, #0]
 8017558:	b103      	cbz	r3, 801755c <_kill_r+0x1c>
 801755a:	6023      	str	r3, [r4, #0]
 801755c:	bd38      	pop	{r3, r4, r5, pc}
 801755e:	bf00      	nop
 8017560:	20002e50 	.word	0x20002e50

08017564 <_getpid_r>:
 8017564:	f7f4 bd72 	b.w	800c04c <_getpid>

08017568 <__sread>:
 8017568:	b510      	push	{r4, lr}
 801756a:	460c      	mov	r4, r1
 801756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017570:	f000 f88a 	bl	8017688 <_read_r>
 8017574:	2800      	cmp	r0, #0
 8017576:	bfab      	itete	ge
 8017578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801757a:	89a3      	ldrhlt	r3, [r4, #12]
 801757c:	181b      	addge	r3, r3, r0
 801757e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017582:	bfac      	ite	ge
 8017584:	6563      	strge	r3, [r4, #84]	; 0x54
 8017586:	81a3      	strhlt	r3, [r4, #12]
 8017588:	bd10      	pop	{r4, pc}

0801758a <__swrite>:
 801758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758e:	461f      	mov	r7, r3
 8017590:	898b      	ldrh	r3, [r1, #12]
 8017592:	05db      	lsls	r3, r3, #23
 8017594:	4605      	mov	r5, r0
 8017596:	460c      	mov	r4, r1
 8017598:	4616      	mov	r6, r2
 801759a:	d505      	bpl.n	80175a8 <__swrite+0x1e>
 801759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175a0:	2302      	movs	r3, #2
 80175a2:	2200      	movs	r2, #0
 80175a4:	f000 f856 	bl	8017654 <_lseek_r>
 80175a8:	89a3      	ldrh	r3, [r4, #12]
 80175aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80175b2:	81a3      	strh	r3, [r4, #12]
 80175b4:	4632      	mov	r2, r6
 80175b6:	463b      	mov	r3, r7
 80175b8:	4628      	mov	r0, r5
 80175ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175be:	f7ff bb41 	b.w	8016c44 <_write_r>

080175c2 <__sseek>:
 80175c2:	b510      	push	{r4, lr}
 80175c4:	460c      	mov	r4, r1
 80175c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ca:	f000 f843 	bl	8017654 <_lseek_r>
 80175ce:	1c43      	adds	r3, r0, #1
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	bf15      	itete	ne
 80175d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80175d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80175da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80175de:	81a3      	strheq	r3, [r4, #12]
 80175e0:	bf18      	it	ne
 80175e2:	81a3      	strhne	r3, [r4, #12]
 80175e4:	bd10      	pop	{r4, pc}

080175e6 <__sclose>:
 80175e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ea:	f000 b801 	b.w	80175f0 <_close_r>
	...

080175f0 <_close_r>:
 80175f0:	b538      	push	{r3, r4, r5, lr}
 80175f2:	4d06      	ldr	r5, [pc, #24]	; (801760c <_close_r+0x1c>)
 80175f4:	2300      	movs	r3, #0
 80175f6:	4604      	mov	r4, r0
 80175f8:	4608      	mov	r0, r1
 80175fa:	602b      	str	r3, [r5, #0]
 80175fc:	f7f4 fd81 	bl	800c102 <_close>
 8017600:	1c43      	adds	r3, r0, #1
 8017602:	d102      	bne.n	801760a <_close_r+0x1a>
 8017604:	682b      	ldr	r3, [r5, #0]
 8017606:	b103      	cbz	r3, 801760a <_close_r+0x1a>
 8017608:	6023      	str	r3, [r4, #0]
 801760a:	bd38      	pop	{r3, r4, r5, pc}
 801760c:	20002e50 	.word	0x20002e50

08017610 <_fstat_r>:
 8017610:	b538      	push	{r3, r4, r5, lr}
 8017612:	4d07      	ldr	r5, [pc, #28]	; (8017630 <_fstat_r+0x20>)
 8017614:	2300      	movs	r3, #0
 8017616:	4604      	mov	r4, r0
 8017618:	4608      	mov	r0, r1
 801761a:	4611      	mov	r1, r2
 801761c:	602b      	str	r3, [r5, #0]
 801761e:	f7f4 fd7c 	bl	800c11a <_fstat>
 8017622:	1c43      	adds	r3, r0, #1
 8017624:	d102      	bne.n	801762c <_fstat_r+0x1c>
 8017626:	682b      	ldr	r3, [r5, #0]
 8017628:	b103      	cbz	r3, 801762c <_fstat_r+0x1c>
 801762a:	6023      	str	r3, [r4, #0]
 801762c:	bd38      	pop	{r3, r4, r5, pc}
 801762e:	bf00      	nop
 8017630:	20002e50 	.word	0x20002e50

08017634 <_isatty_r>:
 8017634:	b538      	push	{r3, r4, r5, lr}
 8017636:	4d06      	ldr	r5, [pc, #24]	; (8017650 <_isatty_r+0x1c>)
 8017638:	2300      	movs	r3, #0
 801763a:	4604      	mov	r4, r0
 801763c:	4608      	mov	r0, r1
 801763e:	602b      	str	r3, [r5, #0]
 8017640:	f7f4 fd7b 	bl	800c13a <_isatty>
 8017644:	1c43      	adds	r3, r0, #1
 8017646:	d102      	bne.n	801764e <_isatty_r+0x1a>
 8017648:	682b      	ldr	r3, [r5, #0]
 801764a:	b103      	cbz	r3, 801764e <_isatty_r+0x1a>
 801764c:	6023      	str	r3, [r4, #0]
 801764e:	bd38      	pop	{r3, r4, r5, pc}
 8017650:	20002e50 	.word	0x20002e50

08017654 <_lseek_r>:
 8017654:	b538      	push	{r3, r4, r5, lr}
 8017656:	4d07      	ldr	r5, [pc, #28]	; (8017674 <_lseek_r+0x20>)
 8017658:	4604      	mov	r4, r0
 801765a:	4608      	mov	r0, r1
 801765c:	4611      	mov	r1, r2
 801765e:	2200      	movs	r2, #0
 8017660:	602a      	str	r2, [r5, #0]
 8017662:	461a      	mov	r2, r3
 8017664:	f7f4 fd74 	bl	800c150 <_lseek>
 8017668:	1c43      	adds	r3, r0, #1
 801766a:	d102      	bne.n	8017672 <_lseek_r+0x1e>
 801766c:	682b      	ldr	r3, [r5, #0]
 801766e:	b103      	cbz	r3, 8017672 <_lseek_r+0x1e>
 8017670:	6023      	str	r3, [r4, #0]
 8017672:	bd38      	pop	{r3, r4, r5, pc}
 8017674:	20002e50 	.word	0x20002e50

08017678 <_malloc_usable_size_r>:
 8017678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801767c:	1f18      	subs	r0, r3, #4
 801767e:	2b00      	cmp	r3, #0
 8017680:	bfbc      	itt	lt
 8017682:	580b      	ldrlt	r3, [r1, r0]
 8017684:	18c0      	addlt	r0, r0, r3
 8017686:	4770      	bx	lr

08017688 <_read_r>:
 8017688:	b538      	push	{r3, r4, r5, lr}
 801768a:	4d07      	ldr	r5, [pc, #28]	; (80176a8 <_read_r+0x20>)
 801768c:	4604      	mov	r4, r0
 801768e:	4608      	mov	r0, r1
 8017690:	4611      	mov	r1, r2
 8017692:	2200      	movs	r2, #0
 8017694:	602a      	str	r2, [r5, #0]
 8017696:	461a      	mov	r2, r3
 8017698:	f7f4 fcfa 	bl	800c090 <_read>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d102      	bne.n	80176a6 <_read_r+0x1e>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	b103      	cbz	r3, 80176a6 <_read_r+0x1e>
 80176a4:	6023      	str	r3, [r4, #0]
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	20002e50 	.word	0x20002e50

080176ac <sqrtf>:
 80176ac:	b508      	push	{r3, lr}
 80176ae:	ed2d 8b02 	vpush	{d8}
 80176b2:	eeb0 8a40 	vmov.f32	s16, s0
 80176b6:	f000 f81f 	bl	80176f8 <__ieee754_sqrtf>
 80176ba:	4b0d      	ldr	r3, [pc, #52]	; (80176f0 <sqrtf+0x44>)
 80176bc:	f993 3000 	ldrsb.w	r3, [r3]
 80176c0:	3301      	adds	r3, #1
 80176c2:	d011      	beq.n	80176e8 <sqrtf+0x3c>
 80176c4:	eeb4 8a48 	vcmp.f32	s16, s16
 80176c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176cc:	d60c      	bvs.n	80176e8 <sqrtf+0x3c>
 80176ce:	eddf 8a09 	vldr	s17, [pc, #36]	; 80176f4 <sqrtf+0x48>
 80176d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80176d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176da:	d505      	bpl.n	80176e8 <sqrtf+0x3c>
 80176dc:	f7fe fcf4 	bl	80160c8 <__errno>
 80176e0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80176e4:	2321      	movs	r3, #33	; 0x21
 80176e6:	6003      	str	r3, [r0, #0]
 80176e8:	ecbd 8b02 	vpop	{d8}
 80176ec:	bd08      	pop	{r3, pc}
 80176ee:	bf00      	nop
 80176f0:	2000022c 	.word	0x2000022c
 80176f4:	00000000 	.word	0x00000000

080176f8 <__ieee754_sqrtf>:
 80176f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80176fc:	4770      	bx	lr
	...

08017700 <_init>:
 8017700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017702:	bf00      	nop
 8017704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017706:	bc08      	pop	{r3}
 8017708:	469e      	mov	lr, r3
 801770a:	4770      	bx	lr

0801770c <_fini>:
 801770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801770e:	bf00      	nop
 8017710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017712:	bc08      	pop	{r3}
 8017714:	469e      	mov	lr, r3
 8017716:	4770      	bx	lr
