
MAIN_FM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800dc08  0800dc08  0001dc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e184  0800e184  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e18c  0800e18c  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e18c  0800e18c  0001e18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e190  0800e190  0001e190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020350  2**0
                  CONTENTS
 10 .bss          00002170  20000350  20000350  00020350  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024c0  200024c0  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 13 .debug_info   000272a1  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005052  00000000  00000000  00047621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  0004c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001790  00000000  00000000  0004e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a851  00000000  00000000  0004f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206ff  00000000  00000000  00079fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edf7f  00000000  00000000  0009a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018865f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bb8  00000000  00000000  001886b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dbec 	.word	0x0800dbec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0800dbec 	.word	0x0800dbec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_ADC1_Init+0x9c>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_ADC1_Init+0xa0>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f22:	f001 ff11 	bl	8002d48 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f001 f852 	bl	8001fd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_ADC1_Init+0x98>)
 8000f42:	f001 ff45 	bl	8002dd0 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f001 f842 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000964 	.word	0x20000964
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <MX_ADC3_Init+0x9c>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MX_ADC3_Init+0xa0>)
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fc6:	f001 febf 	bl	8002d48 <HAL_ADC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000fd0:	f001 f800 	bl	8001fd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fe6:	f001 fef3 	bl	8002dd0 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 fff0 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200009ac 	.word	0x200009ac
 8001000:	40012200 	.word	0x40012200
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_ADC_MspInit+0x140>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d15c      	bne.n	80010e4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a46      	ldr	r2, [pc, #280]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <HAL_ADC_MspInit+0x144>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	4b40      	ldr	r3, [pc, #256]	; (800114c <HAL_ADC_MspInit+0x144>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a3f      	ldr	r2, [pc, #252]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a38      	ldr	r2, [pc, #224]	; (800114c <HAL_ADC_MspInit+0x144>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    PC5     ------> ADC1_IN15
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800109a:	2337      	movs	r3, #55	; 0x37
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4828      	ldr	r0, [pc, #160]	; (8001150 <HAL_ADC_MspInit+0x148>)
 80010ae:	f002 fa61 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7
 80010b2:	23fd      	movs	r3, #253	; 0xfd
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4823      	ldr	r0, [pc, #140]	; (8001154 <HAL_ADC_MspInit+0x14c>)
 80010c6:	f002 fa55 	bl	8003574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80010ca:	2303      	movs	r3, #3
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	481e      	ldr	r0, [pc, #120]	; (8001158 <HAL_ADC_MspInit+0x150>)
 80010de:	f002 fa49 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010e2:	e02c      	b.n	800113e <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	; (800115c <HAL_ADC_MspInit+0x154>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d127      	bne.n	800113e <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_ADC_MspInit+0x144>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_ADC_MspInit+0x144>)
 80010f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_ADC_MspInit+0x144>)
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_ADC_MspInit+0x144>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001126:	2310      	movs	r3, #16
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_ADC_MspInit+0x158>)
 800113a:	f002 fa1b 	bl	8003574 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3738      	adds	r7, #56	; 0x38
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40012000 	.word	0x40012000
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40012200 	.word	0x40012200
 8001160:	40021400 	.word	0x40021400

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	4b71      	ldr	r3, [pc, #452]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a70      	ldr	r2, [pc, #448]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <MX_GPIO_Init+0x1e0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	4b6a      	ldr	r3, [pc, #424]	; (8001344 <MX_GPIO_Init+0x1e0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b67      	ldr	r3, [pc, #412]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a62      	ldr	r2, [pc, #392]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b59      	ldr	r3, [pc, #356]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b55      	ldr	r3, [pc, #340]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a54      	ldr	r2, [pc, #336]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <MX_GPIO_Init+0x1e0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a46      	ldr	r2, [pc, #280]	; (8001344 <MX_GPIO_Init+0x1e0>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a38      	ldr	r2, [pc, #224]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <MX_GPIO_Init+0x1e0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	21d0      	movs	r1, #208	; 0xd0
 800127a:	4833      	ldr	r0, [pc, #204]	; (8001348 <MX_GPIO_Init+0x1e4>)
 800127c:	f002 fb26 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAIN_FM_CS_GPIO_Port, MAIN_FM_CS_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	4831      	ldr	r0, [pc, #196]	; (800134c <MX_GPIO_Init+0x1e8>)
 8001286:	f002 fb21 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_EN_Pin|MPU_INT_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2141      	movs	r1, #65	; 0x41
 800128e:	4830      	ldr	r0, [pc, #192]	; (8001350 <MX_GPIO_Init+0x1ec>)
 8001290:	f002 fb1c 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f641 4108 	movw	r1, #7176	; 0x1c08
 800129a:	482e      	ldr	r0, [pc, #184]	; (8001354 <MX_GPIO_Init+0x1f0>)
 800129c:	f002 fb16 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MAG_INT_Pin|CS_MAG_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80012a6:	482c      	ldr	r0, [pc, #176]	; (8001358 <MX_GPIO_Init+0x1f4>)
 80012a8:	f002 fb10 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SMSN_FM_CS_OBC_Pin|MSN_FM_MODE_Pin|EN_4V_DCDC_Pin;
 80012ac:	23d0      	movs	r3, #208	; 0xd0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	4821      	ldr	r0, [pc, #132]	; (8001348 <MX_GPIO_Init+0x1e4>)
 80012c4:	f002 f956 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAIN_FM_CS_Pin;
 80012c8:	2308      	movs	r3, #8
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MAIN_FM_CS_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_GPIO_Init+0x1e8>)
 80012e0:	f002 f948 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = MUX_EN_Pin|MPU_INT_Pin;
 80012e4:	2341      	movs	r3, #65	; 0x41
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <MX_GPIO_Init+0x1ec>)
 80012fc:	f002 f93a 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|EN_4V_Pin|EN_3V3_COM_Pin|CS_MPU_Pin;
 8001300:	f641 4308 	movw	r3, #7176	; 0x1c08
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <MX_GPIO_Init+0x1f0>)
 800131a:	f002 f92b 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|CS_MAG_Pin;
 800131e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_GPIO_Init+0x1f4>)
 8001338:	f002 f91c 	bl	8003574 <HAL_GPIO_Init>

}
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40022000 	.word	0x40022000
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40021400 	.word	0x40021400

0800135c <buffersize1>:
		uint16_t mx, my, mz;
	} mag;

} lis3mdl;

int buffersize1(char *buff) {
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8001368:	e002      	b.n	8001370 <buffersize1+0x14>
		i++;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f6      	bne.n	800136a <buffersize1+0xe>
	return i;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <myDebug>:
void myDebug(const char *fmt, ...) {
 800138c:	b40f      	push	{r0, r1, r2, r3}
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	2164      	movs	r1, #100	; 0x64
 80013a0:	480a      	ldr	r0, [pc, #40]	; (80013cc <myDebug+0x40>)
 80013a2:	f00a fa09 	bl	800b7b8 <vsniprintf>
	va_end(args);
	int len = buffersize1(temp);
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <myDebug+0x40>)
 80013a8:	f7ff ffd8 	bl	800135c <buffersize1>
 80013ac:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart7, (uint8_t*) temp, len,1000);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	4905      	ldr	r1, [pc, #20]	; (80013cc <myDebug+0x40>)
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <myDebug+0x44>)
 80013ba:	f005 f92c 	bl	8006616 <HAL_UART_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr
 80013cc:	2000037c 	.word	0x2000037c
 80013d0:	20000678 	.word	0x20000678

080013d4 <LIS3MDL_ReadReg>:
 * @brief  Read data from Specific Register address of LIS3MDL
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address from which data is to be read
 */
uint8_t LIS3MDL_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <LIS3MDL_ReadReg+0x54>)
 80013f2:	f002 fa6b 	bl	80038cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 80013f6:	1cf9      	adds	r1, r7, #3
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	2201      	movs	r2, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f004 f8d2 	bl	80055a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8001402:	f107 010f 	add.w	r1, r7, #15
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	2201      	movs	r2, #1
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 fa07 	bl	800581e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <LIS3MDL_ReadReg+0x54>)
 8001418:	f002 fa58 	bl	80038cc <HAL_GPIO_WritePin>
	return val;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021400 	.word	0x40021400

0800142c <LIS3MDL_WriteReg>:
 * @brief  Write on Specific Register address of LIS3MDL
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  add Register address where certain value is to be written
 */
void LIS3MDL_WriteReg(SPI_HandleTypeDef *hspi, uint8_t add, uint8_t val) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
 8001438:	4613      	mov	r3, r2
 800143a:	70bb      	strb	r3, [r7, #2]
	add &= 0x7F;  // clear the MSB to indicate a write operation
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001442:	b2db      	uxtb	r3, r3
 8001444:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <LIS3MDL_WriteReg+0x54>)
 800144e:	f002 fa3d 	bl	80038cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 8001452:	1cf9      	adds	r1, r7, #3
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	2201      	movs	r2, #1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f004 f8a4 	bl	80055a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &val, 1, 100);
 800145e:	1cb9      	adds	r1, r7, #2
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	2201      	movs	r2, #1
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 f89e 	bl	80055a6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <LIS3MDL_WriteReg+0x54>)
 8001472:	f002 fa2b 	bl	80038cc <HAL_GPIO_WritePin>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021400 	.word	0x40021400

08001484 <LIS3MDL_Init>:
 * @brief  Initialize LIS3MDL to work in 16-bit, 1.25Hz ODR, ±4 Gauss and Continuous conversion Mode
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @param  ctrl2 Control Register Value to choose LIS3MDL sensor Scale
 */
void LIS3MDL_Init(SPI_HandleTypeDef *hspi, uint8_t ctrl2) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	uint8_t ctrl1 = 0x74;  // set the magnetic resolution to 16-bit, 20 Hz ODR, UHP mode in X-Y axis
 8001490:	2374      	movs	r3, #116	; 0x74
 8001492:	73fb      	strb	r3, [r7, #15]
	LIS3MDL_WriteReg(hspi, LIS3MDL_CTRL_REG1, ctrl1);
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	461a      	mov	r2, r3
 8001498:	2120      	movs	r1, #32
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffc6 	bl	800142c <LIS3MDL_WriteReg>

	/* Change the full-scale range to ±4 Gauss */

	//value to set the full-scale range
	LIS3MDL_WriteReg(hspi, LIS3MDL_CTRL_REG2, ctrl2);
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2121      	movs	r1, #33	; 0x21
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffc0 	bl	800142c <LIS3MDL_WriteReg>

	/* Change the control register 3 to continuous conversion mode */

	uint8_t ctrl3 = 0x00; // value to set the continuous conversion mode
 80014ac:	2300      	movs	r3, #0
 80014ae:	73bb      	strb	r3, [r7, #14]
	LIS3MDL_WriteReg(hspi, LIS3MDL_CTRL_REG3, ctrl3);
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2122      	movs	r1, #34	; 0x22
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffb8 	bl	800142c <LIS3MDL_WriteReg>


	uint8_t ctrl4 = 0x0C; // value to set the UHP mode on Z-axis
 80014bc:	230c      	movs	r3, #12
 80014be:	737b      	strb	r3, [r7, #13]
	LIS3MDL_WriteReg(hspi, LIS3MDL_CTRL_REG4, ctrl4);
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	461a      	mov	r2, r3
 80014c4:	2123      	movs	r1, #35	; 0x23
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffb0 	bl	800142c <LIS3MDL_WriteReg>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MPU_begin>:


//MPU6500 Functions


uint8_t MPU_begin(SPI_HandleTypeDef *SPIx, MPU6500_t *pMPU6500) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	// Initialize variables
	uint8_t check = 0x20;
 80014de:	2320      	movs	r3, #32
 80014e0:	737b      	strb	r3, [r7, #13]
	uint8_t addr, val;
//	 Confirm device
//	HAL_Delay(100);
	whoAmI();
 80014e2:	f000 f8df 	bl	80016a4 <whoAmI>
	readRegisters(WHO_AM_I, 1, &check);
 80014e6:	f107 030d 	add.w	r3, r7, #13
 80014ea:	461a      	mov	r2, r3
 80014ec:	2101      	movs	r1, #1
 80014ee:	2075      	movs	r0, #117	; 0x75
 80014f0:	f000 f8c5 	bl	800167e <readRegisters>
	if (check == WHO_AM_I_6500_ANS) {
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	2b70      	cmp	r3, #112	; 0x70
 80014f8:	d128      	bne.n	800154c <MPU_begin+0x78>
//	 Startup / reset the sensor
		addr = PWR_MGMT_1;
 80014fa:	236b      	movs	r3, #107	; 0x6b
 80014fc:	73fb      	strb	r3, [r7, #15]
		val = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001502:	7bba      	ldrb	r2, [r7, #14]
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f8a3 	bl	8001654 <writeRegister>

		// Disable I2C (SPI only)
		addr = USER_CTRL;
 800150e:	236a      	movs	r3, #106	; 0x6a
 8001510:	73fb      	strb	r3, [r7, #15]
		val = 0x10;
 8001512:	2310      	movs	r3, #16
 8001514:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001516:	7bba      	ldrb	r2, [r7, #14]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f899 	bl	8001654 <writeRegister>

		// Configure DLPF value()
		val = 0x11;
 8001522:	2311      	movs	r3, #17
 8001524:	73bb      	strb	r3, [r7, #14]
		MPU6500_SetDLPFBandwidth(DLPF_BANDWIDTH_20HZ);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f8ca 	bl	80016c0 <MPU6500_SetDLPFBandwidth>

		// Set the full scale ranges
		MPU_writeAccFullScaleRange(pMPU6500,
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001532:	4619      	mov	r1, r3
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f000 f8d9 	bl	80016ec <MPU_writeAccFullScaleRange>
				pMPU6500->settings.aFullScaleRange);
		MPU_writeGyroFullScaleRange(pMPU6500,
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001540:	4619      	mov	r1, r3
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 f92e 	bl	80017a4 <MPU_writeGyroFullScaleRange>
				pMPU6500->settings.gFullScaleRange);
		return 1;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <MPU_begin+0x7a>
	} else {
		return 0;
 800154c:	2300      	movs	r3, #0
	}
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MPU_CS>:

void MPU_CS(uint8_t state) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, state);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <MPU_CS+0x20>)
 800156c:	f002 f9ae 	bl	80038cc <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021c00 	.word	0x40021c00

0800157c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_TransmitReceive(&IMU, (uint8_t*) &Byte,
 800158a:	f107 020f 	add.w	r2, r7, #15
 800158e:	1df9      	adds	r1, r7, #7
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <SPIx_WriteRead+0x38>)
 800159a:	f004 fa51 	bl	8005a40 <HAL_SPI_TransmitReceive>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK) {
		return -1;
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	e000      	b.n	80015aa <SPIx_WriteRead+0x2e>
	} else {
	}
	return receivedbyte;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200006bc 	.word	0x200006bc

080015b8 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
 80015c4:	4613      	mov	r3, r2
 80015c6:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ffc5 	bl	8001558 <MPU_CS>
	SPIx_WriteRead(WriteAddr);
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffd3 	bl	800157c <SPIx_WriteRead>
	while (NumByteToWrite >= 0x01) {
 80015d6:	e00a      	b.n	80015ee <MPU_SPI_Write+0x36>
		SPIx_WriteRead(*pBuffer);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ffcd 	bl	800157c <SPIx_WriteRead>
		NumByteToWrite--;
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f1      	bne.n	80015d8 <MPU_SPI_Write+0x20>
	}
	MPU_CS(CS_DES);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffaf 	bl	8001558 <MPU_CS>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
 8001610:	4613      	mov	r3, r2
 8001612:	803b      	strh	r3, [r7, #0]
	MPU_CS(CS_SEL);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff9f 	bl	8001558 <MPU_CS>
	uint8_t data = ReadAddr | READWRITE_CMD;
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	4313      	orrs	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&IMU, &data, 1, HAL_MAX_DELAY);
 8001624:	f107 010f 	add.w	r1, r7, #15
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	2201      	movs	r2, #1
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <MPU_SPI_Read+0x4c>)
 8001630:	f003 ffb9 	bl	80055a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&IMU, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8001634:	883a      	ldrh	r2, [r7, #0]
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MPU_SPI_Read+0x4c>)
 800163e:	f004 f8ee 	bl	800581e <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff ff88 	bl	8001558 <MPU_CS>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200006bc 	.word	0x200006bc

08001654 <writeRegister>:

/* writes a byte to MPU6500 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001664:	79f9      	ldrb	r1, [r7, #7]
 8001666:	1dbb      	adds	r3, r7, #6
 8001668:	2201      	movs	r2, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffa4 	bl	80015b8 <MPU_SPI_Write>
	HAL_Delay(10);
 8001670:	200a      	movs	r0, #10
 8001672:	f001 fb45 	bl	8002d00 <HAL_Delay>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <readRegisters>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t *dest) {
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	603a      	str	r2, [r7, #0]
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	460b      	mov	r3, r1
 800168c:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	b29a      	uxth	r2, r3
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4619      	mov	r1, r3
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f7ff ffb4 	bl	8001604 <MPU_SPI_Read>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
uint8_t whoAmI() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, &_buffer1);
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <whoAmI+0x18>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	2075      	movs	r0, #117	; 0x75
 80016ae:	f7ff ffe6 	bl	800167e <readRegisters>

	// return the register value
	return _buffer1;
 80016b2:	4b02      	ldr	r3, [pc, #8]	; (80016bc <whoAmI+0x18>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200009f4 	.word	0x200009f4

080016c0 <MPU6500_SetDLPFBandwidth>:

/* sets the DLPF bandwidth to values other than default */
void MPU6500_SetDLPFBandwidth(DLPFBandwidth bandwidth) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	writeRegister(ACCEL_CONFIG2, bandwidth);
 80016ca:	221d      	movs	r2, #29
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f7ff ffbf 	bl	8001654 <writeRegister>
	writeRegister(CONFIG, bandwidth);
 80016d6:	221a      	movs	r2, #26
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff ffb9 	bl	8001654 <writeRegister>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g
void MPU_writeAccFullScaleRange(MPU6500_t *pMPU6500, uint8_t aScale) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = ACCEL_CONFIG;
 80016f8:	231c      	movs	r3, #28
 80016fa:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (aScale) {
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d83e      	bhi.n	8001780 <MPU_writeAccFullScaleRange+0x94>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <MPU_writeAccFullScaleRange+0x1c>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	08001733 	.word	0x08001733
 8001710:	0800174d 	.word	0x0800174d
 8001714:	08001767 	.word	0x08001767
	case AFSR_2G:
		pMPU6500->sensorData.aScaleFactor = 16384.0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800171e:	60da      	str	r2, [r3, #12]
		val = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001724:	7bba      	ldrb	r2, [r7, #14]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff92 	bl	8001654 <writeRegister>
		break;
 8001730:	e033      	b.n	800179a <MPU_writeAccFullScaleRange+0xae>
	case AFSR_4G:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001738:	60da      	str	r2, [r3, #12]
		val = 0x08;
 800173a:	2308      	movs	r3, #8
 800173c:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800173e:	7bba      	ldrb	r2, [r7, #14]
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff85 	bl	8001654 <writeRegister>
		break;
 800174a:	e026      	b.n	800179a <MPU_writeAccFullScaleRange+0xae>
	case AFSR_8G:
		pMPU6500->sensorData.aScaleFactor = 4096.0;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001752:	60da      	str	r2, [r3, #12]
		val = 0x10;
 8001754:	2310      	movs	r3, #16
 8001756:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001758:	7bba      	ldrb	r2, [r7, #14]
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff78 	bl	8001654 <writeRegister>
		break;
 8001764:	e019      	b.n	800179a <MPU_writeAccFullScaleRange+0xae>
	case AFSR_16G:
		pMPU6500->sensorData.aScaleFactor = 2048.0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800176c:	60da      	str	r2, [r3, #12]
		val = 0x18;
 800176e:	2318      	movs	r3, #24
 8001770:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001772:	7bba      	ldrb	r2, [r7, #14]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff6b 	bl	8001654 <writeRegister>
		break;
 800177e:	e00c      	b.n	800179a <MPU_writeAccFullScaleRange+0xae>
	default:
		pMPU6500->sensorData.aScaleFactor = 8192.0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001786:	60da      	str	r2, [r3, #12]
		val = 0x08;
 8001788:	2308      	movs	r3, #8
 800178a:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800178c:	7bba      	ldrb	r2, [r7, #14]
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff5e 	bl	8001654 <writeRegister>
		break;
 8001798:	bf00      	nop
	}
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop

080017a4 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s
void MPU_writeGyroFullScaleRange(MPU6500_t *pMPU6500, uint8_t gScale) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	// Variable init
	uint8_t addr = GYRO_CONFIG;
 80017b0:	231b      	movs	r3, #27
 80017b2:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	// Set the value
	switch (gScale) {
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d83a      	bhi.n	8001830 <MPU_writeGyroFullScaleRange+0x8c>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <MPU_writeGyroFullScaleRange+0x1c>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e9 	.word	0x080017e9
 80017c8:	08001801 	.word	0x08001801
 80017cc:	08001819 	.word	0x08001819
	case GFSR_250DPS:
		pMPU6500->sensorData.gScaleFactor = 131.0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <MPU_writeGyroFullScaleRange+0xac>)
 80017d4:	611a      	str	r2, [r3, #16]
		val = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80017da:	7bba      	ldrb	r2, [r7, #14]
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff37 	bl	8001654 <writeRegister>
		break;
 80017e6:	e02f      	b.n	8001848 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_500DPS:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <MPU_writeGyroFullScaleRange+0xb0>)
 80017ec:	611a      	str	r2, [r3, #16]
		val = 0x08;
 80017ee:	2308      	movs	r3, #8
 80017f0:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 80017f2:	7bba      	ldrb	r2, [r7, #14]
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff2b 	bl	8001654 <writeRegister>
		break;
 80017fe:	e023      	b.n	8001848 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_1000DPS:
		pMPU6500->sensorData.gScaleFactor = 32.8;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <MPU_writeGyroFullScaleRange+0xb4>)
 8001804:	611a      	str	r2, [r3, #16]
		val = 0x10;
 8001806:	2310      	movs	r3, #16
 8001808:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800180a:	7bba      	ldrb	r2, [r7, #14]
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff1f 	bl	8001654 <writeRegister>
		break;
 8001816:	e017      	b.n	8001848 <MPU_writeGyroFullScaleRange+0xa4>
	case GFSR_2000DPS:
		pMPU6500->sensorData.gScaleFactor = 16.4;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <MPU_writeGyroFullScaleRange+0xb8>)
 800181c:	611a      	str	r2, [r3, #16]
		val = 0x18;
 800181e:	2318      	movs	r3, #24
 8001820:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 8001822:	7bba      	ldrb	r2, [r7, #14]
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff13 	bl	8001654 <writeRegister>
		break;
 800182e:	e00b      	b.n	8001848 <MPU_writeGyroFullScaleRange+0xa4>
	default:
		pMPU6500->sensorData.gScaleFactor = 65.5;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <MPU_writeGyroFullScaleRange+0xb0>)
 8001834:	611a      	str	r2, [r3, #16]
		val = 0x08;
 8001836:	2308      	movs	r3, #8
 8001838:	73bb      	strb	r3, [r7, #14]
		writeRegister(addr, val);
 800183a:	7bba      	ldrb	r2, [r7, #14]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff07 	bl	8001654 <writeRegister>
		break;
 8001846:	bf00      	nop
	}
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	43030000 	.word	0x43030000
 8001854:	42830000 	.word	0x42830000
 8001858:	42033333 	.word	0x42033333
 800185c:	41833333 	.word	0x41833333

08001860 <MPU6500_ReadReg>:

uint8_t MPU6500_ReadReg(SPI_HandleTypeDef *hspi, uint8_t add) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	add |= 0x80;  // set the MSB to indicate a read operation
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001872:	b2db      	uxtb	r3, r3
 8001874:	70fb      	strb	r3, [r7, #3]
	MPU_CS(CS_SEL);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fe6e 	bl	8001558 <MPU_CS>
	HAL_SPI_Transmit(hspi, &add, 1, 100);
 800187c:	1cf9      	adds	r1, r7, #3
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2201      	movs	r2, #1
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f003 fe8f 	bl	80055a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &val, 1, 100);
 8001888:	f107 010f 	add.w	r1, r7, #15
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	2201      	movs	r2, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f003 ffc4 	bl	800581e <HAL_SPI_Receive>
	MPU_CS(CS_DES);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fe5e 	bl	8001558 <MPU_CS>
	return val;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <MPU6500_GetData>:

/* read the data, each argument should point to a array for x, y, and x */
void MPU6500_GetData(MPU6500_t *pMPU6500) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU6500
	readRegisters(ACCEL_OUT, 14, _buffer);
 80018b0:	233b      	movs	r3, #59	; 0x3b
 80018b2:	4a25      	ldr	r2, [pc, #148]	; (8001948 <MPU6500_GetData+0xa0>)
 80018b4:	210e      	movs	r1, #14
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fee1 	bl	800167e <readRegisters>

	// combine into 16 bit values
	pMPU6500->rawData.ax = (((int16_t) _buffer[0]) << 8) | _buffer[1];
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <MPU6500_GetData+0xa0>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MPU6500_GetData+0xa0>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	801a      	strh	r2, [r3, #0]
	pMPU6500->rawData.ay = (((int16_t) _buffer[2]) << 8) | _buffer[3];
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MPU6500_GetData+0xa0>)
 80018d4:	789b      	ldrb	r3, [r3, #2]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MPU6500_GetData+0xa0>)
 80018dc:	78db      	ldrb	r3, [r3, #3]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	805a      	strh	r2, [r3, #2]
	pMPU6500->rawData.az = (((int16_t) _buffer[4]) << 8) | _buffer[5];
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MPU6500_GetData+0xa0>)
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MPU6500_GetData+0xa0>)
 80018f2:	795b      	ldrb	r3, [r3, #5]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	809a      	strh	r2, [r3, #4]

	pMPU6500->rawData.gx = (((int16_t) _buffer[8]) << 8) | _buffer[9];
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MPU6500_GetData+0xa0>)
 8001900:	7a1b      	ldrb	r3, [r3, #8]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MPU6500_GetData+0xa0>)
 8001908:	7a5b      	ldrb	r3, [r3, #9]
 800190a:	b21b      	sxth	r3, r3
 800190c:	4313      	orrs	r3, r2
 800190e:	b21a      	sxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	80da      	strh	r2, [r3, #6]
	pMPU6500->rawData.gy = (((int16_t) _buffer[10]) << 8) | _buffer[11];
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MPU6500_GetData+0xa0>)
 8001916:	7a9b      	ldrb	r3, [r3, #10]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MPU6500_GetData+0xa0>)
 800191e:	7adb      	ldrb	r3, [r3, #11]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21a      	sxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	811a      	strh	r2, [r3, #8]
	pMPU6500->rawData.gz = (((int16_t) _buffer[12]) << 8) | _buffer[13];
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MPU6500_GetData+0xa0>)
 800192c:	7b1b      	ldrb	r3, [r3, #12]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <MPU6500_GetData+0xa0>)
 8001934:	7b5b      	ldrb	r3, [r3, #13]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21a      	sxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	815a      	strh	r2, [r3, #10]
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000036c 	.word	0x2000036c

0800194c <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope
/// @param SPIx Pointer to SPI structure config
/// @param pMPU6500 Pointer to master MPU6500 struct
/// @param numCalPoints Number of data points to average
void MPU_calibrateGyro(MPU6500_t *pMPU6500, uint16_t numCalPoints) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
	// Init
	int32_t x = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
	int32_t y = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
	int32_t z = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]

	// Zero guard
	if (numCalPoints == 0) {
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <MPU_calibrateGyro+0x22>
		numCalPoints = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	807b      	strh	r3, [r7, #2]
	}

	// Save specified number of points
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 800196e:	2300      	movs	r3, #0
 8001970:	817b      	strh	r3, [r7, #10]
 8001972:	e01d      	b.n	80019b0 <MPU_calibrateGyro+0x64>
		MPU6500_GetData(pMPU6500);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff97 	bl	80018a8 <MPU6500_GetData>

		x += pMPU6500->rawData.gx;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001980:	461a      	mov	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
		y += pMPU6500->rawData.gy;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800198e:	461a      	mov	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4413      	add	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
		z += pMPU6500->rawData.gz;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800199c:	461a      	mov	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f001 f9ab 	bl	8002d00 <HAL_Delay>
	for (uint16_t ii = 0; ii < numCalPoints; ii++) {
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	3301      	adds	r3, #1
 80019ae:	817b      	strh	r3, [r7, #10]
 80019b0:	897a      	ldrh	r2, [r7, #10]
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3dd      	bcc.n	8001974 <MPU_calibrateGyro+0x28>
	}

	// Average the saved data points to find the gyroscope offset
	pMPU6500->gyroCal.x = (float) x / (float) numCalPoints;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pMPU6500->gyroCal.y = (float) y / (float) numCalPoints;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pMPU6500->gyroCal.z = (float) z / (float) numCalPoints;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <IMU_Setup>:
//
//	pMPU6500->attitude.y = atan2(Ym, Xm) * RAD2DEG;

}

void IMU_Setup() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b096      	sub	sp, #88	; 0x58
 8001a20:	af00      	add	r7, sp, #0

	LIS3MDL_Init(&IMU, 0x60); // ±16 Gauss full scale, 20Hz ODR, Continuous conversion mode
 8001a22:	2160      	movs	r1, #96	; 0x60
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <IMU_Setup+0x7c>)
 8001a26:	f7ff fd2d 	bl	8001484 <LIS3MDL_Init>
	HAL_Delay(1000);
 8001a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2e:	f001 f967 	bl	8002d00 <HAL_Delay>
	MPU6500_t MPU6500;
	MPU6500.settings.gFullScaleRange = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	if (MPU_begin(&IMU, &MPU6500) != TRUE) {
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4816      	ldr	r0, [pc, #88]	; (8001a98 <IMU_Setup+0x7c>)
 8001a3e:	f7ff fd49 	bl	80014d4 <MPU_begin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d00f      	beq.n	8001a68 <IMU_Setup+0x4c>
		sprintf((char*) serialBuf, "ERROR!\r\n");
 8001a48:	4914      	ldr	r1, [pc, #80]	; (8001a9c <IMU_Setup+0x80>)
 8001a4a:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <IMU_Setup+0x84>)
 8001a4c:	f009 fe68 	bl	800b720 <siprintf>
		HAL_UART_Transmit(&DEBUG_STREAM, serialBuf, strlen((char*) serialBuf),
 8001a50:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <IMU_Setup+0x84>)
 8001a52:	f7fe fbcd 	bl	80001f0 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	4910      	ldr	r1, [pc, #64]	; (8001aa0 <IMU_Setup+0x84>)
 8001a60:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <IMU_Setup+0x88>)
 8001a62:	f004 fdd8 	bl	8006616 <HAL_UART_Transmit>
 8001a66:	e002      	b.n	8001a6e <IMU_Setup+0x52>
		HAL_MAX_DELAY);
	} else {
		myDebug("MPU6500 Initialization Complete");
 8001a68:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <IMU_Setup+0x8c>)
 8001a6a:	f7ff fc8f 	bl	800138c <myDebug>
	}

	//	 Calibrate the IMU
	myDebug("Calibrating sensors.\r\n");
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <IMU_Setup+0x90>)
 8001a70:	f7ff fc8c 	bl	800138c <myDebug>
	MPU_calibrateGyro(&MPU6500, 1500);
 8001a74:	463b      	mov	r3, r7
 8001a76:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff66 	bl	800194c <MPU_calibrateGyro>
	HAL_Delay(1000);
 8001a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a84:	f001 f93c 	bl	8002d00 <HAL_Delay>
	myDebug("Calibration  Complete");
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <IMU_Setup+0x94>)
 8001a8a:	f7ff fc7f 	bl	800138c <myDebug>

}
 8001a8e:	bf00      	nop
 8001a90:	3758      	adds	r7, #88	; 0x58
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200006bc 	.word	0x200006bc
 8001a9c:	0800dc08 	.word	0x0800dc08
 8001aa0:	200009f8 	.word	0x200009f8
 8001aa4:	20000678 	.word	0x20000678
 8001aa8:	0800dc14 	.word	0x0800dc14
 8001aac:	0800dc34 	.word	0x0800dc34
 8001ab0:	0800dc4c 	.word	0x0800dc4c

08001ab4 <IMU_Data>:

void IMU_Data() {
 8001ab4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ab8:	b0ae      	sub	sp, #184	; 0xb8
 8001aba:	af04      	add	r7, sp, #16

	//Gyro, Accel and Mag register data
//    uint8_t SAT_IMU[18];
	SAT_IMU1[0] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_H);
 8001abc:	213b      	movs	r1, #59	; 0x3b
 8001abe:	4876      	ldr	r0, [pc, #472]	; (8001c98 <IMU_Data+0x1e4>)
 8001ac0:	f7ff fece 	bl	8001860 <MPU6500_ReadReg>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b74      	ldr	r3, [pc, #464]	; (8001c9c <IMU_Data+0x1e8>)
 8001aca:	701a      	strb	r2, [r3, #0]
	SAT_IMU1[1] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_XOUT_L);
 8001acc:	213c      	movs	r1, #60	; 0x3c
 8001ace:	4872      	ldr	r0, [pc, #456]	; (8001c98 <IMU_Data+0x1e4>)
 8001ad0:	f7ff fec6 	bl	8001860 <MPU6500_ReadReg>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <IMU_Data+0x1e8>)
 8001ada:	705a      	strb	r2, [r3, #1]
	SAT_IMU1[2] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_H);
 8001adc:	213d      	movs	r1, #61	; 0x3d
 8001ade:	486e      	ldr	r0, [pc, #440]	; (8001c98 <IMU_Data+0x1e4>)
 8001ae0:	f7ff febe 	bl	8001860 <MPU6500_ReadReg>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <IMU_Data+0x1e8>)
 8001aea:	709a      	strb	r2, [r3, #2]
	SAT_IMU1[3] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_YOUT_L);
 8001aec:	213e      	movs	r1, #62	; 0x3e
 8001aee:	486a      	ldr	r0, [pc, #424]	; (8001c98 <IMU_Data+0x1e4>)
 8001af0:	f7ff feb6 	bl	8001860 <MPU6500_ReadReg>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <IMU_Data+0x1e8>)
 8001afa:	70da      	strb	r2, [r3, #3]
	SAT_IMU1[4] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_H);
 8001afc:	213f      	movs	r1, #63	; 0x3f
 8001afe:	4866      	ldr	r0, [pc, #408]	; (8001c98 <IMU_Data+0x1e4>)
 8001b00:	f7ff feae 	bl	8001860 <MPU6500_ReadReg>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <IMU_Data+0x1e8>)
 8001b0a:	711a      	strb	r2, [r3, #4]
	SAT_IMU1[5] = MPU6500_ReadReg(&IMU_STREAM, ACCEL_ZOUT_L);
 8001b0c:	2140      	movs	r1, #64	; 0x40
 8001b0e:	4862      	ldr	r0, [pc, #392]	; (8001c98 <IMU_Data+0x1e4>)
 8001b10:	f7ff fea6 	bl	8001860 <MPU6500_ReadReg>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <IMU_Data+0x1e8>)
 8001b1a:	715a      	strb	r2, [r3, #5]

	SAT_IMU1[6] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_H);
 8001b1c:	2143      	movs	r1, #67	; 0x43
 8001b1e:	485e      	ldr	r0, [pc, #376]	; (8001c98 <IMU_Data+0x1e4>)
 8001b20:	f7ff fe9e 	bl	8001860 <MPU6500_ReadReg>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <IMU_Data+0x1e8>)
 8001b2a:	719a      	strb	r2, [r3, #6]
	SAT_IMU1[7] = MPU6500_ReadReg(&IMU_STREAM, GYRO_XOUT_L);
 8001b2c:	2144      	movs	r1, #68	; 0x44
 8001b2e:	485a      	ldr	r0, [pc, #360]	; (8001c98 <IMU_Data+0x1e4>)
 8001b30:	f7ff fe96 	bl	8001860 <MPU6500_ReadReg>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <IMU_Data+0x1e8>)
 8001b3a:	71da      	strb	r2, [r3, #7]
	SAT_IMU1[8] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_H);
 8001b3c:	2145      	movs	r1, #69	; 0x45
 8001b3e:	4856      	ldr	r0, [pc, #344]	; (8001c98 <IMU_Data+0x1e4>)
 8001b40:	f7ff fe8e 	bl	8001860 <MPU6500_ReadReg>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <IMU_Data+0x1e8>)
 8001b4a:	721a      	strb	r2, [r3, #8]
	SAT_IMU1[9] = MPU6500_ReadReg(&IMU_STREAM, GYRO_YOUT_L);
 8001b4c:	2146      	movs	r1, #70	; 0x46
 8001b4e:	4852      	ldr	r0, [pc, #328]	; (8001c98 <IMU_Data+0x1e4>)
 8001b50:	f7ff fe86 	bl	8001860 <MPU6500_ReadReg>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <IMU_Data+0x1e8>)
 8001b5a:	725a      	strb	r2, [r3, #9]
	SAT_IMU1[10] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_H);
 8001b5c:	2147      	movs	r1, #71	; 0x47
 8001b5e:	484e      	ldr	r0, [pc, #312]	; (8001c98 <IMU_Data+0x1e4>)
 8001b60:	f7ff fe7e 	bl	8001860 <MPU6500_ReadReg>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <IMU_Data+0x1e8>)
 8001b6a:	729a      	strb	r2, [r3, #10]
	SAT_IMU1[11] = MPU6500_ReadReg(&IMU_STREAM, GYRO_ZOUT_L);
 8001b6c:	2148      	movs	r1, #72	; 0x48
 8001b6e:	484a      	ldr	r0, [pc, #296]	; (8001c98 <IMU_Data+0x1e4>)
 8001b70:	f7ff fe76 	bl	8001860 <MPU6500_ReadReg>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <IMU_Data+0x1e8>)
 8001b7a:	72da      	strb	r2, [r3, #11]

	SAT_IMU1[12]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_L);
 8001b7c:	2128      	movs	r1, #40	; 0x28
 8001b7e:	4846      	ldr	r0, [pc, #280]	; (8001c98 <IMU_Data+0x1e4>)
 8001b80:	f7ff fc28 	bl	80013d4 <LIS3MDL_ReadReg>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <IMU_Data+0x1e8>)
 8001b8a:	731a      	strb	r2, [r3, #12]
	SAT_IMU1[13]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTX_H);
 8001b8c:	2129      	movs	r1, #41	; 0x29
 8001b8e:	4842      	ldr	r0, [pc, #264]	; (8001c98 <IMU_Data+0x1e4>)
 8001b90:	f7ff fc20 	bl	80013d4 <LIS3MDL_ReadReg>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <IMU_Data+0x1e8>)
 8001b9a:	735a      	strb	r2, [r3, #13]
	SAT_IMU1[14]= LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_L);
 8001b9c:	212a      	movs	r1, #42	; 0x2a
 8001b9e:	483e      	ldr	r0, [pc, #248]	; (8001c98 <IMU_Data+0x1e4>)
 8001ba0:	f7ff fc18 	bl	80013d4 <LIS3MDL_ReadReg>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <IMU_Data+0x1e8>)
 8001baa:	739a      	strb	r2, [r3, #14]
	SAT_IMU1[15] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTY_H);
 8001bac:	212b      	movs	r1, #43	; 0x2b
 8001bae:	483a      	ldr	r0, [pc, #232]	; (8001c98 <IMU_Data+0x1e4>)
 8001bb0:	f7ff fc10 	bl	80013d4 <LIS3MDL_ReadReg>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <IMU_Data+0x1e8>)
 8001bba:	73da      	strb	r2, [r3, #15]
	SAT_IMU1[16] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_L);
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	4836      	ldr	r0, [pc, #216]	; (8001c98 <IMU_Data+0x1e4>)
 8001bc0:	f7ff fc08 	bl	80013d4 <LIS3MDL_ReadReg>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <IMU_Data+0x1e8>)
 8001bca:	741a      	strb	r2, [r3, #16]
	SAT_IMU1[17] = LIS3MDL_ReadReg(&IMU_STREAM, LIS3MDL_OUTZ_H);
 8001bcc:	212d      	movs	r1, #45	; 0x2d
 8001bce:	4832      	ldr	r0, [pc, #200]	; (8001c98 <IMU_Data+0x1e4>)
 8001bd0:	f7ff fc00 	bl	80013d4 <LIS3MDL_ReadReg>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <IMU_Data+0x1e8>)
 8001bda:	745a      	strb	r2, [r3, #17]
//		sprintf(str, "%02x |\0",SAT_IMU1[i]);
//		HAL_UART_Transmit(&huart7, str,strlen(str), 100);
////		myDebug("%f * %d * %02x *****",SAT_IMU[i],SAT_IMU[i],SAT_IMU[i]);
//	}
	int16_t accelRaw[3] = {
	        (int16_t)((SAT_IMU1[0] << 8) | SAT_IMU1[1]),
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <IMU_Data+0x1e8>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <IMU_Data+0x1e8>)
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b21b      	sxth	r3, r3
	int16_t accelRaw[3] = {
 8001bee:	873b      	strh	r3, [r7, #56]	; 0x38
	        (int16_t)((SAT_IMU1[2] << 8) | SAT_IMU1[3]),
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <IMU_Data+0x1e8>)
 8001bf2:	789b      	ldrb	r3, [r3, #2]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <IMU_Data+0x1e8>)
 8001bfa:	78db      	ldrb	r3, [r3, #3]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b21b      	sxth	r3, r3
	int16_t accelRaw[3] = {
 8001c02:	877b      	strh	r3, [r7, #58]	; 0x3a
	        (int16_t)((SAT_IMU1[4] << 8) | SAT_IMU1[5])
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <IMU_Data+0x1e8>)
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <IMU_Data+0x1e8>)
 8001c0e:	795b      	ldrb	r3, [r3, #5]
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b21b      	sxth	r3, r3
	int16_t accelRaw[3] = {
 8001c16:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    };

	    int16_t gyroRaw[3] = {
	        (int16_t)((SAT_IMU1[6] << 8) | SAT_IMU1[7]),
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <IMU_Data+0x1e8>)
 8001c1a:	799b      	ldrb	r3, [r3, #6]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <IMU_Data+0x1e8>)
 8001c22:	79db      	ldrb	r3, [r3, #7]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b21b      	sxth	r3, r3
	    int16_t gyroRaw[3] = {
 8001c2a:	863b      	strh	r3, [r7, #48]	; 0x30
	        (int16_t)((SAT_IMU1[8] << 8) | SAT_IMU1[9]),
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <IMU_Data+0x1e8>)
 8001c2e:	7a1b      	ldrb	r3, [r3, #8]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <IMU_Data+0x1e8>)
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21b      	sxth	r3, r3
	    int16_t gyroRaw[3] = {
 8001c3e:	867b      	strh	r3, [r7, #50]	; 0x32
	        (int16_t)((SAT_IMU1[10] << 8) | SAT_IMU1[11])
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <IMU_Data+0x1e8>)
 8001c42:	7a9b      	ldrb	r3, [r3, #10]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <IMU_Data+0x1e8>)
 8001c4a:	7adb      	ldrb	r3, [r3, #11]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b21b      	sxth	r3, r3
	    int16_t gyroRaw[3] = {
 8001c52:	86bb      	strh	r3, [r7, #52]	; 0x34
	    };

	    int16_t magRaw[3] = {
	        (int16_t)((SAT_IMU1[13] << 8) | SAT_IMU1[12]), // Note: High byte is read first
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <IMU_Data+0x1e8>)
 8001c56:	7b5b      	ldrb	r3, [r3, #13]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <IMU_Data+0x1e8>)
 8001c5e:	7b1b      	ldrb	r3, [r3, #12]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
	    int16_t magRaw[3] = {
 8001c66:	853b      	strh	r3, [r7, #40]	; 0x28
	        (int16_t)((SAT_IMU1[15] << 8) | SAT_IMU1[14]),
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <IMU_Data+0x1e8>)
 8001c6a:	7bdb      	ldrb	r3, [r3, #15]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <IMU_Data+0x1e8>)
 8001c72:	7b9b      	ldrb	r3, [r3, #14]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
	    int16_t magRaw[3] = {
 8001c7a:	857b      	strh	r3, [r7, #42]	; 0x2a
	        (int16_t)((SAT_IMU1[17] << 8) | SAT_IMU1[16])
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <IMU_Data+0x1e8>)
 8001c7e:	7c5b      	ldrb	r3, [r3, #17]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <IMU_Data+0x1e8>)
 8001c86:	7c1b      	ldrb	r3, [r3, #16]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21b      	sxth	r3, r3
	    int16_t magRaw[3] = {
 8001c8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    };
	    IMUData imu;

	    // Convert raw values to physical units
	    for (int i = 0; i < 3; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c96:	e061      	b.n	8001d5c <IMU_Data+0x2a8>
 8001c98:	200006bc 	.word	0x200006bc
 8001c9c:	20000a60 	.word	0x20000a60
 8001ca0:	46800000 	.word	0x46800000
 8001ca4:	411cf5c3 	.word	0x411cf5c3
 8001ca8:	43030000 	.word	0x43030000
 8001cac:	3e0f5c29 	.word	0x3e0f5c29
	        // Accelerometer in m/s²
	        imu.accel_mps2[i] = (float)accelRaw[i] / ACCEL_SCALE_FACTOR * GRAVITY;
 8001cb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cba:	4413      	add	r3, r2
 8001cbc:	f933 3c70 	ldrsh.w	r3, [r3, #-112]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8001ca0 <IMU_Data+0x1ec>
 8001ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd0:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8001ca4 <IMU_Data+0x1f0>
 8001cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3ba4      	subs	r3, #164	; 0xa4
 8001ce6:	edc3 7a00 	vstr	s15, [r3]

	        // Gyroscope in degrees/s
	        imu.gyro_dps[i] = (float)gyroRaw[i] / GYRO_SCALE_FACTOR;
 8001cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d02:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 8001ca8 <IMU_Data+0x1f4>
 8001d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d0e:	3302      	adds	r3, #2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d16:	4413      	add	r3, r2
 8001d18:	3ba0      	subs	r3, #160	; 0xa0
 8001d1a:	edc3 7a00 	vstr	s15, [r3]

	        // Magnetometer in microtesla
	        imu.mag_uT[i] = (float)magRaw[i] * MAG_SCALE_FACTOR;
 8001d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d28:	4413      	add	r3, r2
 8001d2a:	f933 3c80 	ldrsh.w	r3, [r3, #-128]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8001cac <IMU_Data+0x1f8>
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d42:	3306      	adds	r3, #6
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3ba4      	subs	r3, #164	; 0xa4
 8001d4e:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 3; i++) {
 8001d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d56:	3301      	adds	r3, #1
 8001d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001d5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	dda5      	ble.n	8001cb0 <IMU_Data+0x1fc>
	    }
	    sprintf(serialBuf,"Accelerometer (m/s²): X=%.2f, Y=%.2f, Z=%.2f\n\0",
	               imu.accel_mps2[0], imu.accel_mps2[1], imu.accel_mps2[2]);
 8001d64:	687b      	ldr	r3, [r7, #4]
	    sprintf(serialBuf,"Accelerometer (m/s²): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbfe 	bl	8000568 <__aeabi_f2d>
 8001d6c:	4680      	mov	r8, r0
 8001d6e:	4689      	mov	r9, r1
	               imu.accel_mps2[0], imu.accel_mps2[1], imu.accel_mps2[2]);
 8001d70:	68bb      	ldr	r3, [r7, #8]
	    sprintf(serialBuf,"Accelerometer (m/s²): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbf8 	bl	8000568 <__aeabi_f2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
	               imu.accel_mps2[0], imu.accel_mps2[1], imu.accel_mps2[2]);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
	    sprintf(serialBuf,"Accelerometer (m/s²): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbf2 	bl	8000568 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d8c:	e9cd 4500 	strd	r4, r5, [sp]
 8001d90:	4642      	mov	r2, r8
 8001d92:	464b      	mov	r3, r9
 8001d94:	4932      	ldr	r1, [pc, #200]	; (8001e60 <IMU_Data+0x3ac>)
 8001d96:	4833      	ldr	r0, [pc, #204]	; (8001e64 <IMU_Data+0x3b0>)
 8001d98:	f009 fcc2 	bl	800b720 <siprintf>
	    HAL_UART_Transmit(&huart7, serialBuf, strlen(serialBuf),1000);
 8001d9c:	4831      	ldr	r0, [pc, #196]	; (8001e64 <IMU_Data+0x3b0>)
 8001d9e:	f7fe fa27 	bl	80001f0 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	492e      	ldr	r1, [pc, #184]	; (8001e64 <IMU_Data+0x3b0>)
 8001dac:	482e      	ldr	r0, [pc, #184]	; (8001e68 <IMU_Data+0x3b4>)
 8001dae:	f004 fc32 	bl	8006616 <HAL_UART_Transmit>
	        sprintf(serialBuf,"Gyroscope (°/s): X=%.2f, Y=%.2f, Z=%.2f\n\0",
	               imu.gyro_dps[0], imu.gyro_dps[1], imu.gyro_dps[2]);
 8001db2:	693b      	ldr	r3, [r7, #16]
	        sprintf(serialBuf,"Gyroscope (°/s): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbd7 	bl	8000568 <__aeabi_f2d>
 8001dba:	4680      	mov	r8, r0
 8001dbc:	4689      	mov	r9, r1
	               imu.gyro_dps[0], imu.gyro_dps[1], imu.gyro_dps[2]);
 8001dbe:	697b      	ldr	r3, [r7, #20]
	        sprintf(serialBuf,"Gyroscope (°/s): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbd1 	bl	8000568 <__aeabi_f2d>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460d      	mov	r5, r1
	               imu.gyro_dps[0], imu.gyro_dps[1], imu.gyro_dps[2]);
 8001dca:	69bb      	ldr	r3, [r7, #24]
	        sprintf(serialBuf,"Gyroscope (°/s): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbcb 	bl	8000568 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dda:	e9cd 4500 	strd	r4, r5, [sp]
 8001dde:	4642      	mov	r2, r8
 8001de0:	464b      	mov	r3, r9
 8001de2:	4922      	ldr	r1, [pc, #136]	; (8001e6c <IMU_Data+0x3b8>)
 8001de4:	481f      	ldr	r0, [pc, #124]	; (8001e64 <IMU_Data+0x3b0>)
 8001de6:	f009 fc9b 	bl	800b720 <siprintf>
		    HAL_UART_Transmit(&huart7, serialBuf, strlen(serialBuf),1000);
 8001dea:	481e      	ldr	r0, [pc, #120]	; (8001e64 <IMU_Data+0x3b0>)
 8001dec:	f7fe fa00 	bl	80001f0 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df8:	491a      	ldr	r1, [pc, #104]	; (8001e64 <IMU_Data+0x3b0>)
 8001dfa:	481b      	ldr	r0, [pc, #108]	; (8001e68 <IMU_Data+0x3b4>)
 8001dfc:	f004 fc0b 	bl	8006616 <HAL_UART_Transmit>
	        sprintf(serialBuf,"Magnetometer (µT): X=%.2f, Y=%.2f, Z=%.2f\n\0",
	               imu.mag_uT[0], imu.mag_uT[1], imu.mag_uT[2]);
 8001e00:	69fb      	ldr	r3, [r7, #28]
	        sprintf(serialBuf,"Magnetometer (µT): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbb0 	bl	8000568 <__aeabi_f2d>
 8001e08:	4680      	mov	r8, r0
 8001e0a:	4689      	mov	r9, r1
	               imu.mag_uT[0], imu.mag_uT[1], imu.mag_uT[2]);
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
	        sprintf(serialBuf,"Magnetometer (µT): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fbaa 	bl	8000568 <__aeabi_f2d>
 8001e14:	4604      	mov	r4, r0
 8001e16:	460d      	mov	r5, r1
	               imu.mag_uT[0], imu.mag_uT[1], imu.mag_uT[2]);
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	        sprintf(serialBuf,"Magnetometer (µT): X=%.2f, Y=%.2f, Z=%.2f\n\0",
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fba4 	bl	8000568 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e28:	e9cd 4500 	strd	r4, r5, [sp]
 8001e2c:	4642      	mov	r2, r8
 8001e2e:	464b      	mov	r3, r9
 8001e30:	490f      	ldr	r1, [pc, #60]	; (8001e70 <IMU_Data+0x3bc>)
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <IMU_Data+0x3b0>)
 8001e34:	f009 fc74 	bl	800b720 <siprintf>
		    HAL_UART_Transmit(&huart7, serialBuf, strlen(serialBuf),1000);
 8001e38:	480a      	ldr	r0, [pc, #40]	; (8001e64 <IMU_Data+0x3b0>)
 8001e3a:	f7fe f9d9 	bl	80001f0 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	4907      	ldr	r1, [pc, #28]	; (8001e64 <IMU_Data+0x3b0>)
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <IMU_Data+0x3b4>)
 8001e4a:	f004 fbe4 	bl	8006616 <HAL_UART_Transmit>
	myDebug("\n******************Data completed************************\n");
 8001e4e:	4809      	ldr	r0, [pc, #36]	; (8001e74 <IMU_Data+0x3c0>)
 8001e50:	f7ff fa9c 	bl	800138c <myDebug>
}
 8001e54:	bf00      	nop
 8001e56:	37a8      	adds	r7, #168	; 0xa8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e5e:	bf00      	nop
 8001e60:	0800dc64 	.word	0x0800dc64
 8001e64:	200009f8 	.word	0x200009f8
 8001e68:	20000678 	.word	0x20000678
 8001e6c:	0800dc94 	.word	0x0800dc94
 8001e70:	0800dcc0 	.word	0x0800dcc0
 8001e74:	0800dcf0 	.word	0x0800dcf0

08001e78 <HK_IMU>:
//		FM[i * 4 + 3] = test.u8[3];
//	}
//
//}

void HK_IMU(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	IMU_Setup();
 8001e7c:	f7ff fdce 	bl	8001a1c <IMU_Setup>
	while(1)
	{
		IMU_Data();
 8001e80:	f7ff fe18 	bl	8001ab4 <IMU_Data>
		HAL_Delay(10000);
 8001e84:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e88:	f000 ff3a 	bl	8002d00 <HAL_Delay>
		IMU_Data();
 8001e8c:	e7f8      	b.n	8001e80 <HK_IMU+0x8>
	...

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e96:	f000 fec1 	bl	8002c1c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_6, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <main+0x68>)
 8001ea0:	f001 fd14 	bl	80038cc <HAL_GPIO_WritePin>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea4:	f000 f82c 	bl	8001f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea8:	f7ff f95c 	bl	8001164 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001eac:	f000 f8ce 	bl	800204c <MX_SPI3_Init>
  MX_UART7_Init();
 8001eb0:	f000 fd0a 	bl	80028c8 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8001eb4:	f008 faa4 	bl	800a400 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8001eb8:	f000 f8fe 	bl	80020b8 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001ebc:	f000 fd58 	bl	8002970 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ec0:	f7fe fffe 	bl	8000ec0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001ec4:	f7ff f84e 	bl	8000f64 <MX_ADC3_Init>
  MX_SPI5_Init();
 8001ec8:	f000 f92c 	bl	8002124 <MX_SPI5_Init>
  MX_UART4_Init();
 8001ecc:	f000 fcd2 	bl	8002874 <MX_UART4_Init>
  MX_TIM6_Init();
 8001ed0:	f000 fbdc 	bl	800268c <MX_TIM6_Init>
  MX_UART8_Init();
 8001ed4:	f000 fd22 	bl	800291c <MX_UART8_Init>
  MX_TIM7_Init();
 8001ed8:	f000 fc0e 	bl	80026f8 <MX_TIM7_Init>
  MX_TIM9_Init();
 8001edc:	f000 fc42 	bl	8002764 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001ee0:	f000 f87e 	bl	8001fe0 <MX_SPI2_Init>
//  for(int i=8;i<24;i++)
//  ERASE_INTERNAL_FLASH(i);
//  HK_IMU();
//  HK_IMU();
//  HAL_TIM_Base_Start(&htim6);
  uint8_t pData[] = "S2S OBC Running\n";
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <main+0x6c>)
 8001ee6:	1d3c      	adds	r4, r7, #4
 8001ee8:	461d      	mov	r5, r3
 8001eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	7023      	strb	r3, [r4, #0]
//		  	   		  HAL_Delay(200);
//		  	   		  FM[i] = Read_Byte_4B(&hspi3, address+i);
//		  	   	  }
//  ERASE_INTERNAL_FLASH(22);

  HK_IMU();
 8001ef2:	f7ff ffc1 	bl	8001e78 <HK_IMU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <main+0x66>
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	0800dd2c 	.word	0x0800dd2c

08001f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b094      	sub	sp, #80	; 0x50
 8001f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	2230      	movs	r2, #48	; 0x30
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f008 ff94 	bl	800ae3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <SystemClock_Config+0xcc>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <SystemClock_Config+0xcc>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <SystemClock_Config+0xcc>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <SystemClock_Config+0xd0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <SystemClock_Config+0xd0>)
 8001f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <SystemClock_Config+0xd0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f66:	2302      	movs	r3, #2
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001f70:	230c      	movs	r3, #12
 8001f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f74:	23a8      	movs	r3, #168	; 0xa8
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fe3d 	bl	8004c04 <HAL_RCC_OscConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f90:	f000 f820 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f94:	230f      	movs	r3, #15
 8001f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fa0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f89e 	bl	80050f4 <HAL_RCC_ClockConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fbe:	f000 f809 	bl	8001fd4 <Error_Handler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3750      	adds	r7, #80	; 0x50
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_SPI2_Init+0x64>)
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <MX_SPI2_Init+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_SPI2_Init+0x64>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_SPI2_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_SPI2_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_SPI2_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_SPI2_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_SPI2_Init+0x64>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_SPI2_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_SPI2_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_SPI2_Init+0x64>)
 800202c:	220a      	movs	r2, #10
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_SPI2_Init+0x64>)
 8002032:	f003 fa2f 	bl	8005494 <HAL_SPI_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800203c:	f7ff ffca 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000620 	.word	0x20000620
 8002048:	40003800 	.word	0x40003800

0800204c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <MX_SPI3_Init+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800205c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_SPI3_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002080:	2208      	movs	r2, #8
 8002082:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_SPI3_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_SPI3_Init+0x64>)
 8002098:	220a      	movs	r2, #10
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_SPI3_Init+0x64>)
 800209e:	f003 f9f9 	bl	8005494 <HAL_SPI_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80020a8:	f7ff ff94 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000760 	.word	0x20000760
 80020b4:	40003c00 	.word	0x40003c00

080020b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_SPI4_Init+0x64>)
 80020be:	4a18      	ldr	r2, [pc, #96]	; (8002120 <MX_SPI4_Init+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <MX_SPI4_Init+0x64>)
 80020c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <MX_SPI4_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_SPI4_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_SPI4_Init+0x64>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_SPI4_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_SPI4_Init+0x64>)
 80020e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_SPI4_Init+0x64>)
 80020ec:	2208      	movs	r2, #8
 80020ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <MX_SPI4_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_SPI4_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <MX_SPI4_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_SPI4_Init+0x64>)
 8002104:	220a      	movs	r2, #10
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_SPI4_Init+0x64>)
 800210a:	f003 f9c3 	bl	8005494 <HAL_SPI_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002114:	f7ff ff5e 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000800 	.word	0x20000800
 8002120:	40013400 	.word	0x40013400

08002124 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <MX_SPI5_Init+0x64>)
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <MX_SPI5_Init+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_SPI5_Init+0x64>)
 8002130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002134:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_SPI5_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_SPI5_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_SPI5_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_SPI5_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_SPI5_Init+0x64>)
 8002150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002154:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_SPI5_Init+0x64>)
 8002158:	2210      	movs	r2, #16
 800215a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_SPI5_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_SPI5_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_SPI5_Init+0x64>)
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_SPI5_Init+0x64>)
 8002170:	220a      	movs	r2, #10
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <MX_SPI5_Init+0x64>)
 8002176:	f003 f98d 	bl	8005494 <HAL_SPI_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002180:	f7ff ff28 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200006bc 	.word	0x200006bc
 800218c:	40015000 	.word	0x40015000

08002190 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	; 0x48
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_SPI_MspInit+0x22c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12c      	bne.n	800220c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
 80021b6:	4b82      	ldr	r3, [pc, #520]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI2 GPIO Configuration
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
 80021ea:	230e      	movs	r3, #14
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021fa:	2305      	movs	r3, #5
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002202:	4619      	mov	r1, r3
 8002204:	486f      	ldr	r0, [pc, #444]	; (80023c4 <HAL_SPI_MspInit+0x234>)
 8002206:	f001 f9b5 	bl	8003574 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800220a:	e0d2      	b.n	80023b2 <HAL_SPI_MspInit+0x222>
  else if(spiHandle->Instance==SPI3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_SPI_MspInit+0x238>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d14b      	bne.n	80022ae <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a68      	ldr	r2, [pc, #416]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a5a      	ldr	r2, [pc, #360]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MAIN_FM_MISO_Pin|MAIN_FM_SCK_Pin;
 800226a:	2318      	movs	r3, #24
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800227a:	2306      	movs	r3, #6
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002282:	4619      	mov	r1, r3
 8002284:	4851      	ldr	r0, [pc, #324]	; (80023cc <HAL_SPI_MspInit+0x23c>)
 8002286:	f001 f975 	bl	8003574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAIN_FM_MOSI_Pin;
 800228a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800229c:	2306      	movs	r3, #6
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MAIN_FM_MOSI_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a4:	4619      	mov	r1, r3
 80022a6:	484a      	ldr	r0, [pc, #296]	; (80023d0 <HAL_SPI_MspInit+0x240>)
 80022a8:	f001 f964 	bl	8003574 <HAL_GPIO_Init>
}
 80022ac:	e081      	b.n	80023b2 <HAL_SPI_MspInit+0x222>
  else if(spiHandle->Instance==SPI4)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a48      	ldr	r2, [pc, #288]	; (80023d4 <HAL_SPI_MspInit+0x244>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d12c      	bne.n	8002312 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	4a3f      	ldr	r2, [pc, #252]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c6:	6453      	str	r3, [r2, #68]	; 0x44
 80022c8:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|SMSN_FM_MISO_OBC_Pin|SMSN_FM_MOSI_OBC_Pin;
 80022f0:	2364      	movs	r3, #100	; 0x64
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002300:	2305      	movs	r3, #5
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002308:	4619      	mov	r1, r3
 800230a:	4833      	ldr	r0, [pc, #204]	; (80023d8 <HAL_SPI_MspInit+0x248>)
 800230c:	f001 f932 	bl	8003574 <HAL_GPIO_Init>
}
 8002310:	e04f      	b.n	80023b2 <HAL_SPI_MspInit+0x222>
  else if(spiHandle->Instance==SPI5)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a31      	ldr	r2, [pc, #196]	; (80023dc <HAL_SPI_MspInit+0x24c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d14a      	bne.n	80023b2 <HAL_SPI_MspInit+0x222>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232a:	6453      	str	r3, [r2, #68]	; 0x44
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	6313      	str	r3, [r2, #48]	; 0x30
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 800235e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_SPI_MspInit+0x230>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002382:	2305      	movs	r3, #5
 8002384:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238a:	4619      	mov	r1, r3
 800238c:	4814      	ldr	r0, [pc, #80]	; (80023e0 <HAL_SPI_MspInit+0x250>)
 800238e:	f001 f8f1 	bl	8003574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002392:	23c0      	movs	r3, #192	; 0xc0
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023a2:	2305      	movs	r3, #5
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023aa:	4619      	mov	r1, r3
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <HAL_SPI_MspInit+0x254>)
 80023ae:	f001 f8e1 	bl	8003574 <HAL_GPIO_Init>
}
 80023b2:	bf00      	nop
 80023b4:	3748      	adds	r7, #72	; 0x48
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40003c00 	.word	0x40003c00
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40013400 	.word	0x40013400
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40015000 	.word	0x40015000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021c00 	.word	0x40021c00

080023e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_MspInit+0x4c>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_MspInit+0x4c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f000 fc1c 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <USART1_IRQHandler+0x10>)
 8002492:	f004 f953 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000b4c 	.word	0x20000b4c

080024a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <UART4_IRQHandler+0x10>)
 80024a6:	f004 f949 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200008c4 	.word	0x200008c4

080024b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <OTG_FS_IRQHandler+0x10>)
 80024ba:	f001 fb70 	bl	8003b9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200020a8 	.word	0x200020a8

080024c8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <UART7_IRQHandler+0x10>)
 80024ce:	f004 f935 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000678 	.word	0x20000678

080024dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_kill>:

int _kill(int pid, int sig)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024f6:	f008 fc77 	bl	800ade8 <__errno>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2216      	movs	r2, #22
 80024fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_exit>:

void _exit (int status)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffe7 	bl	80024ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800251e:	e7fe      	b.n	800251e <_exit+0x12>

08002520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e00a      	b.n	8002548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002532:	f3af 8000 	nop.w
 8002536:	4601      	mov	r1, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	60ba      	str	r2, [r7, #8]
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3301      	adds	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf0      	blt.n	8002532 <_read+0x12>
	}

return len;
 8002550:	687b      	ldr	r3, [r7, #4]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e009      	b.n	8002580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	dbf1      	blt.n	800256c <_write+0x12>
	}
	return len;
 8002588:	687b      	ldr	r3, [r7, #4]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_close>:

int _close(int file)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
	return -1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ba:	605a      	str	r2, [r3, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_isatty>:

int _isatty(int file)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	return 1;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <_sbrk+0x5c>)
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <_sbrk+0x60>)
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <_sbrk+0x64>)
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <_sbrk+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	429a      	cmp	r2, r3
 800262a:	d207      	bcs.n	800263c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800262c:	f008 fbdc 	bl	800ade8 <__errno>
 8002630:	4603      	mov	r3, r0
 8002632:	220c      	movs	r2, #12
 8002634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	e009      	b.n	8002650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <_sbrk+0x64>)
 800264c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20030000 	.word	0x20030000
 800265c:	00000400 	.word	0x00000400
 8002660:	200003e0 	.word	0x200003e0
 8002664:	200024c0 	.word	0x200024c0

08002668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <SystemInit+0x20>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <SystemInit+0x20>)
 8002674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002692:	463b      	mov	r3, r7
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <MX_TIM6_Init+0x64>)
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <MX_TIM6_Init+0x68>)
 800269e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026a2:	224f      	movs	r2, #79	; 0x4f
 80026a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026bc:	f003 fc92 	bl	8005fe4 <HAL_TIM_Base_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026c6:	f7ff fc85 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026d2:	463b      	mov	r3, r7
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MX_TIM6_Init+0x64>)
 80026d8:	f003 fed4 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026e2:	f7ff fc77 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000a74 	.word	0x20000a74
 80026f4:	40001000 	.word	0x40001000

080026f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	463b      	mov	r3, r7
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_TIM7_Init+0x64>)
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <MX_TIM7_Init+0x68>)
 800270a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_TIM7_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_TIM7_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <MX_TIM7_Init+0x64>)
 800271a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_TIM7_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <MX_TIM7_Init+0x64>)
 8002728:	f003 fc5c 	bl	8005fe4 <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002732:	f7ff fc4f 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4806      	ldr	r0, [pc, #24]	; (800275c <MX_TIM7_Init+0x64>)
 8002744:	f003 fe9e 	bl	8006484 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800274e:	f7ff fc41 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000b04 	.word	0x20000b04
 8002760:	40001400 	.word	0x40001400

08002764 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	463b      	mov	r3, r7
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <MX_TIM9_Init+0x6c>)
 8002778:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <MX_TIM9_Init+0x70>)
 800277a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <MX_TIM9_Init+0x6c>)
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <MX_TIM9_Init+0x6c>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_TIM9_Init+0x6c>)
 800278a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_TIM9_Init+0x6c>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_TIM9_Init+0x6c>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <MX_TIM9_Init+0x6c>)
 800279e:	f003 fc21 	bl	8005fe4 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80027a8:	f7ff fc14 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027b2:	463b      	mov	r3, r7
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_TIM9_Init+0x6c>)
 80027b8:	f003 fc63 	bl	8006082 <HAL_TIM_ConfigClockSource>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80027c2:	f7ff fc07 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000abc 	.word	0x20000abc
 80027d4:	40014000 	.word	0x40014000

080027d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_TIM_Base_MspInit+0x8c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027f4:	f043 0310 	orr.w	r3, r3, #16
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002806:	e026      	b.n	8002856 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM7)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_TIM_Base_MspInit+0x94>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
}
 800282e:	e012      	b.n	8002856 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM9)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_TIM_Base_MspInit+0x98>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <HAL_TIM_Base_MspInit+0x90>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40001000 	.word	0x40001000
 8002868:	40023800 	.word	0x40023800
 800286c:	40001400 	.word	0x40001400
 8002870:	40014000 	.word	0x40014000

08002874 <MX_UART4_Init>:
UART_HandleTypeDef huart8;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_UART4_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <MX_UART4_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <MX_UART4_Init+0x4c>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_UART4_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_UART4_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_UART4_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_UART4_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_UART4_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_UART4_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_UART4_Init+0x4c>)
 80028ac:	f003 fe66 	bl	800657c <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80028b6:	f7ff fb8d 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200008c4 	.word	0x200008c4
 80028c4:	40004c00 	.word	0x40004c00

080028c8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_UART7_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_UART7_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_UART7_Init+0x4c>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_UART7_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_UART7_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_UART7_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_UART7_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_UART7_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_UART7_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_UART7_Init+0x4c>)
 8002900:	f003 fe3c 	bl	800657c <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800290a:	f7ff fb63 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000678 	.word	0x20000678
 8002918:	40007800 	.word	0x40007800

0800291c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_UART8_Init+0x4c>)
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <MX_UART8_Init+0x50>)
 8002924:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_UART8_Init+0x4c>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_UART8_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_UART8_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_UART8_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_UART8_Init+0x4c>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_UART8_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_UART8_Init+0x4c>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_UART8_Init+0x4c>)
 8002954:	f003 fe12 	bl	800657c <HAL_UART_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800295e:	f7ff fb39 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000b90 	.word	0x20000b90
 800296c:	40007c00 	.word	0x40007c00

08002970 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <MX_USART1_UART_Init+0x50>)
 8002978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800297c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002996:	220c      	movs	r2, #12
 8002998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 80029a8:	f003 fde8 	bl	800657c <HAL_UART_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029b2:	f7ff fb0f 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000b4c 	.word	0x20000b4c
 80029c0:	40011000 	.word	0x40011000

080029c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a71      	ldr	r2, [pc, #452]	; (8002ba8 <HAL_UART_MspInit+0x1e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d135      	bne.n	8002a52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	4b70      	ldr	r3, [pc, #448]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a6f      	ldr	r2, [pc, #444]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 80029f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	4b69      	ldr	r3, [pc, #420]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a68      	ldr	r2, [pc, #416]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002a1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a30:	2308      	movs	r3, #8
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	485d      	ldr	r0, [pc, #372]	; (8002bb0 <HAL_UART_MspInit+0x1ec>)
 8002a3c:	f000 fd9a 	bl	8003574 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	2034      	movs	r0, #52	; 0x34
 8002a46:	f000 fccc 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a4a:	2034      	movs	r0, #52	; 0x34
 8002a4c:	f000 fce5 	bl	800341a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a50:	e0a5      	b.n	8002b9e <HAL_UART_MspInit+0x1da>
  else if(uartHandle->Instance==UART7)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a57      	ldr	r2, [pc, #348]	; (8002bb4 <HAL_UART_MspInit+0x1f0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d135      	bne.n	8002ac8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	4a51      	ldr	r2, [pc, #324]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a82:	f043 0310 	orr.w	r3, r3, #16
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b48      	ldr	r3, [pc, #288]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = DEBUG_TX_OBC_Pin|DEBUG_RX_OBC_Pin;
 8002a94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4841      	ldr	r0, [pc, #260]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002ab2:	f000 fd5f 	bl	8003574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2052      	movs	r0, #82	; 0x52
 8002abc:	f000 fc91 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002ac0:	2052      	movs	r0, #82	; 0x52
 8002ac2:	f000 fcaa 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8002ac6:	e06a      	b.n	8002b9e <HAL_UART_MspInit+0x1da>
  else if(uartHandle->Instance==UART8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_UART_MspInit+0x1f8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d12c      	bne.n	8002b2c <HAL_UART_MspInit+0x168>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4824      	ldr	r0, [pc, #144]	; (8002bb8 <HAL_UART_MspInit+0x1f4>)
 8002b26:	f000 fd25 	bl	8003574 <HAL_GPIO_Init>
}
 8002b2a:	e038      	b.n	8002b9e <HAL_UART_MspInit+0x1da>
  else if(uartHandle->Instance==USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <HAL_UART_MspInit+0x1fc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d133      	bne.n	8002b9e <HAL_UART_MspInit+0x1da>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b40:	f043 0310 	orr.w	r3, r3, #16
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_UART_MspInit+0x1e8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b7e:	2307      	movs	r3, #7
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b86:	4619      	mov	r1, r3
 8002b88:	480e      	ldr	r0, [pc, #56]	; (8002bc4 <HAL_UART_MspInit+0x200>)
 8002b8a:	f000 fcf3 	bl	8003574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2025      	movs	r0, #37	; 0x25
 8002b94:	f000 fc25 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b98:	2025      	movs	r0, #37	; 0x25
 8002b9a:	f000 fc3e 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3740      	adds	r7, #64	; 0x40
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40004c00 	.word	0x40004c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40007800 	.word	0x40007800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007c00 	.word	0x40007c00
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40020400 	.word	0x40020400

08002bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bce:	490e      	ldr	r1, [pc, #56]	; (8002c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002be4:	4c0b      	ldr	r4, [pc, #44]	; (8002c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bf2:	f7ff fd39 	bl	8002668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf6:	f008 f8fd 	bl	800adf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfa:	f7ff f949 	bl	8001e90 <main>
  bx  lr    
 8002bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c08:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002c0c:	0800e194 	.word	0x0800e194
  ldr r2, =_sbss
 8002c10:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002c14:	200024c0 	.word	0x200024c0

08002c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c18:	e7fe      	b.n	8002c18 <ADC_IRQHandler>
	...

08002c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <HAL_Init+0x40>)
 8002c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_Init+0x40>)
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_Init+0x40>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f000 fbc1 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f000 f808 	bl	8002c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c50:	f7ff fbca 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023c00 	.word	0x40023c00

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_InitTick+0x54>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x58>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fbd9 	bl	8003436 <HAL_SYSTICK_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00e      	b.n	8002cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d80a      	bhi.n	8002caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c94:	2200      	movs	r2, #0
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f000 fba1 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <HAL_InitTick+0x5c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x20>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x24>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_IncTick+0x24>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	20000bd4 	.word	0x20000bd4

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000bd4 	.word	0x20000bd4

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff ffee 	bl	8002ce8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d005      	beq.n	8002d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_Delay+0x44>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d26:	bf00      	nop
 8002d28:	f7ff ffde 	bl	8002ce8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f7      	bhi.n	8002d28 <HAL_Delay+0x28>
  {
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000008 	.word	0x20000008

08002d48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e033      	b.n	8002dc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f94e 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d8e:	f023 0302 	bic.w	r3, r3, #2
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f94a 	bl	8003034 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
 8002db6:	e001      	b.n	8002dbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1c>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e113      	b.n	8003014 <HAL_ADC_ConfigChannel+0x244>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b09      	cmp	r3, #9
 8002dfa:	d925      	bls.n	8002e48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b1e      	subs	r3, #30
 8002e12:	2207      	movs	r2, #7
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	400a      	ands	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68d9      	ldr	r1, [r3, #12]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	4603      	mov	r3, r0
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4403      	add	r3, r0
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	e022      	b.n	8002e8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6919      	ldr	r1, [r3, #16]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4403      	add	r3, r0
 8002e84:	409a      	lsls	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d824      	bhi.n	8002ee0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b05      	subs	r3, #5
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b05      	subs	r3, #5
 8002ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ede:	e04c      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b0c      	cmp	r3, #12
 8002ee6:	d824      	bhi.n	8002f32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b23      	subs	r3, #35	; 0x23
 8002efa:	221f      	movs	r2, #31
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43da      	mvns	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	400a      	ands	r2, r1
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b23      	subs	r3, #35	; 0x23
 8002f24:	fa00 f203 	lsl.w	r2, r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f30:	e023      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	3b41      	subs	r3, #65	; 0x41
 8002f44:	221f      	movs	r2, #31
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43da      	mvns	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	400a      	ands	r2, r1
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b41      	subs	r3, #65	; 0x41
 8002f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_ADC_ConfigChannel+0x250>)
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_ADC_ConfigChannel+0x254>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10f      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d8>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_ADC_ConfigChannel+0x254>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d12b      	bne.n	800300a <HAL_ADC_ConfigChannel+0x23a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_ADC_ConfigChannel+0x258>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x1f4>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b11      	cmp	r3, #17
 8002fc2:	d122      	bne.n	800300a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_ADC_ConfigChannel+0x258>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d111      	bne.n	800300a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_ADC_ConfigChannel+0x25c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <HAL_ADC_ConfigChannel+0x260>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	0c9a      	lsrs	r2, r3, #18
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3b01      	subs	r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40012300 	.word	0x40012300
 8003024:	40012000 	.word	0x40012000
 8003028:	10000012 	.word	0x10000012
 800302c:	20000000 	.word	0x20000000
 8003030:	431bde83 	.word	0x431bde83

08003034 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800303c:	4b79      	ldr	r3, [pc, #484]	; (8003224 <ADC_Init+0x1f0>)
 800303e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800308c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	4a58      	ldr	r2, [pc, #352]	; (8003228 <ADC_Init+0x1f4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	e00f      	b.n	8003132 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003130:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0202 	bic.w	r2, r2, #2
 8003140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	7e1b      	ldrb	r3, [r3, #24]
 800314c:	005a      	lsls	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800317e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	3b01      	subs	r3, #1
 800318c:	035a      	lsls	r2, r3, #13
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	e007      	b.n	80031a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	051a      	lsls	r2, r3, #20
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ea:	025a      	lsls	r2, r3, #9
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	029a      	lsls	r2, r3, #10
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40012300 	.word	0x40012300
 8003228:	0f000001 	.word	0x0f000001

0800322c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	; (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	; (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	; (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff29 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff3e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff31 	bl	8003290 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffa2 	bl	8003388 <SysTick_Config>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff fc44 	bl	8002ce8 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d008      	beq.n	8003480 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e052      	b.n	8003526 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0216 	bic.w	r2, r2, #22
 800348e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_DMA_Abort+0x62>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0208 	bic.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d0:	e013      	b.n	80034fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d2:	f7ff fc09 	bl	8002ce8 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d90c      	bls.n	80034fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e015      	b.n	8003526 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e4      	bne.n	80034d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d004      	beq.n	800354c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e00c      	b.n	8003566 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2205      	movs	r2, #5
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	e177      	b.n	8003880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 8166 	bne.w	800387a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d005      	beq.n	80035c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d130      	bne.n	8003628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0201 	and.w	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d017      	beq.n	8003664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d123      	bne.n	80036b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80c0 	beq.w	800387a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_GPIO_Init+0x324>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a65      	ldr	r2, [pc, #404]	; (8003898 <HAL_GPIO_Init+0x324>)
 8003704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
 800370a:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_GPIO_Init+0x324>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003716:	4a61      	ldr	r2, [pc, #388]	; (800389c <HAL_GPIO_Init+0x328>)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	3302      	adds	r3, #2
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	220f      	movs	r2, #15
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_GPIO_Init+0x32c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d037      	beq.n	80037b2 <HAL_GPIO_Init+0x23e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_GPIO_Init+0x330>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_GPIO_Init+0x23a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_GPIO_Init+0x334>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <HAL_GPIO_Init+0x236>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a55      	ldr	r2, [pc, #340]	; (80038ac <HAL_GPIO_Init+0x338>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d025      	beq.n	80037a6 <HAL_GPIO_Init+0x232>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a54      	ldr	r2, [pc, #336]	; (80038b0 <HAL_GPIO_Init+0x33c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01f      	beq.n	80037a2 <HAL_GPIO_Init+0x22e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a53      	ldr	r2, [pc, #332]	; (80038b4 <HAL_GPIO_Init+0x340>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x22a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_GPIO_Init+0x344>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x226>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a51      	ldr	r2, [pc, #324]	; (80038bc <HAL_GPIO_Init+0x348>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x222>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_GPIO_Init+0x34c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x21e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_GPIO_Init+0x350>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x21a>
 800378a:	2309      	movs	r3, #9
 800378c:	e012      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800378e:	230a      	movs	r3, #10
 8003790:	e010      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 8003792:	2308      	movs	r3, #8
 8003794:	e00e      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 8003796:	2307      	movs	r3, #7
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800379a:	2306      	movs	r3, #6
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x240>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	; (800389c <HAL_GPIO_Init+0x328>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <HAL_GPIO_Init+0x354>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_GPIO_Init+0x354>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <HAL_GPIO_Init+0x354>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae84 	bls.w	8003590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40022400 	.word	0x40022400
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
 80038d8:	4613      	mov	r3, r2
 80038da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038dc:	787b      	ldrb	r3, [r7, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e8:	e003      	b.n	80038f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	041a      	lsls	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	619a      	str	r2, [r3, #24]
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003900:	b08f      	sub	sp, #60	; 0x3c
 8003902:	af0a      	add	r7, sp, #40	; 0x28
 8003904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e10f      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f006 ff48 	bl	800a7c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f003 fe91 	bl	8007676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	687e      	ldr	r6, [r7, #4]
 800395c:	466d      	mov	r5, sp
 800395e:	f106 0410 	add.w	r4, r6, #16
 8003962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003972:	1d33      	adds	r3, r6, #4
 8003974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f003 fd68 	bl	800744c <USB_CoreInit>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0d0      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fe7f 	bl	8007698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e04a      	b.n	8003a36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	b298      	uxth	r0, r3
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3342      	adds	r3, #66	; 0x42
 80039dc:	4602      	mov	r2, r0
 80039de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333f      	adds	r3, #63	; 0x3f
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3344      	adds	r3, #68	; 0x44
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3348      	adds	r3, #72	; 0x48
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3350      	adds	r3, #80	; 0x50
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	3301      	adds	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d3af      	bcc.n	80039a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e044      	b.n	8003ad0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	3301      	adds	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3b5      	bcc.n	8003a46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	687e      	ldr	r6, [r7, #4]
 8003ae2:	466d      	mov	r5, sp
 8003ae4:	f106 0410 	add.w	r4, r6, #16
 8003ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af8:	1d33      	adds	r3, r6, #4
 8003afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	f003 fe17 	bl	8007730 <USB_DevInit>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e00d      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fe93 	bl	8008854 <USB_DevDisconnect>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_PCD_Start+0x1c>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e020      	b.n	8003b96 <HAL_PCD_Start+0x5e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d109      	bne.n	8003b78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d005      	beq.n	8003b78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fd69 	bl	8007654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f004 fe43 	bl	8008812 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b590      	push	{r4, r7, lr}
 8003ba0:	b08d      	sub	sp, #52	; 0x34
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 ff01 	bl	80089bc <USB_GetMode>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 839d 	bne.w	80042fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fe65 	bl	8008896 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8393 	beq.w	80042fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fe5c 	bl	8008896 <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d107      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f002 0202 	and.w	r2, r2, #2
 8003bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 fe4a 	bl	8008896 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d161      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0210 	bic.w	r2, r2, #16
 8003c1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	0c5b      	lsrs	r3, r3, #17
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d124      	bne.n	8003c92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d035      	beq.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a38      	ldr	r0, [r7, #32]
 8003c68:	f004 fc81 	bl	800856e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c78:	441a      	add	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c8a:	441a      	add	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	619a      	str	r2, [r3, #24]
 8003c90:	e016      	b.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	0c5b      	lsrs	r3, r3, #17
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d110      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6a38      	ldr	r0, [r7, #32]
 8003caa:	f004 fc60 	bl	800856e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cba:	441a      	add	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0210 	orr.w	r2, r2, #16
 8003cce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f004 fdde 	bl	8008896 <USB_ReadInterrupts>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ce4:	d16e      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 fde4 	bl	80088bc <USB_ReadDevAllOutEpInterrupt>
 8003cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003cf6:	e062      	b.n	8003dbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d057      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 fe09 	bl	8008924 <USB_ReadDevOutEPInterrupt>
 8003d12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fdb0 	bl	8004898 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2308      	movs	r3, #8
 8003d52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 feaa 	bl	8004ab0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	2310      	movs	r3, #16
 8003d76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2320      	movs	r3, #32
 8003d92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d199      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f004 fd64 	bl	8008896 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd8:	f040 80c0 	bne.w	8003f5c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fd85 	bl	80088f0 <USB_ReadDevAllInEpInterrupt>
 8003de6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dec:	e0b2      	b.n	8003f54 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a7 	beq.w	8003f48 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 fdab 	bl	8008960 <USB_ReadDevInEPInterrupt>
 8003e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d057      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e36:	4013      	ands	r3, r2
 8003e38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	461a      	mov	r2, r3
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d132      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3348      	adds	r3, #72	; 0x48
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4403      	add	r3, r0
 8003e74:	3344      	adds	r3, #68	; 0x44
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4419      	add	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4403      	add	r3, r0
 8003e88:	3348      	adds	r3, #72	; 0x48
 8003e8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3350      	adds	r3, #80	; 0x50
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	f004 fdb3 	bl	8008a20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f006 fcfe 	bl	800a8c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	461a      	mov	r2, r3
 8003ede:	2308      	movs	r3, #8
 8003ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2310      	movs	r3, #16
 8003efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	2302      	movs	r3, #2
 8003f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fc1b 	bl	800477e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f af49 	bne.w	8003dee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 fc98 	bl	8008896 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f70:	d122      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d108      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fe26 	bl	8004bec <HAL_PCDEx_LPM_Callback>
 8003fa0:	e002      	b.n	8003fa8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f006 fd04 	bl	800a9b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fc6a 	bl	8008896 <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d112      	bne.n	8003ff4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f006 fcc0 	bl	800a964 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ff2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 fc4c 	bl	8008896 <USB_ReadInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	f040 80c7 	bne.w	800419a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2110      	movs	r1, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f003 fce6 	bl	80079f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004030:	e056      	b.n	80040e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	461a      	mov	r2, r3
 8004040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004044:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004064:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004084:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004098:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	3301      	adds	r3, #1
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3a3      	bcc.n	8004032 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004116:	f043 030b 	orr.w	r3, r3, #11
 800411a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412c:	f043 030b 	orr.w	r3, r3, #11
 8004130:	6453      	str	r3, [r2, #68]	; 0x44
 8004132:	e015      	b.n	8004160 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004146:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800414a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f043 030b 	orr.w	r3, r3, #11
 800415e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004172:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004184:	461a      	mov	r2, r3
 8004186:	f004 fc4b 	bl	8008a20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fb79 	bl	8008896 <USB_ReadInterrupts>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	d124      	bne.n	80041fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f004 fc0f 	bl	80089d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 fc77 	bl	8007ab2 <USB_GetDevSpeed>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681c      	ldr	r4, [r3, #0]
 80041d0:	f001 f92c 	bl	800542c <HAL_RCC_GetHCLKFreq>
 80041d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	4620      	mov	r0, r4
 80041e0:	f003 f996 	bl	8007510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f006 fb94 	bl	800a912 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fb49 	bl	8008896 <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d10a      	bne.n	8004224 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f006 fb71 	bl	800a8f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f002 0208 	and.w	r2, r2, #8
 8004222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fb34 	bl	8008896 <USB_ReadInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004238:	d10f      	bne.n	800425a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f006 fbd3 	bl	800a9f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fb19 	bl	8008896 <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426e:	d10f      	bne.n	8004290 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f006 fba6 	bl	800a9cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800428e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f004 fafe 	bl	8008896 <USB_ReadInterrupts>
 800429a:	4603      	mov	r3, r0
 800429c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d10a      	bne.n	80042bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f006 fbb4 	bl	800aa14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f004 fae8 	bl	8008896 <USB_ReadInterrupts>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d115      	bne.n	80042fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f006 fba4 	bl	800aa30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	e000      	b.n	80042fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80042fa:	bf00      	nop
    }
  }
}
 80042fc:	3734      	adds	r7, #52	; 0x34
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}

08004302 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_PCD_SetAddress+0x1a>
 8004318:	2302      	movs	r3, #2
 800431a:	e013      	b.n	8004344 <HAL_PCD_SetAddress+0x42>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fa46 	bl	80087c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	70fb      	strb	r3, [r7, #3]
 800435e:	460b      	mov	r3, r1
 8004360:	803b      	strh	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da0f      	bge.n	8004392 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	3338      	adds	r3, #56	; 0x38
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	705a      	strb	r2, [r3, #1]
 8004390:	e00f      	b.n	80043b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 020f 	and.w	r2, r3, #15
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043be:	883a      	ldrh	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	78ba      	ldrb	r2, [r7, #2]
 80043c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043dc:	78bb      	ldrb	r3, [r7, #2]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d102      	bne.n	80043e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_Open+0xaa>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_Open+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f003 fb79 	bl	8007afc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004412:	7afb      	ldrb	r3, [r7, #11]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	da0f      	bge.n	8004450 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3338      	adds	r3, #56	; 0x38
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	705a      	strb	r2, [r3, #1]
 800444e:	e00f      	b.n	8004470 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_PCD_EP_Close+0x6e>
 8004486:	2302      	movs	r3, #2
 8004488:	e00e      	b.n	80044a8 <HAL_PCD_EP_Close+0x8c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	4618      	mov	r0, r3
 800449a:	f003 fbb7 	bl	8007c0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	460b      	mov	r3, r1
 80044be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	3304      	adds	r3, #4
 80044d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d102      	bne.n	800450c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	f003 fe92 	bl	800824c <USB_EP0StartXfer>
 8004528:	e008      	b.n	800453c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	f003 fc44 	bl	8007dc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004568:	681b      	ldr	r3, [r3, #0]
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	460b      	mov	r3, r1
 8004584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3338      	adds	r3, #56	; 0x38
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2201      	movs	r2, #1
 80045b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	f003 fe30 	bl	800824c <USB_EP0StartXfer>
 80045ec:	e008      	b.n	8004600 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	f003 fbe2 	bl	8007dc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d901      	bls.n	8004628 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e050      	b.n	80046ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800462c:	2b00      	cmp	r3, #0
 800462e:	da0f      	bge.n	8004650 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	3338      	adds	r3, #56	; 0x38
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	3304      	adds	r3, #4
 8004646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	705a      	strb	r2, [r3, #1]
 800464e:	e00d      	b.n	800466c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	3304      	adds	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_PCD_EP_SetStall+0x82>
 8004688:	2302      	movs	r3, #2
 800468a:	e01e      	b.n	80046ca <HAL_PCD_EP_SetStall+0xc0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	f003 ffbf 	bl	800861e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	b2d9      	uxtb	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046ba:	461a      	mov	r2, r3
 80046bc:	f004 f9b0 	bl	8008a20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d901      	bls.n	80046f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e042      	b.n	8004776 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da0f      	bge.n	8004718 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3338      	adds	r3, #56	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	705a      	strb	r2, [r3, #1]
 8004716:	e00f      	b.n	8004738 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	3304      	adds	r3, #4
 8004730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_PCD_EP_ClrStall+0x86>
 8004754:	2302      	movs	r3, #2
 8004756:	e00e      	b.n	8004776 <HAL_PCD_EP_ClrStall+0xa4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f003 ffc7 	bl	80086fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	; 0x28
 8004782:	af02      	add	r7, sp, #8
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3338      	adds	r3, #56	; 0x38
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d901      	bls.n	80047b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e06c      	b.n	8004890 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3303      	adds	r3, #3
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047da:	e02b      	b.n	8004834 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d902      	bls.n	80047f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3303      	adds	r3, #3
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68d9      	ldr	r1, [r3, #12]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004810:	b2db      	uxtb	r3, r3
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f003 fe6b 	bl	80084f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	441a      	add	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	b29b      	uxth	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d809      	bhi.n	800485e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1be      	bne.n	80047dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d811      	bhi.n	800488e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	2201      	movs	r2, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	43db      	mvns	r3, r3
 8004884:	6939      	ldr	r1, [r7, #16]
 8004886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488a:	4013      	ands	r3, r2
 800488c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	333c      	adds	r3, #60	; 0x3c
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 80a0 	bne.w	8004a10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a72      	ldr	r2, [pc, #456]	; (8004aa8 <PCD_EP_OutXfrComplete_int+0x210>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f240 80dd 	bls.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80d7 	beq.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	e0cb      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2320      	movs	r3, #32
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	e0bc      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 80b7 	bne.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d90f      	bls.n	8004958 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004954:	6093      	str	r3, [r2, #8]
 8004956:	e0a2      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800496a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	0159      	lsls	r1, r3, #5
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	440b      	add	r3, r1
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800497e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4403      	add	r3, r0
 800498e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004992:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4403      	add	r3, r0
 80049b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4419      	add	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4403      	add	r3, r0
 80049cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d114      	bne.n	8004a02 <PCD_EP_OutXfrComplete_int+0x16a>
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d108      	bne.n	8004a02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049fa:	461a      	mov	r2, r3
 80049fc:	2101      	movs	r1, #1
 80049fe:	f004 f80f 	bl	8008a20 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f005 ff3f 	bl	800a88c <HAL_PCD_DataOutStageCallback>
 8004a0e:	e046      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a26      	ldr	r2, [pc, #152]	; (8004aac <PCD_EP_OutXfrComplete_int+0x214>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d124      	bne.n	8004a62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a34:	6093      	str	r3, [r2, #8]
 8004a36:	e032      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2320      	movs	r3, #32
 8004a52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f005 ff16 	bl	800a88c <HAL_PCD_DataOutStageCallback>
 8004a60:	e01d      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d114      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f003 ffc7 	bl	8008a20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f005 fef7 	bl	800a88c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	4f54300a 	.word	0x4f54300a
 8004aac:	4f54310a 	.word	0x4f54310a

08004ab0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	333c      	adds	r3, #60	; 0x3c
 8004ac8:	3304      	adds	r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d90e      	bls.n	8004b04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f005 feaf 	bl	800a868 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d90c      	bls.n	8004b2c <PCD_EP_OutSetupPacket_int+0x7c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d108      	bne.n	8004b2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b24:	461a      	mov	r2, r3
 8004b26:	2101      	movs	r1, #1
 8004b28:	f003 ff7a 	bl	8008a20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	4f54300a 	.word	0x4f54300a

08004b3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b5a:	883b      	ldrh	r3, [r7, #0]
 8004b5c:	0419      	lsls	r1, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
 8004b68:	e028      	b.n	8004bbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e00d      	b.n	8004b9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	3340      	adds	r3, #64	; 0x40
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	3301      	adds	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	7bfa      	ldrb	r2, [r7, #15]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3ec      	bcc.n	8004b7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ba4:	883b      	ldrh	r3, [r7, #0]
 8004ba6:	0418      	lsls	r0, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4302      	orrs	r2, r0
 8004bb4:	3340      	adds	r3, #64	; 0x40
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e264      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	4ba3      	ldr	r3, [pc, #652]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4ba0      	ldr	r3, [pc, #640]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b9d      	ldr	r3, [pc, #628]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b99      	ldr	r3, [pc, #612]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e23f      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b91      	ldr	r3, [pc, #580]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a90      	ldr	r2, [pc, #576]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b8b      	ldr	r3, [pc, #556]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a8a      	ldr	r2, [pc, #552]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a87      	ldr	r2, [pc, #540]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a83      	ldr	r2, [pc, #524]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b81      	ldr	r3, [pc, #516]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f814 	bl	8002ce8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe f810 	bl	8002ce8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e204      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fe f800 	bl	8002ce8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fd fffc 	bl	8002ce8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f0      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b5f      	ldr	r3, [pc, #380]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b5c      	ldr	r3, [pc, #368]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c4      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b56      	ldr	r3, [pc, #344]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4952      	ldr	r1, [pc, #328]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_RCC_OscConfig+0x2b0>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fd ffb5 	bl	8002ce8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fd ffb1 	bl	8002ce8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4940      	ldr	r1, [pc, #256]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_OscConfig+0x2b0>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd ff94 	bl	8002ce8 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fd ff90 	bl	8002ce8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e184      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d030      	beq.n	8004e50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_RCC_OscConfig+0x2b4>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fd ff74 	bl	8002ce8 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fd ff70 	bl	8002ce8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e164      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e015      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <HAL_RCC_OscConfig+0x2b4>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fd ff5d 	bl	8002ce8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fd ff59 	bl	8002ce8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e14d      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80a0 	beq.w	8004f9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d121      	bne.n	8004ede <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a07      	ldr	r2, [pc, #28]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd ff1f 	bl	8002ce8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e011      	b.n	8004ed2 <HAL_RCC_OscConfig+0x2ce>
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	42470000 	.word	0x42470000
 8004eb8:	42470e80 	.word	0x42470e80
 8004ebc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec0:	f7fd ff12 	bl	8002ce8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e106      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_RCC_OscConfig+0x4e4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x2f0>
 8004ee6:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a80      	ldr	r2, [pc, #512]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	e01c      	b.n	8004f2e <HAL_RCC_OscConfig+0x32a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x312>
 8004efc:	4b7b      	ldr	r3, [pc, #492]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a7a      	ldr	r2, [pc, #488]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f02:	f043 0304 	orr.w	r3, r3, #4
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	4b78      	ldr	r3, [pc, #480]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	e00b      	b.n	8004f2e <HAL_RCC_OscConfig+0x32a>
 8004f16:	4b75      	ldr	r3, [pc, #468]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a74      	ldr	r2, [pc, #464]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a71      	ldr	r2, [pc, #452]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f28:	f023 0304 	bic.w	r3, r3, #4
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d015      	beq.n	8004f62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd fed7 	bl	8002ce8 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fd fed3 	bl	8002ce8 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0c5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ee      	beq.n	8004f3e <HAL_RCC_OscConfig+0x33a>
 8004f60:	e014      	b.n	8004f8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fd fec1 	bl	8002ce8 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f68:	e00a      	b.n	8004f80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6a:	f7fd febd 	bl	8002ce8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0af      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f80:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ee      	bne.n	8004f6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f92:	4b56      	ldr	r3, [pc, #344]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	4a55      	ldr	r2, [pc, #340]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 809b 	beq.w	80050de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d05c      	beq.n	800506e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d141      	bne.n	8005040 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd fe91 	bl	8002ce8 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fca:	f7fd fe8d 	bl	8002ce8 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e081      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	019b      	lsls	r3, r3, #6
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	3b01      	subs	r3, #1
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	4937      	ldr	r1, [pc, #220]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fd fe66 	bl	8002ce8 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005020:	f7fd fe62 	bl	8002ce8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e056      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x41c>
 800503e:	e04e      	b.n	80050de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fd fe4f 	bl	8002ce8 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7fd fe4b 	bl	8002ce8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e03f      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005060:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f0      	bne.n	800504e <HAL_RCC_OscConfig+0x44a>
 800506c:	e037      	b.n	80050de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e032      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d028      	beq.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d121      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d11a      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40007000 	.word	0x40007000
 80050ec:	40023800 	.word	0x40023800
 80050f0:	42470060 	.word	0x42470060

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fd fd80 	bl	8002ce8 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fd fd7c 	bl	8002ce8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fce0 	bl	8002c60 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	0800dd88 	.word	0x0800dd88
 80052b8:	20000000 	.word	0x20000000
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b5b0      	push	{r4, r5, r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c6:	2100      	movs	r1, #0
 80052c8:	6079      	str	r1, [r7, #4]
 80052ca:	2100      	movs	r1, #0
 80052cc:	60f9      	str	r1, [r7, #12]
 80052ce:	2100      	movs	r1, #0
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052d2:	2100      	movs	r1, #0
 80052d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d6:	4952      	ldr	r1, [pc, #328]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 80052d8:	6889      	ldr	r1, [r1, #8]
 80052da:	f001 010c 	and.w	r1, r1, #12
 80052de:	2908      	cmp	r1, #8
 80052e0:	d00d      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x3e>
 80052e2:	2908      	cmp	r1, #8
 80052e4:	f200 8094 	bhi.w	8005410 <HAL_RCC_GetSysClockFreq+0x150>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x32>
 80052ec:	2904      	cmp	r1, #4
 80052ee:	d003      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x38>
 80052f0:	e08e      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f2:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <HAL_RCC_GetSysClockFreq+0x164>)
 80052f4:	60bb      	str	r3, [r7, #8]
       break;
 80052f6:	e08e      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052f8:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 80052fa:	60bb      	str	r3, [r7, #8]
      break;
 80052fc:	e08b      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052fe:	4948      	ldr	r1, [pc, #288]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005300:	6849      	ldr	r1, [r1, #4]
 8005302:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005306:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005308:	4945      	ldr	r1, [pc, #276]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 800530a:	6849      	ldr	r1, [r1, #4]
 800530c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005310:	2900      	cmp	r1, #0
 8005312:	d024      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005314:	4942      	ldr	r1, [pc, #264]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005316:	6849      	ldr	r1, [r1, #4]
 8005318:	0989      	lsrs	r1, r1, #6
 800531a:	4608      	mov	r0, r1
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	ea00 0204 	and.w	r2, r0, r4
 800532c:	ea01 0305 	and.w	r3, r1, r5
 8005330:	493d      	ldr	r1, [pc, #244]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 8005332:	fb01 f003 	mul.w	r0, r1, r3
 8005336:	2100      	movs	r1, #0
 8005338:	fb01 f102 	mul.w	r1, r1, r2
 800533c:	1844      	adds	r4, r0, r1
 800533e:	493a      	ldr	r1, [pc, #232]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 8005340:	fba2 0101 	umull	r0, r1, r2, r1
 8005344:	1863      	adds	r3, r4, r1
 8005346:	4619      	mov	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f7fb fc3a 	bl	8000bc8 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e04a      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	461a      	mov	r2, r3
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	ea02 0400 	and.w	r4, r2, r0
 8005376:	ea03 0501 	and.w	r5, r3, r1
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	014b      	lsls	r3, r1, #5
 8005388:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800538c:	0142      	lsls	r2, r0, #5
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	1b00      	subs	r0, r0, r4
 8005394:	eb61 0105 	sbc.w	r1, r1, r5
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	018b      	lsls	r3, r1, #6
 80053a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053a6:	0182      	lsls	r2, r0, #6
 80053a8:	1a12      	subs	r2, r2, r0
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	f04f 0000 	mov.w	r0, #0
 80053b2:	f04f 0100 	mov.w	r1, #0
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053bc:	00d0      	lsls	r0, r2, #3
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	1912      	adds	r2, r2, r4
 80053c4:	eb45 0303 	adc.w	r3, r5, r3
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	0299      	lsls	r1, r3, #10
 80053d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053d6:	0290      	lsls	r0, r2, #10
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	f7fb fbee 	bl	8000bc8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	3301      	adds	r3, #1
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	60bb      	str	r3, [r7, #8]
      break;
 800540e:	e002      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_RCC_GetSysClockFreq+0x164>)
 8005412:	60bb      	str	r3, [r7, #8]
      break;
 8005414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005416:	68bb      	ldr	r3, [r7, #8]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	00f42400 	.word	0x00f42400
 8005428:	016e3600 	.word	0x016e3600

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000000 	.word	0x20000000

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a9b      	lsrs	r3, r3, #10
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	0800dd98 	.word	0x0800dd98

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005470:	f7ff ffdc 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0b5b      	lsrs	r3, r3, #13
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	0800dd98 	.word	0x0800dd98

08005494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07b      	b.n	800559e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d009      	beq.n	80054cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e005      	b.n	80054cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc fe52 	bl	8002190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0104 	and.w	r1, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0210 	and.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b088      	sub	sp, #32
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_SPI_Transmit+0x22>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e126      	b.n	8005816 <HAL_SPI_Transmit+0x270>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d0:	f7fd fb8a 	bl	8002ce8 <HAL_GetTick>
 80055d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
 80055e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ea:	e10b      	b.n	8005804 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_SPI_Transmit+0x52>
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055fc:	e102      	b.n	8005804 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005644:	d10f      	bne.n	8005666 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d007      	beq.n	8005684 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568c:	d14b      	bne.n	8005726 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0xf6>
 8005696:	8afb      	ldrh	r3, [r7, #22]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d13e      	bne.n	800571a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	881a      	ldrh	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	1c9a      	adds	r2, r3, #2
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056c0:	e02b      	b.n	800571a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d112      	bne.n	80056f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056f4:	e011      	b.n	800571a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f6:	f7fd faf7 	bl	8002ce8 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d803      	bhi.n	800570e <HAL_SPI_Transmit+0x168>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Transmit+0x16e>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005718:	e074      	b.n	8005804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1ce      	bne.n	80056c2 <HAL_SPI_Transmit+0x11c>
 8005724:	e04c      	b.n	80057c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Transmit+0x18e>
 800572e:	8afb      	ldrh	r3, [r7, #22]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d140      	bne.n	80057b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800575a:	e02c      	b.n	80057b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d113      	bne.n	8005792 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005790:	e011      	b.n	80057b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005792:	f7fd faa9 	bl	8002ce8 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d803      	bhi.n	80057aa <HAL_SPI_Transmit+0x204>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d102      	bne.n	80057b0 <HAL_SPI_Transmit+0x20a>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057b4:	e026      	b.n	8005804 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1cd      	bne.n	800575c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fbcb 	bl	8005f60 <SPI_EndRxTxTransaction>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e000      	b.n	8005804 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005814:	7ffb      	ldrb	r3, [r7, #31]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b088      	sub	sp, #32
 8005822:	af02      	add	r7, sp, #8
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583a:	d112      	bne.n	8005862 <HAL_SPI_Receive+0x44>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10e      	bne.n	8005862 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2204      	movs	r2, #4
 8005848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f8f1 	bl	8005a40 <HAL_SPI_TransmitReceive>
 800585e:	4603      	mov	r3, r0
 8005860:	e0ea      	b.n	8005a38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_SPI_Receive+0x52>
 800586c:	2302      	movs	r3, #2
 800586e:	e0e3      	b.n	8005a38 <HAL_SPI_Receive+0x21a>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005878:	f7fd fa36 	bl	8002ce8 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d002      	beq.n	8005890 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800588e:	e0ca      	b.n	8005a26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_SPI_Receive+0x7e>
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058a0:	e0c1      	b.n	8005a26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2204      	movs	r2, #4
 80058a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e8:	d10f      	bne.n	800590a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d007      	beq.n	8005928 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005926:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d162      	bne.n	80059f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005930:	e02e      	b.n	8005990 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d115      	bne.n	800596c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f103 020c 	add.w	r2, r3, #12
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800596a:	e011      	b.n	8005990 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596c:	f7fd f9bc 	bl	8002ce8 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d803      	bhi.n	8005984 <HAL_SPI_Receive+0x166>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d102      	bne.n	800598a <HAL_SPI_Receive+0x16c>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800598e:	e04a      	b.n	8005a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <HAL_SPI_Receive+0x114>
 800599a:	e031      	b.n	8005a00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d113      	bne.n	80059d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	b292      	uxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059d0:	e011      	b.n	80059f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d2:	f7fd f989 	bl	8002ce8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d803      	bhi.n	80059ea <HAL_SPI_Receive+0x1cc>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d102      	bne.n	80059f0 <HAL_SPI_Receive+0x1d2>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059f4:	e017      	b.n	8005a26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1cd      	bne.n	800599c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fa45 	bl	8005e94 <SPI_EndRxTransaction>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
 8005a22:	e000      	b.n	8005a26 <HAL_SPI_Receive+0x208>
  }

error :
 8005a24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x26>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e18a      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x33c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fd f93b 	bl	8002ce8 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a84:	887b      	ldrh	r3, [r7, #2]
 8005a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00f      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x70>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d107      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x68>
 8005aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d003      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aae:	e15b      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x82>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x82>
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac8:	e14e      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d003      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2205      	movs	r2, #5
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d007      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d178      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x10a>
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d166      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6e:	e053      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d016      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d113      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d119      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d014      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	1c9a      	adds	r2, r3, #2
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bf8:	f7fd f876 	bl	8002ce8 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d807      	bhi.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d003      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c16:	e0a7      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1a6      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x130>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a1      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x130>
 8005c2c:	e07c      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x1fc>
 8005c36:	8b7b      	ldrh	r3, [r7, #26]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d16b      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c62:	e057      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d11c      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d017      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d114      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d119      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x2ae>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d014      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cea:	2301      	movs	r3, #1
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cee:	f7fc fffb 	bl	8002ce8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d803      	bhi.n	8005d06 <HAL_SPI_TransmitReceive+0x2c6>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d102      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x2cc>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d12:	e029      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1a2      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x224>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d19d      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f917 	bl	8005f60 <SPI_EndRxTxTransaction>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d44:	e010      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	e000      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d94:	f7fc ffa8 	bl	8002ce8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4413      	add	r3, r2
 8005da2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005da4:	f7fc ffa0 	bl	8002ce8 <HAL_GetTick>
 8005da8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	0d1b      	lsrs	r3, r3, #20
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dba:	e054      	b.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d050      	beq.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc4:	f7fc ff90 	bl	8002ce8 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d902      	bls.n	8005dda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d13d      	bne.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df2:	d111      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	d004      	beq.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d107      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e20:	d10f      	bne.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e017      	b.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d19b      	bne.n	8005dbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea8:	d111      	bne.n	8005ece <SPI_EndRxTransaction+0x3a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb2:	d004      	beq.n	8005ebe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebc:	d107      	bne.n	8005ece <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed6:	d12a      	bne.n	8005f2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee0:	d012      	beq.n	8005f08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff49 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02d      	beq.n	8005f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e026      	b.n	8005f56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2101      	movs	r1, #1
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff ff36 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01a      	beq.n	8005f54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e013      	b.n	8005f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	2101      	movs	r1, #1
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff ff23 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e000      	b.n	8005f56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <SPI_EndRxTxTransaction+0x7c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <SPI_EndRxTxTransaction+0x80>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0d5b      	lsrs	r3, r3, #21
 8005f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f7c:	fb02 f303 	mul.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8a:	d112      	bne.n	8005fb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fef4 	bl	8005d84 <SPI_WaitFlagStateUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e00f      	b.n	8005fd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d0f2      	beq.n	8005fb2 <SPI_EndRxTxTransaction+0x52>
 8005fcc:	e000      	b.n	8005fd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fce:	bf00      	nop
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000000 	.word	0x20000000
 8005fe0:	165e9f81 	.word	0x165e9f81

08005fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e041      	b.n	800607a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fbe4 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f000 f8f4 	bl	8006210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_TIM_ConfigClockSource+0x1c>
 800609a:	2302      	movs	r3, #2
 800609c:	e0b4      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x186>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d6:	d03e      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0xd4>
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	f200 8087 	bhi.w	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	f000 8086 	beq.w	80061f4 <HAL_TIM_ConfigClockSource+0x172>
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d87f      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	2b70      	cmp	r3, #112	; 0x70
 80060f0:	d01a      	beq.n	8006128 <HAL_TIM_ConfigClockSource+0xa6>
 80060f2:	2b70      	cmp	r3, #112	; 0x70
 80060f4:	d87b      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 80060f6:	2b60      	cmp	r3, #96	; 0x60
 80060f8:	d050      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x11a>
 80060fa:	2b60      	cmp	r3, #96	; 0x60
 80060fc:	d877      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 80060fe:	2b50      	cmp	r3, #80	; 0x50
 8006100:	d03c      	beq.n	800617c <HAL_TIM_ConfigClockSource+0xfa>
 8006102:	2b50      	cmp	r3, #80	; 0x50
 8006104:	d873      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d058      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x13a>
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d86f      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d064      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0x15a>
 8006112:	2b30      	cmp	r3, #48	; 0x30
 8006114:	d86b      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 8006116:	2b20      	cmp	r3, #32
 8006118:	d060      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0x15a>
 800611a:	2b20      	cmp	r3, #32
 800611c:	d867      	bhi.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d05c      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0x15a>
 8006122:	2b10      	cmp	r3, #16
 8006124:	d05a      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0x15a>
 8006126:	e062      	b.n	80061ee <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6899      	ldr	r1, [r3, #8]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f000 f984 	bl	8006444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800614a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
      break;
 8006154:	e04f      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f000 f96d 	bl	8006444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006178:	609a      	str	r2, [r3, #8]
      break;
 800617a:	e03c      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	6859      	ldr	r1, [r3, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	461a      	mov	r2, r3
 800618a:	f000 f8e1 	bl	8006350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2150      	movs	r1, #80	; 0x50
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f93a 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 800619a:	e02c      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f000 f900 	bl	80063ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2160      	movs	r1, #96	; 0x60
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 f92a 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 80061ba:	e01c      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	461a      	mov	r2, r3
 80061ca:	f000 f8c1 	bl	8006350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2140      	movs	r1, #64	; 0x40
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 f91a 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 80061da:	e00c      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f000 f911 	bl	800640e <TIM_ITRx_SetConfig>
      break;
 80061ec:	e003      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      break;
 80061f2:	e000      	b.n	80061f6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a40      	ldr	r2, [pc, #256]	; (8006324 <TIM_Base_SetConfig+0x114>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d013      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d00f      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3d      	ldr	r2, [pc, #244]	; (8006328 <TIM_Base_SetConfig+0x118>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3c      	ldr	r2, [pc, #240]	; (800632c <TIM_Base_SetConfig+0x11c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3b      	ldr	r2, [pc, #236]	; (8006330 <TIM_Base_SetConfig+0x120>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3a      	ldr	r2, [pc, #232]	; (8006334 <TIM_Base_SetConfig+0x124>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d108      	bne.n	8006262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <TIM_Base_SetConfig+0x114>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d02b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d027      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <TIM_Base_SetConfig+0x118>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d023      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2b      	ldr	r2, [pc, #172]	; (800632c <TIM_Base_SetConfig+0x11c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01f      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <TIM_Base_SetConfig+0x120>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a29      	ldr	r2, [pc, #164]	; (8006334 <TIM_Base_SetConfig+0x124>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d017      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a28      	ldr	r2, [pc, #160]	; (8006338 <TIM_Base_SetConfig+0x128>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <TIM_Base_SetConfig+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00f      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a26      	ldr	r2, [pc, #152]	; (8006340 <TIM_Base_SetConfig+0x130>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <TIM_Base_SetConfig+0x134>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <TIM_Base_SetConfig+0x138>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a23      	ldr	r2, [pc, #140]	; (800634c <TIM_Base_SetConfig+0x13c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <TIM_Base_SetConfig+0x114>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0xf8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <TIM_Base_SetConfig+0x124>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d103      	bne.n	8006310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	615a      	str	r2, [r3, #20]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40010400 	.word	0x40010400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800
 8006344:	40001800 	.word	0x40001800
 8006348:	40001c00 	.word	0x40001c00
 800634c:	40002000 	.word	0x40002000

08006350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800637a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 030a 	bic.w	r3, r3, #10
 800638c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0210 	bic.w	r2, r3, #16
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	f043 0307 	orr.w	r3, r3, #7
 8006430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	609a      	str	r2, [r3, #8]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	021a      	lsls	r2, r3, #8
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	431a      	orrs	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4313      	orrs	r3, r2
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	609a      	str	r2, [r3, #8]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e05a      	b.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a21      	ldr	r2, [pc, #132]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d01d      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1a      	ldr	r2, [pc, #104]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a18      	ldr	r2, [pc, #96]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a17      	ldr	r2, [pc, #92]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d10c      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40014000 	.word	0x40014000
 8006578:	40001800 	.word	0x40001800

0800657c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e03f      	b.n	800660e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fc fa0e 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fd7b 	bl	80070bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08a      	sub	sp, #40	; 0x28
 800661a:	af02      	add	r7, sp, #8
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b20      	cmp	r3, #32
 8006634:	d17c      	bne.n	8006730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_Transmit+0x2c>
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e075      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x3e>
 8006650:	2302      	movs	r3, #2
 8006652:	e06e      	b.n	8006732 <HAL_UART_Transmit+0x11c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2221      	movs	r2, #33	; 0x21
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666a:	f7fc fb3d 	bl	8002ce8 <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d108      	bne.n	8006698 <HAL_UART_Transmit+0x82>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e003      	b.n	80066a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066a8:	e02a      	b.n	8006700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 faf9 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e036      	b.n	8006732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3302      	adds	r3, #2
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e007      	b.n	80066f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1cf      	bne.n	80066aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	2140      	movs	r1, #64	; 0x40
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fac9 	bl	8006cac <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b0ba      	sub	sp, #232	; 0xe8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800677a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fbd3 	bl	8006f46 <UART_Receive_IT>
      return;
 80067a0:	e256      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80de 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
 80067ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80d1 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
 800681a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f043 0204 	orr.w	r2, r3, #4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0208 	orr.w	r2, r3, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 81ed 	beq.w	8006c46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb5e 	bl	8006f46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_UART_IRQHandler+0x17a>
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d04f      	beq.n	8006956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa66 	bl	8006d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d141      	bne.n	800694e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800690e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d9      	bne.n	80068ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	2b00      	cmp	r3, #0
 800691c:	d013      	beq.n	8006946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_UART_IRQHandler+0x3dc>)
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	4618      	mov	r0, r3
 800692c:	f7fc fdff 	bl	800352e <HAL_DMA_Abort_IT>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00e      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f99a 	bl	8006c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00a      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f996 	bl	8006c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e006      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f992 	bl	8006c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006962:	e170      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	bf00      	nop
    return;
 8006966:	e16e      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 814a 	bne.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8143 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 813c 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	f040 80b4 	bne.w	8006b1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8140 	beq.w	8006c4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f080 8139 	bcs.w	8006c4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	f000 8088 	beq.w	8006afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1d9      	bne.n	80069ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3314      	adds	r3, #20
 8006a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e1      	bne.n	8006a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fca8 	bl	800344e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8c0 	bl	8006c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b14:	e099      	b.n	8006c4a <HAL_UART_IRQHandler+0x50e>
 8006b16:	bf00      	nop
 8006b18:	08006e4f 	.word	0x08006e4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 808b 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8086 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	330c      	adds	r3, #12
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b66:	647a      	str	r2, [r7, #68]	; 0x44
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e3      	bne.n	8006b7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006be4:	61fa      	str	r2, [r7, #28]
 8006be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e3      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f848 	bl	8006c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c04:	e023      	b.n	8006c4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f929 	bl	8006e76 <UART_Transmit_IT>
    return;
 8006c24:	e014      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
 8006c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f969 	bl	8006f16 <UART_EndTransmit_IT>
    return;
 8006c44:	e004      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    return;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	37e8      	adds	r7, #232	; 0xe8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop

08006c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b090      	sub	sp, #64	; 0x40
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbc:	e050      	b.n	8006d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d04c      	beq.n	8006d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8006ccc:	f7fc f80c 	bl	8002ce8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d241      	bcs.n	8006d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e5      	bne.n	8006cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d30:	623a      	str	r2, [r7, #32]
 8006d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69f9      	ldr	r1, [r7, #28]
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e5      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e00f      	b.n	8006d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d09f      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3740      	adds	r7, #64	; 0x40
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b095      	sub	sp, #84	; 0x54
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006db0:	643a      	str	r2, [r7, #64]	; 0x40
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e5      	bne.n	8006d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e5      	bne.n	8006dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d119      	bne.n	8006e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f023 0310 	bic.w	r3, r3, #16
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e20:	61ba      	str	r2, [r7, #24]
 8006e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e5      	bne.n	8006e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e42:	bf00      	nop
 8006e44:	3754      	adds	r7, #84	; 0x54
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff ff09 	bl	8006c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b21      	cmp	r3, #33	; 0x21
 8006e88:	d13e      	bne.n	8006f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e92:	d114      	bne.n	8006ebe <UART_Transmit_IT+0x48>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d110      	bne.n	8006ebe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	1c9a      	adds	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]
 8006ebc:	e008      	b.n	8006ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6211      	str	r1, [r2, #32]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4619      	mov	r1, r3
 8006ede:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10f      	bne.n	8006f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fe8e 	bl	8006c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08c      	sub	sp, #48	; 0x30
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b22      	cmp	r3, #34	; 0x22
 8006f58:	f040 80ab 	bne.w	80070b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d117      	bne.n	8006f96 <UART_Receive_IT+0x50>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d113      	bne.n	8006f96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	1c9a      	adds	r2, r3, #2
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	629a      	str	r2, [r3, #40]	; 0x28
 8006f94:	e026      	b.n	8006fe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d007      	beq.n	8006fba <UART_Receive_IT+0x74>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <UART_Receive_IT+0x82>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e008      	b.n	8006fda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d15a      	bne.n	80070ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0220 	bic.w	r2, r2, #32
 8007006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0201 	bic.w	r2, r2, #1
 8007026:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d135      	bne.n	80070a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	613b      	str	r3, [r7, #16]
   return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f023 0310 	bic.w	r3, r3, #16
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705e:	623a      	str	r2, [r7, #32]
 8007060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	69f9      	ldr	r1, [r7, #28]
 8007064:	6a3a      	ldr	r2, [r7, #32]
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	61bb      	str	r3, [r7, #24]
   return(result);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e5      	bne.n	800703e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d10a      	bne.n	8007096 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fdf9 	bl	8006c94 <HAL_UARTEx_RxEventCallback>
 80070a2:	e002      	b.n	80070aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fde1 	bl	8006c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e002      	b.n	80070b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e000      	b.n	80070b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070b2:	2302      	movs	r3, #2
  }
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3730      	adds	r7, #48	; 0x30
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b09f      	sub	sp, #124	; 0x7c
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d2:	68d9      	ldr	r1, [r3, #12]
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	ea40 0301 	orr.w	r3, r0, r1
 80070dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007100:	f021 010c 	bic.w	r1, r1, #12
 8007104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800710a:	430b      	orrs	r3, r1
 800710c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	6999      	ldr	r1, [r3, #24]
 800711c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	ea40 0301 	orr.w	r3, r0, r1
 8007124:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4bc5      	ldr	r3, [pc, #788]	; (8007440 <UART_SetConfig+0x384>)
 800712c:	429a      	cmp	r2, r3
 800712e:	d004      	beq.n	800713a <UART_SetConfig+0x7e>
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4bc3      	ldr	r3, [pc, #780]	; (8007444 <UART_SetConfig+0x388>)
 8007136:	429a      	cmp	r2, r3
 8007138:	d103      	bne.n	8007142 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800713a:	f7fe f997 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 800713e:	6778      	str	r0, [r7, #116]	; 0x74
 8007140:	e002      	b.n	8007148 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fe f97f 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8007146:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007150:	f040 80b6 	bne.w	80072c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007156:	461c      	mov	r4, r3
 8007158:	f04f 0500 	mov.w	r5, #0
 800715c:	4622      	mov	r2, r4
 800715e:	462b      	mov	r3, r5
 8007160:	1891      	adds	r1, r2, r2
 8007162:	6439      	str	r1, [r7, #64]	; 0x40
 8007164:	415b      	adcs	r3, r3
 8007166:	647b      	str	r3, [r7, #68]	; 0x44
 8007168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800716c:	1912      	adds	r2, r2, r4
 800716e:	eb45 0303 	adc.w	r3, r5, r3
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f04f 0100 	mov.w	r1, #0
 800717a:	00d9      	lsls	r1, r3, #3
 800717c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007180:	00d0      	lsls	r0, r2, #3
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	1911      	adds	r1, r2, r4
 8007188:	6639      	str	r1, [r7, #96]	; 0x60
 800718a:	416b      	adcs	r3, r5
 800718c:	667b      	str	r3, [r7, #100]	; 0x64
 800718e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	1891      	adds	r1, r2, r2
 800719a:	63b9      	str	r1, [r7, #56]	; 0x38
 800719c:	415b      	adcs	r3, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071a8:	f7f9 fd0e 	bl	8000bc8 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4ba5      	ldr	r3, [pc, #660]	; (8007448 <UART_SetConfig+0x38c>)
 80071b2:	fba3 2302 	umull	r2, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	011e      	lsls	r6, r3, #4
 80071ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071bc:	461c      	mov	r4, r3
 80071be:	f04f 0500 	mov.w	r5, #0
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	1891      	adds	r1, r2, r2
 80071c8:	6339      	str	r1, [r7, #48]	; 0x30
 80071ca:	415b      	adcs	r3, r3
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071d2:	1912      	adds	r2, r2, r4
 80071d4:	eb45 0303 	adc.w	r3, r5, r3
 80071d8:	f04f 0000 	mov.w	r0, #0
 80071dc:	f04f 0100 	mov.w	r1, #0
 80071e0:	00d9      	lsls	r1, r3, #3
 80071e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e6:	00d0      	lsls	r0, r2, #3
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	1911      	adds	r1, r2, r4
 80071ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80071f0:	416b      	adcs	r3, r5
 80071f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	1891      	adds	r1, r2, r2
 8007200:	62b9      	str	r1, [r7, #40]	; 0x28
 8007202:	415b      	adcs	r3, r3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800720a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800720e:	f7f9 fcdb 	bl	8000bc8 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4b8c      	ldr	r3, [pc, #560]	; (8007448 <UART_SetConfig+0x38c>)
 8007218:	fba3 1302 	umull	r1, r3, r3, r2
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	2164      	movs	r1, #100	; 0x64
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	3332      	adds	r3, #50	; 0x32
 800722a:	4a87      	ldr	r2, [pc, #540]	; (8007448 <UART_SetConfig+0x38c>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007238:	441e      	add	r6, r3
 800723a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723c:	4618      	mov	r0, r3
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	1894      	adds	r4, r2, r2
 8007248:	623c      	str	r4, [r7, #32]
 800724a:	415b      	adcs	r3, r3
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
 800724e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007252:	1812      	adds	r2, r2, r0
 8007254:	eb41 0303 	adc.w	r3, r1, r3
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	f04f 0500 	mov.w	r5, #0
 8007260:	00dd      	lsls	r5, r3, #3
 8007262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007266:	00d4      	lsls	r4, r2, #3
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	1814      	adds	r4, r2, r0
 800726e:	653c      	str	r4, [r7, #80]	; 0x50
 8007270:	414b      	adcs	r3, r1
 8007272:	657b      	str	r3, [r7, #84]	; 0x54
 8007274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	461a      	mov	r2, r3
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	1891      	adds	r1, r2, r2
 8007280:	61b9      	str	r1, [r7, #24]
 8007282:	415b      	adcs	r3, r3
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800728a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800728e:	f7f9 fc9b 	bl	8000bc8 <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4b6c      	ldr	r3, [pc, #432]	; (8007448 <UART_SetConfig+0x38c>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	2164      	movs	r1, #100	; 0x64
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	3332      	adds	r3, #50	; 0x32
 80072aa:	4a67      	ldr	r2, [pc, #412]	; (8007448 <UART_SetConfig+0x38c>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f003 0207 	and.w	r2, r3, #7
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4432      	add	r2, r6
 80072bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072be:	e0b9      	b.n	8007434 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c2:	461c      	mov	r4, r3
 80072c4:	f04f 0500 	mov.w	r5, #0
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	6139      	str	r1, [r7, #16]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072d8:	1912      	adds	r2, r2, r4
 80072da:	eb45 0303 	adc.w	r3, r5, r3
 80072de:	f04f 0000 	mov.w	r0, #0
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	00d9      	lsls	r1, r3, #3
 80072e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ec:	00d0      	lsls	r0, r2, #3
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	eb12 0804 	adds.w	r8, r2, r4
 80072f6:	eb43 0905 	adc.w	r9, r3, r5
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	008b      	lsls	r3, r1, #2
 800730e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007312:	0082      	lsls	r2, r0, #2
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 fc56 	bl	8000bc8 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4b49      	ldr	r3, [pc, #292]	; (8007448 <UART_SetConfig+0x38c>)
 8007322:	fba3 2302 	umull	r2, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	011e      	lsls	r6, r3, #4
 800732a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732c:	4618      	mov	r0, r3
 800732e:	f04f 0100 	mov.w	r1, #0
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	1894      	adds	r4, r2, r2
 8007338:	60bc      	str	r4, [r7, #8]
 800733a:	415b      	adcs	r3, r3
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007342:	1812      	adds	r2, r2, r0
 8007344:	eb41 0303 	adc.w	r3, r1, r3
 8007348:	f04f 0400 	mov.w	r4, #0
 800734c:	f04f 0500 	mov.w	r5, #0
 8007350:	00dd      	lsls	r5, r3, #3
 8007352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007356:	00d4      	lsls	r4, r2, #3
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	1814      	adds	r4, r2, r0
 800735e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007360:	414b      	adcs	r3, r1
 8007362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800737c:	0082      	lsls	r2, r0, #2
 800737e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007382:	f7f9 fc21 	bl	8000bc8 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4b2f      	ldr	r3, [pc, #188]	; (8007448 <UART_SetConfig+0x38c>)
 800738c:	fba3 1302 	umull	r1, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	2164      	movs	r1, #100	; 0x64
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	3332      	adds	r3, #50	; 0x32
 800739e:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <UART_SetConfig+0x38c>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073aa:	441e      	add	r6, r3
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	4618      	mov	r0, r3
 80073b0:	f04f 0100 	mov.w	r1, #0
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	1894      	adds	r4, r2, r2
 80073ba:	603c      	str	r4, [r7, #0]
 80073bc:	415b      	adcs	r3, r3
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	1812      	adds	r2, r2, r0
 80073c6:	eb41 0303 	adc.w	r3, r1, r3
 80073ca:	f04f 0400 	mov.w	r4, #0
 80073ce:	f04f 0500 	mov.w	r5, #0
 80073d2:	00dd      	lsls	r5, r3, #3
 80073d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073d8:	00d4      	lsls	r4, r2, #3
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	eb12 0a00 	adds.w	sl, r2, r0
 80073e2:	eb43 0b01 	adc.w	fp, r3, r1
 80073e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	008b      	lsls	r3, r1, #2
 80073fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073fe:	0082      	lsls	r2, r0, #2
 8007400:	4650      	mov	r0, sl
 8007402:	4659      	mov	r1, fp
 8007404:	f7f9 fbe0 	bl	8000bc8 <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <UART_SetConfig+0x38c>)
 800740e:	fba3 1302 	umull	r1, r3, r3, r2
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	2164      	movs	r1, #100	; 0x64
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	3332      	adds	r3, #50	; 0x32
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <UART_SetConfig+0x38c>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4432      	add	r2, r6
 8007432:	609a      	str	r2, [r3, #8]
}
 8007434:	bf00      	nop
 8007436:	377c      	adds	r7, #124	; 0x7c
 8007438:	46bd      	mov	sp, r7
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	bf00      	nop
 8007440:	40011000 	.word	0x40011000
 8007444:	40011400 	.word	0x40011400
 8007448:	51eb851f 	.word	0x51eb851f

0800744c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 001c 	add.w	r0, r7, #28
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b01      	cmp	r3, #1
 8007462:	d122      	bne.n	80074aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fb1c 	bl	8008adc <USB_CoreReset>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e01a      	b.n	80074e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fb10 	bl	8008adc <USB_CoreReset>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
 80074d2:	e005      	b.n	80074e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10b      	bne.n	80074fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f043 0206 	orr.w	r2, r3, #6
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750a:	b004      	add	sp, #16
 800750c:	4770      	bx	lr
	...

08007510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d165      	bne.n	80075f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a41      	ldr	r2, [pc, #260]	; (800762c <USB_SetTurnaroundTime+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d906      	bls.n	800753a <USB_SetTurnaroundTime+0x2a>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a40      	ldr	r2, [pc, #256]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d202      	bcs.n	800753a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007534:	230f      	movs	r3, #15
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e062      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d306      	bcc.n	8007550 <USB_SetTurnaroundTime+0x40>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d202      	bcs.n	8007550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800754a:	230e      	movs	r3, #14
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e057      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a38      	ldr	r2, [pc, #224]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d306      	bcc.n	8007566 <USB_SetTurnaroundTime+0x56>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a37      	ldr	r2, [pc, #220]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d202      	bcs.n	8007566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007560:	230d      	movs	r3, #13
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e04c      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d306      	bcc.n	800757c <USB_SetTurnaroundTime+0x6c>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d802      	bhi.n	800757c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007576:	230c      	movs	r3, #12
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	e041      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d906      	bls.n	8007592 <USB_SetTurnaroundTime+0x82>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a2e      	ldr	r2, [pc, #184]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d802      	bhi.n	8007592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800758c:	230b      	movs	r3, #11
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e036      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d906      	bls.n	80075a8 <USB_SetTurnaroundTime+0x98>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a29      	ldr	r2, [pc, #164]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d802      	bhi.n	80075a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075a2:	230a      	movs	r3, #10
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e02b      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d906      	bls.n	80075be <USB_SetTurnaroundTime+0xae>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d202      	bcs.n	80075be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075b8:	2309      	movs	r3, #9
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e020      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d306      	bcc.n	80075d4 <USB_SetTurnaroundTime+0xc4>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d802      	bhi.n	80075d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075ce:	2308      	movs	r3, #8
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e015      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d906      	bls.n	80075ea <USB_SetTurnaroundTime+0xda>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <USB_SetTurnaroundTime+0x140>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d202      	bcs.n	80075ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075e4:	2307      	movs	r3, #7
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e00a      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075ea:	2306      	movs	r3, #6
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e007      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075f6:	2309      	movs	r3, #9
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e001      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075fc:	2309      	movs	r3, #9
 80075fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	00d8acbf 	.word	0x00d8acbf
 8007630:	00e4e1c0 	.word	0x00e4e1c0
 8007634:	00f42400 	.word	0x00f42400
 8007638:	01067380 	.word	0x01067380
 800763c:	011a499f 	.word	0x011a499f
 8007640:	01312cff 	.word	0x01312cff
 8007644:	014ca43f 	.word	0x014ca43f
 8007648:	016e3600 	.word	0x016e3600
 800764c:	01a6ab1f 	.word	0x01a6ab1f
 8007650:	01e84800 	.word	0x01e84800

08007654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f043 0201 	orr.w	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d115      	bne.n	80076e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076c6:	2001      	movs	r0, #1
 80076c8:	f7fb fb1a 	bl	8002d00 <HAL_Delay>
      ms++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 f972 	bl	80089bc <USB_GetMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d01e      	beq.n	800771c <USB_SetCurrentMode+0x84>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b31      	cmp	r3, #49	; 0x31
 80076e2:	d9f0      	bls.n	80076c6 <USB_SetCurrentMode+0x2e>
 80076e4:	e01a      	b.n	800771c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076f8:	2001      	movs	r0, #1
 80076fa:	f7fb fb01 	bl	8002d00 <HAL_Delay>
      ms++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f959 	bl	80089bc <USB_GetMode>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <USB_SetCurrentMode+0x84>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b31      	cmp	r3, #49	; 0x31
 8007714:	d9f0      	bls.n	80076f8 <USB_SetCurrentMode+0x60>
 8007716:	e001      	b.n	800771c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e005      	b.n	8007728 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b32      	cmp	r3, #50	; 0x32
 8007720:	d101      	bne.n	8007726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007730:	b084      	sub	sp, #16
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800773e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	e009      	b.n	8007764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3340      	adds	r3, #64	; 0x40
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b0e      	cmp	r3, #14
 8007768:	d9f2      	bls.n	8007750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11c      	bne.n	80077aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777e:	f043 0302 	orr.w	r3, r3, #2
 8007782:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38
 80077a8:	e00b      	b.n	80077c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077c8:	461a      	mov	r2, r3
 80077ca:	2300      	movs	r3, #0
 80077cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	4619      	mov	r1, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077dc:	461a      	mov	r2, r3
 80077de:	680b      	ldr	r3, [r1, #0]
 80077e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d10c      	bne.n	8007802 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f945 	bl	8007a80 <USB_SetDevSpeed>
 80077f6:	e008      	b.n	800780a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f940 	bl	8007a80 <USB_SetDevSpeed>
 8007800:	e003      	b.n	800780a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007802:	2103      	movs	r1, #3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f93b 	bl	8007a80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800780a:	2110      	movs	r1, #16
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8f3 	bl	80079f8 <USB_FlushTxFifo>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f90f 	bl	8007a40 <USB_FlushRxFifo>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	461a      	mov	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	461a      	mov	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e043      	b.n	80078de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786c:	d118      	bne.n	80078a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	461a      	mov	r2, r3
 8007882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e013      	b.n	80078b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	461a      	mov	r2, r3
 8007898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e008      	b.n	80078b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	461a      	mov	r2, r3
 80078c0:	2300      	movs	r3, #0
 80078c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	461a      	mov	r2, r3
 80078d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3301      	adds	r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3b7      	bcc.n	8007856 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e043      	b.n	8007974 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007902:	d118      	bne.n	8007936 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	461a      	mov	r2, r3
 8007918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e013      	b.n	8007948 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	461a      	mov	r2, r3
 800792e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	e008      	b.n	8007948 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	2300      	movs	r3, #0
 8007946:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007954:	461a      	mov	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800796c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	3301      	adds	r3, #1
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3b7      	bcc.n	80078ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800798e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800799c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f043 0210 	orr.w	r2, r3, #16
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <USB_DevInit+0x2c4>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f043 0208 	orr.w	r2, r3, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f0:	b004      	add	sp, #16
 80079f2:	4770      	bx	lr
 80079f4:	803c3800 	.word	0x803c3800

080079f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	019b      	lsls	r3, r3, #6
 8007a0a:	f043 0220 	orr.w	r2, r3, #32
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <USB_FlushTxFifo+0x44>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d901      	bls.n	8007a22 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e006      	b.n	8007a30 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d0f1      	beq.n	8007a12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	00030d40 	.word	0x00030d40

08007a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2210      	movs	r2, #16
 8007a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	4a08      	ldr	r2, [pc, #32]	; (8007a7c <USB_FlushRxFifo+0x3c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d901      	bls.n	8007a62 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d0f1      	beq.n	8007a52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	00030d40 	.word	0x00030d40

08007a80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b087      	sub	sp, #28
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0306 	and.w	r3, r3, #6
 8007aca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]
 8007ad6:	e00a      	b.n	8007aee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d002      	beq.n	8007ae4 <USB_GetDevSpeed+0x32>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b06      	cmp	r3, #6
 8007ae2:	d102      	bne.n	8007aea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e001      	b.n	8007aee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007aea:	230f      	movs	r3, #15
 8007aec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d13a      	bne.n	8007b8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1e:	69da      	ldr	r2, [r3, #28]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	2101      	movs	r1, #1
 8007b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	68f9      	ldr	r1, [r7, #12]
 8007b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b36:	4313      	orrs	r3, r2
 8007b38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d155      	bne.n	8007bfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	78db      	ldrb	r3, [r3, #3]
 8007b6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	059b      	lsls	r3, r3, #22
 8007b72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b74:	4313      	orrs	r3, r2
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	e036      	b.n	8007bfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bac:	4313      	orrs	r3, r2
 8007bae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11a      	bne.n	8007bfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	78db      	ldrb	r3, [r3, #3]
 8007be0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007be2:	430b      	orrs	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
	...

08007c0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d161      	bne.n	8007cec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3e:	d11f      	bne.n	8007c80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	2101      	movs	r1, #1
 8007c92:	fa01 f303 	lsl.w	r3, r1, r3
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	0159      	lsls	r1, r3, #5
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	440b      	add	r3, r1
 8007cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <USB_DeactivateEndpoint+0x1b0>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	600b      	str	r3, [r1, #0]
 8007cea:	e060      	b.n	8007dae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d02:	d11f      	bne.n	8007d44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2101      	movs	r1, #1
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d64:	4013      	ands	r3, r2
 8007d66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	2101      	movs	r1, #1
 8007d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	43db      	mvns	r3, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d88:	4013      	ands	r3, r2
 8007d8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	0159      	lsls	r1, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	440b      	add	r3, r1
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	4619      	mov	r1, r3
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <USB_DeactivateEndpoint+0x1b4>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	ec337800 	.word	0xec337800
 8007dc0:	eff37800 	.word	0xeff37800

08007dc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	f040 815c 	bne.w	800809e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d132      	bne.n	8007e54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4c:	0cdb      	lsrs	r3, r3, #19
 8007e4e:	04db      	lsls	r3, r3, #19
 8007e50:	6113      	str	r3, [r2, #16]
 8007e52:	e074      	b.n	8007f3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6e:	0cdb      	lsrs	r3, r3, #19
 8007e70:	04db      	lsls	r3, r3, #19
 8007e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6959      	ldr	r1, [r3, #20]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	440b      	add	r3, r1
 8007eb0:	1e59      	subs	r1, r3, #1
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007eba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ebc:	4b9d      	ldr	r3, [pc, #628]	; (8008134 <USB_EPStartXfer+0x370>)
 8007ebe:	400b      	ands	r3, r1
 8007ec0:	69b9      	ldr	r1, [r7, #24]
 8007ec2:	0148      	lsls	r0, r1, #5
 8007ec4:	69f9      	ldr	r1, [r7, #28]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ee6:	69b9      	ldr	r1, [r7, #24]
 8007ee8:	0148      	lsls	r0, r1, #5
 8007eea:	69f9      	ldr	r1, [r7, #28]
 8007eec:	4401      	add	r1, r0
 8007eee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	78db      	ldrb	r3, [r3, #3]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d11f      	bne.n	8007f3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d14b      	bne.n	8007fdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	78db      	ldrb	r3, [r3, #3]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d128      	bne.n	8007fba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d110      	bne.n	8007f9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	e00f      	b.n	8007fba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	e12f      	b.n	800823c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ffa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	78db      	ldrb	r3, [r3, #3]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d015      	beq.n	8008030 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8117 	beq.w	800823c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	2101      	movs	r1, #1
 8008020:	fa01 f303 	lsl.w	r3, r1, r3
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800802a:	4313      	orrs	r3, r2
 800802c:	634b      	str	r3, [r1, #52]	; 0x34
 800802e:	e105      	b.n	800823c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d110      	bne.n	8008062 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e00f      	b.n	8008082 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008080:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	68d9      	ldr	r1, [r3, #12]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	b298      	uxth	r0, r3
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4603      	mov	r3, r0
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fa2b 	bl	80084f2 <USB_WritePacket>
 800809c:	e0ce      	b.n	800823c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b8:	0cdb      	lsrs	r3, r3, #19
 80080ba:	04db      	lsls	r3, r3, #19
 80080bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	0151      	lsls	r1, r2, #5
 80080d0:	69fa      	ldr	r2, [r7, #28]
 80080d2:	440a      	add	r2, r1
 80080d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d126      	bne.n	8008138 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f6:	691a      	ldr	r2, [r3, #16]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008100:	69b9      	ldr	r1, [r7, #24]
 8008102:	0148      	lsls	r0, r1, #5
 8008104:	69f9      	ldr	r1, [r7, #28]
 8008106:	4401      	add	r1, r0
 8008108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800810c:	4313      	orrs	r3, r2
 800810e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	0151      	lsls	r1, r2, #5
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	440a      	add	r2, r1
 8008126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800812a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800812e:	6113      	str	r3, [r2, #16]
 8008130:	e036      	b.n	80081a0 <USB_EPStartXfer+0x3dc>
 8008132:	bf00      	nop
 8008134:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	695a      	ldr	r2, [r3, #20]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	4413      	add	r3, r2
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	8afb      	ldrh	r3, [r7, #22]
 800815e:	04d9      	lsls	r1, r3, #19
 8008160:	4b39      	ldr	r3, [pc, #228]	; (8008248 <USB_EPStartXfer+0x484>)
 8008162:	400b      	ands	r3, r1
 8008164:	69b9      	ldr	r1, [r7, #24]
 8008166:	0148      	lsls	r0, r1, #5
 8008168:	69f9      	ldr	r1, [r7, #28]
 800816a:	4401      	add	r1, r0
 800816c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008170:	4313      	orrs	r3, r2
 8008172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	8af9      	ldrh	r1, [r7, #22]
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008190:	69b9      	ldr	r1, [r7, #24]
 8008192:	0148      	lsls	r0, r1, #5
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	4401      	add	r1, r0
 8008198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800819c:	4313      	orrs	r3, r2
 800819e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d10d      	bne.n	80081c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	68d9      	ldr	r1, [r3, #12]
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081be:	460a      	mov	r2, r1
 80081c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d128      	bne.n	800821c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d110      	bne.n	80081fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	e00f      	b.n	800821c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800821a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008236:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800823a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	1ff80000 	.word	0x1ff80000

0800824c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	2b01      	cmp	r3, #1
 800826a:	f040 80cd 	bne.w	8008408 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d132      	bne.n	80082dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d4:	0cdb      	lsrs	r3, r3, #19
 80082d6:	04db      	lsls	r3, r3, #19
 80082d8:	6113      	str	r3, [r2, #16]
 80082da:	e04e      	b.n	800837a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	0cdb      	lsrs	r3, r3, #19
 80082f8:	04db      	lsls	r3, r3, #19
 80082fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	440a      	add	r2, r1
 8008312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008316:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800831a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800831e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	695a      	ldr	r2, [r3, #20]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	429a      	cmp	r2, r3
 800832a:	d903      	bls.n	8008334 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800836a:	6939      	ldr	r1, [r7, #16]
 800836c:	0148      	lsls	r0, r1, #5
 800836e:	6979      	ldr	r1, [r7, #20]
 8008370:	4401      	add	r1, r0
 8008372:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008376:	4313      	orrs	r3, r2
 8008378:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d11e      	bne.n	80083be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	461a      	mov	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	e092      	b.n	80084e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d07e      	beq.n	80084e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	2101      	movs	r1, #1
 80083f8:	fa01 f303 	lsl.w	r3, r1, r3
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008402:	4313      	orrs	r3, r2
 8008404:	634b      	str	r3, [r1, #52]	; 0x34
 8008406:	e06d      	b.n	80084e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008422:	0cdb      	lsrs	r3, r3, #19
 8008424:	04db      	lsls	r3, r3, #19
 8008426:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008446:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800844a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800847a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008492:	6939      	ldr	r1, [r7, #16]
 8008494:	0148      	lsls	r0, r1, #5
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	4401      	add	r1, r0
 800849a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800849e:	4313      	orrs	r3, r2
 80084a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10d      	bne.n	80084c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	68d9      	ldr	r1, [r3, #12]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	460a      	mov	r2, r1
 80084c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b089      	sub	sp, #36	; 0x24
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	4611      	mov	r1, r2
 80084fe:	461a      	mov	r2, r3
 8008500:	460b      	mov	r3, r1
 8008502:	71fb      	strb	r3, [r7, #7]
 8008504:	4613      	mov	r3, r2
 8008506:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008514:	2b00      	cmp	r3, #0
 8008516:	d123      	bne.n	8008560 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008518:	88bb      	ldrh	r3, [r7, #4]
 800851a:	3303      	adds	r3, #3
 800851c:	089b      	lsrs	r3, r3, #2
 800851e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008520:	2300      	movs	r3, #0
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	e018      	b.n	8008558 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	031a      	lsls	r2, r3, #12
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	4413      	add	r3, r2
 800852e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008532:	461a      	mov	r2, r3
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6013      	str	r3, [r2, #0]
      pSrc++;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	3301      	adds	r3, #1
 800853e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	3301      	adds	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	3301      	adds	r3, #1
 8008550:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	3301      	adds	r3, #1
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	d3e2      	bcc.n	8008526 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3724      	adds	r7, #36	; 0x24
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800856e:	b480      	push	{r7}
 8008570:	b08b      	sub	sp, #44	; 0x2c
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	4613      	mov	r3, r2
 800857a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	b29b      	uxth	r3, r3
 800858a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008594:	2300      	movs	r3, #0
 8008596:	623b      	str	r3, [r7, #32]
 8008598:	e014      	b.n	80085c4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	3301      	adds	r3, #1
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	3301      	adds	r3, #1
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	3301      	adds	r3, #1
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	3301      	adds	r3, #1
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	3301      	adds	r3, #1
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	6a3a      	ldr	r2, [r7, #32]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d3e6      	bcc.n	800859a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085cc:	8bfb      	ldrh	r3, [r7, #30]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01e      	beq.n	8008610 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085dc:	461a      	mov	r2, r3
 80085de:	f107 0310 	add.w	r3, r7, #16
 80085e2:	6812      	ldr	r2, [r2, #0]
 80085e4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	fa22 f303 	lsr.w	r3, r2, r3
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	701a      	strb	r2, [r3, #0]
      i++;
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	3301      	adds	r3, #1
 80085fc:	623b      	str	r3, [r7, #32]
      pDest++;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	3301      	adds	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008604:	8bfb      	ldrh	r3, [r7, #30]
 8008606:	3b01      	subs	r3, #1
 8008608:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800860a:	8bfb      	ldrh	r3, [r7, #30]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1ea      	bne.n	80085e6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008612:	4618      	mov	r0, r3
 8008614:	372c      	adds	r7, #44	; 0x2c
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d12c      	bne.n	8008694 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	db12      	blt.n	8008672 <USB_EPSetStall+0x54>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00f      	beq.n	8008672 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008670:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	e02b      	b.n	80086ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db12      	blt.n	80086cc <USB_EPSetStall+0xae>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	0151      	lsls	r1, r2, #5
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	440a      	add	r2, r1
 80086e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d128      	bne.n	8008768 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008730:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008734:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	2b03      	cmp	r3, #3
 800873c:	d003      	beq.n	8008746 <USB_EPClearStall+0x4c>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	78db      	ldrb	r3, [r3, #3]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d138      	bne.n	80087b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	440a      	add	r2, r1
 800875c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	e027      	b.n	80087b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008786:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	78db      	ldrb	r3, [r3, #3]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d003      	beq.n	8008798 <USB_EPClearStall+0x9e>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d10f      	bne.n	80087b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80087e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008800:	4313      	orrs	r3, r2
 8008802:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800882c:	f023 0303 	bic.w	r3, r3, #3
 8008830:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008840:	f023 0302 	bic.w	r3, r3, #2
 8008844:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800886e:	f023 0303 	bic.w	r3, r3, #3
 8008872:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008882:	f043 0302 	orr.w	r3, r3, #2
 8008886:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4013      	ands	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088ae:	68fb      	ldr	r3, [r7, #12]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4013      	ands	r3, r2
 80088de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	0c1b      	lsrs	r3, r3, #16
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4013      	ands	r3, r2
 8008912:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	b29b      	uxth	r3, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	4013      	ands	r3, r2
 8008950:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008952:	68bb      	ldr	r3, [r7, #8]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008982:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	01db      	lsls	r3, r3, #7
 8008992:	b2db      	uxtb	r3, r3
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4013      	ands	r3, r2
 80089ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089ae:	68bb      	ldr	r3, [r7, #8]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	f003 0301 	and.w	r3, r3, #1
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80089f6:	f023 0307 	bic.w	r3, r3, #7
 80089fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	333c      	adds	r3, #60	; 0x3c
 8008a36:	3304      	adds	r3, #4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4a26      	ldr	r2, [pc, #152]	; (8008ad8 <USB_EP0_OutStart+0xb8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d90a      	bls.n	8008a5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a54:	d101      	bne.n	8008a5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e037      	b.n	8008aca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a60:	461a      	mov	r2, r3
 8008a62:	2300      	movs	r3, #0
 8008a64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a88:	f043 0318 	orr.w	r3, r3, #24
 8008a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008aa0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d10f      	bne.n	8008ac8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	4f54300a 	.word	0x4f54300a

08008adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	4a13      	ldr	r2, [pc, #76]	; (8008b3c <USB_CoreReset+0x60>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e01a      	b.n	8008b2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	daf3      	bge.n	8008ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f043 0201 	orr.w	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <USB_CoreReset+0x60>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e006      	b.n	8008b2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d0f1      	beq.n	8008b10 <USB_CoreReset+0x34>

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	00030d40 	.word	0x00030d40

08008b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b50:	f002 f906 	bl	800ad60 <USBD_static_malloc>
 8008b54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d105      	bne.n	8008b68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008b64:	2302      	movs	r3, #2
 8008b66:	e066      	b.n	8008c36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7c1b      	ldrb	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d119      	bne.n	8008bac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	2181      	movs	r1, #129	; 0x81
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 ffca 	bl	800ab1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b90:	2202      	movs	r2, #2
 8008b92:	2101      	movs	r1, #1
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 ffc0 	bl	800ab1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2210      	movs	r2, #16
 8008ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008baa:	e016      	b.n	8008bda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bac:	2340      	movs	r3, #64	; 0x40
 8008bae:	2202      	movs	r2, #2
 8008bb0:	2181      	movs	r1, #129	; 0x81
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 ffb1 	bl	800ab1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 ffa8 	bl	800ab1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2210      	movs	r2, #16
 8008bd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bda:	2308      	movs	r3, #8
 8008bdc:	2203      	movs	r2, #3
 8008bde:	2182      	movs	r1, #130	; 0x82
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 ff9a 	bl	800ab1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1b      	ldrb	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f002 f86b 	bl	800acf8 <USBD_LL_PrepareReceive>
 8008c22:	e007      	b.n	8008c34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f002 f862 	bl	800acf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c4a:	2181      	movs	r1, #129	; 0x81
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 ff8a 	bl	800ab66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c58:	2101      	movs	r1, #1
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 ff83 	bl	800ab66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c68:	2182      	movs	r1, #130	; 0x82
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 ff7b 	bl	800ab66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 f86e 	bl	800ad7c <USBD_static_free>
    pdev->pClassData = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e0af      	b.n	8008e3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d03f      	beq.n	8008d68 <USBD_CDC_Setup+0xb4>
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	f040 809f 	bne.w	8008e2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d02e      	beq.n	8008d54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b25b      	sxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da16      	bge.n	8008d2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008d0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	88d2      	ldrh	r2, [r2, #6]
 8008d12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	88db      	ldrh	r3, [r3, #6]
 8008d18:	2b07      	cmp	r3, #7
 8008d1a:	bf28      	it	cs
 8008d1c:	2307      	movcs	r3, #7
 8008d1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	89fa      	ldrh	r2, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fae9 	bl	800a2fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d2c:	e085      	b.n	8008e3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	785a      	ldrb	r2, [r3, #1]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	88db      	ldrh	r3, [r3, #6]
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008d44:	6939      	ldr	r1, [r7, #16]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	88db      	ldrh	r3, [r3, #6]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fb02 	bl	800a356 <USBD_CtlPrepareRx>
      break;
 8008d52:	e072      	b.n	8008e3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	7850      	ldrb	r0, [r2, #1]
 8008d60:	2200      	movs	r2, #0
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	4798      	blx	r3
      break;
 8008d66:	e068      	b.n	8008e3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d852      	bhi.n	8008e16 <USBD_CDC_Setup+0x162>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_CDC_Setup+0xc4>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008da9 	.word	0x08008da9
 8008d7c:	08008e25 	.word	0x08008e25
 8008d80:	08008e17 	.word	0x08008e17
 8008d84:	08008e17 	.word	0x08008e17
 8008d88:	08008e17 	.word	0x08008e17
 8008d8c:	08008e17 	.word	0x08008e17
 8008d90:	08008e17 	.word	0x08008e17
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e17 	.word	0x08008e17
 8008d9c:	08008e17 	.word	0x08008e17
 8008da0:	08008dd3 	.word	0x08008dd3
 8008da4:	08008dfd 	.word	0x08008dfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d107      	bne.n	8008dc4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008db4:	f107 030a 	add.w	r3, r7, #10
 8008db8:	2202      	movs	r2, #2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fa9e 	bl	800a2fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dc2:	e032      	b.n	8008e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fa28 	bl	800a21c <USBD_CtlError>
            ret = USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	75fb      	strb	r3, [r7, #23]
          break;
 8008dd0:	e02b      	b.n	8008e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d107      	bne.n	8008dee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dde:	f107 030d 	add.w	r3, r7, #13
 8008de2:	2201      	movs	r2, #1
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fa89 	bl	800a2fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dec:	e01d      	b.n	8008e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 fa13 	bl	800a21c <USBD_CtlError>
            ret = USBD_FAIL;
 8008df6:	2303      	movs	r3, #3
 8008df8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dfa:	e016      	b.n	8008e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d00f      	beq.n	8008e28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fa06 	bl	800a21c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e14:	e008      	b.n	8008e28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f9ff 	bl	800a21c <USBD_CtlError>
          ret = USBD_FAIL;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	75fb      	strb	r3, [r7, #23]
          break;
 8008e22:	e002      	b.n	8008e2a <USBD_CDC_Setup+0x176>
          break;
 8008e24:	bf00      	nop
 8008e26:	e008      	b.n	8008e3a <USBD_CDC_Setup+0x186>
          break;
 8008e28:	bf00      	nop
      }
      break;
 8008e2a:	e006      	b.n	8008e3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 f9f4 	bl	800a21c <USBD_CtlError>
      ret = USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e04f      	b.n	8008f06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3318      	adds	r3, #24
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d029      	beq.n	8008ed8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3318      	adds	r3, #24
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	78f9      	ldrb	r1, [r7, #3]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4403      	add	r3, r0
 8008ea4:	3344      	adds	r3, #68	; 0x44
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eac:	fb03 f301 	mul.w	r3, r3, r1
 8008eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d110      	bne.n	8008ed8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3318      	adds	r3, #24
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008eca:	78f9      	ldrb	r1, [r7, #3]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fef0 	bl	800acb6 <USBD_LL_Transmit>
 8008ed6:	e015      	b.n	8008f04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e015      	b.n	8008f5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 ff00 	bl	800ad3a <USBD_LL_GetRxDataSize>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f56:	4611      	mov	r1, r2
 8008f58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e01b      	b.n	8008fb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d015      	beq.n	8008fb4 <USBD_CDC_EP0_RxReady+0x50>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f8e:	2bff      	cmp	r3, #255	; 0xff
 8008f90:	d010      	beq.n	8008fb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2243      	movs	r2, #67	; 0x43
 8008fcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20000094 	.word	0x20000094

08008fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2243      	movs	r2, #67	; 0x43
 8008fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008fee:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20000050 	.word	0x20000050

08009000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2243      	movs	r2, #67	; 0x43
 800900c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800900e:	4b03      	ldr	r3, [pc, #12]	; (800901c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	200000d8 	.word	0x200000d8

08009020 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	220a      	movs	r2, #10
 800902c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	; (800903c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	2000000c 	.word	0x2000000c

08009040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	e004      	b.n	800905e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800906a:	b480      	push	{r7}
 800906c:	b087      	sub	sp, #28
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800907c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	e008      	b.n	800909a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80090be:	2303      	movs	r3, #3
 80090c0:	e004      	b.n	80090cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e016      	b.n	8009124 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009108:	2101      	movs	r1, #1
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fdf4 	bl	800acf8 <USBD_LL_PrepareReceive>
 8009110:	e007      	b.n	8009122 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009118:	2340      	movs	r3, #64	; 0x40
 800911a:	2101      	movs	r1, #1
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fdeb 	bl	800acf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e01f      	b.n	8009184 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	79fa      	ldrb	r2, [r7, #7]
 8009176:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f001 fc67 	bl	800aa4c <USBD_LL_Init>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e016      	b.n	80091d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	f107 020e 	add.w	r2, r7, #14
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fc7e 	bl	800aae4 <USBD_LL_Start>
 80091e8:	4603      	mov	r3, r0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	4611      	mov	r1, r2
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
  }

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 ff90 	bl	800a1a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092a4:	f003 031f 	and.w	r3, r3, #31
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d01a      	beq.n	80092e2 <USBD_LL_SetupStage+0x72>
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d822      	bhi.n	80092f6 <USBD_LL_SetupStage+0x86>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <USBD_LL_SetupStage+0x4a>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d00a      	beq.n	80092ce <USBD_LL_SetupStage+0x5e>
 80092b8:	e01d      	b.n	80092f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa62 	bl	800978c <USBD_StdDevReq>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
      break;
 80092cc:	e020      	b.n	8009310 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fac6 	bl	8009868 <USBD_StdItfReq>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
      break;
 80092e0:	e016      	b.n	8009310 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fb05 	bl	80098fa <USBD_StdEPReq>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]
      break;
 80092f4:	e00c      	b.n	8009310 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009300:	b2db      	uxtb	r3, r3
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fc4d 	bl	800aba4 <USBD_LL_StallEP>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]
      break;
 800930e:	bf00      	nop
  }

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b086      	sub	sp, #24
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	460b      	mov	r3, r1
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d138      	bne.n	80093a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009334:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800933c:	2b03      	cmp	r3, #3
 800933e:	d14a      	bne.n	80093d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d913      	bls.n	8009374 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	4293      	cmp	r3, r2
 8009364:	bf28      	it	cs
 8009366:	4613      	movcs	r3, r2
 8009368:	461a      	mov	r2, r3
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f001 f80f 	bl	800a390 <USBD_CtlContinueRx>
 8009372:	e030      	b.n	80093d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b03      	cmp	r3, #3
 800937e:	d10b      	bne.n	8009398 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d005      	beq.n	8009398 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f001 f80a 	bl	800a3b2 <USBD_CtlSendStatus>
 800939e:	e01a      	b.n	80093d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d114      	bne.n	80093d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00e      	beq.n	80093d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	7afa      	ldrb	r2, [r7, #11]
 80093c2:	4611      	mov	r1, r2
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	4798      	blx	r3
 80093c8:	4603      	mov	r3, r0
 80093ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	e000      	b.n	80093d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	460b      	mov	r3, r1
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d16b      	bne.n	80094cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3314      	adds	r3, #20
 80093f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009400:	2b02      	cmp	r3, #2
 8009402:	d156      	bne.n	80094b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	429a      	cmp	r2, r3
 800940e:	d914      	bls.n	800943a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	1ad2      	subs	r2, r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	461a      	mov	r2, r3
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 ff84 	bl	800a334 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800942c:	2300      	movs	r3, #0
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f001 fc60 	bl	800acf8 <USBD_LL_PrepareReceive>
 8009438:	e03b      	b.n	80094b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	429a      	cmp	r2, r3
 8009444:	d11c      	bne.n	8009480 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800944e:	429a      	cmp	r2, r3
 8009450:	d316      	bcc.n	8009480 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800945c:	429a      	cmp	r2, r3
 800945e:	d20f      	bcs.n	8009480 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 ff65 	bl	800a334 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 fc3d 	bl	800acf8 <USBD_LL_PrepareReceive>
 800947e:	e018      	b.n	80094b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b03      	cmp	r3, #3
 800948a:	d10b      	bne.n	80094a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094a4:	2180      	movs	r1, #128	; 0x80
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f001 fb7c 	bl	800aba4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 ff93 	bl	800a3d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d122      	bne.n	8009502 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fe98 	bl	80091f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094ca:	e01a      	b.n	8009502 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d114      	bne.n	8009502 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00e      	beq.n	8009502 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	7afa      	ldrb	r2, [r7, #11]
 80094ee:	4611      	mov	r1, r2
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	4798      	blx	r3
 80094f4:	4603      	mov	r3, r0
 80094f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	e000      	b.n	8009504 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	e02f      	b.n	80095a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00f      	beq.n	800956a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6852      	ldr	r2, [r2, #4]
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	4611      	mov	r1, r2
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	2200      	movs	r2, #0
 800956e:	2100      	movs	r1, #0
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fad2 	bl	800ab1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2240      	movs	r2, #64	; 0x40
 8009582:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009586:	2340      	movs	r3, #64	; 0x40
 8009588:	2200      	movs	r2, #0
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fac4 	bl	800ab1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2240      	movs	r2, #64	; 0x40
 800959c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2204      	movs	r2, #4
 80095e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b04      	cmp	r3, #4
 8009606:	d106      	bne.n	8009616 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800960e:	b2da      	uxtb	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009636:	2303      	movs	r3, #3
 8009638:	e012      	b.n	8009660 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b03      	cmp	r3, #3
 8009644:	d10b      	bne.n	800965e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d005      	beq.n	800965e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	e014      	b.n	80096ac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b03      	cmp	r3, #3
 800968c:	d10d      	bne.n	80096aa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	4611      	mov	r1, r2
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e014      	b.n	80096f8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d10d      	bne.n	80096f6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	4611      	mov	r1, r2
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d009      	beq.n	8009744 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6852      	ldr	r2, [r2, #4]
 800973c:	b2d2      	uxtb	r2, r2
 800973e:	4611      	mov	r1, r2
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
  }

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800974e:	b480      	push	{r7}
 8009750:	b087      	sub	sp, #28
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	3301      	adds	r3, #1
 8009764:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800976c:	8a3b      	ldrh	r3, [r7, #16]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	b21a      	sxth	r2, r3
 8009772:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009776:	4313      	orrs	r3, r2
 8009778:	b21b      	sxth	r3, r3
 800977a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800977c:	89fb      	ldrh	r3, [r7, #14]
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097a2:	2b40      	cmp	r3, #64	; 0x40
 80097a4:	d005      	beq.n	80097b2 <USBD_StdDevReq+0x26>
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d853      	bhi.n	8009852 <USBD_StdDevReq+0xc6>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <USBD_StdDevReq+0x3a>
 80097ae:	2b20      	cmp	r3, #32
 80097b0:	d14f      	bne.n	8009852 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	4798      	blx	r3
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
      break;
 80097c4:	e04a      	b.n	800985c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b09      	cmp	r3, #9
 80097cc:	d83b      	bhi.n	8009846 <USBD_StdDevReq+0xba>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <USBD_StdDevReq+0x48>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009829 	.word	0x08009829
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	08009847 	.word	0x08009847
 80097e0:	08009833 	.word	0x08009833
 80097e4:	08009847 	.word	0x08009847
 80097e8:	08009807 	.word	0x08009807
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	08009847 	.word	0x08009847
 80097f4:	0800981f 	.word	0x0800981f
 80097f8:	08009811 	.word	0x08009811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f9de 	bl	8009bc0 <USBD_GetDescriptor>
          break;
 8009804:	e024      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fb43 	bl	8009e94 <USBD_SetAddress>
          break;
 800980e:	e01f      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fb82 	bl	8009f1c <USBD_SetConfig>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
          break;
 800981c:	e018      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc21 	bl	800a068 <USBD_GetConfig>
          break;
 8009826:	e013      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fc52 	bl	800a0d4 <USBD_GetStatus>
          break;
 8009830:	e00e      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc81 	bl	800a13c <USBD_SetFeature>
          break;
 800983a:	e009      	b.n	8009850 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fc90 	bl	800a164 <USBD_ClrFeature>
          break;
 8009844:	e004      	b.n	8009850 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fce7 	bl	800a21c <USBD_CtlError>
          break;
 800984e:	bf00      	nop
      }
      break;
 8009850:	e004      	b.n	800985c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fce1 	bl	800a21c <USBD_CtlError>
      break;
 800985a:	bf00      	nop
  }

  return ret;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop

08009868 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800987e:	2b40      	cmp	r3, #64	; 0x40
 8009880:	d005      	beq.n	800988e <USBD_StdItfReq+0x26>
 8009882:	2b40      	cmp	r3, #64	; 0x40
 8009884:	d82f      	bhi.n	80098e6 <USBD_StdItfReq+0x7e>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <USBD_StdItfReq+0x26>
 800988a:	2b20      	cmp	r3, #32
 800988c:	d12b      	bne.n	80098e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009894:	b2db      	uxtb	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	2b02      	cmp	r3, #2
 800989a:	d81d      	bhi.n	80098d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	889b      	ldrh	r3, [r3, #4]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d813      	bhi.n	80098ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	88db      	ldrh	r3, [r3, #6]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d110      	bne.n	80098e2 <USBD_StdItfReq+0x7a>
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10d      	bne.n	80098e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fd73 	bl	800a3b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098cc:	e009      	b.n	80098e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fca3 	bl	800a21c <USBD_CtlError>
          break;
 80098d6:	e004      	b.n	80098e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fc9e 	bl	800a21c <USBD_CtlError>
          break;
 80098e0:	e000      	b.n	80098e4 <USBD_StdItfReq+0x7c>
          break;
 80098e2:	bf00      	nop
      }
      break;
 80098e4:	e004      	b.n	80098f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc97 	bl	800a21c <USBD_CtlError>
      break;
 80098ee:	bf00      	nop
  }

  return ret;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	889b      	ldrh	r3, [r3, #4]
 800990c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009916:	2b40      	cmp	r3, #64	; 0x40
 8009918:	d007      	beq.n	800992a <USBD_StdEPReq+0x30>
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	f200 8145 	bhi.w	8009baa <USBD_StdEPReq+0x2b0>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00c      	beq.n	800993e <USBD_StdEPReq+0x44>
 8009924:	2b20      	cmp	r3, #32
 8009926:	f040 8140 	bne.w	8009baa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e13a      	b.n	8009bb4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b03      	cmp	r3, #3
 8009944:	d007      	beq.n	8009956 <USBD_StdEPReq+0x5c>
 8009946:	2b03      	cmp	r3, #3
 8009948:	f300 8129 	bgt.w	8009b9e <USBD_StdEPReq+0x2a4>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d07f      	beq.n	8009a50 <USBD_StdEPReq+0x156>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d03c      	beq.n	80099ce <USBD_StdEPReq+0xd4>
 8009954:	e123      	b.n	8009b9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d002      	beq.n	8009968 <USBD_StdEPReq+0x6e>
 8009962:	2b03      	cmp	r3, #3
 8009964:	d016      	beq.n	8009994 <USBD_StdEPReq+0x9a>
 8009966:	e02c      	b.n	80099c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <USBD_StdEPReq+0x90>
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b80      	cmp	r3, #128	; 0x80
 8009972:	d00a      	beq.n	800998a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 f913 	bl	800aba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800997e:	2180      	movs	r1, #128	; 0x80
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f90f 	bl	800aba4 <USBD_LL_StallEP>
 8009986:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009988:	e020      	b.n	80099cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fc45 	bl	800a21c <USBD_CtlError>
              break;
 8009992:	e01b      	b.n	80099cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	885b      	ldrh	r3, [r3, #2]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10e      	bne.n	80099ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00b      	beq.n	80099ba <USBD_StdEPReq+0xc0>
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b80      	cmp	r3, #128	; 0x80
 80099a6:	d008      	beq.n	80099ba <USBD_StdEPReq+0xc0>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	88db      	ldrh	r3, [r3, #6]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d104      	bne.n	80099ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 f8f5 	bl	800aba4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fcf9 	bl	800a3b2 <USBD_CtlSendStatus>

              break;
 80099c0:	e004      	b.n	80099cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fc29 	bl	800a21c <USBD_CtlError>
              break;
 80099ca:	bf00      	nop
          }
          break;
 80099cc:	e0ec      	b.n	8009ba8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d002      	beq.n	80099e0 <USBD_StdEPReq+0xe6>
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d016      	beq.n	8009a0c <USBD_StdEPReq+0x112>
 80099de:	e030      	b.n	8009a42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00d      	beq.n	8009a02 <USBD_StdEPReq+0x108>
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	2b80      	cmp	r3, #128	; 0x80
 80099ea:	d00a      	beq.n	8009a02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 f8d7 	bl	800aba4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099f6:	2180      	movs	r1, #128	; 0x80
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 f8d3 	bl	800aba4 <USBD_LL_StallEP>
 80099fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a00:	e025      	b.n	8009a4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc09 	bl	800a21c <USBD_CtlError>
              break;
 8009a0a:	e020      	b.n	8009a4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	885b      	ldrh	r3, [r3, #2]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11b      	bne.n	8009a4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d004      	beq.n	8009a28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f001 f8dd 	bl	800abe2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fcc2 	bl	800a3b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	4798      	blx	r3
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009a40:	e004      	b.n	8009a4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fbe9 	bl	800a21c <USBD_CtlError>
              break;
 8009a4a:	e000      	b.n	8009a4e <USBD_StdEPReq+0x154>
              break;
 8009a4c:	bf00      	nop
          }
          break;
 8009a4e:	e0ab      	b.n	8009ba8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d002      	beq.n	8009a62 <USBD_StdEPReq+0x168>
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d032      	beq.n	8009ac6 <USBD_StdEPReq+0x1cc>
 8009a60:	e097      	b.n	8009b92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d007      	beq.n	8009a78 <USBD_StdEPReq+0x17e>
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b80      	cmp	r3, #128	; 0x80
 8009a6c:	d004      	beq.n	8009a78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fbd3 	bl	800a21c <USBD_CtlError>
                break;
 8009a76:	e091      	b.n	8009b9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da0b      	bge.n	8009a98 <USBD_StdEPReq+0x19e>
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	3310      	adds	r3, #16
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	3304      	adds	r3, #4
 8009a96:	e00b      	b.n	8009ab0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2202      	movs	r2, #2
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc1d 	bl	800a2fe <USBD_CtlSendData>
              break;
 8009ac4:	e06a      	b.n	8009b9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da11      	bge.n	8009af2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	f003 020f 	and.w	r2, r3, #15
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	3324      	adds	r3, #36	; 0x24
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d117      	bne.n	8009b18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fb96 	bl	800a21c <USBD_CtlError>
                  break;
 8009af0:	e054      	b.n	8009b9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	f003 020f 	and.w	r2, r3, #15
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d104      	bne.n	8009b18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fb83 	bl	800a21c <USBD_CtlError>
                  break;
 8009b16:	e041      	b.n	8009b9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	da0b      	bge.n	8009b38 <USBD_StdEPReq+0x23e>
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	3310      	adds	r3, #16
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	3304      	adds	r3, #4
 8009b36:	e00b      	b.n	8009b50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	3304      	adds	r3, #4
 8009b50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <USBD_StdEPReq+0x264>
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b80      	cmp	r3, #128	; 0x80
 8009b5c:	d103      	bne.n	8009b66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e00e      	b.n	8009b84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 f858 	bl	800ac20 <USBD_LL_IsStallEP>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e002      	b.n	8009b84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2202      	movs	r2, #2
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbb7 	bl	800a2fe <USBD_CtlSendData>
              break;
 8009b90:	e004      	b.n	8009b9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fb41 	bl	800a21c <USBD_CtlError>
              break;
 8009b9a:	bf00      	nop
          }
          break;
 8009b9c:	e004      	b.n	8009ba8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fb3b 	bl	800a21c <USBD_CtlError>
          break;
 8009ba6:	bf00      	nop
      }
      break;
 8009ba8:	e004      	b.n	8009bb4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fb35 	bl	800a21c <USBD_CtlError>
      break;
 8009bb2:	bf00      	nop
  }

  return ret;
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	2b06      	cmp	r3, #6
 8009be2:	f200 8128 	bhi.w	8009e36 <USBD_GetDescriptor+0x276>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <USBD_GetDescriptor+0x2c>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c09 	.word	0x08009c09
 8009bf0:	08009c21 	.word	0x08009c21
 8009bf4:	08009c61 	.word	0x08009c61
 8009bf8:	08009e37 	.word	0x08009e37
 8009bfc:	08009e37 	.word	0x08009e37
 8009c00:	08009dd7 	.word	0x08009dd7
 8009c04:	08009e03 	.word	0x08009e03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7c12      	ldrb	r2, [r2, #16]
 8009c14:	f107 0108 	add.w	r1, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
      break;
 8009c1e:	e112      	b.n	8009e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7c1b      	ldrb	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10d      	bne.n	8009c44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f107 0208 	add.w	r2, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	2202      	movs	r2, #2
 8009c40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c42:	e100      	b.n	8009e46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	f107 0208 	add.w	r2, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	701a      	strb	r2, [r3, #0]
      break;
 8009c5e:	e0f2      	b.n	8009e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	885b      	ldrh	r3, [r3, #2]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	f200 80ac 	bhi.w	8009dc4 <USBD_GetDescriptor+0x204>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <USBD_GetDescriptor+0xb4>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009cc1 	.word	0x08009cc1
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009d29 	.word	0x08009d29
 8009c84:	08009d5d 	.word	0x08009d5d
 8009c88:	08009d91 	.word	0x08009d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00b      	beq.n	8009cb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	7c12      	ldrb	r2, [r2, #16]
 8009ca4:	f107 0108 	add.w	r1, r7, #8
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4798      	blx	r3
 8009cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cae:	e091      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fab2 	bl	800a21c <USBD_CtlError>
            err++;
 8009cb8:	7afb      	ldrb	r3, [r7, #11]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cbe:	e089      	b.n	8009dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00b      	beq.n	8009ce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7c12      	ldrb	r2, [r2, #16]
 8009cd8:	f107 0108 	add.w	r1, r7, #8
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4798      	blx	r3
 8009ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce2:	e077      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fa98 	bl	800a21c <USBD_CtlError>
            err++;
 8009cec:	7afb      	ldrb	r3, [r7, #11]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf2:	e06f      	b.n	8009dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	7c12      	ldrb	r2, [r2, #16]
 8009d0c:	f107 0108 	add.w	r1, r7, #8
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d16:	e05d      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa7e 	bl	800a21c <USBD_CtlError>
            err++;
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	3301      	adds	r3, #1
 8009d24:	72fb      	strb	r3, [r7, #11]
          break;
 8009d26:	e055      	b.n	8009dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00b      	beq.n	8009d4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	7c12      	ldrb	r2, [r2, #16]
 8009d40:	f107 0108 	add.w	r1, r7, #8
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
 8009d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4a:	e043      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa64 	bl	800a21c <USBD_CtlError>
            err++;
 8009d54:	7afb      	ldrb	r3, [r7, #11]
 8009d56:	3301      	adds	r3, #1
 8009d58:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5a:	e03b      	b.n	8009dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	7c12      	ldrb	r2, [r2, #16]
 8009d74:	f107 0108 	add.w	r1, r7, #8
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7e:	e029      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa4a 	bl	800a21c <USBD_CtlError>
            err++;
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8e:	e021      	b.n	8009dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7c12      	ldrb	r2, [r2, #16]
 8009da8:	f107 0108 	add.w	r1, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009db2:	e00f      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa30 	bl	800a21c <USBD_CtlError>
            err++;
 8009dbc:	7afb      	ldrb	r3, [r7, #11]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009dc2:	e007      	b.n	8009dd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa28 	bl	800a21c <USBD_CtlError>
          err++;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009dd2:	bf00      	nop
      }
      break;
 8009dd4:	e037      	b.n	8009e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7c1b      	ldrb	r3, [r3, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d109      	bne.n	8009df2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f107 0208 	add.w	r2, r7, #8
 8009dea:	4610      	mov	r0, r2
 8009dec:	4798      	blx	r3
 8009dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df0:	e029      	b.n	8009e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fa11 	bl	800a21c <USBD_CtlError>
        err++;
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009e00:	e021      	b.n	8009e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7c1b      	ldrb	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10d      	bne.n	8009e26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e12:	f107 0208 	add.w	r2, r7, #8
 8009e16:	4610      	mov	r0, r2
 8009e18:	4798      	blx	r3
 8009e1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	2207      	movs	r2, #7
 8009e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e24:	e00f      	b.n	8009e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f9f7 	bl	800a21c <USBD_CtlError>
        err++;
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	3301      	adds	r3, #1
 8009e32:	72fb      	strb	r3, [r7, #11]
      break;
 8009e34:	e007      	b.n	8009e46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f9ef 	bl	800a21c <USBD_CtlError>
      err++;
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	3301      	adds	r3, #1
 8009e42:	72fb      	strb	r3, [r7, #11]
      break;
 8009e44:	bf00      	nop
  }

  if (err != 0U)
 8009e46:	7afb      	ldrb	r3, [r7, #11]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d11e      	bne.n	8009e8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	88db      	ldrh	r3, [r3, #6]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d016      	beq.n	8009e82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e54:	893b      	ldrh	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88da      	ldrh	r2, [r3, #6]
 8009e5e:	893b      	ldrh	r3, [r7, #8]
 8009e60:	4293      	cmp	r3, r2
 8009e62:	bf28      	it	cs
 8009e64:	4613      	movcs	r3, r2
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e6a:	893b      	ldrh	r3, [r7, #8]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	68f9      	ldr	r1, [r7, #12]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa44 	bl	800a2fe <USBD_CtlSendData>
 8009e76:	e009      	b.n	8009e8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f9ce 	bl	800a21c <USBD_CtlError>
 8009e80:	e004      	b.n	8009e8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa95 	bl	800a3b2 <USBD_CtlSendStatus>
 8009e88:	e000      	b.n	8009e8c <USBD_GetDescriptor+0x2cc>
    return;
 8009e8a:	bf00      	nop
  }
}
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop

08009e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	889b      	ldrh	r3, [r3, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d131      	bne.n	8009f0a <USBD_SetAddress+0x76>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	88db      	ldrh	r3, [r3, #6]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d12d      	bne.n	8009f0a <USBD_SetAddress+0x76>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	885b      	ldrh	r3, [r3, #2]
 8009eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8009eb4:	d829      	bhi.n	8009f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d104      	bne.n	8009ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f9a3 	bl	800a21c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed6:	e01d      	b.n	8009f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7bfa      	ldrb	r2, [r7, #15]
 8009edc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fec7 	bl	800ac78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa61 	bl	800a3b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efe:	e009      	b.n	8009f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f08:	e004      	b.n	8009f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f985 	bl	800a21c <USBD_CtlError>
  }
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	885b      	ldrh	r3, [r3, #2]
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <USBD_SetConfig+0x148>)
 8009f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f34:	4b4b      	ldr	r3, [pc, #300]	; (800a064 <USBD_SetConfig+0x148>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d905      	bls.n	8009f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f96c 	bl	800a21c <USBD_CtlError>
    return USBD_FAIL;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e088      	b.n	800a05a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d002      	beq.n	8009f5a <USBD_SetConfig+0x3e>
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d025      	beq.n	8009fa4 <USBD_SetConfig+0x88>
 8009f58:	e071      	b.n	800a03e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f5a:	4b42      	ldr	r3, [pc, #264]	; (800a064 <USBD_SetConfig+0x148>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01c      	beq.n	8009f9c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009f62:	4b40      	ldr	r3, [pc, #256]	; (800a064 <USBD_SetConfig+0x148>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f6c:	4b3d      	ldr	r3, [pc, #244]	; (800a064 <USBD_SetConfig+0x148>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff f948 	bl	8009208 <USBD_SetClassConfig>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f949 	bl	800a21c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f8a:	e065      	b.n	800a058 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa10 	bl	800a3b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2203      	movs	r2, #3
 8009f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f9a:	e05d      	b.n	800a058 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa08 	bl	800a3b2 <USBD_CtlSendStatus>
      break;
 8009fa2:	e059      	b.n	800a058 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009fa4:	4b2f      	ldr	r3, [pc, #188]	; (800a064 <USBD_SetConfig+0x148>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d112      	bne.n	8009fd2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fb4:	4b2b      	ldr	r3, [pc, #172]	; (800a064 <USBD_SetConfig+0x148>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fbe:	4b29      	ldr	r3, [pc, #164]	; (800a064 <USBD_SetConfig+0x148>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff f93b 	bl	8009240 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f9f1 	bl	800a3b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fd0:	e042      	b.n	800a058 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009fd2:	4b24      	ldr	r3, [pc, #144]	; (800a064 <USBD_SetConfig+0x148>)
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d02a      	beq.n	800a036 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff f929 	bl	8009240 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fee:	4b1d      	ldr	r3, [pc, #116]	; (800a064 <USBD_SetConfig+0x148>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ff8:	4b1a      	ldr	r3, [pc, #104]	; (800a064 <USBD_SetConfig+0x148>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff f902 	bl	8009208 <USBD_SetClassConfig>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00f      	beq.n	800a02e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f903 	bl	800a21c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff f90e 	bl	8009240 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2202      	movs	r2, #2
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a02c:	e014      	b.n	800a058 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f9bf 	bl	800a3b2 <USBD_CtlSendStatus>
      break;
 800a034:	e010      	b.n	800a058 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9bb 	bl	800a3b2 <USBD_CtlSendStatus>
      break;
 800a03c:	e00c      	b.n	800a058 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8eb 	bl	800a21c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <USBD_SetConfig+0x148>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff f8f7 	bl	8009240 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	73fb      	strb	r3, [r7, #15]
      break;
 800a056:	bf00      	nop
  }

  return ret;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200003e4 	.word	0x200003e4

0800a068 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d004      	beq.n	800a084 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f8cd 	bl	800a21c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a082:	e023      	b.n	800a0cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	dc02      	bgt.n	800a096 <USBD_GetConfig+0x2e>
 800a090:	2b00      	cmp	r3, #0
 800a092:	dc03      	bgt.n	800a09c <USBD_GetConfig+0x34>
 800a094:	e015      	b.n	800a0c2 <USBD_GetConfig+0x5a>
 800a096:	2b03      	cmp	r3, #3
 800a098:	d00b      	beq.n	800a0b2 <USBD_GetConfig+0x4a>
 800a09a:	e012      	b.n	800a0c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f927 	bl	800a2fe <USBD_CtlSendData>
        break;
 800a0b0:	e00c      	b.n	800a0cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f91f 	bl	800a2fe <USBD_CtlSendData>
        break;
 800a0c0:	e004      	b.n	800a0cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f8a9 	bl	800a21c <USBD_CtlError>
        break;
 800a0ca:	bf00      	nop
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d81e      	bhi.n	800a12a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	88db      	ldrh	r3, [r3, #6]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d004      	beq.n	800a0fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f890 	bl	800a21c <USBD_CtlError>
        break;
 800a0fc:	e01a      	b.n	800a134 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d005      	beq.n	800a11a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f043 0202 	orr.w	r2, r3, #2
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	330c      	adds	r3, #12
 800a11e:	2202      	movs	r2, #2
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f8eb 	bl	800a2fe <USBD_CtlSendData>
      break;
 800a128:	e004      	b.n	800a134 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f875 	bl	800a21c <USBD_CtlError>
      break;
 800a132:	bf00      	nop
  }
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	885b      	ldrh	r3, [r3, #2]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d106      	bne.n	800a15c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f92b 	bl	800a3b2 <USBD_CtlSendStatus>
  }
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d80b      	bhi.n	800a194 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	885b      	ldrh	r3, [r3, #2]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d10c      	bne.n	800a19e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f910 	bl	800a3b2 <USBD_CtlSendStatus>
      }
      break;
 800a192:	e004      	b.n	800a19e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f840 	bl	800a21c <USBD_CtlError>
      break;
 800a19c:	e000      	b.n	800a1a0 <USBD_ClrFeature+0x3c>
      break;
 800a19e:	bf00      	nop
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	781a      	ldrb	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	781a      	ldrb	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff fabb 	bl	800974e <SWAPBYTE>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff faae 	bl	800974e <SWAPBYTE>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	3301      	adds	r3, #1
 800a204:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff faa1 	bl	800974e <SWAPBYTE>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	80da      	strh	r2, [r3, #6]
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a226:	2180      	movs	r1, #128	; 0x80
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fcbb 	bl	800aba4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a22e:	2100      	movs	r1, #0
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fcb7 	bl	800aba4 <USBD_LL_StallEP>
}
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d036      	beq.n	800a2c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a258:	6938      	ldr	r0, [r7, #16]
 800a25a:	f000 f836 	bl	800a2ca <USBD_GetLen>
 800a25e:	4603      	mov	r3, r0
 800a260:	3301      	adds	r3, #1
 800a262:	b29b      	uxth	r3, r3
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	4413      	add	r3, r2
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	7812      	ldrb	r2, [r2, #0]
 800a276:	701a      	strb	r2, [r3, #0]
  idx++;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
 800a27a:	3301      	adds	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	4413      	add	r3, r2
 800a284:	2203      	movs	r2, #3
 800a286:	701a      	strb	r2, [r3, #0]
  idx++;
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	3301      	adds	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a28e:	e013      	b.n	800a2b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	4413      	add	r3, r2
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	7812      	ldrb	r2, [r2, #0]
 800a29a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	613b      	str	r3, [r7, #16]
    idx++;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2a8:	7dfb      	ldrb	r3, [r7, #23]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e7      	bne.n	800a290 <USBD_GetString+0x52>
 800a2c0:	e000      	b.n	800a2c4 <USBD_GetString+0x86>
    return;
 800a2c2:	bf00      	nop
  }
}
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2da:	e005      	b.n	800a2e8 <USBD_GetLen+0x1e>
  {
    len++;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f5      	bne.n	800a2dc <USBD_GetLen+0x12>
  }

  return len;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2202      	movs	r2, #2
 800a30e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	2100      	movs	r1, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fcc6 	bl	800acb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fcb5 	bl	800acb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2203      	movs	r2, #3
 800a366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	2100      	movs	r1, #0
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fcb9 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 fca8 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2204      	movs	r2, #4
 800a3be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fc74 	bl	800acb6 <USBD_LL_Transmit>

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2205      	movs	r2, #5
 800a3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fc82 	bl	800acf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a404:	2200      	movs	r2, #0
 800a406:	4912      	ldr	r1, [pc, #72]	; (800a450 <MX_USB_DEVICE_Init+0x50>)
 800a408:	4812      	ldr	r0, [pc, #72]	; (800a454 <MX_USB_DEVICE_Init+0x54>)
 800a40a:	f7fe fe8f 	bl	800912c <USBD_Init>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a414:	f7f7 fdde 	bl	8001fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a418:	490f      	ldr	r1, [pc, #60]	; (800a458 <MX_USB_DEVICE_Init+0x58>)
 800a41a:	480e      	ldr	r0, [pc, #56]	; (800a454 <MX_USB_DEVICE_Init+0x54>)
 800a41c:	f7fe feb6 	bl	800918c <USBD_RegisterClass>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a426:	f7f7 fdd5 	bl	8001fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a42a:	490c      	ldr	r1, [pc, #48]	; (800a45c <MX_USB_DEVICE_Init+0x5c>)
 800a42c:	4809      	ldr	r0, [pc, #36]	; (800a454 <MX_USB_DEVICE_Init+0x54>)
 800a42e:	f7fe fe07 	bl	8009040 <USBD_CDC_RegisterInterface>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a438:	f7f7 fdcc 	bl	8001fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a43c:	4805      	ldr	r0, [pc, #20]	; (800a454 <MX_USB_DEVICE_Init+0x54>)
 800a43e:	f7fe fecc 	bl	80091da <USBD_Start>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a448:	f7f7 fdc4 	bl	8001fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a44c:	bf00      	nop
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000130 	.word	0x20000130
 800a454:	20000bd8 	.word	0x20000bd8
 800a458:	20000018 	.word	0x20000018
 800a45c:	2000011c 	.word	0x2000011c

0800a460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a464:	2200      	movs	r2, #0
 800a466:	4905      	ldr	r1, [pc, #20]	; (800a47c <CDC_Init_FS+0x1c>)
 800a468:	4805      	ldr	r0, [pc, #20]	; (800a480 <CDC_Init_FS+0x20>)
 800a46a:	f7fe fdfe 	bl	800906a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a46e:	4905      	ldr	r1, [pc, #20]	; (800a484 <CDC_Init_FS+0x24>)
 800a470:	4803      	ldr	r0, [pc, #12]	; (800a480 <CDC_Init_FS+0x20>)
 800a472:	f7fe fe18 	bl	80090a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a478:	4618      	mov	r0, r3
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	200016a8 	.word	0x200016a8
 800a480:	20000bd8 	.word	0x20000bd8
 800a484:	20000ea8 	.word	0x20000ea8

0800a488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a48c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a48e:	4618      	mov	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6039      	str	r1, [r7, #0]
 800a4a2:	71fb      	strb	r3, [r7, #7]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b23      	cmp	r3, #35	; 0x23
 800a4ac:	d84a      	bhi.n	800a544 <CDC_Control_FS+0xac>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <CDC_Control_FS+0x1c>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a545 	.word	0x0800a545
 800a4b8:	0800a545 	.word	0x0800a545
 800a4bc:	0800a545 	.word	0x0800a545
 800a4c0:	0800a545 	.word	0x0800a545
 800a4c4:	0800a545 	.word	0x0800a545
 800a4c8:	0800a545 	.word	0x0800a545
 800a4cc:	0800a545 	.word	0x0800a545
 800a4d0:	0800a545 	.word	0x0800a545
 800a4d4:	0800a545 	.word	0x0800a545
 800a4d8:	0800a545 	.word	0x0800a545
 800a4dc:	0800a545 	.word	0x0800a545
 800a4e0:	0800a545 	.word	0x0800a545
 800a4e4:	0800a545 	.word	0x0800a545
 800a4e8:	0800a545 	.word	0x0800a545
 800a4ec:	0800a545 	.word	0x0800a545
 800a4f0:	0800a545 	.word	0x0800a545
 800a4f4:	0800a545 	.word	0x0800a545
 800a4f8:	0800a545 	.word	0x0800a545
 800a4fc:	0800a545 	.word	0x0800a545
 800a500:	0800a545 	.word	0x0800a545
 800a504:	0800a545 	.word	0x0800a545
 800a508:	0800a545 	.word	0x0800a545
 800a50c:	0800a545 	.word	0x0800a545
 800a510:	0800a545 	.word	0x0800a545
 800a514:	0800a545 	.word	0x0800a545
 800a518:	0800a545 	.word	0x0800a545
 800a51c:	0800a545 	.word	0x0800a545
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a545 	.word	0x0800a545
 800a528:	0800a545 	.word	0x0800a545
 800a52c:	0800a545 	.word	0x0800a545
 800a530:	0800a545 	.word	0x0800a545
 800a534:	0800a545 	.word	0x0800a545
 800a538:	0800a545 	.word	0x0800a545
 800a53c:	0800a545 	.word	0x0800a545
 800a540:	0800a545 	.word	0x0800a545
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a544:	bf00      	nop
  }

  return (USBD_OK);
 800a546:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	4805      	ldr	r0, [pc, #20]	; (800a578 <CDC_Receive_FS+0x24>)
 800a562:	f7fe fda0 	bl	80090a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a566:	4804      	ldr	r0, [pc, #16]	; (800a578 <CDC_Receive_FS+0x24>)
 800a568:	f7fe fdb6 	bl	80090d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a56c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000bd8 	.word	0x20000bd8

0800a57c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a58e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a592:	4618      	mov	r0, r3
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2212      	movs	r2, #18
 800a5b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	2000014c 	.word	0x2000014c

0800a5c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2204      	movs	r2, #4
 800a5d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5d6:	4b03      	ldr	r3, [pc, #12]	; (800a5e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	20000160 	.word	0x20000160

0800a5e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4907      	ldr	r1, [pc, #28]	; (800a61c <USBD_FS_ProductStrDescriptor+0x34>)
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <USBD_FS_ProductStrDescriptor+0x38>)
 800a600:	f7ff fe1d 	bl	800a23e <USBD_GetString>
 800a604:	e004      	b.n	800a610 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <USBD_FS_ProductStrDescriptor+0x34>)
 800a60a:	4805      	ldr	r0, [pc, #20]	; (800a620 <USBD_FS_ProductStrDescriptor+0x38>)
 800a60c:	f7ff fe17 	bl	800a23e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a610:	4b02      	ldr	r3, [pc, #8]	; (800a61c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20001ea8 	.word	0x20001ea8
 800a620:	0800dd40 	.word	0x0800dd40

0800a624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	4904      	ldr	r1, [pc, #16]	; (800a644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a634:	4804      	ldr	r0, [pc, #16]	; (800a648 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a636:	f7ff fe02 	bl	800a23e <USBD_GetString>
  return USBD_StrDesc;
 800a63a:	4b02      	ldr	r3, [pc, #8]	; (800a644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20001ea8 	.word	0x20001ea8
 800a648:	0800dd58 	.word	0x0800dd58

0800a64c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	221a      	movs	r2, #26
 800a65c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a65e:	f000 f843 	bl	800a6e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a662:	4b02      	ldr	r3, [pc, #8]	; (800a66c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20000164 	.word	0x20000164

0800a670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4907      	ldr	r1, [pc, #28]	; (800a6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a686:	4808      	ldr	r0, [pc, #32]	; (800a6a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a688:	f7ff fdd9 	bl	800a23e <USBD_GetString>
 800a68c:	e004      	b.n	800a698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a694:	f7ff fdd3 	bl	800a23e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20001ea8 	.word	0x20001ea8
 800a6a8:	0800dd6c 	.word	0x0800dd6c

0800a6ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	4907      	ldr	r1, [pc, #28]	; (800a6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6c2:	4808      	ldr	r0, [pc, #32]	; (800a6e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6c4:	f7ff fdbb 	bl	800a23e <USBD_GetString>
 800a6c8:	e004      	b.n	800a6d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	4904      	ldr	r1, [pc, #16]	; (800a6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6ce:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6d0:	f7ff fdb5 	bl	800a23e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6d4:	4b02      	ldr	r3, [pc, #8]	; (800a6e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20001ea8 	.word	0x20001ea8
 800a6e4:	0800dd78 	.word	0x0800dd78

0800a6e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <Get_SerialNum+0x44>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6f4:	4b0e      	ldr	r3, [pc, #56]	; (800a730 <Get_SerialNum+0x48>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6fa:	4b0e      	ldr	r3, [pc, #56]	; (800a734 <Get_SerialNum+0x4c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4413      	add	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a70e:	2208      	movs	r2, #8
 800a710:	4909      	ldr	r1, [pc, #36]	; (800a738 <Get_SerialNum+0x50>)
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f814 	bl	800a740 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a718:	2204      	movs	r2, #4
 800a71a:	4908      	ldr	r1, [pc, #32]	; (800a73c <Get_SerialNum+0x54>)
 800a71c:	68b8      	ldr	r0, [r7, #8]
 800a71e:	f000 f80f 	bl	800a740 <IntToUnicode>
  }
}
 800a722:	bf00      	nop
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	1fff7a10 	.word	0x1fff7a10
 800a730:	1fff7a14 	.word	0x1fff7a14
 800a734:	1fff7a18 	.word	0x1fff7a18
 800a738:	20000166 	.word	0x20000166
 800a73c:	20000176 	.word	0x20000176

0800a740 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	4613      	mov	r3, r2
 800a74c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a752:	2300      	movs	r3, #0
 800a754:	75fb      	strb	r3, [r7, #23]
 800a756:	e027      	b.n	800a7a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	0f1b      	lsrs	r3, r3, #28
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d80b      	bhi.n	800a778 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	0f1b      	lsrs	r3, r3, #28
 800a764:	b2da      	uxtb	r2, r3
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	4619      	mov	r1, r3
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	440b      	add	r3, r1
 800a770:	3230      	adds	r2, #48	; 0x30
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	e00a      	b.n	800a78e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	0f1b      	lsrs	r3, r3, #28
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	4619      	mov	r1, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	440b      	add	r3, r1
 800a788:	3237      	adds	r2, #55	; 0x37
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a794:	7dfb      	ldrb	r3, [r7, #23]
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	3301      	adds	r3, #1
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]
 800a7a8:	7dfa      	ldrb	r2, [r7, #23]
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d3d3      	bcc.n	800a758 <IntToUnicode+0x18>
  }
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
	...

0800a7c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08a      	sub	sp, #40	; 0x28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7c8:	f107 0314 	add.w	r3, r7, #20
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	609a      	str	r2, [r3, #8]
 800a7d4:	60da      	str	r2, [r3, #12]
 800a7d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7e0:	d13a      	bne.n	800a858 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	613b      	str	r3, [r7, #16]
 800a7e6:	4b1e      	ldr	r3, [pc, #120]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	4a1d      	ldr	r2, [pc, #116]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a7ec:	f043 0301 	orr.w	r3, r3, #1
 800a7f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	613b      	str	r3, [r7, #16]
 800a7fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a7fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a804:	2302      	movs	r3, #2
 800a806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a80c:	2303      	movs	r3, #3
 800a80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a810:	230a      	movs	r3, #10
 800a812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a814:	f107 0314 	add.w	r3, r7, #20
 800a818:	4619      	mov	r1, r3
 800a81a:	4812      	ldr	r0, [pc, #72]	; (800a864 <HAL_PCD_MspInit+0xa4>)
 800a81c:	f7f8 feaa 	bl	8003574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a824:	4a0e      	ldr	r2, [pc, #56]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82a:	6353      	str	r3, [r2, #52]	; 0x34
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a834:	4a0a      	ldr	r2, [pc, #40]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a83a:	6453      	str	r3, [r2, #68]	; 0x44
 800a83c:	4b08      	ldr	r3, [pc, #32]	; (800a860 <HAL_PCD_MspInit+0xa0>)
 800a83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a848:	2200      	movs	r2, #0
 800a84a:	2100      	movs	r1, #0
 800a84c:	2043      	movs	r0, #67	; 0x43
 800a84e:	f7f8 fdc8 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a852:	2043      	movs	r0, #67	; 0x43
 800a854:	f7f8 fde1 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a858:	bf00      	nop
 800a85a:	3728      	adds	r7, #40	; 0x28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	40023800 	.word	0x40023800
 800a864:	40020000 	.word	0x40020000

0800a868 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a87c:	4619      	mov	r1, r3
 800a87e:	4610      	mov	r0, r2
 800a880:	f7fe fcf6 	bl	8009270 <USBD_LL_SetupStage>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a89e:	78fa      	ldrb	r2, [r7, #3]
 800a8a0:	6879      	ldr	r1, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f7fe fd30 	bl	800931a <USBD_LL_DataOutStage>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	6879      	ldr	r1, [r7, #4]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	1a9b      	subs	r3, r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	440b      	add	r3, r1
 800a8e2:	3348      	adds	r3, #72	; 0x48
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	f7fe fd79 	bl	80093e0 <USBD_LL_DataInStage>
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fe8d 	bl	8009624 <USBD_LL_SOF>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a91a:	2301      	movs	r3, #1
 800a91c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
 800a92a:	e008      	b.n	800a93e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	2b02      	cmp	r3, #2
 800a932:	d102      	bne.n	800a93a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
 800a938:	e001      	b.n	800a93e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a93a:	f7f7 fb4b 	bl	8001fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a944:	7bfa      	ldrb	r2, [r7, #15]
 800a946:	4611      	mov	r1, r2
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fe fe2d 	bl	80095a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fdd9 	bl	800950c <USBD_LL_Reset>
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fe28 	bl	80095c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a98a:	f043 0301 	orr.w	r3, r3, #1
 800a98e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a998:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <HAL_PCD_SuspendCallback+0x48>)
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4a03      	ldr	r2, [pc, #12]	; (800a9ac <HAL_PCD_SuspendCallback+0x48>)
 800a99e:	f043 0306 	orr.w	r3, r3, #6
 800a9a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	e000ed00 	.word	0xe000ed00

0800a9b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fe18 	bl	80095f4 <USBD_LL_Resume>
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fe66 	bl	80096b4 <USBD_LL_IsoOUTIncomplete>
}
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa02:	78fa      	ldrb	r2, [r7, #3]
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fe2e 	bl	8009668 <USBD_LL_IsoINIncomplete>
}
 800aa0c:	bf00      	nop
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fe6c 	bl	8009700 <USBD_LL_DevConnected>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fe69 	bl	8009716 <USBD_LL_DevDisconnected>
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d13c      	bne.n	800aad6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa5c:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa6c:	4b1c      	ldr	r3, [pc, #112]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aa74:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa76:	2204      	movs	r2, #4
 800aa78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa7a:	4b19      	ldr	r3, [pc, #100]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa80:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa88:	2202      	movs	r2, #2
 800aa8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa8c:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa92:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aa98:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <USBD_LL_Init+0x94>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <USBD_LL_Init+0x94>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <USBD_LL_Init+0x94>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aaaa:	480d      	ldr	r0, [pc, #52]	; (800aae0 <USBD_LL_Init+0x94>)
 800aaac:	f7f8 ff27 	bl	80038fe <HAL_PCD_Init>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aab6:	f7f7 fa8d 	bl	8001fd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aaba:	2180      	movs	r1, #128	; 0x80
 800aabc:	4808      	ldr	r0, [pc, #32]	; (800aae0 <USBD_LL_Init+0x94>)
 800aabe:	f7fa f884 	bl	8004bca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aac2:	2240      	movs	r2, #64	; 0x40
 800aac4:	2100      	movs	r1, #0
 800aac6:	4806      	ldr	r0, [pc, #24]	; (800aae0 <USBD_LL_Init+0x94>)
 800aac8:	f7fa f838 	bl	8004b3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aacc:	2280      	movs	r2, #128	; 0x80
 800aace:	2101      	movs	r1, #1
 800aad0:	4803      	ldr	r0, [pc, #12]	; (800aae0 <USBD_LL_Init+0x94>)
 800aad2:	f7fa f833 	bl	8004b3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	200020a8 	.word	0x200020a8

0800aae4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f9 f81c 	bl	8003b38 <HAL_PCD_Start>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 f942 	bl	800ad90 <USBD_Get_USB_Status>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	461a      	mov	r2, r3
 800ab28:	4603      	mov	r3, r0
 800ab2a:	70fb      	strb	r3, [r7, #3]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70bb      	strb	r3, [r7, #2]
 800ab30:	4613      	mov	r3, r2
 800ab32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab42:	78bb      	ldrb	r3, [r7, #2]
 800ab44:	883a      	ldrh	r2, [r7, #0]
 800ab46:	78f9      	ldrb	r1, [r7, #3]
 800ab48:	f7f9 fc00 	bl	800434c <HAL_PCD_EP_Open>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f91c 	bl	800ad90 <USBD_Get_USB_Status>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab80:	78fa      	ldrb	r2, [r7, #3]
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7f9 fc49 	bl	800441c <HAL_PCD_EP_Close>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 f8fd 	bl	800ad90 <USBD_Get_USB_Status>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abbe:	78fa      	ldrb	r2, [r7, #3]
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f9 fd21 	bl	800460a <HAL_PCD_EP_SetStall>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f8de 	bl	800ad90 <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abfc:	78fa      	ldrb	r2, [r7, #3]
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f9 fd66 	bl	80046d2 <HAL_PCD_EP_ClrStall>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f8bf 	bl	800ad90 <USBD_Get_USB_Status>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da0b      	bge.n	800ac54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac42:	68f9      	ldr	r1, [r7, #12]
 800ac44:	4613      	mov	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	1a9b      	subs	r3, r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	333e      	adds	r3, #62	; 0x3e
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	e00b      	b.n	800ac6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7f9 fb33 	bl	8004302 <HAL_PCD_SetAddress>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f874 	bl	800ad90 <USBD_Get_USB_Status>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acac:	7bbb      	ldrb	r3, [r7, #14]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	460b      	mov	r3, r1
 800acc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800acd4:	7af9      	ldrb	r1, [r7, #11]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	f7f9 fc4c 	bl	8004576 <HAL_PCD_EP_Transmit>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 f853 	bl	800ad90 <USBD_Get_USB_Status>
 800acea:	4603      	mov	r3, r0
 800acec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acee:	7dbb      	ldrb	r3, [r7, #22]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	460b      	mov	r3, r1
 800ad06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad16:	7af9      	ldrb	r1, [r7, #11]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	f7f9 fbc8 	bl	80044b0 <HAL_PCD_EP_Receive>
 800ad20:	4603      	mov	r3, r0
 800ad22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 f832 	bl	800ad90 <USBD_Get_USB_Status>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad30:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	460b      	mov	r3, r1
 800ad44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad4c:	78fa      	ldrb	r2, [r7, #3]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7f9 fbf8 	bl	8004546 <HAL_PCD_EP_GetRxCount>
 800ad56:	4603      	mov	r3, r0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad68:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <USBD_static_malloc+0x18>)
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	200003e8 	.word	0x200003e8

0800ad7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d817      	bhi.n	800add4 <USBD_Get_USB_Status+0x44>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <USBD_Get_USB_Status+0x1c>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adc3 	.word	0x0800adc3
 800adb4:	0800adc9 	.word	0x0800adc9
 800adb8:	0800adcf 	.word	0x0800adcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
    break;
 800adc0:	e00b      	b.n	800adda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adc2:	2303      	movs	r3, #3
 800adc4:	73fb      	strb	r3, [r7, #15]
    break;
 800adc6:	e008      	b.n	800adda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adc8:	2301      	movs	r3, #1
 800adca:	73fb      	strb	r3, [r7, #15]
    break;
 800adcc:	e005      	b.n	800adda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adce:	2303      	movs	r3, #3
 800add0:	73fb      	strb	r3, [r7, #15]
    break;
 800add2:	e002      	b.n	800adda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800add4:	2303      	movs	r3, #3
 800add6:	73fb      	strb	r3, [r7, #15]
    break;
 800add8:	bf00      	nop
  }
  return usb_status;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <__errno>:
 800ade8:	4b01      	ldr	r3, [pc, #4]	; (800adf0 <__errno+0x8>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20000180 	.word	0x20000180

0800adf4 <__libc_init_array>:
 800adf4:	b570      	push	{r4, r5, r6, lr}
 800adf6:	4d0d      	ldr	r5, [pc, #52]	; (800ae2c <__libc_init_array+0x38>)
 800adf8:	4c0d      	ldr	r4, [pc, #52]	; (800ae30 <__libc_init_array+0x3c>)
 800adfa:	1b64      	subs	r4, r4, r5
 800adfc:	10a4      	asrs	r4, r4, #2
 800adfe:	2600      	movs	r6, #0
 800ae00:	42a6      	cmp	r6, r4
 800ae02:	d109      	bne.n	800ae18 <__libc_init_array+0x24>
 800ae04:	4d0b      	ldr	r5, [pc, #44]	; (800ae34 <__libc_init_array+0x40>)
 800ae06:	4c0c      	ldr	r4, [pc, #48]	; (800ae38 <__libc_init_array+0x44>)
 800ae08:	f002 fef0 	bl	800dbec <_init>
 800ae0c:	1b64      	subs	r4, r4, r5
 800ae0e:	10a4      	asrs	r4, r4, #2
 800ae10:	2600      	movs	r6, #0
 800ae12:	42a6      	cmp	r6, r4
 800ae14:	d105      	bne.n	800ae22 <__libc_init_array+0x2e>
 800ae16:	bd70      	pop	{r4, r5, r6, pc}
 800ae18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae1c:	4798      	blx	r3
 800ae1e:	3601      	adds	r6, #1
 800ae20:	e7ee      	b.n	800ae00 <__libc_init_array+0xc>
 800ae22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae26:	4798      	blx	r3
 800ae28:	3601      	adds	r6, #1
 800ae2a:	e7f2      	b.n	800ae12 <__libc_init_array+0x1e>
 800ae2c:	0800e18c 	.word	0x0800e18c
 800ae30:	0800e18c 	.word	0x0800e18c
 800ae34:	0800e18c 	.word	0x0800e18c
 800ae38:	0800e190 	.word	0x0800e190

0800ae3c <memset>:
 800ae3c:	4402      	add	r2, r0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d100      	bne.n	800ae46 <memset+0xa>
 800ae44:	4770      	bx	lr
 800ae46:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4a:	e7f9      	b.n	800ae40 <memset+0x4>

0800ae4c <__cvt>:
 800ae4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae50:	ec55 4b10 	vmov	r4, r5, d0
 800ae54:	2d00      	cmp	r5, #0
 800ae56:	460e      	mov	r6, r1
 800ae58:	4619      	mov	r1, r3
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	bfbb      	ittet	lt
 800ae5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae62:	461d      	movlt	r5, r3
 800ae64:	2300      	movge	r3, #0
 800ae66:	232d      	movlt	r3, #45	; 0x2d
 800ae68:	700b      	strb	r3, [r1, #0]
 800ae6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae70:	4691      	mov	r9, r2
 800ae72:	f023 0820 	bic.w	r8, r3, #32
 800ae76:	bfbc      	itt	lt
 800ae78:	4622      	movlt	r2, r4
 800ae7a:	4614      	movlt	r4, r2
 800ae7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae80:	d005      	beq.n	800ae8e <__cvt+0x42>
 800ae82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae86:	d100      	bne.n	800ae8a <__cvt+0x3e>
 800ae88:	3601      	adds	r6, #1
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	e000      	b.n	800ae90 <__cvt+0x44>
 800ae8e:	2103      	movs	r1, #3
 800ae90:	ab03      	add	r3, sp, #12
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	ab02      	add	r3, sp, #8
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	ec45 4b10 	vmov	d0, r4, r5
 800ae9c:	4653      	mov	r3, sl
 800ae9e:	4632      	mov	r2, r6
 800aea0:	f000 fd26 	bl	800b8f0 <_dtoa_r>
 800aea4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aea8:	4607      	mov	r7, r0
 800aeaa:	d102      	bne.n	800aeb2 <__cvt+0x66>
 800aeac:	f019 0f01 	tst.w	r9, #1
 800aeb0:	d022      	beq.n	800aef8 <__cvt+0xac>
 800aeb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aeb6:	eb07 0906 	add.w	r9, r7, r6
 800aeba:	d110      	bne.n	800aede <__cvt+0x92>
 800aebc:	783b      	ldrb	r3, [r7, #0]
 800aebe:	2b30      	cmp	r3, #48	; 0x30
 800aec0:	d10a      	bne.n	800aed8 <__cvt+0x8c>
 800aec2:	2200      	movs	r2, #0
 800aec4:	2300      	movs	r3, #0
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800aece:	b918      	cbnz	r0, 800aed8 <__cvt+0x8c>
 800aed0:	f1c6 0601 	rsb	r6, r6, #1
 800aed4:	f8ca 6000 	str.w	r6, [sl]
 800aed8:	f8da 3000 	ldr.w	r3, [sl]
 800aedc:	4499      	add	r9, r3
 800aede:	2200      	movs	r2, #0
 800aee0:	2300      	movs	r3, #0
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 fdff 	bl	8000ae8 <__aeabi_dcmpeq>
 800aeea:	b108      	cbz	r0, 800aef0 <__cvt+0xa4>
 800aeec:	f8cd 900c 	str.w	r9, [sp, #12]
 800aef0:	2230      	movs	r2, #48	; 0x30
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	454b      	cmp	r3, r9
 800aef6:	d307      	bcc.n	800af08 <__cvt+0xbc>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aefc:	1bdb      	subs	r3, r3, r7
 800aefe:	4638      	mov	r0, r7
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	b004      	add	sp, #16
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	1c59      	adds	r1, r3, #1
 800af0a:	9103      	str	r1, [sp, #12]
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e7f0      	b.n	800aef2 <__cvt+0xa6>

0800af10 <__exponent>:
 800af10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af12:	4603      	mov	r3, r0
 800af14:	2900      	cmp	r1, #0
 800af16:	bfb8      	it	lt
 800af18:	4249      	neglt	r1, r1
 800af1a:	f803 2b02 	strb.w	r2, [r3], #2
 800af1e:	bfb4      	ite	lt
 800af20:	222d      	movlt	r2, #45	; 0x2d
 800af22:	222b      	movge	r2, #43	; 0x2b
 800af24:	2909      	cmp	r1, #9
 800af26:	7042      	strb	r2, [r0, #1]
 800af28:	dd2a      	ble.n	800af80 <__exponent+0x70>
 800af2a:	f10d 0407 	add.w	r4, sp, #7
 800af2e:	46a4      	mov	ip, r4
 800af30:	270a      	movs	r7, #10
 800af32:	46a6      	mov	lr, r4
 800af34:	460a      	mov	r2, r1
 800af36:	fb91 f6f7 	sdiv	r6, r1, r7
 800af3a:	fb07 1516 	mls	r5, r7, r6, r1
 800af3e:	3530      	adds	r5, #48	; 0x30
 800af40:	2a63      	cmp	r2, #99	; 0x63
 800af42:	f104 34ff 	add.w	r4, r4, #4294967295
 800af46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af4a:	4631      	mov	r1, r6
 800af4c:	dcf1      	bgt.n	800af32 <__exponent+0x22>
 800af4e:	3130      	adds	r1, #48	; 0x30
 800af50:	f1ae 0502 	sub.w	r5, lr, #2
 800af54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af58:	1c44      	adds	r4, r0, #1
 800af5a:	4629      	mov	r1, r5
 800af5c:	4561      	cmp	r1, ip
 800af5e:	d30a      	bcc.n	800af76 <__exponent+0x66>
 800af60:	f10d 0209 	add.w	r2, sp, #9
 800af64:	eba2 020e 	sub.w	r2, r2, lr
 800af68:	4565      	cmp	r5, ip
 800af6a:	bf88      	it	hi
 800af6c:	2200      	movhi	r2, #0
 800af6e:	4413      	add	r3, r2
 800af70:	1a18      	subs	r0, r3, r0
 800af72:	b003      	add	sp, #12
 800af74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af7e:	e7ed      	b.n	800af5c <__exponent+0x4c>
 800af80:	2330      	movs	r3, #48	; 0x30
 800af82:	3130      	adds	r1, #48	; 0x30
 800af84:	7083      	strb	r3, [r0, #2]
 800af86:	70c1      	strb	r1, [r0, #3]
 800af88:	1d03      	adds	r3, r0, #4
 800af8a:	e7f1      	b.n	800af70 <__exponent+0x60>

0800af8c <_printf_float>:
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	ed2d 8b02 	vpush	{d8}
 800af94:	b08d      	sub	sp, #52	; 0x34
 800af96:	460c      	mov	r4, r1
 800af98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af9c:	4616      	mov	r6, r2
 800af9e:	461f      	mov	r7, r3
 800afa0:	4605      	mov	r5, r0
 800afa2:	f001 fa91 	bl	800c4c8 <_localeconv_r>
 800afa6:	f8d0 a000 	ldr.w	sl, [r0]
 800afaa:	4650      	mov	r0, sl
 800afac:	f7f5 f920 	bl	80001f0 <strlen>
 800afb0:	2300      	movs	r3, #0
 800afb2:	930a      	str	r3, [sp, #40]	; 0x28
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	f8d8 3000 	ldr.w	r3, [r8]
 800afbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afc0:	3307      	adds	r3, #7
 800afc2:	f023 0307 	bic.w	r3, r3, #7
 800afc6:	f103 0208 	add.w	r2, r3, #8
 800afca:	f8c8 2000 	str.w	r2, [r8]
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afde:	9307      	str	r3, [sp, #28]
 800afe0:	f8cd 8018 	str.w	r8, [sp, #24]
 800afe4:	ee08 0a10 	vmov	s16, r0
 800afe8:	4b9f      	ldr	r3, [pc, #636]	; (800b268 <_printf_float+0x2dc>)
 800afea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	f7f5 fdab 	bl	8000b4c <__aeabi_dcmpun>
 800aff6:	bb88      	cbnz	r0, 800b05c <_printf_float+0xd0>
 800aff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800affc:	4b9a      	ldr	r3, [pc, #616]	; (800b268 <_printf_float+0x2dc>)
 800affe:	f04f 32ff 	mov.w	r2, #4294967295
 800b002:	f7f5 fd85 	bl	8000b10 <__aeabi_dcmple>
 800b006:	bb48      	cbnz	r0, 800b05c <_printf_float+0xd0>
 800b008:	2200      	movs	r2, #0
 800b00a:	2300      	movs	r3, #0
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 fd74 	bl	8000afc <__aeabi_dcmplt>
 800b014:	b110      	cbz	r0, 800b01c <_printf_float+0x90>
 800b016:	232d      	movs	r3, #45	; 0x2d
 800b018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01c:	4b93      	ldr	r3, [pc, #588]	; (800b26c <_printf_float+0x2e0>)
 800b01e:	4894      	ldr	r0, [pc, #592]	; (800b270 <_printf_float+0x2e4>)
 800b020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b024:	bf94      	ite	ls
 800b026:	4698      	movls	r8, r3
 800b028:	4680      	movhi	r8, r0
 800b02a:	2303      	movs	r3, #3
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	9b05      	ldr	r3, [sp, #20]
 800b030:	f023 0204 	bic.w	r2, r3, #4
 800b034:	6022      	str	r2, [r4, #0]
 800b036:	f04f 0900 	mov.w	r9, #0
 800b03a:	9700      	str	r7, [sp, #0]
 800b03c:	4633      	mov	r3, r6
 800b03e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	f000 f9d8 	bl	800b3f8 <_printf_common>
 800b048:	3001      	adds	r0, #1
 800b04a:	f040 8090 	bne.w	800b16e <_printf_float+0x1e2>
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295
 800b052:	b00d      	add	sp, #52	; 0x34
 800b054:	ecbd 8b02 	vpop	{d8}
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	4642      	mov	r2, r8
 800b05e:	464b      	mov	r3, r9
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 fd72 	bl	8000b4c <__aeabi_dcmpun>
 800b068:	b140      	cbz	r0, 800b07c <_printf_float+0xf0>
 800b06a:	464b      	mov	r3, r9
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfbc      	itt	lt
 800b070:	232d      	movlt	r3, #45	; 0x2d
 800b072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b076:	487f      	ldr	r0, [pc, #508]	; (800b274 <_printf_float+0x2e8>)
 800b078:	4b7f      	ldr	r3, [pc, #508]	; (800b278 <_printf_float+0x2ec>)
 800b07a:	e7d1      	b.n	800b020 <_printf_float+0x94>
 800b07c:	6863      	ldr	r3, [r4, #4]
 800b07e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b082:	9206      	str	r2, [sp, #24]
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	d13f      	bne.n	800b108 <_printf_float+0x17c>
 800b088:	2306      	movs	r3, #6
 800b08a:	6063      	str	r3, [r4, #4]
 800b08c:	9b05      	ldr	r3, [sp, #20]
 800b08e:	6861      	ldr	r1, [r4, #4]
 800b090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b094:	2300      	movs	r3, #0
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	ab0a      	add	r3, sp, #40	; 0x28
 800b09a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b09e:	ab09      	add	r3, sp, #36	; 0x24
 800b0a0:	ec49 8b10 	vmov	d0, r8, r9
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	6022      	str	r2, [r4, #0]
 800b0a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7ff fecd 	bl	800ae4c <__cvt>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0b6:	2b47      	cmp	r3, #71	; 0x47
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	d108      	bne.n	800b0ce <_printf_float+0x142>
 800b0bc:	1cc8      	adds	r0, r1, #3
 800b0be:	db02      	blt.n	800b0c6 <_printf_float+0x13a>
 800b0c0:	6863      	ldr	r3, [r4, #4]
 800b0c2:	4299      	cmp	r1, r3
 800b0c4:	dd41      	ble.n	800b14a <_printf_float+0x1be>
 800b0c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0ca:	fa5f fb8b 	uxtb.w	fp, fp
 800b0ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0d2:	d820      	bhi.n	800b116 <_printf_float+0x18a>
 800b0d4:	3901      	subs	r1, #1
 800b0d6:	465a      	mov	r2, fp
 800b0d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b0de:	f7ff ff17 	bl	800af10 <__exponent>
 800b0e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0e4:	1813      	adds	r3, r2, r0
 800b0e6:	2a01      	cmp	r2, #1
 800b0e8:	4681      	mov	r9, r0
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	dc02      	bgt.n	800b0f4 <_printf_float+0x168>
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	07d2      	lsls	r2, r2, #31
 800b0f2:	d501      	bpl.n	800b0f8 <_printf_float+0x16c>
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d09c      	beq.n	800b03a <_printf_float+0xae>
 800b100:	232d      	movs	r3, #45	; 0x2d
 800b102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b106:	e798      	b.n	800b03a <_printf_float+0xae>
 800b108:	9a06      	ldr	r2, [sp, #24]
 800b10a:	2a47      	cmp	r2, #71	; 0x47
 800b10c:	d1be      	bne.n	800b08c <_printf_float+0x100>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1bc      	bne.n	800b08c <_printf_float+0x100>
 800b112:	2301      	movs	r3, #1
 800b114:	e7b9      	b.n	800b08a <_printf_float+0xfe>
 800b116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b11a:	d118      	bne.n	800b14e <_printf_float+0x1c2>
 800b11c:	2900      	cmp	r1, #0
 800b11e:	6863      	ldr	r3, [r4, #4]
 800b120:	dd0b      	ble.n	800b13a <_printf_float+0x1ae>
 800b122:	6121      	str	r1, [r4, #16]
 800b124:	b913      	cbnz	r3, 800b12c <_printf_float+0x1a0>
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	07d0      	lsls	r0, r2, #31
 800b12a:	d502      	bpl.n	800b132 <_printf_float+0x1a6>
 800b12c:	3301      	adds	r3, #1
 800b12e:	440b      	add	r3, r1
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	65a1      	str	r1, [r4, #88]	; 0x58
 800b134:	f04f 0900 	mov.w	r9, #0
 800b138:	e7de      	b.n	800b0f8 <_printf_float+0x16c>
 800b13a:	b913      	cbnz	r3, 800b142 <_printf_float+0x1b6>
 800b13c:	6822      	ldr	r2, [r4, #0]
 800b13e:	07d2      	lsls	r2, r2, #31
 800b140:	d501      	bpl.n	800b146 <_printf_float+0x1ba>
 800b142:	3302      	adds	r3, #2
 800b144:	e7f4      	b.n	800b130 <_printf_float+0x1a4>
 800b146:	2301      	movs	r3, #1
 800b148:	e7f2      	b.n	800b130 <_printf_float+0x1a4>
 800b14a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b150:	4299      	cmp	r1, r3
 800b152:	db05      	blt.n	800b160 <_printf_float+0x1d4>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	6121      	str	r1, [r4, #16]
 800b158:	07d8      	lsls	r0, r3, #31
 800b15a:	d5ea      	bpl.n	800b132 <_printf_float+0x1a6>
 800b15c:	1c4b      	adds	r3, r1, #1
 800b15e:	e7e7      	b.n	800b130 <_printf_float+0x1a4>
 800b160:	2900      	cmp	r1, #0
 800b162:	bfd4      	ite	le
 800b164:	f1c1 0202 	rsble	r2, r1, #2
 800b168:	2201      	movgt	r2, #1
 800b16a:	4413      	add	r3, r2
 800b16c:	e7e0      	b.n	800b130 <_printf_float+0x1a4>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	055a      	lsls	r2, r3, #21
 800b172:	d407      	bmi.n	800b184 <_printf_float+0x1f8>
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	4642      	mov	r2, r8
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	47b8      	blx	r7
 800b17e:	3001      	adds	r0, #1
 800b180:	d12c      	bne.n	800b1dc <_printf_float+0x250>
 800b182:	e764      	b.n	800b04e <_printf_float+0xc2>
 800b184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b188:	f240 80e0 	bls.w	800b34c <_printf_float+0x3c0>
 800b18c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b190:	2200      	movs	r2, #0
 800b192:	2300      	movs	r3, #0
 800b194:	f7f5 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d034      	beq.n	800b206 <_printf_float+0x27a>
 800b19c:	4a37      	ldr	r2, [pc, #220]	; (800b27c <_printf_float+0x2f0>)
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f43f af51 	beq.w	800b04e <_printf_float+0xc2>
 800b1ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	db02      	blt.n	800b1ba <_printf_float+0x22e>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07d8      	lsls	r0, r3, #31
 800b1b8:	d510      	bpl.n	800b1dc <_printf_float+0x250>
 800b1ba:	ee18 3a10 	vmov	r3, s16
 800b1be:	4652      	mov	r2, sl
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f af41 	beq.w	800b04e <_printf_float+0xc2>
 800b1cc:	f04f 0800 	mov.w	r8, #0
 800b1d0:	f104 091a 	add.w	r9, r4, #26
 800b1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4543      	cmp	r3, r8
 800b1da:	dc09      	bgt.n	800b1f0 <_printf_float+0x264>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	079b      	lsls	r3, r3, #30
 800b1e0:	f100 8105 	bmi.w	800b3ee <_printf_float+0x462>
 800b1e4:	68e0      	ldr	r0, [r4, #12]
 800b1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e8:	4298      	cmp	r0, r3
 800b1ea:	bfb8      	it	lt
 800b1ec:	4618      	movlt	r0, r3
 800b1ee:	e730      	b.n	800b052 <_printf_float+0xc6>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	464a      	mov	r2, r9
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b8      	blx	r7
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	f43f af27 	beq.w	800b04e <_printf_float+0xc2>
 800b200:	f108 0801 	add.w	r8, r8, #1
 800b204:	e7e6      	b.n	800b1d4 <_printf_float+0x248>
 800b206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dc39      	bgt.n	800b280 <_printf_float+0x2f4>
 800b20c:	4a1b      	ldr	r2, [pc, #108]	; (800b27c <_printf_float+0x2f0>)
 800b20e:	2301      	movs	r3, #1
 800b210:	4631      	mov	r1, r6
 800b212:	4628      	mov	r0, r5
 800b214:	47b8      	blx	r7
 800b216:	3001      	adds	r0, #1
 800b218:	f43f af19 	beq.w	800b04e <_printf_float+0xc2>
 800b21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b220:	4313      	orrs	r3, r2
 800b222:	d102      	bne.n	800b22a <_printf_float+0x29e>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d5d8      	bpl.n	800b1dc <_printf_float+0x250>
 800b22a:	ee18 3a10 	vmov	r3, s16
 800b22e:	4652      	mov	r2, sl
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	47b8      	blx	r7
 800b236:	3001      	adds	r0, #1
 800b238:	f43f af09 	beq.w	800b04e <_printf_float+0xc2>
 800b23c:	f04f 0900 	mov.w	r9, #0
 800b240:	f104 0a1a 	add.w	sl, r4, #26
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	425b      	negs	r3, r3
 800b248:	454b      	cmp	r3, r9
 800b24a:	dc01      	bgt.n	800b250 <_printf_float+0x2c4>
 800b24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24e:	e792      	b.n	800b176 <_printf_float+0x1ea>
 800b250:	2301      	movs	r3, #1
 800b252:	4652      	mov	r2, sl
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	f43f aef7 	beq.w	800b04e <_printf_float+0xc2>
 800b260:	f109 0901 	add.w	r9, r9, #1
 800b264:	e7ee      	b.n	800b244 <_printf_float+0x2b8>
 800b266:	bf00      	nop
 800b268:	7fefffff 	.word	0x7fefffff
 800b26c:	0800dda4 	.word	0x0800dda4
 800b270:	0800dda8 	.word	0x0800dda8
 800b274:	0800ddb0 	.word	0x0800ddb0
 800b278:	0800ddac 	.word	0x0800ddac
 800b27c:	0800ddb4 	.word	0x0800ddb4
 800b280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b284:	429a      	cmp	r2, r3
 800b286:	bfa8      	it	ge
 800b288:	461a      	movge	r2, r3
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	4691      	mov	r9, r2
 800b28e:	dc37      	bgt.n	800b300 <_printf_float+0x374>
 800b290:	f04f 0b00 	mov.w	fp, #0
 800b294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b298:	f104 021a 	add.w	r2, r4, #26
 800b29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b29e:	9305      	str	r3, [sp, #20]
 800b2a0:	eba3 0309 	sub.w	r3, r3, r9
 800b2a4:	455b      	cmp	r3, fp
 800b2a6:	dc33      	bgt.n	800b310 <_printf_float+0x384>
 800b2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	db3b      	blt.n	800b328 <_printf_float+0x39c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d438      	bmi.n	800b328 <_printf_float+0x39c>
 800b2b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2b8:	9b05      	ldr	r3, [sp, #20]
 800b2ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	eba2 0901 	sub.w	r9, r2, r1
 800b2c2:	4599      	cmp	r9, r3
 800b2c4:	bfa8      	it	ge
 800b2c6:	4699      	movge	r9, r3
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	dc35      	bgt.n	800b33a <_printf_float+0x3ae>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2d6:	f104 0a1a 	add.w	sl, r4, #26
 800b2da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2de:	1a9b      	subs	r3, r3, r2
 800b2e0:	eba3 0309 	sub.w	r3, r3, r9
 800b2e4:	4543      	cmp	r3, r8
 800b2e6:	f77f af79 	ble.w	800b1dc <_printf_float+0x250>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f aeaa 	beq.w	800b04e <_printf_float+0xc2>
 800b2fa:	f108 0801 	add.w	r8, r8, #1
 800b2fe:	e7ec      	b.n	800b2da <_printf_float+0x34e>
 800b300:	4613      	mov	r3, r2
 800b302:	4631      	mov	r1, r6
 800b304:	4642      	mov	r2, r8
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	d1c0      	bne.n	800b290 <_printf_float+0x304>
 800b30e:	e69e      	b.n	800b04e <_printf_float+0xc2>
 800b310:	2301      	movs	r3, #1
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	9205      	str	r2, [sp, #20]
 800b318:	47b8      	blx	r7
 800b31a:	3001      	adds	r0, #1
 800b31c:	f43f ae97 	beq.w	800b04e <_printf_float+0xc2>
 800b320:	9a05      	ldr	r2, [sp, #20]
 800b322:	f10b 0b01 	add.w	fp, fp, #1
 800b326:	e7b9      	b.n	800b29c <_printf_float+0x310>
 800b328:	ee18 3a10 	vmov	r3, s16
 800b32c:	4652      	mov	r2, sl
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	d1be      	bne.n	800b2b6 <_printf_float+0x32a>
 800b338:	e689      	b.n	800b04e <_printf_float+0xc2>
 800b33a:	9a05      	ldr	r2, [sp, #20]
 800b33c:	464b      	mov	r3, r9
 800b33e:	4442      	add	r2, r8
 800b340:	4631      	mov	r1, r6
 800b342:	4628      	mov	r0, r5
 800b344:	47b8      	blx	r7
 800b346:	3001      	adds	r0, #1
 800b348:	d1c1      	bne.n	800b2ce <_printf_float+0x342>
 800b34a:	e680      	b.n	800b04e <_printf_float+0xc2>
 800b34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b34e:	2a01      	cmp	r2, #1
 800b350:	dc01      	bgt.n	800b356 <_printf_float+0x3ca>
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d538      	bpl.n	800b3c8 <_printf_float+0x43c>
 800b356:	2301      	movs	r3, #1
 800b358:	4642      	mov	r2, r8
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	f43f ae74 	beq.w	800b04e <_printf_float+0xc2>
 800b366:	ee18 3a10 	vmov	r3, s16
 800b36a:	4652      	mov	r2, sl
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f ae6b 	beq.w	800b04e <_printf_float+0xc2>
 800b378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b37c:	2200      	movs	r2, #0
 800b37e:	2300      	movs	r3, #0
 800b380:	f7f5 fbb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800b384:	b9d8      	cbnz	r0, 800b3be <_printf_float+0x432>
 800b386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b388:	f108 0201 	add.w	r2, r8, #1
 800b38c:	3b01      	subs	r3, #1
 800b38e:	4631      	mov	r1, r6
 800b390:	4628      	mov	r0, r5
 800b392:	47b8      	blx	r7
 800b394:	3001      	adds	r0, #1
 800b396:	d10e      	bne.n	800b3b6 <_printf_float+0x42a>
 800b398:	e659      	b.n	800b04e <_printf_float+0xc2>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4652      	mov	r2, sl
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	47b8      	blx	r7
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f43f ae52 	beq.w	800b04e <_printf_float+0xc2>
 800b3aa:	f108 0801 	add.w	r8, r8, #1
 800b3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	4543      	cmp	r3, r8
 800b3b4:	dcf1      	bgt.n	800b39a <_printf_float+0x40e>
 800b3b6:	464b      	mov	r3, r9
 800b3b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3bc:	e6dc      	b.n	800b178 <_printf_float+0x1ec>
 800b3be:	f04f 0800 	mov.w	r8, #0
 800b3c2:	f104 0a1a 	add.w	sl, r4, #26
 800b3c6:	e7f2      	b.n	800b3ae <_printf_float+0x422>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	e7df      	b.n	800b38e <_printf_float+0x402>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	464a      	mov	r2, r9
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	47b8      	blx	r7
 800b3d8:	3001      	adds	r0, #1
 800b3da:	f43f ae38 	beq.w	800b04e <_printf_float+0xc2>
 800b3de:	f108 0801 	add.w	r8, r8, #1
 800b3e2:	68e3      	ldr	r3, [r4, #12]
 800b3e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3e6:	1a5b      	subs	r3, r3, r1
 800b3e8:	4543      	cmp	r3, r8
 800b3ea:	dcf0      	bgt.n	800b3ce <_printf_float+0x442>
 800b3ec:	e6fa      	b.n	800b1e4 <_printf_float+0x258>
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	f104 0919 	add.w	r9, r4, #25
 800b3f6:	e7f4      	b.n	800b3e2 <_printf_float+0x456>

0800b3f8 <_printf_common>:
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	4699      	mov	r9, r3
 800b400:	688a      	ldr	r2, [r1, #8]
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b408:	4293      	cmp	r3, r2
 800b40a:	bfb8      	it	lt
 800b40c:	4613      	movlt	r3, r2
 800b40e:	6033      	str	r3, [r6, #0]
 800b410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b414:	4607      	mov	r7, r0
 800b416:	460c      	mov	r4, r1
 800b418:	b10a      	cbz	r2, 800b41e <_printf_common+0x26>
 800b41a:	3301      	adds	r3, #1
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	0699      	lsls	r1, r3, #26
 800b422:	bf42      	ittt	mi
 800b424:	6833      	ldrmi	r3, [r6, #0]
 800b426:	3302      	addmi	r3, #2
 800b428:	6033      	strmi	r3, [r6, #0]
 800b42a:	6825      	ldr	r5, [r4, #0]
 800b42c:	f015 0506 	ands.w	r5, r5, #6
 800b430:	d106      	bne.n	800b440 <_printf_common+0x48>
 800b432:	f104 0a19 	add.w	sl, r4, #25
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	6832      	ldr	r2, [r6, #0]
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	dc26      	bgt.n	800b48e <_printf_common+0x96>
 800b440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b444:	1e13      	subs	r3, r2, #0
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	bf18      	it	ne
 800b44a:	2301      	movne	r3, #1
 800b44c:	0692      	lsls	r2, r2, #26
 800b44e:	d42b      	bmi.n	800b4a8 <_printf_common+0xb0>
 800b450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d01e      	beq.n	800b49c <_printf_common+0xa4>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	68e5      	ldr	r5, [r4, #12]
 800b462:	6832      	ldr	r2, [r6, #0]
 800b464:	f003 0306 	and.w	r3, r3, #6
 800b468:	2b04      	cmp	r3, #4
 800b46a:	bf08      	it	eq
 800b46c:	1aad      	subeq	r5, r5, r2
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	bf0c      	ite	eq
 800b474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b478:	2500      	movne	r5, #0
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bfc4      	itt	gt
 800b47e:	1a9b      	subgt	r3, r3, r2
 800b480:	18ed      	addgt	r5, r5, r3
 800b482:	2600      	movs	r6, #0
 800b484:	341a      	adds	r4, #26
 800b486:	42b5      	cmp	r5, r6
 800b488:	d11a      	bne.n	800b4c0 <_printf_common+0xc8>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e008      	b.n	800b4a0 <_printf_common+0xa8>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4649      	mov	r1, r9
 800b494:	4638      	mov	r0, r7
 800b496:	47c0      	blx	r8
 800b498:	3001      	adds	r0, #1
 800b49a:	d103      	bne.n	800b4a4 <_printf_common+0xac>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	e7c6      	b.n	800b436 <_printf_common+0x3e>
 800b4a8:	18e1      	adds	r1, r4, r3
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	2030      	movs	r0, #48	; 0x30
 800b4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b2:	4422      	add	r2, r4
 800b4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4bc:	3302      	adds	r3, #2
 800b4be:	e7c7      	b.n	800b450 <_printf_common+0x58>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d0e6      	beq.n	800b49c <_printf_common+0xa4>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7d9      	b.n	800b486 <_printf_common+0x8e>
	...

0800b4d4 <_printf_i>:
 800b4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	460c      	mov	r4, r1
 800b4da:	4691      	mov	r9, r2
 800b4dc:	7e27      	ldrb	r7, [r4, #24]
 800b4de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4e0:	2f78      	cmp	r7, #120	; 0x78
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	469a      	mov	sl, r3
 800b4e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4ea:	d807      	bhi.n	800b4fc <_printf_i+0x28>
 800b4ec:	2f62      	cmp	r7, #98	; 0x62
 800b4ee:	d80a      	bhi.n	800b506 <_printf_i+0x32>
 800b4f0:	2f00      	cmp	r7, #0
 800b4f2:	f000 80d8 	beq.w	800b6a6 <_printf_i+0x1d2>
 800b4f6:	2f58      	cmp	r7, #88	; 0x58
 800b4f8:	f000 80a3 	beq.w	800b642 <_printf_i+0x16e>
 800b4fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b504:	e03a      	b.n	800b57c <_printf_i+0xa8>
 800b506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50a:	2b15      	cmp	r3, #21
 800b50c:	d8f6      	bhi.n	800b4fc <_printf_i+0x28>
 800b50e:	a001      	add	r0, pc, #4	; (adr r0, 800b514 <_printf_i+0x40>)
 800b510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b514:	0800b56d 	.word	0x0800b56d
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b4fd 	.word	0x0800b4fd
 800b520:	0800b4fd 	.word	0x0800b4fd
 800b524:	0800b4fd 	.word	0x0800b4fd
 800b528:	0800b4fd 	.word	0x0800b4fd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4fd 	.word	0x0800b4fd
 800b534:	0800b4fd 	.word	0x0800b4fd
 800b538:	0800b4fd 	.word	0x0800b4fd
 800b53c:	0800b4fd 	.word	0x0800b4fd
 800b540:	0800b68d 	.word	0x0800b68d
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b66f 	.word	0x0800b66f
 800b54c:	0800b4fd 	.word	0x0800b4fd
 800b550:	0800b4fd 	.word	0x0800b4fd
 800b554:	0800b6af 	.word	0x0800b6af
 800b558:	0800b4fd 	.word	0x0800b4fd
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b4fd 	.word	0x0800b4fd
 800b564:	0800b4fd 	.word	0x0800b4fd
 800b568:	0800b677 	.word	0x0800b677
 800b56c:	680b      	ldr	r3, [r1, #0]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	600a      	str	r2, [r1, #0]
 800b574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0a3      	b.n	800b6c8 <_printf_i+0x1f4>
 800b580:	6825      	ldr	r5, [r4, #0]
 800b582:	6808      	ldr	r0, [r1, #0]
 800b584:	062e      	lsls	r6, r5, #24
 800b586:	f100 0304 	add.w	r3, r0, #4
 800b58a:	d50a      	bpl.n	800b5a2 <_printf_i+0xce>
 800b58c:	6805      	ldr	r5, [r0, #0]
 800b58e:	600b      	str	r3, [r1, #0]
 800b590:	2d00      	cmp	r5, #0
 800b592:	da03      	bge.n	800b59c <_printf_i+0xc8>
 800b594:	232d      	movs	r3, #45	; 0x2d
 800b596:	426d      	negs	r5, r5
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b59c:	485e      	ldr	r0, [pc, #376]	; (800b718 <_printf_i+0x244>)
 800b59e:	230a      	movs	r3, #10
 800b5a0:	e019      	b.n	800b5d6 <_printf_i+0x102>
 800b5a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5a6:	6805      	ldr	r5, [r0, #0]
 800b5a8:	600b      	str	r3, [r1, #0]
 800b5aa:	bf18      	it	ne
 800b5ac:	b22d      	sxthne	r5, r5
 800b5ae:	e7ef      	b.n	800b590 <_printf_i+0xbc>
 800b5b0:	680b      	ldr	r3, [r1, #0]
 800b5b2:	6825      	ldr	r5, [r4, #0]
 800b5b4:	1d18      	adds	r0, r3, #4
 800b5b6:	6008      	str	r0, [r1, #0]
 800b5b8:	0628      	lsls	r0, r5, #24
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0xec>
 800b5bc:	681d      	ldr	r5, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <_printf_i+0xf2>
 800b5c0:	0669      	lsls	r1, r5, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0xe8>
 800b5c4:	881d      	ldrh	r5, [r3, #0]
 800b5c6:	4854      	ldr	r0, [pc, #336]	; (800b718 <_printf_i+0x244>)
 800b5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ca:	bf0c      	ite	eq
 800b5cc:	2308      	moveq	r3, #8
 800b5ce:	230a      	movne	r3, #10
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d6:	6866      	ldr	r6, [r4, #4]
 800b5d8:	60a6      	str	r6, [r4, #8]
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	bfa2      	ittt	ge
 800b5de:	6821      	ldrge	r1, [r4, #0]
 800b5e0:	f021 0104 	bicge.w	r1, r1, #4
 800b5e4:	6021      	strge	r1, [r4, #0]
 800b5e6:	b90d      	cbnz	r5, 800b5ec <_printf_i+0x118>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	d04d      	beq.n	800b688 <_printf_i+0x1b4>
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b5f6:	5dc7      	ldrb	r7, [r0, r7]
 800b5f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5fc:	462f      	mov	r7, r5
 800b5fe:	42bb      	cmp	r3, r7
 800b600:	460d      	mov	r5, r1
 800b602:	d9f4      	bls.n	800b5ee <_printf_i+0x11a>
 800b604:	2b08      	cmp	r3, #8
 800b606:	d10b      	bne.n	800b620 <_printf_i+0x14c>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	07df      	lsls	r7, r3, #31
 800b60c:	d508      	bpl.n	800b620 <_printf_i+0x14c>
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	6861      	ldr	r1, [r4, #4]
 800b612:	4299      	cmp	r1, r3
 800b614:	bfde      	ittt	le
 800b616:	2330      	movle	r3, #48	; 0x30
 800b618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b61c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b620:	1b92      	subs	r2, r2, r6
 800b622:	6122      	str	r2, [r4, #16]
 800b624:	f8cd a000 	str.w	sl, [sp]
 800b628:	464b      	mov	r3, r9
 800b62a:	aa03      	add	r2, sp, #12
 800b62c:	4621      	mov	r1, r4
 800b62e:	4640      	mov	r0, r8
 800b630:	f7ff fee2 	bl	800b3f8 <_printf_common>
 800b634:	3001      	adds	r0, #1
 800b636:	d14c      	bne.n	800b6d2 <_printf_i+0x1fe>
 800b638:	f04f 30ff 	mov.w	r0, #4294967295
 800b63c:	b004      	add	sp, #16
 800b63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b642:	4835      	ldr	r0, [pc, #212]	; (800b718 <_printf_i+0x244>)
 800b644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	680e      	ldr	r6, [r1, #0]
 800b64c:	061f      	lsls	r7, r3, #24
 800b64e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b652:	600e      	str	r6, [r1, #0]
 800b654:	d514      	bpl.n	800b680 <_printf_i+0x1ac>
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	bf44      	itt	mi
 800b65a:	f043 0320 	orrmi.w	r3, r3, #32
 800b65e:	6023      	strmi	r3, [r4, #0]
 800b660:	b91d      	cbnz	r5, 800b66a <_printf_i+0x196>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f023 0320 	bic.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2310      	movs	r3, #16
 800b66c:	e7b0      	b.n	800b5d0 <_printf_i+0xfc>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	f043 0320 	orr.w	r3, r3, #32
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	2378      	movs	r3, #120	; 0x78
 800b678:	4828      	ldr	r0, [pc, #160]	; (800b71c <_printf_i+0x248>)
 800b67a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b67e:	e7e3      	b.n	800b648 <_printf_i+0x174>
 800b680:	065e      	lsls	r6, r3, #25
 800b682:	bf48      	it	mi
 800b684:	b2ad      	uxthmi	r5, r5
 800b686:	e7e6      	b.n	800b656 <_printf_i+0x182>
 800b688:	4616      	mov	r6, r2
 800b68a:	e7bb      	b.n	800b604 <_printf_i+0x130>
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	6826      	ldr	r6, [r4, #0]
 800b690:	6960      	ldr	r0, [r4, #20]
 800b692:	1d1d      	adds	r5, r3, #4
 800b694:	600d      	str	r5, [r1, #0]
 800b696:	0635      	lsls	r5, r6, #24
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0x1cc>
 800b69c:	6018      	str	r0, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <_printf_i+0x1d2>
 800b6a0:	0671      	lsls	r1, r6, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0x1c8>
 800b6a4:	8018      	strh	r0, [r3, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	4616      	mov	r6, r2
 800b6ac:	e7ba      	b.n	800b624 <_printf_i+0x150>
 800b6ae:	680b      	ldr	r3, [r1, #0]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	600a      	str	r2, [r1, #0]
 800b6b4:	681e      	ldr	r6, [r3, #0]
 800b6b6:	6862      	ldr	r2, [r4, #4]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7f4 fda0 	bl	8000200 <memchr>
 800b6c0:	b108      	cbz	r0, 800b6c6 <_printf_i+0x1f2>
 800b6c2:	1b80      	subs	r0, r0, r6
 800b6c4:	6060      	str	r0, [r4, #4]
 800b6c6:	6863      	ldr	r3, [r4, #4]
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d0:	e7a8      	b.n	800b624 <_printf_i+0x150>
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	47d0      	blx	sl
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0ab      	beq.n	800b638 <_printf_i+0x164>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	079b      	lsls	r3, r3, #30
 800b6e4:	d413      	bmi.n	800b70e <_printf_i+0x23a>
 800b6e6:	68e0      	ldr	r0, [r4, #12]
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	bfb8      	it	lt
 800b6ee:	4618      	movlt	r0, r3
 800b6f0:	e7a4      	b.n	800b63c <_printf_i+0x168>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	47d0      	blx	sl
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d09b      	beq.n	800b638 <_printf_i+0x164>
 800b700:	3501      	adds	r5, #1
 800b702:	68e3      	ldr	r3, [r4, #12]
 800b704:	9903      	ldr	r1, [sp, #12]
 800b706:	1a5b      	subs	r3, r3, r1
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dcf2      	bgt.n	800b6f2 <_printf_i+0x21e>
 800b70c:	e7eb      	b.n	800b6e6 <_printf_i+0x212>
 800b70e:	2500      	movs	r5, #0
 800b710:	f104 0619 	add.w	r6, r4, #25
 800b714:	e7f5      	b.n	800b702 <_printf_i+0x22e>
 800b716:	bf00      	nop
 800b718:	0800ddb6 	.word	0x0800ddb6
 800b71c:	0800ddc7 	.word	0x0800ddc7

0800b720 <siprintf>:
 800b720:	b40e      	push	{r1, r2, r3}
 800b722:	b500      	push	{lr}
 800b724:	b09c      	sub	sp, #112	; 0x70
 800b726:	ab1d      	add	r3, sp, #116	; 0x74
 800b728:	9002      	str	r0, [sp, #8]
 800b72a:	9006      	str	r0, [sp, #24]
 800b72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b730:	4809      	ldr	r0, [pc, #36]	; (800b758 <siprintf+0x38>)
 800b732:	9107      	str	r1, [sp, #28]
 800b734:	9104      	str	r1, [sp, #16]
 800b736:	4909      	ldr	r1, [pc, #36]	; (800b75c <siprintf+0x3c>)
 800b738:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73c:	9105      	str	r1, [sp, #20]
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	a902      	add	r1, sp, #8
 800b744:	f001 fb6e 	bl	800ce24 <_svfiprintf_r>
 800b748:	9b02      	ldr	r3, [sp, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	b01c      	add	sp, #112	; 0x70
 800b750:	f85d eb04 	ldr.w	lr, [sp], #4
 800b754:	b003      	add	sp, #12
 800b756:	4770      	bx	lr
 800b758:	20000180 	.word	0x20000180
 800b75c:	ffff0208 	.word	0xffff0208

0800b760 <_vsniprintf_r>:
 800b760:	b530      	push	{r4, r5, lr}
 800b762:	1e14      	subs	r4, r2, #0
 800b764:	4605      	mov	r5, r0
 800b766:	b09b      	sub	sp, #108	; 0x6c
 800b768:	4618      	mov	r0, r3
 800b76a:	da05      	bge.n	800b778 <_vsniprintf_r+0x18>
 800b76c:	238b      	movs	r3, #139	; 0x8b
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	b01b      	add	sp, #108	; 0x6c
 800b776:	bd30      	pop	{r4, r5, pc}
 800b778:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b77c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b780:	bf14      	ite	ne
 800b782:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b786:	4623      	moveq	r3, r4
 800b788:	9302      	str	r3, [sp, #8]
 800b78a:	9305      	str	r3, [sp, #20]
 800b78c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b790:	9100      	str	r1, [sp, #0]
 800b792:	9104      	str	r1, [sp, #16]
 800b794:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b798:	4602      	mov	r2, r0
 800b79a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b79c:	4669      	mov	r1, sp
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f001 fb40 	bl	800ce24 <_svfiprintf_r>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	bfbc      	itt	lt
 800b7a8:	238b      	movlt	r3, #139	; 0x8b
 800b7aa:	602b      	strlt	r3, [r5, #0]
 800b7ac:	2c00      	cmp	r4, #0
 800b7ae:	d0e1      	beq.n	800b774 <_vsniprintf_r+0x14>
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e7dd      	b.n	800b774 <_vsniprintf_r+0x14>

0800b7b8 <vsniprintf>:
 800b7b8:	b507      	push	{r0, r1, r2, lr}
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	460a      	mov	r2, r1
 800b7c0:	4601      	mov	r1, r0
 800b7c2:	4803      	ldr	r0, [pc, #12]	; (800b7d0 <vsniprintf+0x18>)
 800b7c4:	6800      	ldr	r0, [r0, #0]
 800b7c6:	f7ff ffcb 	bl	800b760 <_vsniprintf_r>
 800b7ca:	b003      	add	sp, #12
 800b7cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7d0:	20000180 	.word	0x20000180

0800b7d4 <quorem>:
 800b7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	6903      	ldr	r3, [r0, #16]
 800b7da:	690c      	ldr	r4, [r1, #16]
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	4607      	mov	r7, r0
 800b7e0:	f2c0 8081 	blt.w	800b8e6 <quorem+0x112>
 800b7e4:	3c01      	subs	r4, #1
 800b7e6:	f101 0814 	add.w	r8, r1, #20
 800b7ea:	f100 0514 	add.w	r5, r0, #20
 800b7ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7f2:	9301      	str	r3, [sp, #4]
 800b7f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	429a      	cmp	r2, r3
 800b800:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b808:	fbb2 f6f3 	udiv	r6, r2, r3
 800b80c:	d331      	bcc.n	800b872 <quorem+0x9e>
 800b80e:	f04f 0e00 	mov.w	lr, #0
 800b812:	4640      	mov	r0, r8
 800b814:	46ac      	mov	ip, r5
 800b816:	46f2      	mov	sl, lr
 800b818:	f850 2b04 	ldr.w	r2, [r0], #4
 800b81c:	b293      	uxth	r3, r2
 800b81e:	fb06 e303 	mla	r3, r6, r3, lr
 800b822:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b826:	b29b      	uxth	r3, r3
 800b828:	ebaa 0303 	sub.w	r3, sl, r3
 800b82c:	0c12      	lsrs	r2, r2, #16
 800b82e:	f8dc a000 	ldr.w	sl, [ip]
 800b832:	fb06 e202 	mla	r2, r6, r2, lr
 800b836:	fa13 f38a 	uxtah	r3, r3, sl
 800b83a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b83e:	fa1f fa82 	uxth.w	sl, r2
 800b842:	f8dc 2000 	ldr.w	r2, [ip]
 800b846:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b84a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b84e:	b29b      	uxth	r3, r3
 800b850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b854:	4581      	cmp	r9, r0
 800b856:	f84c 3b04 	str.w	r3, [ip], #4
 800b85a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b85e:	d2db      	bcs.n	800b818 <quorem+0x44>
 800b860:	f855 300b 	ldr.w	r3, [r5, fp]
 800b864:	b92b      	cbnz	r3, 800b872 <quorem+0x9e>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	3b04      	subs	r3, #4
 800b86a:	429d      	cmp	r5, r3
 800b86c:	461a      	mov	r2, r3
 800b86e:	d32e      	bcc.n	800b8ce <quorem+0xfa>
 800b870:	613c      	str	r4, [r7, #16]
 800b872:	4638      	mov	r0, r7
 800b874:	f001 f8c0 	bl	800c9f8 <__mcmp>
 800b878:	2800      	cmp	r0, #0
 800b87a:	db24      	blt.n	800b8c6 <quorem+0xf2>
 800b87c:	3601      	adds	r6, #1
 800b87e:	4628      	mov	r0, r5
 800b880:	f04f 0c00 	mov.w	ip, #0
 800b884:	f858 2b04 	ldr.w	r2, [r8], #4
 800b888:	f8d0 e000 	ldr.w	lr, [r0]
 800b88c:	b293      	uxth	r3, r2
 800b88e:	ebac 0303 	sub.w	r3, ip, r3
 800b892:	0c12      	lsrs	r2, r2, #16
 800b894:	fa13 f38e 	uxtah	r3, r3, lr
 800b898:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b89c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8a6:	45c1      	cmp	r9, r8
 800b8a8:	f840 3b04 	str.w	r3, [r0], #4
 800b8ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8b0:	d2e8      	bcs.n	800b884 <quorem+0xb0>
 800b8b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ba:	b922      	cbnz	r2, 800b8c6 <quorem+0xf2>
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	429d      	cmp	r5, r3
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	d30a      	bcc.n	800b8da <quorem+0x106>
 800b8c4:	613c      	str	r4, [r7, #16]
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	b003      	add	sp, #12
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	6812      	ldr	r2, [r2, #0]
 800b8d0:	3b04      	subs	r3, #4
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	d1cc      	bne.n	800b870 <quorem+0x9c>
 800b8d6:	3c01      	subs	r4, #1
 800b8d8:	e7c7      	b.n	800b86a <quorem+0x96>
 800b8da:	6812      	ldr	r2, [r2, #0]
 800b8dc:	3b04      	subs	r3, #4
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d1f0      	bne.n	800b8c4 <quorem+0xf0>
 800b8e2:	3c01      	subs	r4, #1
 800b8e4:	e7eb      	b.n	800b8be <quorem+0xea>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e7ee      	b.n	800b8c8 <quorem+0xf4>
 800b8ea:	0000      	movs	r0, r0
 800b8ec:	0000      	movs	r0, r0
	...

0800b8f0 <_dtoa_r>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	ed2d 8b02 	vpush	{d8}
 800b8f8:	ec57 6b10 	vmov	r6, r7, d0
 800b8fc:	b095      	sub	sp, #84	; 0x54
 800b8fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b900:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b904:	9105      	str	r1, [sp, #20]
 800b906:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b90a:	4604      	mov	r4, r0
 800b90c:	9209      	str	r2, [sp, #36]	; 0x24
 800b90e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b910:	b975      	cbnz	r5, 800b930 <_dtoa_r+0x40>
 800b912:	2010      	movs	r0, #16
 800b914:	f000 fddc 	bl	800c4d0 <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	6260      	str	r0, [r4, #36]	; 0x24
 800b91c:	b920      	cbnz	r0, 800b928 <_dtoa_r+0x38>
 800b91e:	4bb2      	ldr	r3, [pc, #712]	; (800bbe8 <_dtoa_r+0x2f8>)
 800b920:	21ea      	movs	r1, #234	; 0xea
 800b922:	48b2      	ldr	r0, [pc, #712]	; (800bbec <_dtoa_r+0x2fc>)
 800b924:	f001 fb8e 	bl	800d044 <__assert_func>
 800b928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b92c:	6005      	str	r5, [r0, #0]
 800b92e:	60c5      	str	r5, [r0, #12]
 800b930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b932:	6819      	ldr	r1, [r3, #0]
 800b934:	b151      	cbz	r1, 800b94c <_dtoa_r+0x5c>
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	604a      	str	r2, [r1, #4]
 800b93a:	2301      	movs	r3, #1
 800b93c:	4093      	lsls	r3, r2
 800b93e:	608b      	str	r3, [r1, #8]
 800b940:	4620      	mov	r0, r4
 800b942:	f000 fe1b 	bl	800c57c <_Bfree>
 800b946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	1e3b      	subs	r3, r7, #0
 800b94e:	bfb9      	ittee	lt
 800b950:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b954:	9303      	strlt	r3, [sp, #12]
 800b956:	2300      	movge	r3, #0
 800b958:	f8c8 3000 	strge.w	r3, [r8]
 800b95c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b960:	4ba3      	ldr	r3, [pc, #652]	; (800bbf0 <_dtoa_r+0x300>)
 800b962:	bfbc      	itt	lt
 800b964:	2201      	movlt	r2, #1
 800b966:	f8c8 2000 	strlt.w	r2, [r8]
 800b96a:	ea33 0309 	bics.w	r3, r3, r9
 800b96e:	d11b      	bne.n	800b9a8 <_dtoa_r+0xb8>
 800b970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b972:	f242 730f 	movw	r3, #9999	; 0x270f
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97c:	4333      	orrs	r3, r6
 800b97e:	f000 857a 	beq.w	800c476 <_dtoa_r+0xb86>
 800b982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b984:	b963      	cbnz	r3, 800b9a0 <_dtoa_r+0xb0>
 800b986:	4b9b      	ldr	r3, [pc, #620]	; (800bbf4 <_dtoa_r+0x304>)
 800b988:	e024      	b.n	800b9d4 <_dtoa_r+0xe4>
 800b98a:	4b9b      	ldr	r3, [pc, #620]	; (800bbf8 <_dtoa_r+0x308>)
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	9800      	ldr	r0, [sp, #0]
 800b996:	b015      	add	sp, #84	; 0x54
 800b998:	ecbd 8b02 	vpop	{d8}
 800b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a0:	4b94      	ldr	r3, [pc, #592]	; (800bbf4 <_dtoa_r+0x304>)
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	3303      	adds	r3, #3
 800b9a6:	e7f3      	b.n	800b990 <_dtoa_r+0xa0>
 800b9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	ec51 0b17 	vmov	r0, r1, d7
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b9b8:	f7f5 f896 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9bc:	4680      	mov	r8, r0
 800b9be:	b158      	cbz	r0, 800b9d8 <_dtoa_r+0xe8>
 800b9c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 8551 	beq.w	800c470 <_dtoa_r+0xb80>
 800b9ce:	488b      	ldr	r0, [pc, #556]	; (800bbfc <_dtoa_r+0x30c>)
 800b9d0:	6018      	str	r0, [r3, #0]
 800b9d2:	1e43      	subs	r3, r0, #1
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	e7dd      	b.n	800b994 <_dtoa_r+0xa4>
 800b9d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9dc:	aa12      	add	r2, sp, #72	; 0x48
 800b9de:	a913      	add	r1, sp, #76	; 0x4c
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f001 f8ad 	bl	800cb40 <__d2b>
 800b9e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9ea:	4683      	mov	fp, r0
 800b9ec:	2d00      	cmp	r5, #0
 800b9ee:	d07c      	beq.n	800baea <_dtoa_r+0x1fa>
 800b9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b9fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba0a:	4b7d      	ldr	r3, [pc, #500]	; (800bc00 <_dtoa_r+0x310>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4630      	mov	r0, r6
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f4 fc49 	bl	80002a8 <__aeabi_dsub>
 800ba16:	a36e      	add	r3, pc, #440	; (adr r3, 800bbd0 <_dtoa_r+0x2e0>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	f7f4 fdfc 	bl	8000618 <__aeabi_dmul>
 800ba20:	a36d      	add	r3, pc, #436	; (adr r3, 800bbd8 <_dtoa_r+0x2e8>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc41 	bl	80002ac <__adddf3>
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	460f      	mov	r7, r1
 800ba30:	f7f4 fd88 	bl	8000544 <__aeabi_i2d>
 800ba34:	a36a      	add	r3, pc, #424	; (adr r3, 800bbe0 <_dtoa_r+0x2f0>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fded 	bl	8000618 <__aeabi_dmul>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc31 	bl	80002ac <__adddf3>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	f7f5 f893 	bl	8000b78 <__aeabi_d2iz>
 800ba52:	2200      	movs	r2, #0
 800ba54:	4682      	mov	sl, r0
 800ba56:	2300      	movs	r3, #0
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f5 f84e 	bl	8000afc <__aeabi_dcmplt>
 800ba60:	b148      	cbz	r0, 800ba76 <_dtoa_r+0x186>
 800ba62:	4650      	mov	r0, sl
 800ba64:	f7f4 fd6e 	bl	8000544 <__aeabi_i2d>
 800ba68:	4632      	mov	r2, r6
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	f7f5 f83c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba70:	b908      	cbnz	r0, 800ba76 <_dtoa_r+0x186>
 800ba72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba76:	f1ba 0f16 	cmp.w	sl, #22
 800ba7a:	d854      	bhi.n	800bb26 <_dtoa_r+0x236>
 800ba7c:	4b61      	ldr	r3, [pc, #388]	; (800bc04 <_dtoa_r+0x314>)
 800ba7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba8a:	f7f5 f837 	bl	8000afc <__aeabi_dcmplt>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d04b      	beq.n	800bb2a <_dtoa_r+0x23a>
 800ba92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba96:	2300      	movs	r3, #0
 800ba98:	930e      	str	r3, [sp, #56]	; 0x38
 800ba9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba9c:	1b5d      	subs	r5, r3, r5
 800ba9e:	1e6b      	subs	r3, r5, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	bf43      	ittte	mi
 800baa4:	2300      	movmi	r3, #0
 800baa6:	f1c5 0801 	rsbmi	r8, r5, #1
 800baaa:	9304      	strmi	r3, [sp, #16]
 800baac:	f04f 0800 	movpl.w	r8, #0
 800bab0:	f1ba 0f00 	cmp.w	sl, #0
 800bab4:	db3b      	blt.n	800bb2e <_dtoa_r+0x23e>
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800babc:	4453      	add	r3, sl
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	2300      	movs	r3, #0
 800bac2:	9306      	str	r3, [sp, #24]
 800bac4:	9b05      	ldr	r3, [sp, #20]
 800bac6:	2b09      	cmp	r3, #9
 800bac8:	d869      	bhi.n	800bb9e <_dtoa_r+0x2ae>
 800baca:	2b05      	cmp	r3, #5
 800bacc:	bfc4      	itt	gt
 800bace:	3b04      	subgt	r3, #4
 800bad0:	9305      	strgt	r3, [sp, #20]
 800bad2:	9b05      	ldr	r3, [sp, #20]
 800bad4:	f1a3 0302 	sub.w	r3, r3, #2
 800bad8:	bfcc      	ite	gt
 800bada:	2500      	movgt	r5, #0
 800badc:	2501      	movle	r5, #1
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d869      	bhi.n	800bbb6 <_dtoa_r+0x2c6>
 800bae2:	e8df f003 	tbb	[pc, r3]
 800bae6:	4e2c      	.short	0x4e2c
 800bae8:	5a4c      	.short	0x5a4c
 800baea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800baee:	441d      	add	r5, r3
 800baf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800baf4:	2b20      	cmp	r3, #32
 800baf6:	bfc1      	itttt	gt
 800baf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bafc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb00:	fa09 f303 	lslgt.w	r3, r9, r3
 800bb04:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb08:	bfda      	itte	le
 800bb0a:	f1c3 0320 	rsble	r3, r3, #32
 800bb0e:	fa06 f003 	lslle.w	r0, r6, r3
 800bb12:	4318      	orrgt	r0, r3
 800bb14:	f7f4 fd06 	bl	8000524 <__aeabi_ui2d>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb20:	3d01      	subs	r5, #1
 800bb22:	9310      	str	r3, [sp, #64]	; 0x40
 800bb24:	e771      	b.n	800ba0a <_dtoa_r+0x11a>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e7b6      	b.n	800ba98 <_dtoa_r+0x1a8>
 800bb2a:	900e      	str	r0, [sp, #56]	; 0x38
 800bb2c:	e7b5      	b.n	800ba9a <_dtoa_r+0x1aa>
 800bb2e:	f1ca 0300 	rsb	r3, sl, #0
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	2300      	movs	r3, #0
 800bb36:	eba8 080a 	sub.w	r8, r8, sl
 800bb3a:	930d      	str	r3, [sp, #52]	; 0x34
 800bb3c:	e7c2      	b.n	800bac4 <_dtoa_r+0x1d4>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9308      	str	r3, [sp, #32]
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dc39      	bgt.n	800bbbc <_dtoa_r+0x2cc>
 800bb48:	f04f 0901 	mov.w	r9, #1
 800bb4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb50:	464b      	mov	r3, r9
 800bb52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bb56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb58:	2200      	movs	r2, #0
 800bb5a:	6042      	str	r2, [r0, #4]
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	f102 0614 	add.w	r6, r2, #20
 800bb62:	429e      	cmp	r6, r3
 800bb64:	6841      	ldr	r1, [r0, #4]
 800bb66:	d92f      	bls.n	800bbc8 <_dtoa_r+0x2d8>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f000 fcc7 	bl	800c4fc <_Balloc>
 800bb6e:	9000      	str	r0, [sp, #0]
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d14b      	bne.n	800bc0c <_dtoa_r+0x31c>
 800bb74:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <_dtoa_r+0x318>)
 800bb76:	4602      	mov	r2, r0
 800bb78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb7c:	e6d1      	b.n	800b922 <_dtoa_r+0x32>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e7de      	b.n	800bb40 <_dtoa_r+0x250>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb88:	eb0a 0903 	add.w	r9, sl, r3
 800bb8c:	f109 0301 	add.w	r3, r9, #1
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	bfb8      	it	lt
 800bb96:	2301      	movlt	r3, #1
 800bb98:	e7dd      	b.n	800bb56 <_dtoa_r+0x266>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7f2      	b.n	800bb84 <_dtoa_r+0x294>
 800bb9e:	2501      	movs	r5, #1
 800bba0:	2300      	movs	r3, #0
 800bba2:	9305      	str	r3, [sp, #20]
 800bba4:	9508      	str	r5, [sp, #32]
 800bba6:	f04f 39ff 	mov.w	r9, #4294967295
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbb0:	2312      	movs	r3, #18
 800bbb2:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb4:	e7cf      	b.n	800bb56 <_dtoa_r+0x266>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	9308      	str	r3, [sp, #32]
 800bbba:	e7f4      	b.n	800bba6 <_dtoa_r+0x2b6>
 800bbbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bbc0:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbc4:	464b      	mov	r3, r9
 800bbc6:	e7c6      	b.n	800bb56 <_dtoa_r+0x266>
 800bbc8:	3101      	adds	r1, #1
 800bbca:	6041      	str	r1, [r0, #4]
 800bbcc:	0052      	lsls	r2, r2, #1
 800bbce:	e7c6      	b.n	800bb5e <_dtoa_r+0x26e>
 800bbd0:	636f4361 	.word	0x636f4361
 800bbd4:	3fd287a7 	.word	0x3fd287a7
 800bbd8:	8b60c8b3 	.word	0x8b60c8b3
 800bbdc:	3fc68a28 	.word	0x3fc68a28
 800bbe0:	509f79fb 	.word	0x509f79fb
 800bbe4:	3fd34413 	.word	0x3fd34413
 800bbe8:	0800dde5 	.word	0x0800dde5
 800bbec:	0800ddfc 	.word	0x0800ddfc
 800bbf0:	7ff00000 	.word	0x7ff00000
 800bbf4:	0800dde1 	.word	0x0800dde1
 800bbf8:	0800ddd8 	.word	0x0800ddd8
 800bbfc:	0800ddb5 	.word	0x0800ddb5
 800bc00:	3ff80000 	.word	0x3ff80000
 800bc04:	0800def8 	.word	0x0800def8
 800bc08:	0800de5b 	.word	0x0800de5b
 800bc0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc0e:	9a00      	ldr	r2, [sp, #0]
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	9b01      	ldr	r3, [sp, #4]
 800bc14:	2b0e      	cmp	r3, #14
 800bc16:	f200 80ad 	bhi.w	800bd74 <_dtoa_r+0x484>
 800bc1a:	2d00      	cmp	r5, #0
 800bc1c:	f000 80aa 	beq.w	800bd74 <_dtoa_r+0x484>
 800bc20:	f1ba 0f00 	cmp.w	sl, #0
 800bc24:	dd36      	ble.n	800bc94 <_dtoa_r+0x3a4>
 800bc26:	4ac3      	ldr	r2, [pc, #780]	; (800bf34 <_dtoa_r+0x644>)
 800bc28:	f00a 030f 	and.w	r3, sl, #15
 800bc2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc30:	ed93 7b00 	vldr	d7, [r3]
 800bc34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc38:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bc3c:	eeb0 8a47 	vmov.f32	s16, s14
 800bc40:	eef0 8a67 	vmov.f32	s17, s15
 800bc44:	d016      	beq.n	800bc74 <_dtoa_r+0x384>
 800bc46:	4bbc      	ldr	r3, [pc, #752]	; (800bf38 <_dtoa_r+0x648>)
 800bc48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc50:	f7f4 fe0c 	bl	800086c <__aeabi_ddiv>
 800bc54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc58:	f007 070f 	and.w	r7, r7, #15
 800bc5c:	2503      	movs	r5, #3
 800bc5e:	4eb6      	ldr	r6, [pc, #728]	; (800bf38 <_dtoa_r+0x648>)
 800bc60:	b957      	cbnz	r7, 800bc78 <_dtoa_r+0x388>
 800bc62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc66:	ec53 2b18 	vmov	r2, r3, d8
 800bc6a:	f7f4 fdff 	bl	800086c <__aeabi_ddiv>
 800bc6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc72:	e029      	b.n	800bcc8 <_dtoa_r+0x3d8>
 800bc74:	2502      	movs	r5, #2
 800bc76:	e7f2      	b.n	800bc5e <_dtoa_r+0x36e>
 800bc78:	07f9      	lsls	r1, r7, #31
 800bc7a:	d508      	bpl.n	800bc8e <_dtoa_r+0x39e>
 800bc7c:	ec51 0b18 	vmov	r0, r1, d8
 800bc80:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc84:	f7f4 fcc8 	bl	8000618 <__aeabi_dmul>
 800bc88:	ec41 0b18 	vmov	d8, r0, r1
 800bc8c:	3501      	adds	r5, #1
 800bc8e:	107f      	asrs	r7, r7, #1
 800bc90:	3608      	adds	r6, #8
 800bc92:	e7e5      	b.n	800bc60 <_dtoa_r+0x370>
 800bc94:	f000 80a6 	beq.w	800bde4 <_dtoa_r+0x4f4>
 800bc98:	f1ca 0600 	rsb	r6, sl, #0
 800bc9c:	4ba5      	ldr	r3, [pc, #660]	; (800bf34 <_dtoa_r+0x644>)
 800bc9e:	4fa6      	ldr	r7, [pc, #664]	; (800bf38 <_dtoa_r+0x648>)
 800bca0:	f006 020f 	and.w	r2, r6, #15
 800bca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bcb0:	f7f4 fcb2 	bl	8000618 <__aeabi_dmul>
 800bcb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcb8:	1136      	asrs	r6, r6, #4
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2502      	movs	r5, #2
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	f040 8085 	bne.w	800bdce <_dtoa_r+0x4de>
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1d2      	bne.n	800bc6e <_dtoa_r+0x37e>
 800bcc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 808c 	beq.w	800bde8 <_dtoa_r+0x4f8>
 800bcd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcd4:	4b99      	ldr	r3, [pc, #612]	; (800bf3c <_dtoa_r+0x64c>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 ff0e 	bl	8000afc <__aeabi_dcmplt>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f000 8081 	beq.w	800bde8 <_dtoa_r+0x4f8>
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d07d      	beq.n	800bde8 <_dtoa_r+0x4f8>
 800bcec:	f1b9 0f00 	cmp.w	r9, #0
 800bcf0:	dd3c      	ble.n	800bd6c <_dtoa_r+0x47c>
 800bcf2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	4b91      	ldr	r3, [pc, #580]	; (800bf40 <_dtoa_r+0x650>)
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 fc8a 	bl	8000618 <__aeabi_dmul>
 800bd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd08:	3501      	adds	r5, #1
 800bd0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bd0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd12:	4628      	mov	r0, r5
 800bd14:	f7f4 fc16 	bl	8000544 <__aeabi_i2d>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	4b88      	ldr	r3, [pc, #544]	; (800bf44 <_dtoa_r+0x654>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	f7f4 fac2 	bl	80002ac <__adddf3>
 800bd28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d15c      	bne.n	800bdf2 <_dtoa_r+0x502>
 800bd38:	4b83      	ldr	r3, [pc, #524]	; (800bf48 <_dtoa_r+0x658>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fab2 	bl	80002a8 <__aeabi_dsub>
 800bd44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd48:	4606      	mov	r6, r0
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	f7f4 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	f040 8296 	bne.w	800c282 <_dtoa_r+0x992>
 800bd56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd60:	4639      	mov	r1, r7
 800bd62:	f7f4 fecb 	bl	8000afc <__aeabi_dcmplt>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f040 8288 	bne.w	800c27c <_dtoa_r+0x98c>
 800bd6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bd70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f2c0 8158 	blt.w	800c02c <_dtoa_r+0x73c>
 800bd7c:	f1ba 0f0e 	cmp.w	sl, #14
 800bd80:	f300 8154 	bgt.w	800c02c <_dtoa_r+0x73c>
 800bd84:	4b6b      	ldr	r3, [pc, #428]	; (800bf34 <_dtoa_r+0x644>)
 800bd86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f280 80e3 	bge.w	800bf5c <_dtoa_r+0x66c>
 800bd96:	9b01      	ldr	r3, [sp, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f300 80df 	bgt.w	800bf5c <_dtoa_r+0x66c>
 800bd9e:	f040 826d 	bne.w	800c27c <_dtoa_r+0x98c>
 800bda2:	4b69      	ldr	r3, [pc, #420]	; (800bf48 <_dtoa_r+0x658>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	4640      	mov	r0, r8
 800bda8:	4649      	mov	r1, r9
 800bdaa:	f7f4 fc35 	bl	8000618 <__aeabi_dmul>
 800bdae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdb2:	f7f4 feb7 	bl	8000b24 <__aeabi_dcmpge>
 800bdb6:	9e01      	ldr	r6, [sp, #4]
 800bdb8:	4637      	mov	r7, r6
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f040 8243 	bne.w	800c246 <_dtoa_r+0x956>
 800bdc0:	9d00      	ldr	r5, [sp, #0]
 800bdc2:	2331      	movs	r3, #49	; 0x31
 800bdc4:	f805 3b01 	strb.w	r3, [r5], #1
 800bdc8:	f10a 0a01 	add.w	sl, sl, #1
 800bdcc:	e23f      	b.n	800c24e <_dtoa_r+0x95e>
 800bdce:	07f2      	lsls	r2, r6, #31
 800bdd0:	d505      	bpl.n	800bdde <_dtoa_r+0x4ee>
 800bdd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd6:	f7f4 fc1f 	bl	8000618 <__aeabi_dmul>
 800bdda:	3501      	adds	r5, #1
 800bddc:	2301      	movs	r3, #1
 800bdde:	1076      	asrs	r6, r6, #1
 800bde0:	3708      	adds	r7, #8
 800bde2:	e76c      	b.n	800bcbe <_dtoa_r+0x3ce>
 800bde4:	2502      	movs	r5, #2
 800bde6:	e76f      	b.n	800bcc8 <_dtoa_r+0x3d8>
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdee:	930c      	str	r3, [sp, #48]	; 0x30
 800bdf0:	e78d      	b.n	800bd0e <_dtoa_r+0x41e>
 800bdf2:	9900      	ldr	r1, [sp, #0]
 800bdf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdf8:	4b4e      	ldr	r3, [pc, #312]	; (800bf34 <_dtoa_r+0x644>)
 800bdfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdfe:	4401      	add	r1, r0
 800be00:	9102      	str	r1, [sp, #8]
 800be02:	9908      	ldr	r1, [sp, #32]
 800be04:	eeb0 8a47 	vmov.f32	s16, s14
 800be08:	eef0 8a67 	vmov.f32	s17, s15
 800be0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be14:	2900      	cmp	r1, #0
 800be16:	d045      	beq.n	800bea4 <_dtoa_r+0x5b4>
 800be18:	494c      	ldr	r1, [pc, #304]	; (800bf4c <_dtoa_r+0x65c>)
 800be1a:	2000      	movs	r0, #0
 800be1c:	f7f4 fd26 	bl	800086c <__aeabi_ddiv>
 800be20:	ec53 2b18 	vmov	r2, r3, d8
 800be24:	f7f4 fa40 	bl	80002a8 <__aeabi_dsub>
 800be28:	9d00      	ldr	r5, [sp, #0]
 800be2a:	ec41 0b18 	vmov	d8, r0, r1
 800be2e:	4639      	mov	r1, r7
 800be30:	4630      	mov	r0, r6
 800be32:	f7f4 fea1 	bl	8000b78 <__aeabi_d2iz>
 800be36:	900c      	str	r0, [sp, #48]	; 0x30
 800be38:	f7f4 fb84 	bl	8000544 <__aeabi_i2d>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4630      	mov	r0, r6
 800be42:	4639      	mov	r1, r7
 800be44:	f7f4 fa30 	bl	80002a8 <__aeabi_dsub>
 800be48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be4a:	3330      	adds	r3, #48	; 0x30
 800be4c:	f805 3b01 	strb.w	r3, [r5], #1
 800be50:	ec53 2b18 	vmov	r2, r3, d8
 800be54:	4606      	mov	r6, r0
 800be56:	460f      	mov	r7, r1
 800be58:	f7f4 fe50 	bl	8000afc <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d165      	bne.n	800bf2c <_dtoa_r+0x63c>
 800be60:	4632      	mov	r2, r6
 800be62:	463b      	mov	r3, r7
 800be64:	4935      	ldr	r1, [pc, #212]	; (800bf3c <_dtoa_r+0x64c>)
 800be66:	2000      	movs	r0, #0
 800be68:	f7f4 fa1e 	bl	80002a8 <__aeabi_dsub>
 800be6c:	ec53 2b18 	vmov	r2, r3, d8
 800be70:	f7f4 fe44 	bl	8000afc <__aeabi_dcmplt>
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 80b9 	bne.w	800bfec <_dtoa_r+0x6fc>
 800be7a:	9b02      	ldr	r3, [sp, #8]
 800be7c:	429d      	cmp	r5, r3
 800be7e:	f43f af75 	beq.w	800bd6c <_dtoa_r+0x47c>
 800be82:	4b2f      	ldr	r3, [pc, #188]	; (800bf40 <_dtoa_r+0x650>)
 800be84:	ec51 0b18 	vmov	r0, r1, d8
 800be88:	2200      	movs	r2, #0
 800be8a:	f7f4 fbc5 	bl	8000618 <__aeabi_dmul>
 800be8e:	4b2c      	ldr	r3, [pc, #176]	; (800bf40 <_dtoa_r+0x650>)
 800be90:	ec41 0b18 	vmov	d8, r0, r1
 800be94:	2200      	movs	r2, #0
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 fbbd 	bl	8000618 <__aeabi_dmul>
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	e7c4      	b.n	800be2e <_dtoa_r+0x53e>
 800bea4:	ec51 0b17 	vmov	r0, r1, d7
 800bea8:	f7f4 fbb6 	bl	8000618 <__aeabi_dmul>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	9d00      	ldr	r5, [sp, #0]
 800beb0:	930c      	str	r3, [sp, #48]	; 0x30
 800beb2:	ec41 0b18 	vmov	d8, r0, r1
 800beb6:	4639      	mov	r1, r7
 800beb8:	4630      	mov	r0, r6
 800beba:	f7f4 fe5d 	bl	8000b78 <__aeabi_d2iz>
 800bebe:	9011      	str	r0, [sp, #68]	; 0x44
 800bec0:	f7f4 fb40 	bl	8000544 <__aeabi_i2d>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4630      	mov	r0, r6
 800beca:	4639      	mov	r1, r7
 800becc:	f7f4 f9ec 	bl	80002a8 <__aeabi_dsub>
 800bed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bed2:	3330      	adds	r3, #48	; 0x30
 800bed4:	f805 3b01 	strb.w	r3, [r5], #1
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	429d      	cmp	r5, r3
 800bedc:	4606      	mov	r6, r0
 800bede:	460f      	mov	r7, r1
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	d134      	bne.n	800bf50 <_dtoa_r+0x660>
 800bee6:	4b19      	ldr	r3, [pc, #100]	; (800bf4c <_dtoa_r+0x65c>)
 800bee8:	ec51 0b18 	vmov	r0, r1, d8
 800beec:	f7f4 f9de 	bl	80002ac <__adddf3>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4630      	mov	r0, r6
 800bef6:	4639      	mov	r1, r7
 800bef8:	f7f4 fe1e 	bl	8000b38 <__aeabi_dcmpgt>
 800befc:	2800      	cmp	r0, #0
 800befe:	d175      	bne.n	800bfec <_dtoa_r+0x6fc>
 800bf00:	ec53 2b18 	vmov	r2, r3, d8
 800bf04:	4911      	ldr	r1, [pc, #68]	; (800bf4c <_dtoa_r+0x65c>)
 800bf06:	2000      	movs	r0, #0
 800bf08:	f7f4 f9ce 	bl	80002a8 <__aeabi_dsub>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fdf2 	bl	8000afc <__aeabi_dcmplt>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f43f af27 	beq.w	800bd6c <_dtoa_r+0x47c>
 800bf1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf20:	1e6b      	subs	r3, r5, #1
 800bf22:	930c      	str	r3, [sp, #48]	; 0x30
 800bf24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf28:	2b30      	cmp	r3, #48	; 0x30
 800bf2a:	d0f8      	beq.n	800bf1e <_dtoa_r+0x62e>
 800bf2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf30:	e04a      	b.n	800bfc8 <_dtoa_r+0x6d8>
 800bf32:	bf00      	nop
 800bf34:	0800def8 	.word	0x0800def8
 800bf38:	0800ded0 	.word	0x0800ded0
 800bf3c:	3ff00000 	.word	0x3ff00000
 800bf40:	40240000 	.word	0x40240000
 800bf44:	401c0000 	.word	0x401c0000
 800bf48:	40140000 	.word	0x40140000
 800bf4c:	3fe00000 	.word	0x3fe00000
 800bf50:	4baf      	ldr	r3, [pc, #700]	; (800c210 <_dtoa_r+0x920>)
 800bf52:	f7f4 fb61 	bl	8000618 <__aeabi_dmul>
 800bf56:	4606      	mov	r6, r0
 800bf58:	460f      	mov	r7, r1
 800bf5a:	e7ac      	b.n	800beb6 <_dtoa_r+0x5c6>
 800bf5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf60:	9d00      	ldr	r5, [sp, #0]
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fc7f 	bl	800086c <__aeabi_ddiv>
 800bf6e:	f7f4 fe03 	bl	8000b78 <__aeabi_d2iz>
 800bf72:	9002      	str	r0, [sp, #8]
 800bf74:	f7f4 fae6 	bl	8000544 <__aeabi_i2d>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	f7f4 fb4c 	bl	8000618 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f7f4 f98e 	bl	80002a8 <__aeabi_dsub>
 800bf8c:	9e02      	ldr	r6, [sp, #8]
 800bf8e:	9f01      	ldr	r7, [sp, #4]
 800bf90:	3630      	adds	r6, #48	; 0x30
 800bf92:	f805 6b01 	strb.w	r6, [r5], #1
 800bf96:	9e00      	ldr	r6, [sp, #0]
 800bf98:	1bae      	subs	r6, r5, r6
 800bf9a:	42b7      	cmp	r7, r6
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	d137      	bne.n	800c012 <_dtoa_r+0x722>
 800bfa2:	f7f4 f983 	bl	80002ac <__adddf3>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f7f4 fdc3 	bl	8000b38 <__aeabi_dcmpgt>
 800bfb2:	b9c8      	cbnz	r0, 800bfe8 <_dtoa_r+0x6f8>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fd94 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfc0:	b110      	cbz	r0, 800bfc8 <_dtoa_r+0x6d8>
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	07d9      	lsls	r1, r3, #31
 800bfc6:	d40f      	bmi.n	800bfe8 <_dtoa_r+0x6f8>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	4659      	mov	r1, fp
 800bfcc:	f000 fad6 	bl	800c57c <_Bfree>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	702b      	strb	r3, [r5, #0]
 800bfd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfd6:	f10a 0001 	add.w	r0, sl, #1
 800bfda:	6018      	str	r0, [r3, #0]
 800bfdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f43f acd8 	beq.w	800b994 <_dtoa_r+0xa4>
 800bfe4:	601d      	str	r5, [r3, #0]
 800bfe6:	e4d5      	b.n	800b994 <_dtoa_r+0xa4>
 800bfe8:	f8cd a01c 	str.w	sl, [sp, #28]
 800bfec:	462b      	mov	r3, r5
 800bfee:	461d      	mov	r5, r3
 800bff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff4:	2a39      	cmp	r2, #57	; 0x39
 800bff6:	d108      	bne.n	800c00a <_dtoa_r+0x71a>
 800bff8:	9a00      	ldr	r2, [sp, #0]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1f7      	bne.n	800bfee <_dtoa_r+0x6fe>
 800bffe:	9a07      	ldr	r2, [sp, #28]
 800c000:	9900      	ldr	r1, [sp, #0]
 800c002:	3201      	adds	r2, #1
 800c004:	9207      	str	r2, [sp, #28]
 800c006:	2230      	movs	r2, #48	; 0x30
 800c008:	700a      	strb	r2, [r1, #0]
 800c00a:	781a      	ldrb	r2, [r3, #0]
 800c00c:	3201      	adds	r2, #1
 800c00e:	701a      	strb	r2, [r3, #0]
 800c010:	e78c      	b.n	800bf2c <_dtoa_r+0x63c>
 800c012:	4b7f      	ldr	r3, [pc, #508]	; (800c210 <_dtoa_r+0x920>)
 800c014:	2200      	movs	r2, #0
 800c016:	f7f4 faff 	bl	8000618 <__aeabi_dmul>
 800c01a:	2200      	movs	r2, #0
 800c01c:	2300      	movs	r3, #0
 800c01e:	4606      	mov	r6, r0
 800c020:	460f      	mov	r7, r1
 800c022:	f7f4 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 800c026:	2800      	cmp	r0, #0
 800c028:	d09b      	beq.n	800bf62 <_dtoa_r+0x672>
 800c02a:	e7cd      	b.n	800bfc8 <_dtoa_r+0x6d8>
 800c02c:	9a08      	ldr	r2, [sp, #32]
 800c02e:	2a00      	cmp	r2, #0
 800c030:	f000 80c4 	beq.w	800c1bc <_dtoa_r+0x8cc>
 800c034:	9a05      	ldr	r2, [sp, #20]
 800c036:	2a01      	cmp	r2, #1
 800c038:	f300 80a8 	bgt.w	800c18c <_dtoa_r+0x89c>
 800c03c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c03e:	2a00      	cmp	r2, #0
 800c040:	f000 80a0 	beq.w	800c184 <_dtoa_r+0x894>
 800c044:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c048:	9e06      	ldr	r6, [sp, #24]
 800c04a:	4645      	mov	r5, r8
 800c04c:	9a04      	ldr	r2, [sp, #16]
 800c04e:	2101      	movs	r1, #1
 800c050:	441a      	add	r2, r3
 800c052:	4620      	mov	r0, r4
 800c054:	4498      	add	r8, r3
 800c056:	9204      	str	r2, [sp, #16]
 800c058:	f000 fb4c 	bl	800c6f4 <__i2b>
 800c05c:	4607      	mov	r7, r0
 800c05e:	2d00      	cmp	r5, #0
 800c060:	dd0b      	ble.n	800c07a <_dtoa_r+0x78a>
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dd08      	ble.n	800c07a <_dtoa_r+0x78a>
 800c068:	42ab      	cmp	r3, r5
 800c06a:	9a04      	ldr	r2, [sp, #16]
 800c06c:	bfa8      	it	ge
 800c06e:	462b      	movge	r3, r5
 800c070:	eba8 0803 	sub.w	r8, r8, r3
 800c074:	1aed      	subs	r5, r5, r3
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	9b06      	ldr	r3, [sp, #24]
 800c07c:	b1fb      	cbz	r3, 800c0be <_dtoa_r+0x7ce>
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 809f 	beq.w	800c1c4 <_dtoa_r+0x8d4>
 800c086:	2e00      	cmp	r6, #0
 800c088:	dd11      	ble.n	800c0ae <_dtoa_r+0x7be>
 800c08a:	4639      	mov	r1, r7
 800c08c:	4632      	mov	r2, r6
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fbec 	bl	800c86c <__pow5mult>
 800c094:	465a      	mov	r2, fp
 800c096:	4601      	mov	r1, r0
 800c098:	4607      	mov	r7, r0
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 fb40 	bl	800c720 <__multiply>
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	9007      	str	r0, [sp, #28]
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fa69 	bl	800c57c <_Bfree>
 800c0aa:	9b07      	ldr	r3, [sp, #28]
 800c0ac:	469b      	mov	fp, r3
 800c0ae:	9b06      	ldr	r3, [sp, #24]
 800c0b0:	1b9a      	subs	r2, r3, r6
 800c0b2:	d004      	beq.n	800c0be <_dtoa_r+0x7ce>
 800c0b4:	4659      	mov	r1, fp
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fbd8 	bl	800c86c <__pow5mult>
 800c0bc:	4683      	mov	fp, r0
 800c0be:	2101      	movs	r1, #1
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 fb17 	bl	800c6f4 <__i2b>
 800c0c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	dd7c      	ble.n	800c1c8 <_dtoa_r+0x8d8>
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	4601      	mov	r1, r0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fbca 	bl	800c86c <__pow5mult>
 800c0d8:	9b05      	ldr	r3, [sp, #20]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	4606      	mov	r6, r0
 800c0de:	dd76      	ble.n	800c1ce <_dtoa_r+0x8de>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	9306      	str	r3, [sp, #24]
 800c0e4:	6933      	ldr	r3, [r6, #16]
 800c0e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0ea:	6918      	ldr	r0, [r3, #16]
 800c0ec:	f000 fab2 	bl	800c654 <__hi0bits>
 800c0f0:	f1c0 0020 	rsb	r0, r0, #32
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	4418      	add	r0, r3
 800c0f8:	f010 001f 	ands.w	r0, r0, #31
 800c0fc:	f000 8086 	beq.w	800c20c <_dtoa_r+0x91c>
 800c100:	f1c0 0320 	rsb	r3, r0, #32
 800c104:	2b04      	cmp	r3, #4
 800c106:	dd7f      	ble.n	800c208 <_dtoa_r+0x918>
 800c108:	f1c0 001c 	rsb	r0, r0, #28
 800c10c:	9b04      	ldr	r3, [sp, #16]
 800c10e:	4403      	add	r3, r0
 800c110:	4480      	add	r8, r0
 800c112:	4405      	add	r5, r0
 800c114:	9304      	str	r3, [sp, #16]
 800c116:	f1b8 0f00 	cmp.w	r8, #0
 800c11a:	dd05      	ble.n	800c128 <_dtoa_r+0x838>
 800c11c:	4659      	mov	r1, fp
 800c11e:	4642      	mov	r2, r8
 800c120:	4620      	mov	r0, r4
 800c122:	f000 fbfd 	bl	800c920 <__lshift>
 800c126:	4683      	mov	fp, r0
 800c128:	9b04      	ldr	r3, [sp, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd05      	ble.n	800c13a <_dtoa_r+0x84a>
 800c12e:	4631      	mov	r1, r6
 800c130:	461a      	mov	r2, r3
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fbf4 	bl	800c920 <__lshift>
 800c138:	4606      	mov	r6, r0
 800c13a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d069      	beq.n	800c214 <_dtoa_r+0x924>
 800c140:	4631      	mov	r1, r6
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fc58 	bl	800c9f8 <__mcmp>
 800c148:	2800      	cmp	r0, #0
 800c14a:	da63      	bge.n	800c214 <_dtoa_r+0x924>
 800c14c:	2300      	movs	r3, #0
 800c14e:	4659      	mov	r1, fp
 800c150:	220a      	movs	r2, #10
 800c152:	4620      	mov	r0, r4
 800c154:	f000 fa34 	bl	800c5c0 <__multadd>
 800c158:	9b08      	ldr	r3, [sp, #32]
 800c15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c15e:	4683      	mov	fp, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 818f 	beq.w	800c484 <_dtoa_r+0xb94>
 800c166:	4639      	mov	r1, r7
 800c168:	2300      	movs	r3, #0
 800c16a:	220a      	movs	r2, #10
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fa27 	bl	800c5c0 <__multadd>
 800c172:	f1b9 0f00 	cmp.w	r9, #0
 800c176:	4607      	mov	r7, r0
 800c178:	f300 808e 	bgt.w	800c298 <_dtoa_r+0x9a8>
 800c17c:	9b05      	ldr	r3, [sp, #20]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	dc50      	bgt.n	800c224 <_dtoa_r+0x934>
 800c182:	e089      	b.n	800c298 <_dtoa_r+0x9a8>
 800c184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c18a:	e75d      	b.n	800c048 <_dtoa_r+0x758>
 800c18c:	9b01      	ldr	r3, [sp, #4]
 800c18e:	1e5e      	subs	r6, r3, #1
 800c190:	9b06      	ldr	r3, [sp, #24]
 800c192:	42b3      	cmp	r3, r6
 800c194:	bfbf      	itttt	lt
 800c196:	9b06      	ldrlt	r3, [sp, #24]
 800c198:	9606      	strlt	r6, [sp, #24]
 800c19a:	1af2      	sublt	r2, r6, r3
 800c19c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c19e:	bfb6      	itet	lt
 800c1a0:	189b      	addlt	r3, r3, r2
 800c1a2:	1b9e      	subge	r6, r3, r6
 800c1a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c1a6:	9b01      	ldr	r3, [sp, #4]
 800c1a8:	bfb8      	it	lt
 800c1aa:	2600      	movlt	r6, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bfb5      	itete	lt
 800c1b0:	eba8 0503 	sublt.w	r5, r8, r3
 800c1b4:	9b01      	ldrge	r3, [sp, #4]
 800c1b6:	2300      	movlt	r3, #0
 800c1b8:	4645      	movge	r5, r8
 800c1ba:	e747      	b.n	800c04c <_dtoa_r+0x75c>
 800c1bc:	9e06      	ldr	r6, [sp, #24]
 800c1be:	9f08      	ldr	r7, [sp, #32]
 800c1c0:	4645      	mov	r5, r8
 800c1c2:	e74c      	b.n	800c05e <_dtoa_r+0x76e>
 800c1c4:	9a06      	ldr	r2, [sp, #24]
 800c1c6:	e775      	b.n	800c0b4 <_dtoa_r+0x7c4>
 800c1c8:	9b05      	ldr	r3, [sp, #20]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	dc18      	bgt.n	800c200 <_dtoa_r+0x910>
 800c1ce:	9b02      	ldr	r3, [sp, #8]
 800c1d0:	b9b3      	cbnz	r3, 800c200 <_dtoa_r+0x910>
 800c1d2:	9b03      	ldr	r3, [sp, #12]
 800c1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1d8:	b9a3      	cbnz	r3, 800c204 <_dtoa_r+0x914>
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1e0:	0d1b      	lsrs	r3, r3, #20
 800c1e2:	051b      	lsls	r3, r3, #20
 800c1e4:	b12b      	cbz	r3, 800c1f2 <_dtoa_r+0x902>
 800c1e6:	9b04      	ldr	r3, [sp, #16]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	9304      	str	r3, [sp, #16]
 800c1ec:	f108 0801 	add.w	r8, r8, #1
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	9306      	str	r3, [sp, #24]
 800c1f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f47f af74 	bne.w	800c0e4 <_dtoa_r+0x7f4>
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	e779      	b.n	800c0f4 <_dtoa_r+0x804>
 800c200:	2300      	movs	r3, #0
 800c202:	e7f6      	b.n	800c1f2 <_dtoa_r+0x902>
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	e7f4      	b.n	800c1f2 <_dtoa_r+0x902>
 800c208:	d085      	beq.n	800c116 <_dtoa_r+0x826>
 800c20a:	4618      	mov	r0, r3
 800c20c:	301c      	adds	r0, #28
 800c20e:	e77d      	b.n	800c10c <_dtoa_r+0x81c>
 800c210:	40240000 	.word	0x40240000
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	dc38      	bgt.n	800c28c <_dtoa_r+0x99c>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	dd35      	ble.n	800c28c <_dtoa_r+0x99c>
 800c220:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c224:	f1b9 0f00 	cmp.w	r9, #0
 800c228:	d10d      	bne.n	800c246 <_dtoa_r+0x956>
 800c22a:	4631      	mov	r1, r6
 800c22c:	464b      	mov	r3, r9
 800c22e:	2205      	movs	r2, #5
 800c230:	4620      	mov	r0, r4
 800c232:	f000 f9c5 	bl	800c5c0 <__multadd>
 800c236:	4601      	mov	r1, r0
 800c238:	4606      	mov	r6, r0
 800c23a:	4658      	mov	r0, fp
 800c23c:	f000 fbdc 	bl	800c9f8 <__mcmp>
 800c240:	2800      	cmp	r0, #0
 800c242:	f73f adbd 	bgt.w	800bdc0 <_dtoa_r+0x4d0>
 800c246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c248:	9d00      	ldr	r5, [sp, #0]
 800c24a:	ea6f 0a03 	mvn.w	sl, r3
 800c24e:	f04f 0800 	mov.w	r8, #0
 800c252:	4631      	mov	r1, r6
 800c254:	4620      	mov	r0, r4
 800c256:	f000 f991 	bl	800c57c <_Bfree>
 800c25a:	2f00      	cmp	r7, #0
 800c25c:	f43f aeb4 	beq.w	800bfc8 <_dtoa_r+0x6d8>
 800c260:	f1b8 0f00 	cmp.w	r8, #0
 800c264:	d005      	beq.n	800c272 <_dtoa_r+0x982>
 800c266:	45b8      	cmp	r8, r7
 800c268:	d003      	beq.n	800c272 <_dtoa_r+0x982>
 800c26a:	4641      	mov	r1, r8
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 f985 	bl	800c57c <_Bfree>
 800c272:	4639      	mov	r1, r7
 800c274:	4620      	mov	r0, r4
 800c276:	f000 f981 	bl	800c57c <_Bfree>
 800c27a:	e6a5      	b.n	800bfc8 <_dtoa_r+0x6d8>
 800c27c:	2600      	movs	r6, #0
 800c27e:	4637      	mov	r7, r6
 800c280:	e7e1      	b.n	800c246 <_dtoa_r+0x956>
 800c282:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c284:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c288:	4637      	mov	r7, r6
 800c28a:	e599      	b.n	800bdc0 <_dtoa_r+0x4d0>
 800c28c:	9b08      	ldr	r3, [sp, #32]
 800c28e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80fd 	beq.w	800c492 <_dtoa_r+0xba2>
 800c298:	2d00      	cmp	r5, #0
 800c29a:	dd05      	ble.n	800c2a8 <_dtoa_r+0x9b8>
 800c29c:	4639      	mov	r1, r7
 800c29e:	462a      	mov	r2, r5
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f000 fb3d 	bl	800c920 <__lshift>
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	9b06      	ldr	r3, [sp, #24]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d05c      	beq.n	800c368 <_dtoa_r+0xa78>
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 f923 	bl	800c4fc <_Balloc>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	b928      	cbnz	r0, 800c2c6 <_dtoa_r+0x9d6>
 800c2ba:	4b80      	ldr	r3, [pc, #512]	; (800c4bc <_dtoa_r+0xbcc>)
 800c2bc:	4602      	mov	r2, r0
 800c2be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2c2:	f7ff bb2e 	b.w	800b922 <_dtoa_r+0x32>
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	3202      	adds	r2, #2
 800c2ca:	0092      	lsls	r2, r2, #2
 800c2cc:	f107 010c 	add.w	r1, r7, #12
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	f000 f905 	bl	800c4e0 <memcpy>
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fb20 	bl	800c920 <__lshift>
 800c2e0:	9b00      	ldr	r3, [sp, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	9b00      	ldr	r3, [sp, #0]
 800c2e8:	444b      	add	r3, r9
 800c2ea:	9307      	str	r3, [sp, #28]
 800c2ec:	9b02      	ldr	r3, [sp, #8]
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	46b8      	mov	r8, r7
 800c2f4:	9306      	str	r3, [sp, #24]
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	4658      	mov	r0, fp
 800c300:	9302      	str	r3, [sp, #8]
 800c302:	f7ff fa67 	bl	800b7d4 <quorem>
 800c306:	4603      	mov	r3, r0
 800c308:	3330      	adds	r3, #48	; 0x30
 800c30a:	9004      	str	r0, [sp, #16]
 800c30c:	4641      	mov	r1, r8
 800c30e:	4658      	mov	r0, fp
 800c310:	9308      	str	r3, [sp, #32]
 800c312:	f000 fb71 	bl	800c9f8 <__mcmp>
 800c316:	463a      	mov	r2, r7
 800c318:	4681      	mov	r9, r0
 800c31a:	4631      	mov	r1, r6
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fb87 	bl	800ca30 <__mdiff>
 800c322:	68c2      	ldr	r2, [r0, #12]
 800c324:	9b08      	ldr	r3, [sp, #32]
 800c326:	4605      	mov	r5, r0
 800c328:	bb02      	cbnz	r2, 800c36c <_dtoa_r+0xa7c>
 800c32a:	4601      	mov	r1, r0
 800c32c:	4658      	mov	r0, fp
 800c32e:	f000 fb63 	bl	800c9f8 <__mcmp>
 800c332:	9b08      	ldr	r3, [sp, #32]
 800c334:	4602      	mov	r2, r0
 800c336:	4629      	mov	r1, r5
 800c338:	4620      	mov	r0, r4
 800c33a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c33e:	f000 f91d 	bl	800c57c <_Bfree>
 800c342:	9b05      	ldr	r3, [sp, #20]
 800c344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c346:	9d01      	ldr	r5, [sp, #4]
 800c348:	ea43 0102 	orr.w	r1, r3, r2
 800c34c:	9b06      	ldr	r3, [sp, #24]
 800c34e:	430b      	orrs	r3, r1
 800c350:	9b08      	ldr	r3, [sp, #32]
 800c352:	d10d      	bne.n	800c370 <_dtoa_r+0xa80>
 800c354:	2b39      	cmp	r3, #57	; 0x39
 800c356:	d029      	beq.n	800c3ac <_dtoa_r+0xabc>
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	dd01      	ble.n	800c362 <_dtoa_r+0xa72>
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	3331      	adds	r3, #49	; 0x31
 800c362:	9a02      	ldr	r2, [sp, #8]
 800c364:	7013      	strb	r3, [r2, #0]
 800c366:	e774      	b.n	800c252 <_dtoa_r+0x962>
 800c368:	4638      	mov	r0, r7
 800c36a:	e7b9      	b.n	800c2e0 <_dtoa_r+0x9f0>
 800c36c:	2201      	movs	r2, #1
 800c36e:	e7e2      	b.n	800c336 <_dtoa_r+0xa46>
 800c370:	f1b9 0f00 	cmp.w	r9, #0
 800c374:	db06      	blt.n	800c384 <_dtoa_r+0xa94>
 800c376:	9905      	ldr	r1, [sp, #20]
 800c378:	ea41 0909 	orr.w	r9, r1, r9
 800c37c:	9906      	ldr	r1, [sp, #24]
 800c37e:	ea59 0101 	orrs.w	r1, r9, r1
 800c382:	d120      	bne.n	800c3c6 <_dtoa_r+0xad6>
 800c384:	2a00      	cmp	r2, #0
 800c386:	ddec      	ble.n	800c362 <_dtoa_r+0xa72>
 800c388:	4659      	mov	r1, fp
 800c38a:	2201      	movs	r2, #1
 800c38c:	4620      	mov	r0, r4
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	f000 fac6 	bl	800c920 <__lshift>
 800c394:	4631      	mov	r1, r6
 800c396:	4683      	mov	fp, r0
 800c398:	f000 fb2e 	bl	800c9f8 <__mcmp>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	9b01      	ldr	r3, [sp, #4]
 800c3a0:	dc02      	bgt.n	800c3a8 <_dtoa_r+0xab8>
 800c3a2:	d1de      	bne.n	800c362 <_dtoa_r+0xa72>
 800c3a4:	07da      	lsls	r2, r3, #31
 800c3a6:	d5dc      	bpl.n	800c362 <_dtoa_r+0xa72>
 800c3a8:	2b39      	cmp	r3, #57	; 0x39
 800c3aa:	d1d8      	bne.n	800c35e <_dtoa_r+0xa6e>
 800c3ac:	9a02      	ldr	r2, [sp, #8]
 800c3ae:	2339      	movs	r3, #57	; 0x39
 800c3b0:	7013      	strb	r3, [r2, #0]
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	461d      	mov	r5, r3
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3bc:	2a39      	cmp	r2, #57	; 0x39
 800c3be:	d050      	beq.n	800c462 <_dtoa_r+0xb72>
 800c3c0:	3201      	adds	r2, #1
 800c3c2:	701a      	strb	r2, [r3, #0]
 800c3c4:	e745      	b.n	800c252 <_dtoa_r+0x962>
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	dd03      	ble.n	800c3d2 <_dtoa_r+0xae2>
 800c3ca:	2b39      	cmp	r3, #57	; 0x39
 800c3cc:	d0ee      	beq.n	800c3ac <_dtoa_r+0xabc>
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	e7c7      	b.n	800c362 <_dtoa_r+0xa72>
 800c3d2:	9a01      	ldr	r2, [sp, #4]
 800c3d4:	9907      	ldr	r1, [sp, #28]
 800c3d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c3da:	428a      	cmp	r2, r1
 800c3dc:	d02a      	beq.n	800c434 <_dtoa_r+0xb44>
 800c3de:	4659      	mov	r1, fp
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	220a      	movs	r2, #10
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 f8eb 	bl	800c5c0 <__multadd>
 800c3ea:	45b8      	cmp	r8, r7
 800c3ec:	4683      	mov	fp, r0
 800c3ee:	f04f 0300 	mov.w	r3, #0
 800c3f2:	f04f 020a 	mov.w	r2, #10
 800c3f6:	4641      	mov	r1, r8
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	d107      	bne.n	800c40c <_dtoa_r+0xb1c>
 800c3fc:	f000 f8e0 	bl	800c5c0 <__multadd>
 800c400:	4680      	mov	r8, r0
 800c402:	4607      	mov	r7, r0
 800c404:	9b01      	ldr	r3, [sp, #4]
 800c406:	3301      	adds	r3, #1
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	e775      	b.n	800c2f8 <_dtoa_r+0xa08>
 800c40c:	f000 f8d8 	bl	800c5c0 <__multadd>
 800c410:	4639      	mov	r1, r7
 800c412:	4680      	mov	r8, r0
 800c414:	2300      	movs	r3, #0
 800c416:	220a      	movs	r2, #10
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 f8d1 	bl	800c5c0 <__multadd>
 800c41e:	4607      	mov	r7, r0
 800c420:	e7f0      	b.n	800c404 <_dtoa_r+0xb14>
 800c422:	f1b9 0f00 	cmp.w	r9, #0
 800c426:	9a00      	ldr	r2, [sp, #0]
 800c428:	bfcc      	ite	gt
 800c42a:	464d      	movgt	r5, r9
 800c42c:	2501      	movle	r5, #1
 800c42e:	4415      	add	r5, r2
 800c430:	f04f 0800 	mov.w	r8, #0
 800c434:	4659      	mov	r1, fp
 800c436:	2201      	movs	r2, #1
 800c438:	4620      	mov	r0, r4
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	f000 fa70 	bl	800c920 <__lshift>
 800c440:	4631      	mov	r1, r6
 800c442:	4683      	mov	fp, r0
 800c444:	f000 fad8 	bl	800c9f8 <__mcmp>
 800c448:	2800      	cmp	r0, #0
 800c44a:	dcb2      	bgt.n	800c3b2 <_dtoa_r+0xac2>
 800c44c:	d102      	bne.n	800c454 <_dtoa_r+0xb64>
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	07db      	lsls	r3, r3, #31
 800c452:	d4ae      	bmi.n	800c3b2 <_dtoa_r+0xac2>
 800c454:	462b      	mov	r3, r5
 800c456:	461d      	mov	r5, r3
 800c458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c45c:	2a30      	cmp	r2, #48	; 0x30
 800c45e:	d0fa      	beq.n	800c456 <_dtoa_r+0xb66>
 800c460:	e6f7      	b.n	800c252 <_dtoa_r+0x962>
 800c462:	9a00      	ldr	r2, [sp, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d1a5      	bne.n	800c3b4 <_dtoa_r+0xac4>
 800c468:	f10a 0a01 	add.w	sl, sl, #1
 800c46c:	2331      	movs	r3, #49	; 0x31
 800c46e:	e779      	b.n	800c364 <_dtoa_r+0xa74>
 800c470:	4b13      	ldr	r3, [pc, #76]	; (800c4c0 <_dtoa_r+0xbd0>)
 800c472:	f7ff baaf 	b.w	800b9d4 <_dtoa_r+0xe4>
 800c476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f47f aa86 	bne.w	800b98a <_dtoa_r+0x9a>
 800c47e:	4b11      	ldr	r3, [pc, #68]	; (800c4c4 <_dtoa_r+0xbd4>)
 800c480:	f7ff baa8 	b.w	800b9d4 <_dtoa_r+0xe4>
 800c484:	f1b9 0f00 	cmp.w	r9, #0
 800c488:	dc03      	bgt.n	800c492 <_dtoa_r+0xba2>
 800c48a:	9b05      	ldr	r3, [sp, #20]
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	f73f aec9 	bgt.w	800c224 <_dtoa_r+0x934>
 800c492:	9d00      	ldr	r5, [sp, #0]
 800c494:	4631      	mov	r1, r6
 800c496:	4658      	mov	r0, fp
 800c498:	f7ff f99c 	bl	800b7d4 <quorem>
 800c49c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c4a0:	f805 3b01 	strb.w	r3, [r5], #1
 800c4a4:	9a00      	ldr	r2, [sp, #0]
 800c4a6:	1aaa      	subs	r2, r5, r2
 800c4a8:	4591      	cmp	r9, r2
 800c4aa:	ddba      	ble.n	800c422 <_dtoa_r+0xb32>
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	220a      	movs	r2, #10
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 f884 	bl	800c5c0 <__multadd>
 800c4b8:	4683      	mov	fp, r0
 800c4ba:	e7eb      	b.n	800c494 <_dtoa_r+0xba4>
 800c4bc:	0800de5b 	.word	0x0800de5b
 800c4c0:	0800ddb4 	.word	0x0800ddb4
 800c4c4:	0800ddd8 	.word	0x0800ddd8

0800c4c8 <_localeconv_r>:
 800c4c8:	4800      	ldr	r0, [pc, #0]	; (800c4cc <_localeconv_r+0x4>)
 800c4ca:	4770      	bx	lr
 800c4cc:	200002d4 	.word	0x200002d4

0800c4d0 <malloc>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	; (800c4dc <malloc+0xc>)
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f000 bbef 	b.w	800ccb8 <_malloc_r>
 800c4da:	bf00      	nop
 800c4dc:	20000180 	.word	0x20000180

0800c4e0 <memcpy>:
 800c4e0:	440a      	add	r2, r1
 800c4e2:	4291      	cmp	r1, r2
 800c4e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4e8:	d100      	bne.n	800c4ec <memcpy+0xc>
 800c4ea:	4770      	bx	lr
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4f6:	4291      	cmp	r1, r2
 800c4f8:	d1f9      	bne.n	800c4ee <memcpy+0xe>
 800c4fa:	bd10      	pop	{r4, pc}

0800c4fc <_Balloc>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c500:	4604      	mov	r4, r0
 800c502:	460d      	mov	r5, r1
 800c504:	b976      	cbnz	r6, 800c524 <_Balloc+0x28>
 800c506:	2010      	movs	r0, #16
 800c508:	f7ff ffe2 	bl	800c4d0 <malloc>
 800c50c:	4602      	mov	r2, r0
 800c50e:	6260      	str	r0, [r4, #36]	; 0x24
 800c510:	b920      	cbnz	r0, 800c51c <_Balloc+0x20>
 800c512:	4b18      	ldr	r3, [pc, #96]	; (800c574 <_Balloc+0x78>)
 800c514:	4818      	ldr	r0, [pc, #96]	; (800c578 <_Balloc+0x7c>)
 800c516:	2166      	movs	r1, #102	; 0x66
 800c518:	f000 fd94 	bl	800d044 <__assert_func>
 800c51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c520:	6006      	str	r6, [r0, #0]
 800c522:	60c6      	str	r6, [r0, #12]
 800c524:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c526:	68f3      	ldr	r3, [r6, #12]
 800c528:	b183      	cbz	r3, 800c54c <_Balloc+0x50>
 800c52a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c532:	b9b8      	cbnz	r0, 800c564 <_Balloc+0x68>
 800c534:	2101      	movs	r1, #1
 800c536:	fa01 f605 	lsl.w	r6, r1, r5
 800c53a:	1d72      	adds	r2, r6, #5
 800c53c:	0092      	lsls	r2, r2, #2
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 fb5a 	bl	800cbf8 <_calloc_r>
 800c544:	b160      	cbz	r0, 800c560 <_Balloc+0x64>
 800c546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c54a:	e00e      	b.n	800c56a <_Balloc+0x6e>
 800c54c:	2221      	movs	r2, #33	; 0x21
 800c54e:	2104      	movs	r1, #4
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fb51 	bl	800cbf8 <_calloc_r>
 800c556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c558:	60f0      	str	r0, [r6, #12]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e4      	bne.n	800c52a <_Balloc+0x2e>
 800c560:	2000      	movs	r0, #0
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	6802      	ldr	r2, [r0, #0]
 800c566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c56a:	2300      	movs	r3, #0
 800c56c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c570:	e7f7      	b.n	800c562 <_Balloc+0x66>
 800c572:	bf00      	nop
 800c574:	0800dde5 	.word	0x0800dde5
 800c578:	0800de6c 	.word	0x0800de6c

0800c57c <_Bfree>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	b976      	cbnz	r6, 800c5a4 <_Bfree+0x28>
 800c586:	2010      	movs	r0, #16
 800c588:	f7ff ffa2 	bl	800c4d0 <malloc>
 800c58c:	4602      	mov	r2, r0
 800c58e:	6268      	str	r0, [r5, #36]	; 0x24
 800c590:	b920      	cbnz	r0, 800c59c <_Bfree+0x20>
 800c592:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <_Bfree+0x3c>)
 800c594:	4809      	ldr	r0, [pc, #36]	; (800c5bc <_Bfree+0x40>)
 800c596:	218a      	movs	r1, #138	; 0x8a
 800c598:	f000 fd54 	bl	800d044 <__assert_func>
 800c59c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a0:	6006      	str	r6, [r0, #0]
 800c5a2:	60c6      	str	r6, [r0, #12]
 800c5a4:	b13c      	cbz	r4, 800c5b6 <_Bfree+0x3a>
 800c5a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5a8:	6862      	ldr	r2, [r4, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5b0:	6021      	str	r1, [r4, #0]
 800c5b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	0800dde5 	.word	0x0800dde5
 800c5bc:	0800de6c 	.word	0x0800de6c

0800c5c0 <__multadd>:
 800c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c4:	690e      	ldr	r6, [r1, #16]
 800c5c6:	4607      	mov	r7, r0
 800c5c8:	4698      	mov	r8, r3
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	f101 0014 	add.w	r0, r1, #20
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	6805      	ldr	r5, [r0, #0]
 800c5d4:	b2a9      	uxth	r1, r5
 800c5d6:	fb02 8101 	mla	r1, r2, r1, r8
 800c5da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c5de:	0c2d      	lsrs	r5, r5, #16
 800c5e0:	fb02 c505 	mla	r5, r2, r5, ip
 800c5e4:	b289      	uxth	r1, r1
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c5ec:	429e      	cmp	r6, r3
 800c5ee:	f840 1b04 	str.w	r1, [r0], #4
 800c5f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c5f6:	dcec      	bgt.n	800c5d2 <__multadd+0x12>
 800c5f8:	f1b8 0f00 	cmp.w	r8, #0
 800c5fc:	d022      	beq.n	800c644 <__multadd+0x84>
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	42b3      	cmp	r3, r6
 800c602:	dc19      	bgt.n	800c638 <__multadd+0x78>
 800c604:	6861      	ldr	r1, [r4, #4]
 800c606:	4638      	mov	r0, r7
 800c608:	3101      	adds	r1, #1
 800c60a:	f7ff ff77 	bl	800c4fc <_Balloc>
 800c60e:	4605      	mov	r5, r0
 800c610:	b928      	cbnz	r0, 800c61e <__multadd+0x5e>
 800c612:	4602      	mov	r2, r0
 800c614:	4b0d      	ldr	r3, [pc, #52]	; (800c64c <__multadd+0x8c>)
 800c616:	480e      	ldr	r0, [pc, #56]	; (800c650 <__multadd+0x90>)
 800c618:	21b5      	movs	r1, #181	; 0xb5
 800c61a:	f000 fd13 	bl	800d044 <__assert_func>
 800c61e:	6922      	ldr	r2, [r4, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	f104 010c 	add.w	r1, r4, #12
 800c626:	0092      	lsls	r2, r2, #2
 800c628:	300c      	adds	r0, #12
 800c62a:	f7ff ff59 	bl	800c4e0 <memcpy>
 800c62e:	4621      	mov	r1, r4
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ffa3 	bl	800c57c <_Bfree>
 800c636:	462c      	mov	r4, r5
 800c638:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c63c:	3601      	adds	r6, #1
 800c63e:	f8c3 8014 	str.w	r8, [r3, #20]
 800c642:	6126      	str	r6, [r4, #16]
 800c644:	4620      	mov	r0, r4
 800c646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64a:	bf00      	nop
 800c64c:	0800de5b 	.word	0x0800de5b
 800c650:	0800de6c 	.word	0x0800de6c

0800c654 <__hi0bits>:
 800c654:	0c03      	lsrs	r3, r0, #16
 800c656:	041b      	lsls	r3, r3, #16
 800c658:	b9d3      	cbnz	r3, 800c690 <__hi0bits+0x3c>
 800c65a:	0400      	lsls	r0, r0, #16
 800c65c:	2310      	movs	r3, #16
 800c65e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c662:	bf04      	itt	eq
 800c664:	0200      	lsleq	r0, r0, #8
 800c666:	3308      	addeq	r3, #8
 800c668:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c66c:	bf04      	itt	eq
 800c66e:	0100      	lsleq	r0, r0, #4
 800c670:	3304      	addeq	r3, #4
 800c672:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c676:	bf04      	itt	eq
 800c678:	0080      	lsleq	r0, r0, #2
 800c67a:	3302      	addeq	r3, #2
 800c67c:	2800      	cmp	r0, #0
 800c67e:	db05      	blt.n	800c68c <__hi0bits+0x38>
 800c680:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c684:	f103 0301 	add.w	r3, r3, #1
 800c688:	bf08      	it	eq
 800c68a:	2320      	moveq	r3, #32
 800c68c:	4618      	mov	r0, r3
 800c68e:	4770      	bx	lr
 800c690:	2300      	movs	r3, #0
 800c692:	e7e4      	b.n	800c65e <__hi0bits+0xa>

0800c694 <__lo0bits>:
 800c694:	6803      	ldr	r3, [r0, #0]
 800c696:	f013 0207 	ands.w	r2, r3, #7
 800c69a:	4601      	mov	r1, r0
 800c69c:	d00b      	beq.n	800c6b6 <__lo0bits+0x22>
 800c69e:	07da      	lsls	r2, r3, #31
 800c6a0:	d424      	bmi.n	800c6ec <__lo0bits+0x58>
 800c6a2:	0798      	lsls	r0, r3, #30
 800c6a4:	bf49      	itett	mi
 800c6a6:	085b      	lsrmi	r3, r3, #1
 800c6a8:	089b      	lsrpl	r3, r3, #2
 800c6aa:	2001      	movmi	r0, #1
 800c6ac:	600b      	strmi	r3, [r1, #0]
 800c6ae:	bf5c      	itt	pl
 800c6b0:	600b      	strpl	r3, [r1, #0]
 800c6b2:	2002      	movpl	r0, #2
 800c6b4:	4770      	bx	lr
 800c6b6:	b298      	uxth	r0, r3
 800c6b8:	b9b0      	cbnz	r0, 800c6e8 <__lo0bits+0x54>
 800c6ba:	0c1b      	lsrs	r3, r3, #16
 800c6bc:	2010      	movs	r0, #16
 800c6be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c6c2:	bf04      	itt	eq
 800c6c4:	0a1b      	lsreq	r3, r3, #8
 800c6c6:	3008      	addeq	r0, #8
 800c6c8:	071a      	lsls	r2, r3, #28
 800c6ca:	bf04      	itt	eq
 800c6cc:	091b      	lsreq	r3, r3, #4
 800c6ce:	3004      	addeq	r0, #4
 800c6d0:	079a      	lsls	r2, r3, #30
 800c6d2:	bf04      	itt	eq
 800c6d4:	089b      	lsreq	r3, r3, #2
 800c6d6:	3002      	addeq	r0, #2
 800c6d8:	07da      	lsls	r2, r3, #31
 800c6da:	d403      	bmi.n	800c6e4 <__lo0bits+0x50>
 800c6dc:	085b      	lsrs	r3, r3, #1
 800c6de:	f100 0001 	add.w	r0, r0, #1
 800c6e2:	d005      	beq.n	800c6f0 <__lo0bits+0x5c>
 800c6e4:	600b      	str	r3, [r1, #0]
 800c6e6:	4770      	bx	lr
 800c6e8:	4610      	mov	r0, r2
 800c6ea:	e7e8      	b.n	800c6be <__lo0bits+0x2a>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	4770      	bx	lr
 800c6f0:	2020      	movs	r0, #32
 800c6f2:	4770      	bx	lr

0800c6f4 <__i2b>:
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	f7ff feff 	bl	800c4fc <_Balloc>
 800c6fe:	4602      	mov	r2, r0
 800c700:	b928      	cbnz	r0, 800c70e <__i2b+0x1a>
 800c702:	4b05      	ldr	r3, [pc, #20]	; (800c718 <__i2b+0x24>)
 800c704:	4805      	ldr	r0, [pc, #20]	; (800c71c <__i2b+0x28>)
 800c706:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c70a:	f000 fc9b 	bl	800d044 <__assert_func>
 800c70e:	2301      	movs	r3, #1
 800c710:	6144      	str	r4, [r0, #20]
 800c712:	6103      	str	r3, [r0, #16]
 800c714:	bd10      	pop	{r4, pc}
 800c716:	bf00      	nop
 800c718:	0800de5b 	.word	0x0800de5b
 800c71c:	0800de6c 	.word	0x0800de6c

0800c720 <__multiply>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	4614      	mov	r4, r2
 800c726:	690a      	ldr	r2, [r1, #16]
 800c728:	6923      	ldr	r3, [r4, #16]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	bfb8      	it	lt
 800c72e:	460b      	movlt	r3, r1
 800c730:	460d      	mov	r5, r1
 800c732:	bfbc      	itt	lt
 800c734:	4625      	movlt	r5, r4
 800c736:	461c      	movlt	r4, r3
 800c738:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c73c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c740:	68ab      	ldr	r3, [r5, #8]
 800c742:	6869      	ldr	r1, [r5, #4]
 800c744:	eb0a 0709 	add.w	r7, sl, r9
 800c748:	42bb      	cmp	r3, r7
 800c74a:	b085      	sub	sp, #20
 800c74c:	bfb8      	it	lt
 800c74e:	3101      	addlt	r1, #1
 800c750:	f7ff fed4 	bl	800c4fc <_Balloc>
 800c754:	b930      	cbnz	r0, 800c764 <__multiply+0x44>
 800c756:	4602      	mov	r2, r0
 800c758:	4b42      	ldr	r3, [pc, #264]	; (800c864 <__multiply+0x144>)
 800c75a:	4843      	ldr	r0, [pc, #268]	; (800c868 <__multiply+0x148>)
 800c75c:	f240 115d 	movw	r1, #349	; 0x15d
 800c760:	f000 fc70 	bl	800d044 <__assert_func>
 800c764:	f100 0614 	add.w	r6, r0, #20
 800c768:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c76c:	4633      	mov	r3, r6
 800c76e:	2200      	movs	r2, #0
 800c770:	4543      	cmp	r3, r8
 800c772:	d31e      	bcc.n	800c7b2 <__multiply+0x92>
 800c774:	f105 0c14 	add.w	ip, r5, #20
 800c778:	f104 0314 	add.w	r3, r4, #20
 800c77c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c780:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c784:	9202      	str	r2, [sp, #8]
 800c786:	ebac 0205 	sub.w	r2, ip, r5
 800c78a:	3a15      	subs	r2, #21
 800c78c:	f022 0203 	bic.w	r2, r2, #3
 800c790:	3204      	adds	r2, #4
 800c792:	f105 0115 	add.w	r1, r5, #21
 800c796:	458c      	cmp	ip, r1
 800c798:	bf38      	it	cc
 800c79a:	2204      	movcc	r2, #4
 800c79c:	9201      	str	r2, [sp, #4]
 800c79e:	9a02      	ldr	r2, [sp, #8]
 800c7a0:	9303      	str	r3, [sp, #12]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d808      	bhi.n	800c7b8 <__multiply+0x98>
 800c7a6:	2f00      	cmp	r7, #0
 800c7a8:	dc55      	bgt.n	800c856 <__multiply+0x136>
 800c7aa:	6107      	str	r7, [r0, #16]
 800c7ac:	b005      	add	sp, #20
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	f843 2b04 	str.w	r2, [r3], #4
 800c7b6:	e7db      	b.n	800c770 <__multiply+0x50>
 800c7b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7bc:	f1ba 0f00 	cmp.w	sl, #0
 800c7c0:	d020      	beq.n	800c804 <__multiply+0xe4>
 800c7c2:	f105 0e14 	add.w	lr, r5, #20
 800c7c6:	46b1      	mov	r9, r6
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c7ce:	f8d9 b000 	ldr.w	fp, [r9]
 800c7d2:	b2a1      	uxth	r1, r4
 800c7d4:	fa1f fb8b 	uxth.w	fp, fp
 800c7d8:	fb0a b101 	mla	r1, sl, r1, fp
 800c7dc:	4411      	add	r1, r2
 800c7de:	f8d9 2000 	ldr.w	r2, [r9]
 800c7e2:	0c24      	lsrs	r4, r4, #16
 800c7e4:	0c12      	lsrs	r2, r2, #16
 800c7e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c7ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c7ee:	b289      	uxth	r1, r1
 800c7f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c7f4:	45f4      	cmp	ip, lr
 800c7f6:	f849 1b04 	str.w	r1, [r9], #4
 800c7fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c7fe:	d8e4      	bhi.n	800c7ca <__multiply+0xaa>
 800c800:	9901      	ldr	r1, [sp, #4]
 800c802:	5072      	str	r2, [r6, r1]
 800c804:	9a03      	ldr	r2, [sp, #12]
 800c806:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c80a:	3304      	adds	r3, #4
 800c80c:	f1b9 0f00 	cmp.w	r9, #0
 800c810:	d01f      	beq.n	800c852 <__multiply+0x132>
 800c812:	6834      	ldr	r4, [r6, #0]
 800c814:	f105 0114 	add.w	r1, r5, #20
 800c818:	46b6      	mov	lr, r6
 800c81a:	f04f 0a00 	mov.w	sl, #0
 800c81e:	880a      	ldrh	r2, [r1, #0]
 800c820:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c824:	fb09 b202 	mla	r2, r9, r2, fp
 800c828:	4492      	add	sl, r2
 800c82a:	b2a4      	uxth	r4, r4
 800c82c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c830:	f84e 4b04 	str.w	r4, [lr], #4
 800c834:	f851 4b04 	ldr.w	r4, [r1], #4
 800c838:	f8be 2000 	ldrh.w	r2, [lr]
 800c83c:	0c24      	lsrs	r4, r4, #16
 800c83e:	fb09 2404 	mla	r4, r9, r4, r2
 800c842:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c846:	458c      	cmp	ip, r1
 800c848:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c84c:	d8e7      	bhi.n	800c81e <__multiply+0xfe>
 800c84e:	9a01      	ldr	r2, [sp, #4]
 800c850:	50b4      	str	r4, [r6, r2]
 800c852:	3604      	adds	r6, #4
 800c854:	e7a3      	b.n	800c79e <__multiply+0x7e>
 800c856:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1a5      	bne.n	800c7aa <__multiply+0x8a>
 800c85e:	3f01      	subs	r7, #1
 800c860:	e7a1      	b.n	800c7a6 <__multiply+0x86>
 800c862:	bf00      	nop
 800c864:	0800de5b 	.word	0x0800de5b
 800c868:	0800de6c 	.word	0x0800de6c

0800c86c <__pow5mult>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4615      	mov	r5, r2
 800c872:	f012 0203 	ands.w	r2, r2, #3
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	d007      	beq.n	800c88c <__pow5mult+0x20>
 800c87c:	4c25      	ldr	r4, [pc, #148]	; (800c914 <__pow5mult+0xa8>)
 800c87e:	3a01      	subs	r2, #1
 800c880:	2300      	movs	r3, #0
 800c882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c886:	f7ff fe9b 	bl	800c5c0 <__multadd>
 800c88a:	4607      	mov	r7, r0
 800c88c:	10ad      	asrs	r5, r5, #2
 800c88e:	d03d      	beq.n	800c90c <__pow5mult+0xa0>
 800c890:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c892:	b97c      	cbnz	r4, 800c8b4 <__pow5mult+0x48>
 800c894:	2010      	movs	r0, #16
 800c896:	f7ff fe1b 	bl	800c4d0 <malloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	6270      	str	r0, [r6, #36]	; 0x24
 800c89e:	b928      	cbnz	r0, 800c8ac <__pow5mult+0x40>
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <__pow5mult+0xac>)
 800c8a2:	481e      	ldr	r0, [pc, #120]	; (800c91c <__pow5mult+0xb0>)
 800c8a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8a8:	f000 fbcc 	bl	800d044 <__assert_func>
 800c8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b0:	6004      	str	r4, [r0, #0]
 800c8b2:	60c4      	str	r4, [r0, #12]
 800c8b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8bc:	b94c      	cbnz	r4, 800c8d2 <__pow5mult+0x66>
 800c8be:	f240 2171 	movw	r1, #625	; 0x271
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff16 	bl	800c6f4 <__i2b>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	f04f 0900 	mov.w	r9, #0
 800c8d6:	07eb      	lsls	r3, r5, #31
 800c8d8:	d50a      	bpl.n	800c8f0 <__pow5mult+0x84>
 800c8da:	4639      	mov	r1, r7
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f7ff ff1e 	bl	800c720 <__multiply>
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fe47 	bl	800c57c <_Bfree>
 800c8ee:	4647      	mov	r7, r8
 800c8f0:	106d      	asrs	r5, r5, #1
 800c8f2:	d00b      	beq.n	800c90c <__pow5mult+0xa0>
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	b938      	cbnz	r0, 800c908 <__pow5mult+0x9c>
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7ff ff0f 	bl	800c720 <__multiply>
 800c902:	6020      	str	r0, [r4, #0]
 800c904:	f8c0 9000 	str.w	r9, [r0]
 800c908:	4604      	mov	r4, r0
 800c90a:	e7e4      	b.n	800c8d6 <__pow5mult+0x6a>
 800c90c:	4638      	mov	r0, r7
 800c90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c912:	bf00      	nop
 800c914:	0800dfc0 	.word	0x0800dfc0
 800c918:	0800dde5 	.word	0x0800dde5
 800c91c:	0800de6c 	.word	0x0800de6c

0800c920 <__lshift>:
 800c920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	6849      	ldr	r1, [r1, #4]
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	4607      	mov	r7, r0
 800c932:	4691      	mov	r9, r2
 800c934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c938:	f108 0601 	add.w	r6, r8, #1
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	db0b      	blt.n	800c958 <__lshift+0x38>
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff fddb 	bl	800c4fc <_Balloc>
 800c946:	4605      	mov	r5, r0
 800c948:	b948      	cbnz	r0, 800c95e <__lshift+0x3e>
 800c94a:	4602      	mov	r2, r0
 800c94c:	4b28      	ldr	r3, [pc, #160]	; (800c9f0 <__lshift+0xd0>)
 800c94e:	4829      	ldr	r0, [pc, #164]	; (800c9f4 <__lshift+0xd4>)
 800c950:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c954:	f000 fb76 	bl	800d044 <__assert_func>
 800c958:	3101      	adds	r1, #1
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	e7ee      	b.n	800c93c <__lshift+0x1c>
 800c95e:	2300      	movs	r3, #0
 800c960:	f100 0114 	add.w	r1, r0, #20
 800c964:	f100 0210 	add.w	r2, r0, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	4553      	cmp	r3, sl
 800c96c:	db33      	blt.n	800c9d6 <__lshift+0xb6>
 800c96e:	6920      	ldr	r0, [r4, #16]
 800c970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c974:	f104 0314 	add.w	r3, r4, #20
 800c978:	f019 091f 	ands.w	r9, r9, #31
 800c97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c984:	d02b      	beq.n	800c9de <__lshift+0xbe>
 800c986:	f1c9 0e20 	rsb	lr, r9, #32
 800c98a:	468a      	mov	sl, r1
 800c98c:	2200      	movs	r2, #0
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	fa00 f009 	lsl.w	r0, r0, r9
 800c994:	4302      	orrs	r2, r0
 800c996:	f84a 2b04 	str.w	r2, [sl], #4
 800c99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99e:	459c      	cmp	ip, r3
 800c9a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9a4:	d8f3      	bhi.n	800c98e <__lshift+0x6e>
 800c9a6:	ebac 0304 	sub.w	r3, ip, r4
 800c9aa:	3b15      	subs	r3, #21
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	f104 0015 	add.w	r0, r4, #21
 800c9b6:	4584      	cmp	ip, r0
 800c9b8:	bf38      	it	cc
 800c9ba:	2304      	movcc	r3, #4
 800c9bc:	50ca      	str	r2, [r1, r3]
 800c9be:	b10a      	cbz	r2, 800c9c4 <__lshift+0xa4>
 800c9c0:	f108 0602 	add.w	r6, r8, #2
 800c9c4:	3e01      	subs	r6, #1
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	612e      	str	r6, [r5, #16]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	f7ff fdd6 	bl	800c57c <_Bfree>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9da:	3301      	adds	r3, #1
 800c9dc:	e7c5      	b.n	800c96a <__lshift+0x4a>
 800c9de:	3904      	subs	r1, #4
 800c9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9e8:	459c      	cmp	ip, r3
 800c9ea:	d8f9      	bhi.n	800c9e0 <__lshift+0xc0>
 800c9ec:	e7ea      	b.n	800c9c4 <__lshift+0xa4>
 800c9ee:	bf00      	nop
 800c9f0:	0800de5b 	.word	0x0800de5b
 800c9f4:	0800de6c 	.word	0x0800de6c

0800c9f8 <__mcmp>:
 800c9f8:	b530      	push	{r4, r5, lr}
 800c9fa:	6902      	ldr	r2, [r0, #16]
 800c9fc:	690c      	ldr	r4, [r1, #16]
 800c9fe:	1b12      	subs	r2, r2, r4
 800ca00:	d10e      	bne.n	800ca20 <__mcmp+0x28>
 800ca02:	f100 0314 	add.w	r3, r0, #20
 800ca06:	3114      	adds	r1, #20
 800ca08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca18:	42a5      	cmp	r5, r4
 800ca1a:	d003      	beq.n	800ca24 <__mcmp+0x2c>
 800ca1c:	d305      	bcc.n	800ca2a <__mcmp+0x32>
 800ca1e:	2201      	movs	r2, #1
 800ca20:	4610      	mov	r0, r2
 800ca22:	bd30      	pop	{r4, r5, pc}
 800ca24:	4283      	cmp	r3, r0
 800ca26:	d3f3      	bcc.n	800ca10 <__mcmp+0x18>
 800ca28:	e7fa      	b.n	800ca20 <__mcmp+0x28>
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	e7f7      	b.n	800ca20 <__mcmp+0x28>

0800ca30 <__mdiff>:
 800ca30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	460c      	mov	r4, r1
 800ca36:	4606      	mov	r6, r0
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	4617      	mov	r7, r2
 800ca3e:	f7ff ffdb 	bl	800c9f8 <__mcmp>
 800ca42:	1e05      	subs	r5, r0, #0
 800ca44:	d110      	bne.n	800ca68 <__mdiff+0x38>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f7ff fd57 	bl	800c4fc <_Balloc>
 800ca4e:	b930      	cbnz	r0, 800ca5e <__mdiff+0x2e>
 800ca50:	4b39      	ldr	r3, [pc, #228]	; (800cb38 <__mdiff+0x108>)
 800ca52:	4602      	mov	r2, r0
 800ca54:	f240 2132 	movw	r1, #562	; 0x232
 800ca58:	4838      	ldr	r0, [pc, #224]	; (800cb3c <__mdiff+0x10c>)
 800ca5a:	f000 faf3 	bl	800d044 <__assert_func>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca68:	bfa4      	itt	ge
 800ca6a:	463b      	movge	r3, r7
 800ca6c:	4627      	movge	r7, r4
 800ca6e:	4630      	mov	r0, r6
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	bfa6      	itte	ge
 800ca74:	461c      	movge	r4, r3
 800ca76:	2500      	movge	r5, #0
 800ca78:	2501      	movlt	r5, #1
 800ca7a:	f7ff fd3f 	bl	800c4fc <_Balloc>
 800ca7e:	b920      	cbnz	r0, 800ca8a <__mdiff+0x5a>
 800ca80:	4b2d      	ldr	r3, [pc, #180]	; (800cb38 <__mdiff+0x108>)
 800ca82:	4602      	mov	r2, r0
 800ca84:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca88:	e7e6      	b.n	800ca58 <__mdiff+0x28>
 800ca8a:	693e      	ldr	r6, [r7, #16]
 800ca8c:	60c5      	str	r5, [r0, #12]
 800ca8e:	6925      	ldr	r5, [r4, #16]
 800ca90:	f107 0114 	add.w	r1, r7, #20
 800ca94:	f104 0914 	add.w	r9, r4, #20
 800ca98:	f100 0e14 	add.w	lr, r0, #20
 800ca9c:	f107 0210 	add.w	r2, r7, #16
 800caa0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800caa4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800caa8:	46f2      	mov	sl, lr
 800caaa:	2700      	movs	r7, #0
 800caac:	f859 3b04 	ldr.w	r3, [r9], #4
 800cab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cab4:	fa1f f883 	uxth.w	r8, r3
 800cab8:	fa17 f78b 	uxtah	r7, r7, fp
 800cabc:	0c1b      	lsrs	r3, r3, #16
 800cabe:	eba7 0808 	sub.w	r8, r7, r8
 800cac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800caca:	fa1f f888 	uxth.w	r8, r8
 800cace:	141f      	asrs	r7, r3, #16
 800cad0:	454d      	cmp	r5, r9
 800cad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cad6:	f84a 3b04 	str.w	r3, [sl], #4
 800cada:	d8e7      	bhi.n	800caac <__mdiff+0x7c>
 800cadc:	1b2b      	subs	r3, r5, r4
 800cade:	3b15      	subs	r3, #21
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	3304      	adds	r3, #4
 800cae6:	3415      	adds	r4, #21
 800cae8:	42a5      	cmp	r5, r4
 800caea:	bf38      	it	cc
 800caec:	2304      	movcc	r3, #4
 800caee:	4419      	add	r1, r3
 800caf0:	4473      	add	r3, lr
 800caf2:	469e      	mov	lr, r3
 800caf4:	460d      	mov	r5, r1
 800caf6:	4565      	cmp	r5, ip
 800caf8:	d30e      	bcc.n	800cb18 <__mdiff+0xe8>
 800cafa:	f10c 0203 	add.w	r2, ip, #3
 800cafe:	1a52      	subs	r2, r2, r1
 800cb00:	f022 0203 	bic.w	r2, r2, #3
 800cb04:	3903      	subs	r1, #3
 800cb06:	458c      	cmp	ip, r1
 800cb08:	bf38      	it	cc
 800cb0a:	2200      	movcc	r2, #0
 800cb0c:	441a      	add	r2, r3
 800cb0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb12:	b17b      	cbz	r3, 800cb34 <__mdiff+0x104>
 800cb14:	6106      	str	r6, [r0, #16]
 800cb16:	e7a5      	b.n	800ca64 <__mdiff+0x34>
 800cb18:	f855 8b04 	ldr.w	r8, [r5], #4
 800cb1c:	fa17 f488 	uxtah	r4, r7, r8
 800cb20:	1422      	asrs	r2, r4, #16
 800cb22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cb26:	b2a4      	uxth	r4, r4
 800cb28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cb2c:	f84e 4b04 	str.w	r4, [lr], #4
 800cb30:	1417      	asrs	r7, r2, #16
 800cb32:	e7e0      	b.n	800caf6 <__mdiff+0xc6>
 800cb34:	3e01      	subs	r6, #1
 800cb36:	e7ea      	b.n	800cb0e <__mdiff+0xde>
 800cb38:	0800de5b 	.word	0x0800de5b
 800cb3c:	0800de6c 	.word	0x0800de6c

0800cb40 <__d2b>:
 800cb40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb44:	4689      	mov	r9, r1
 800cb46:	2101      	movs	r1, #1
 800cb48:	ec57 6b10 	vmov	r6, r7, d0
 800cb4c:	4690      	mov	r8, r2
 800cb4e:	f7ff fcd5 	bl	800c4fc <_Balloc>
 800cb52:	4604      	mov	r4, r0
 800cb54:	b930      	cbnz	r0, 800cb64 <__d2b+0x24>
 800cb56:	4602      	mov	r2, r0
 800cb58:	4b25      	ldr	r3, [pc, #148]	; (800cbf0 <__d2b+0xb0>)
 800cb5a:	4826      	ldr	r0, [pc, #152]	; (800cbf4 <__d2b+0xb4>)
 800cb5c:	f240 310a 	movw	r1, #778	; 0x30a
 800cb60:	f000 fa70 	bl	800d044 <__assert_func>
 800cb64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb6c:	bb35      	cbnz	r5, 800cbbc <__d2b+0x7c>
 800cb6e:	2e00      	cmp	r6, #0
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	d028      	beq.n	800cbc6 <__d2b+0x86>
 800cb74:	4668      	mov	r0, sp
 800cb76:	9600      	str	r6, [sp, #0]
 800cb78:	f7ff fd8c 	bl	800c694 <__lo0bits>
 800cb7c:	9900      	ldr	r1, [sp, #0]
 800cb7e:	b300      	cbz	r0, 800cbc2 <__d2b+0x82>
 800cb80:	9a01      	ldr	r2, [sp, #4]
 800cb82:	f1c0 0320 	rsb	r3, r0, #32
 800cb86:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8a:	430b      	orrs	r3, r1
 800cb8c:	40c2      	lsrs	r2, r0
 800cb8e:	6163      	str	r3, [r4, #20]
 800cb90:	9201      	str	r2, [sp, #4]
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	61a3      	str	r3, [r4, #24]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bf14      	ite	ne
 800cb9a:	2202      	movne	r2, #2
 800cb9c:	2201      	moveq	r2, #1
 800cb9e:	6122      	str	r2, [r4, #16]
 800cba0:	b1d5      	cbz	r5, 800cbd8 <__d2b+0x98>
 800cba2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cba6:	4405      	add	r5, r0
 800cba8:	f8c9 5000 	str.w	r5, [r9]
 800cbac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbb0:	f8c8 0000 	str.w	r0, [r8]
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	b003      	add	sp, #12
 800cbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbc0:	e7d5      	b.n	800cb6e <__d2b+0x2e>
 800cbc2:	6161      	str	r1, [r4, #20]
 800cbc4:	e7e5      	b.n	800cb92 <__d2b+0x52>
 800cbc6:	a801      	add	r0, sp, #4
 800cbc8:	f7ff fd64 	bl	800c694 <__lo0bits>
 800cbcc:	9b01      	ldr	r3, [sp, #4]
 800cbce:	6163      	str	r3, [r4, #20]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	6122      	str	r2, [r4, #16]
 800cbd4:	3020      	adds	r0, #32
 800cbd6:	e7e3      	b.n	800cba0 <__d2b+0x60>
 800cbd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbe0:	f8c9 0000 	str.w	r0, [r9]
 800cbe4:	6918      	ldr	r0, [r3, #16]
 800cbe6:	f7ff fd35 	bl	800c654 <__hi0bits>
 800cbea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbee:	e7df      	b.n	800cbb0 <__d2b+0x70>
 800cbf0:	0800de5b 	.word	0x0800de5b
 800cbf4:	0800de6c 	.word	0x0800de6c

0800cbf8 <_calloc_r>:
 800cbf8:	b513      	push	{r0, r1, r4, lr}
 800cbfa:	434a      	muls	r2, r1
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	9201      	str	r2, [sp, #4]
 800cc00:	f000 f85a 	bl	800ccb8 <_malloc_r>
 800cc04:	4604      	mov	r4, r0
 800cc06:	b118      	cbz	r0, 800cc10 <_calloc_r+0x18>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	f7fe f916 	bl	800ae3c <memset>
 800cc10:	4620      	mov	r0, r4
 800cc12:	b002      	add	sp, #8
 800cc14:	bd10      	pop	{r4, pc}
	...

0800cc18 <_free_r>:
 800cc18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d048      	beq.n	800ccb0 <_free_r+0x98>
 800cc1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc22:	9001      	str	r0, [sp, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f1a1 0404 	sub.w	r4, r1, #4
 800cc2a:	bfb8      	it	lt
 800cc2c:	18e4      	addlt	r4, r4, r3
 800cc2e:	f000 fa65 	bl	800d0fc <__malloc_lock>
 800cc32:	4a20      	ldr	r2, [pc, #128]	; (800ccb4 <_free_r+0x9c>)
 800cc34:	9801      	ldr	r0, [sp, #4]
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	4615      	mov	r5, r2
 800cc3a:	b933      	cbnz	r3, 800cc4a <_free_r+0x32>
 800cc3c:	6063      	str	r3, [r4, #4]
 800cc3e:	6014      	str	r4, [r2, #0]
 800cc40:	b003      	add	sp, #12
 800cc42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc46:	f000 ba5f 	b.w	800d108 <__malloc_unlock>
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	d90b      	bls.n	800cc66 <_free_r+0x4e>
 800cc4e:	6821      	ldr	r1, [r4, #0]
 800cc50:	1862      	adds	r2, r4, r1
 800cc52:	4293      	cmp	r3, r2
 800cc54:	bf04      	itt	eq
 800cc56:	681a      	ldreq	r2, [r3, #0]
 800cc58:	685b      	ldreq	r3, [r3, #4]
 800cc5a:	6063      	str	r3, [r4, #4]
 800cc5c:	bf04      	itt	eq
 800cc5e:	1852      	addeq	r2, r2, r1
 800cc60:	6022      	streq	r2, [r4, #0]
 800cc62:	602c      	str	r4, [r5, #0]
 800cc64:	e7ec      	b.n	800cc40 <_free_r+0x28>
 800cc66:	461a      	mov	r2, r3
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b10b      	cbz	r3, 800cc70 <_free_r+0x58>
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	d9fa      	bls.n	800cc66 <_free_r+0x4e>
 800cc70:	6811      	ldr	r1, [r2, #0]
 800cc72:	1855      	adds	r5, r2, r1
 800cc74:	42a5      	cmp	r5, r4
 800cc76:	d10b      	bne.n	800cc90 <_free_r+0x78>
 800cc78:	6824      	ldr	r4, [r4, #0]
 800cc7a:	4421      	add	r1, r4
 800cc7c:	1854      	adds	r4, r2, r1
 800cc7e:	42a3      	cmp	r3, r4
 800cc80:	6011      	str	r1, [r2, #0]
 800cc82:	d1dd      	bne.n	800cc40 <_free_r+0x28>
 800cc84:	681c      	ldr	r4, [r3, #0]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	6053      	str	r3, [r2, #4]
 800cc8a:	4421      	add	r1, r4
 800cc8c:	6011      	str	r1, [r2, #0]
 800cc8e:	e7d7      	b.n	800cc40 <_free_r+0x28>
 800cc90:	d902      	bls.n	800cc98 <_free_r+0x80>
 800cc92:	230c      	movs	r3, #12
 800cc94:	6003      	str	r3, [r0, #0]
 800cc96:	e7d3      	b.n	800cc40 <_free_r+0x28>
 800cc98:	6825      	ldr	r5, [r4, #0]
 800cc9a:	1961      	adds	r1, r4, r5
 800cc9c:	428b      	cmp	r3, r1
 800cc9e:	bf04      	itt	eq
 800cca0:	6819      	ldreq	r1, [r3, #0]
 800cca2:	685b      	ldreq	r3, [r3, #4]
 800cca4:	6063      	str	r3, [r4, #4]
 800cca6:	bf04      	itt	eq
 800cca8:	1949      	addeq	r1, r1, r5
 800ccaa:	6021      	streq	r1, [r4, #0]
 800ccac:	6054      	str	r4, [r2, #4]
 800ccae:	e7c7      	b.n	800cc40 <_free_r+0x28>
 800ccb0:	b003      	add	sp, #12
 800ccb2:	bd30      	pop	{r4, r5, pc}
 800ccb4:	20000608 	.word	0x20000608

0800ccb8 <_malloc_r>:
 800ccb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccba:	1ccd      	adds	r5, r1, #3
 800ccbc:	f025 0503 	bic.w	r5, r5, #3
 800ccc0:	3508      	adds	r5, #8
 800ccc2:	2d0c      	cmp	r5, #12
 800ccc4:	bf38      	it	cc
 800ccc6:	250c      	movcc	r5, #12
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	4606      	mov	r6, r0
 800cccc:	db01      	blt.n	800ccd2 <_malloc_r+0x1a>
 800ccce:	42a9      	cmp	r1, r5
 800ccd0:	d903      	bls.n	800ccda <_malloc_r+0x22>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccda:	f000 fa0f 	bl	800d0fc <__malloc_lock>
 800ccde:	4921      	ldr	r1, [pc, #132]	; (800cd64 <_malloc_r+0xac>)
 800cce0:	680a      	ldr	r2, [r1, #0]
 800cce2:	4614      	mov	r4, r2
 800cce4:	b99c      	cbnz	r4, 800cd0e <_malloc_r+0x56>
 800cce6:	4f20      	ldr	r7, [pc, #128]	; (800cd68 <_malloc_r+0xb0>)
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	b923      	cbnz	r3, 800ccf6 <_malloc_r+0x3e>
 800ccec:	4621      	mov	r1, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f000 f998 	bl	800d024 <_sbrk_r>
 800ccf4:	6038      	str	r0, [r7, #0]
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f000 f993 	bl	800d024 <_sbrk_r>
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	d123      	bne.n	800cd4a <_malloc_r+0x92>
 800cd02:	230c      	movs	r3, #12
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	4630      	mov	r0, r6
 800cd08:	f000 f9fe 	bl	800d108 <__malloc_unlock>
 800cd0c:	e7e3      	b.n	800ccd6 <_malloc_r+0x1e>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	1b5b      	subs	r3, r3, r5
 800cd12:	d417      	bmi.n	800cd44 <_malloc_r+0x8c>
 800cd14:	2b0b      	cmp	r3, #11
 800cd16:	d903      	bls.n	800cd20 <_malloc_r+0x68>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	441c      	add	r4, r3
 800cd1c:	6025      	str	r5, [r4, #0]
 800cd1e:	e004      	b.n	800cd2a <_malloc_r+0x72>
 800cd20:	6863      	ldr	r3, [r4, #4]
 800cd22:	42a2      	cmp	r2, r4
 800cd24:	bf0c      	ite	eq
 800cd26:	600b      	streq	r3, [r1, #0]
 800cd28:	6053      	strne	r3, [r2, #4]
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f000 f9ec 	bl	800d108 <__malloc_unlock>
 800cd30:	f104 000b 	add.w	r0, r4, #11
 800cd34:	1d23      	adds	r3, r4, #4
 800cd36:	f020 0007 	bic.w	r0, r0, #7
 800cd3a:	1ac2      	subs	r2, r0, r3
 800cd3c:	d0cc      	beq.n	800ccd8 <_malloc_r+0x20>
 800cd3e:	1a1b      	subs	r3, r3, r0
 800cd40:	50a3      	str	r3, [r4, r2]
 800cd42:	e7c9      	b.n	800ccd8 <_malloc_r+0x20>
 800cd44:	4622      	mov	r2, r4
 800cd46:	6864      	ldr	r4, [r4, #4]
 800cd48:	e7cc      	b.n	800cce4 <_malloc_r+0x2c>
 800cd4a:	1cc4      	adds	r4, r0, #3
 800cd4c:	f024 0403 	bic.w	r4, r4, #3
 800cd50:	42a0      	cmp	r0, r4
 800cd52:	d0e3      	beq.n	800cd1c <_malloc_r+0x64>
 800cd54:	1a21      	subs	r1, r4, r0
 800cd56:	4630      	mov	r0, r6
 800cd58:	f000 f964 	bl	800d024 <_sbrk_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d1dd      	bne.n	800cd1c <_malloc_r+0x64>
 800cd60:	e7cf      	b.n	800cd02 <_malloc_r+0x4a>
 800cd62:	bf00      	nop
 800cd64:	20000608 	.word	0x20000608
 800cd68:	2000060c 	.word	0x2000060c

0800cd6c <__ssputs_r>:
 800cd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd70:	688e      	ldr	r6, [r1, #8]
 800cd72:	429e      	cmp	r6, r3
 800cd74:	4682      	mov	sl, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	4690      	mov	r8, r2
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	d838      	bhi.n	800cdf0 <__ssputs_r+0x84>
 800cd7e:	898a      	ldrh	r2, [r1, #12]
 800cd80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd84:	d032      	beq.n	800cdec <__ssputs_r+0x80>
 800cd86:	6825      	ldr	r5, [r4, #0]
 800cd88:	6909      	ldr	r1, [r1, #16]
 800cd8a:	eba5 0901 	sub.w	r9, r5, r1
 800cd8e:	6965      	ldr	r5, [r4, #20]
 800cd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd98:	3301      	adds	r3, #1
 800cd9a:	444b      	add	r3, r9
 800cd9c:	106d      	asrs	r5, r5, #1
 800cd9e:	429d      	cmp	r5, r3
 800cda0:	bf38      	it	cc
 800cda2:	461d      	movcc	r5, r3
 800cda4:	0553      	lsls	r3, r2, #21
 800cda6:	d531      	bpl.n	800ce0c <__ssputs_r+0xa0>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f7ff ff85 	bl	800ccb8 <_malloc_r>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	b950      	cbnz	r0, 800cdc8 <__ssputs_r+0x5c>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	f8ca 3000 	str.w	r3, [sl]
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	6921      	ldr	r1, [r4, #16]
 800cdca:	464a      	mov	r2, r9
 800cdcc:	f7ff fb88 	bl	800c4e0 <memcpy>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdda:	81a3      	strh	r3, [r4, #12]
 800cddc:	6126      	str	r6, [r4, #16]
 800cdde:	6165      	str	r5, [r4, #20]
 800cde0:	444e      	add	r6, r9
 800cde2:	eba5 0509 	sub.w	r5, r5, r9
 800cde6:	6026      	str	r6, [r4, #0]
 800cde8:	60a5      	str	r5, [r4, #8]
 800cdea:	463e      	mov	r6, r7
 800cdec:	42be      	cmp	r6, r7
 800cdee:	d900      	bls.n	800cdf2 <__ssputs_r+0x86>
 800cdf0:	463e      	mov	r6, r7
 800cdf2:	4632      	mov	r2, r6
 800cdf4:	6820      	ldr	r0, [r4, #0]
 800cdf6:	4641      	mov	r1, r8
 800cdf8:	f000 f966 	bl	800d0c8 <memmove>
 800cdfc:	68a3      	ldr	r3, [r4, #8]
 800cdfe:	6822      	ldr	r2, [r4, #0]
 800ce00:	1b9b      	subs	r3, r3, r6
 800ce02:	4432      	add	r2, r6
 800ce04:	60a3      	str	r3, [r4, #8]
 800ce06:	6022      	str	r2, [r4, #0]
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7db      	b.n	800cdc4 <__ssputs_r+0x58>
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	f000 f981 	bl	800d114 <_realloc_r>
 800ce12:	4606      	mov	r6, r0
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1e1      	bne.n	800cddc <__ssputs_r+0x70>
 800ce18:	6921      	ldr	r1, [r4, #16]
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	f7ff fefc 	bl	800cc18 <_free_r>
 800ce20:	e7c7      	b.n	800cdb2 <__ssputs_r+0x46>
	...

0800ce24 <_svfiprintf_r>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	4698      	mov	r8, r3
 800ce2a:	898b      	ldrh	r3, [r1, #12]
 800ce2c:	061b      	lsls	r3, r3, #24
 800ce2e:	b09d      	sub	sp, #116	; 0x74
 800ce30:	4607      	mov	r7, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	4614      	mov	r4, r2
 800ce36:	d50e      	bpl.n	800ce56 <_svfiprintf_r+0x32>
 800ce38:	690b      	ldr	r3, [r1, #16]
 800ce3a:	b963      	cbnz	r3, 800ce56 <_svfiprintf_r+0x32>
 800ce3c:	2140      	movs	r1, #64	; 0x40
 800ce3e:	f7ff ff3b 	bl	800ccb8 <_malloc_r>
 800ce42:	6028      	str	r0, [r5, #0]
 800ce44:	6128      	str	r0, [r5, #16]
 800ce46:	b920      	cbnz	r0, 800ce52 <_svfiprintf_r+0x2e>
 800ce48:	230c      	movs	r3, #12
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e0d1      	b.n	800cff6 <_svfiprintf_r+0x1d2>
 800ce52:	2340      	movs	r3, #64	; 0x40
 800ce54:	616b      	str	r3, [r5, #20]
 800ce56:	2300      	movs	r3, #0
 800ce58:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5a:	2320      	movs	r3, #32
 800ce5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce64:	2330      	movs	r3, #48	; 0x30
 800ce66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d010 <_svfiprintf_r+0x1ec>
 800ce6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6e:	f04f 0901 	mov.w	r9, #1
 800ce72:	4623      	mov	r3, r4
 800ce74:	469a      	mov	sl, r3
 800ce76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7a:	b10a      	cbz	r2, 800ce80 <_svfiprintf_r+0x5c>
 800ce7c:	2a25      	cmp	r2, #37	; 0x25
 800ce7e:	d1f9      	bne.n	800ce74 <_svfiprintf_r+0x50>
 800ce80:	ebba 0b04 	subs.w	fp, sl, r4
 800ce84:	d00b      	beq.n	800ce9e <_svfiprintf_r+0x7a>
 800ce86:	465b      	mov	r3, fp
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7ff ff6d 	bl	800cd6c <__ssputs_r>
 800ce92:	3001      	adds	r0, #1
 800ce94:	f000 80aa 	beq.w	800cfec <_svfiprintf_r+0x1c8>
 800ce98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce9a:	445a      	add	r2, fp
 800ce9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80a2 	beq.w	800cfec <_svfiprintf_r+0x1c8>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ceae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb2:	f10a 0a01 	add.w	sl, sl, #1
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	9307      	str	r3, [sp, #28]
 800ceba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cebe:	931a      	str	r3, [sp, #104]	; 0x68
 800cec0:	4654      	mov	r4, sl
 800cec2:	2205      	movs	r2, #5
 800cec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec8:	4851      	ldr	r0, [pc, #324]	; (800d010 <_svfiprintf_r+0x1ec>)
 800ceca:	f7f3 f999 	bl	8000200 <memchr>
 800cece:	9a04      	ldr	r2, [sp, #16]
 800ced0:	b9d8      	cbnz	r0, 800cf0a <_svfiprintf_r+0xe6>
 800ced2:	06d0      	lsls	r0, r2, #27
 800ced4:	bf44      	itt	mi
 800ced6:	2320      	movmi	r3, #32
 800ced8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cedc:	0711      	lsls	r1, r2, #28
 800cede:	bf44      	itt	mi
 800cee0:	232b      	movmi	r3, #43	; 0x2b
 800cee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceea:	2b2a      	cmp	r3, #42	; 0x2a
 800ceec:	d015      	beq.n	800cf1a <_svfiprintf_r+0xf6>
 800ceee:	9a07      	ldr	r2, [sp, #28]
 800cef0:	4654      	mov	r4, sl
 800cef2:	2000      	movs	r0, #0
 800cef4:	f04f 0c0a 	mov.w	ip, #10
 800cef8:	4621      	mov	r1, r4
 800cefa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefe:	3b30      	subs	r3, #48	; 0x30
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	d94e      	bls.n	800cfa2 <_svfiprintf_r+0x17e>
 800cf04:	b1b0      	cbz	r0, 800cf34 <_svfiprintf_r+0x110>
 800cf06:	9207      	str	r2, [sp, #28]
 800cf08:	e014      	b.n	800cf34 <_svfiprintf_r+0x110>
 800cf0a:	eba0 0308 	sub.w	r3, r0, r8
 800cf0e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf12:	4313      	orrs	r3, r2
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	46a2      	mov	sl, r4
 800cf18:	e7d2      	b.n	800cec0 <_svfiprintf_r+0x9c>
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	1d19      	adds	r1, r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	9103      	str	r1, [sp, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	bfbb      	ittet	lt
 800cf26:	425b      	neglt	r3, r3
 800cf28:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2c:	9307      	strge	r3, [sp, #28]
 800cf2e:	9307      	strlt	r3, [sp, #28]
 800cf30:	bfb8      	it	lt
 800cf32:	9204      	strlt	r2, [sp, #16]
 800cf34:	7823      	ldrb	r3, [r4, #0]
 800cf36:	2b2e      	cmp	r3, #46	; 0x2e
 800cf38:	d10c      	bne.n	800cf54 <_svfiprintf_r+0x130>
 800cf3a:	7863      	ldrb	r3, [r4, #1]
 800cf3c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3e:	d135      	bne.n	800cfac <_svfiprintf_r+0x188>
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	1d1a      	adds	r2, r3, #4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	9203      	str	r2, [sp, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfb8      	it	lt
 800cf4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf50:	3402      	adds	r4, #2
 800cf52:	9305      	str	r3, [sp, #20]
 800cf54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d020 <_svfiprintf_r+0x1fc>
 800cf58:	7821      	ldrb	r1, [r4, #0]
 800cf5a:	2203      	movs	r2, #3
 800cf5c:	4650      	mov	r0, sl
 800cf5e:	f7f3 f94f 	bl	8000200 <memchr>
 800cf62:	b140      	cbz	r0, 800cf76 <_svfiprintf_r+0x152>
 800cf64:	2340      	movs	r3, #64	; 0x40
 800cf66:	eba0 000a 	sub.w	r0, r0, sl
 800cf6a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	4303      	orrs	r3, r0
 800cf72:	3401      	adds	r4, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7a:	4826      	ldr	r0, [pc, #152]	; (800d014 <_svfiprintf_r+0x1f0>)
 800cf7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf80:	2206      	movs	r2, #6
 800cf82:	f7f3 f93d 	bl	8000200 <memchr>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d038      	beq.n	800cffc <_svfiprintf_r+0x1d8>
 800cf8a:	4b23      	ldr	r3, [pc, #140]	; (800d018 <_svfiprintf_r+0x1f4>)
 800cf8c:	bb1b      	cbnz	r3, 800cfd6 <_svfiprintf_r+0x1b2>
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	3307      	adds	r3, #7
 800cf92:	f023 0307 	bic.w	r3, r3, #7
 800cf96:	3308      	adds	r3, #8
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9c:	4433      	add	r3, r6
 800cf9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa0:	e767      	b.n	800ce72 <_svfiprintf_r+0x4e>
 800cfa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	e7a5      	b.n	800cef8 <_svfiprintf_r+0xd4>
 800cfac:	2300      	movs	r3, #0
 800cfae:	3401      	adds	r4, #1
 800cfb0:	9305      	str	r3, [sp, #20]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f04f 0c0a 	mov.w	ip, #10
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfbe:	3a30      	subs	r2, #48	; 0x30
 800cfc0:	2a09      	cmp	r2, #9
 800cfc2:	d903      	bls.n	800cfcc <_svfiprintf_r+0x1a8>
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d0c5      	beq.n	800cf54 <_svfiprintf_r+0x130>
 800cfc8:	9105      	str	r1, [sp, #20]
 800cfca:	e7c3      	b.n	800cf54 <_svfiprintf_r+0x130>
 800cfcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e7f0      	b.n	800cfb8 <_svfiprintf_r+0x194>
 800cfd6:	ab03      	add	r3, sp, #12
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	462a      	mov	r2, r5
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <_svfiprintf_r+0x1f8>)
 800cfde:	a904      	add	r1, sp, #16
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7fd ffd3 	bl	800af8c <_printf_float>
 800cfe6:	1c42      	adds	r2, r0, #1
 800cfe8:	4606      	mov	r6, r0
 800cfea:	d1d6      	bne.n	800cf9a <_svfiprintf_r+0x176>
 800cfec:	89ab      	ldrh	r3, [r5, #12]
 800cfee:	065b      	lsls	r3, r3, #25
 800cff0:	f53f af2c 	bmi.w	800ce4c <_svfiprintf_r+0x28>
 800cff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff6:	b01d      	add	sp, #116	; 0x74
 800cff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffc:	ab03      	add	r3, sp, #12
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	462a      	mov	r2, r5
 800d002:	4b06      	ldr	r3, [pc, #24]	; (800d01c <_svfiprintf_r+0x1f8>)
 800d004:	a904      	add	r1, sp, #16
 800d006:	4638      	mov	r0, r7
 800d008:	f7fe fa64 	bl	800b4d4 <_printf_i>
 800d00c:	e7eb      	b.n	800cfe6 <_svfiprintf_r+0x1c2>
 800d00e:	bf00      	nop
 800d010:	0800dfcc 	.word	0x0800dfcc
 800d014:	0800dfd6 	.word	0x0800dfd6
 800d018:	0800af8d 	.word	0x0800af8d
 800d01c:	0800cd6d 	.word	0x0800cd6d
 800d020:	0800dfd2 	.word	0x0800dfd2

0800d024 <_sbrk_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d06      	ldr	r5, [pc, #24]	; (800d040 <_sbrk_r+0x1c>)
 800d028:	2300      	movs	r3, #0
 800d02a:	4604      	mov	r4, r0
 800d02c:	4608      	mov	r0, r1
 800d02e:	602b      	str	r3, [r5, #0]
 800d030:	f7f5 fae4 	bl	80025fc <_sbrk>
 800d034:	1c43      	adds	r3, r0, #1
 800d036:	d102      	bne.n	800d03e <_sbrk_r+0x1a>
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	b103      	cbz	r3, 800d03e <_sbrk_r+0x1a>
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	bd38      	pop	{r3, r4, r5, pc}
 800d040:	200024b0 	.word	0x200024b0

0800d044 <__assert_func>:
 800d044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d046:	4614      	mov	r4, r2
 800d048:	461a      	mov	r2, r3
 800d04a:	4b09      	ldr	r3, [pc, #36]	; (800d070 <__assert_func+0x2c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4605      	mov	r5, r0
 800d050:	68d8      	ldr	r0, [r3, #12]
 800d052:	b14c      	cbz	r4, 800d068 <__assert_func+0x24>
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <__assert_func+0x30>)
 800d056:	9100      	str	r1, [sp, #0]
 800d058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d05c:	4906      	ldr	r1, [pc, #24]	; (800d078 <__assert_func+0x34>)
 800d05e:	462b      	mov	r3, r5
 800d060:	f000 f80e 	bl	800d080 <fiprintf>
 800d064:	f000 faa4 	bl	800d5b0 <abort>
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <__assert_func+0x38>)
 800d06a:	461c      	mov	r4, r3
 800d06c:	e7f3      	b.n	800d056 <__assert_func+0x12>
 800d06e:	bf00      	nop
 800d070:	20000180 	.word	0x20000180
 800d074:	0800dfdd 	.word	0x0800dfdd
 800d078:	0800dfea 	.word	0x0800dfea
 800d07c:	0800e018 	.word	0x0800e018

0800d080 <fiprintf>:
 800d080:	b40e      	push	{r1, r2, r3}
 800d082:	b503      	push	{r0, r1, lr}
 800d084:	4601      	mov	r1, r0
 800d086:	ab03      	add	r3, sp, #12
 800d088:	4805      	ldr	r0, [pc, #20]	; (800d0a0 <fiprintf+0x20>)
 800d08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08e:	6800      	ldr	r0, [r0, #0]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	f000 f88f 	bl	800d1b4 <_vfiprintf_r>
 800d096:	b002      	add	sp, #8
 800d098:	f85d eb04 	ldr.w	lr, [sp], #4
 800d09c:	b003      	add	sp, #12
 800d09e:	4770      	bx	lr
 800d0a0:	20000180 	.word	0x20000180

0800d0a4 <__ascii_mbtowc>:
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	b901      	cbnz	r1, 800d0aa <__ascii_mbtowc+0x6>
 800d0a8:	a901      	add	r1, sp, #4
 800d0aa:	b142      	cbz	r2, 800d0be <__ascii_mbtowc+0x1a>
 800d0ac:	b14b      	cbz	r3, 800d0c2 <__ascii_mbtowc+0x1e>
 800d0ae:	7813      	ldrb	r3, [r2, #0]
 800d0b0:	600b      	str	r3, [r1, #0]
 800d0b2:	7812      	ldrb	r2, [r2, #0]
 800d0b4:	1e10      	subs	r0, r2, #0
 800d0b6:	bf18      	it	ne
 800d0b8:	2001      	movne	r0, #1
 800d0ba:	b002      	add	sp, #8
 800d0bc:	4770      	bx	lr
 800d0be:	4610      	mov	r0, r2
 800d0c0:	e7fb      	b.n	800d0ba <__ascii_mbtowc+0x16>
 800d0c2:	f06f 0001 	mvn.w	r0, #1
 800d0c6:	e7f8      	b.n	800d0ba <__ascii_mbtowc+0x16>

0800d0c8 <memmove>:
 800d0c8:	4288      	cmp	r0, r1
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	eb01 0402 	add.w	r4, r1, r2
 800d0d0:	d902      	bls.n	800d0d8 <memmove+0x10>
 800d0d2:	4284      	cmp	r4, r0
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	d807      	bhi.n	800d0e8 <memmove+0x20>
 800d0d8:	1e43      	subs	r3, r0, #1
 800d0da:	42a1      	cmp	r1, r4
 800d0dc:	d008      	beq.n	800d0f0 <memmove+0x28>
 800d0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0e6:	e7f8      	b.n	800d0da <memmove+0x12>
 800d0e8:	4402      	add	r2, r0
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	428a      	cmp	r2, r1
 800d0ee:	d100      	bne.n	800d0f2 <memmove+0x2a>
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0fa:	e7f7      	b.n	800d0ec <memmove+0x24>

0800d0fc <__malloc_lock>:
 800d0fc:	4801      	ldr	r0, [pc, #4]	; (800d104 <__malloc_lock+0x8>)
 800d0fe:	f000 bc17 	b.w	800d930 <__retarget_lock_acquire_recursive>
 800d102:	bf00      	nop
 800d104:	200024b8 	.word	0x200024b8

0800d108 <__malloc_unlock>:
 800d108:	4801      	ldr	r0, [pc, #4]	; (800d110 <__malloc_unlock+0x8>)
 800d10a:	f000 bc12 	b.w	800d932 <__retarget_lock_release_recursive>
 800d10e:	bf00      	nop
 800d110:	200024b8 	.word	0x200024b8

0800d114 <_realloc_r>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	4607      	mov	r7, r0
 800d118:	4614      	mov	r4, r2
 800d11a:	460e      	mov	r6, r1
 800d11c:	b921      	cbnz	r1, 800d128 <_realloc_r+0x14>
 800d11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d122:	4611      	mov	r1, r2
 800d124:	f7ff bdc8 	b.w	800ccb8 <_malloc_r>
 800d128:	b922      	cbnz	r2, 800d134 <_realloc_r+0x20>
 800d12a:	f7ff fd75 	bl	800cc18 <_free_r>
 800d12e:	4625      	mov	r5, r4
 800d130:	4628      	mov	r0, r5
 800d132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d134:	f000 fc62 	bl	800d9fc <_malloc_usable_size_r>
 800d138:	42a0      	cmp	r0, r4
 800d13a:	d20f      	bcs.n	800d15c <_realloc_r+0x48>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4638      	mov	r0, r7
 800d140:	f7ff fdba 	bl	800ccb8 <_malloc_r>
 800d144:	4605      	mov	r5, r0
 800d146:	2800      	cmp	r0, #0
 800d148:	d0f2      	beq.n	800d130 <_realloc_r+0x1c>
 800d14a:	4631      	mov	r1, r6
 800d14c:	4622      	mov	r2, r4
 800d14e:	f7ff f9c7 	bl	800c4e0 <memcpy>
 800d152:	4631      	mov	r1, r6
 800d154:	4638      	mov	r0, r7
 800d156:	f7ff fd5f 	bl	800cc18 <_free_r>
 800d15a:	e7e9      	b.n	800d130 <_realloc_r+0x1c>
 800d15c:	4635      	mov	r5, r6
 800d15e:	e7e7      	b.n	800d130 <_realloc_r+0x1c>

0800d160 <__sfputc_r>:
 800d160:	6893      	ldr	r3, [r2, #8]
 800d162:	3b01      	subs	r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	b410      	push	{r4}
 800d168:	6093      	str	r3, [r2, #8]
 800d16a:	da08      	bge.n	800d17e <__sfputc_r+0x1e>
 800d16c:	6994      	ldr	r4, [r2, #24]
 800d16e:	42a3      	cmp	r3, r4
 800d170:	db01      	blt.n	800d176 <__sfputc_r+0x16>
 800d172:	290a      	cmp	r1, #10
 800d174:	d103      	bne.n	800d17e <__sfputc_r+0x1e>
 800d176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d17a:	f000 b94b 	b.w	800d414 <__swbuf_r>
 800d17e:	6813      	ldr	r3, [r2, #0]
 800d180:	1c58      	adds	r0, r3, #1
 800d182:	6010      	str	r0, [r2, #0]
 800d184:	7019      	strb	r1, [r3, #0]
 800d186:	4608      	mov	r0, r1
 800d188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <__sfputs_r>:
 800d18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	4614      	mov	r4, r2
 800d196:	18d5      	adds	r5, r2, r3
 800d198:	42ac      	cmp	r4, r5
 800d19a:	d101      	bne.n	800d1a0 <__sfputs_r+0x12>
 800d19c:	2000      	movs	r0, #0
 800d19e:	e007      	b.n	800d1b0 <__sfputs_r+0x22>
 800d1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a4:	463a      	mov	r2, r7
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7ff ffda 	bl	800d160 <__sfputc_r>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d1f3      	bne.n	800d198 <__sfputs_r+0xa>
 800d1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1b4 <_vfiprintf_r>:
 800d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	b09d      	sub	sp, #116	; 0x74
 800d1bc:	4614      	mov	r4, r2
 800d1be:	4698      	mov	r8, r3
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	b118      	cbz	r0, 800d1cc <_vfiprintf_r+0x18>
 800d1c4:	6983      	ldr	r3, [r0, #24]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <_vfiprintf_r+0x18>
 800d1c8:	f000 fb14 	bl	800d7f4 <__sinit>
 800d1cc:	4b89      	ldr	r3, [pc, #548]	; (800d3f4 <_vfiprintf_r+0x240>)
 800d1ce:	429d      	cmp	r5, r3
 800d1d0:	d11b      	bne.n	800d20a <_vfiprintf_r+0x56>
 800d1d2:	6875      	ldr	r5, [r6, #4]
 800d1d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1d6:	07d9      	lsls	r1, r3, #31
 800d1d8:	d405      	bmi.n	800d1e6 <_vfiprintf_r+0x32>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	059a      	lsls	r2, r3, #22
 800d1de:	d402      	bmi.n	800d1e6 <_vfiprintf_r+0x32>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e2:	f000 fba5 	bl	800d930 <__retarget_lock_acquire_recursive>
 800d1e6:	89ab      	ldrh	r3, [r5, #12]
 800d1e8:	071b      	lsls	r3, r3, #28
 800d1ea:	d501      	bpl.n	800d1f0 <_vfiprintf_r+0x3c>
 800d1ec:	692b      	ldr	r3, [r5, #16]
 800d1ee:	b9eb      	cbnz	r3, 800d22c <_vfiprintf_r+0x78>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f000 f96e 	bl	800d4d4 <__swsetup_r>
 800d1f8:	b1c0      	cbz	r0, 800d22c <_vfiprintf_r+0x78>
 800d1fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1fc:	07dc      	lsls	r4, r3, #31
 800d1fe:	d50e      	bpl.n	800d21e <_vfiprintf_r+0x6a>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	b01d      	add	sp, #116	; 0x74
 800d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20a:	4b7b      	ldr	r3, [pc, #492]	; (800d3f8 <_vfiprintf_r+0x244>)
 800d20c:	429d      	cmp	r5, r3
 800d20e:	d101      	bne.n	800d214 <_vfiprintf_r+0x60>
 800d210:	68b5      	ldr	r5, [r6, #8]
 800d212:	e7df      	b.n	800d1d4 <_vfiprintf_r+0x20>
 800d214:	4b79      	ldr	r3, [pc, #484]	; (800d3fc <_vfiprintf_r+0x248>)
 800d216:	429d      	cmp	r5, r3
 800d218:	bf08      	it	eq
 800d21a:	68f5      	ldreq	r5, [r6, #12]
 800d21c:	e7da      	b.n	800d1d4 <_vfiprintf_r+0x20>
 800d21e:	89ab      	ldrh	r3, [r5, #12]
 800d220:	0598      	lsls	r0, r3, #22
 800d222:	d4ed      	bmi.n	800d200 <_vfiprintf_r+0x4c>
 800d224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d226:	f000 fb84 	bl	800d932 <__retarget_lock_release_recursive>
 800d22a:	e7e9      	b.n	800d200 <_vfiprintf_r+0x4c>
 800d22c:	2300      	movs	r3, #0
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	2320      	movs	r3, #32
 800d232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d236:	f8cd 800c 	str.w	r8, [sp, #12]
 800d23a:	2330      	movs	r3, #48	; 0x30
 800d23c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d400 <_vfiprintf_r+0x24c>
 800d240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d244:	f04f 0901 	mov.w	r9, #1
 800d248:	4623      	mov	r3, r4
 800d24a:	469a      	mov	sl, r3
 800d24c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d250:	b10a      	cbz	r2, 800d256 <_vfiprintf_r+0xa2>
 800d252:	2a25      	cmp	r2, #37	; 0x25
 800d254:	d1f9      	bne.n	800d24a <_vfiprintf_r+0x96>
 800d256:	ebba 0b04 	subs.w	fp, sl, r4
 800d25a:	d00b      	beq.n	800d274 <_vfiprintf_r+0xc0>
 800d25c:	465b      	mov	r3, fp
 800d25e:	4622      	mov	r2, r4
 800d260:	4629      	mov	r1, r5
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ff93 	bl	800d18e <__sfputs_r>
 800d268:	3001      	adds	r0, #1
 800d26a:	f000 80aa 	beq.w	800d3c2 <_vfiprintf_r+0x20e>
 800d26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d270:	445a      	add	r2, fp
 800d272:	9209      	str	r2, [sp, #36]	; 0x24
 800d274:	f89a 3000 	ldrb.w	r3, [sl]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 80a2 	beq.w	800d3c2 <_vfiprintf_r+0x20e>
 800d27e:	2300      	movs	r3, #0
 800d280:	f04f 32ff 	mov.w	r2, #4294967295
 800d284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d288:	f10a 0a01 	add.w	sl, sl, #1
 800d28c:	9304      	str	r3, [sp, #16]
 800d28e:	9307      	str	r3, [sp, #28]
 800d290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d294:	931a      	str	r3, [sp, #104]	; 0x68
 800d296:	4654      	mov	r4, sl
 800d298:	2205      	movs	r2, #5
 800d29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29e:	4858      	ldr	r0, [pc, #352]	; (800d400 <_vfiprintf_r+0x24c>)
 800d2a0:	f7f2 ffae 	bl	8000200 <memchr>
 800d2a4:	9a04      	ldr	r2, [sp, #16]
 800d2a6:	b9d8      	cbnz	r0, 800d2e0 <_vfiprintf_r+0x12c>
 800d2a8:	06d1      	lsls	r1, r2, #27
 800d2aa:	bf44      	itt	mi
 800d2ac:	2320      	movmi	r3, #32
 800d2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2b2:	0713      	lsls	r3, r2, #28
 800d2b4:	bf44      	itt	mi
 800d2b6:	232b      	movmi	r3, #43	; 0x2b
 800d2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c2:	d015      	beq.n	800d2f0 <_vfiprintf_r+0x13c>
 800d2c4:	9a07      	ldr	r2, [sp, #28]
 800d2c6:	4654      	mov	r4, sl
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f04f 0c0a 	mov.w	ip, #10
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2d4:	3b30      	subs	r3, #48	; 0x30
 800d2d6:	2b09      	cmp	r3, #9
 800d2d8:	d94e      	bls.n	800d378 <_vfiprintf_r+0x1c4>
 800d2da:	b1b0      	cbz	r0, 800d30a <_vfiprintf_r+0x156>
 800d2dc:	9207      	str	r2, [sp, #28]
 800d2de:	e014      	b.n	800d30a <_vfiprintf_r+0x156>
 800d2e0:	eba0 0308 	sub.w	r3, r0, r8
 800d2e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	46a2      	mov	sl, r4
 800d2ee:	e7d2      	b.n	800d296 <_vfiprintf_r+0xe2>
 800d2f0:	9b03      	ldr	r3, [sp, #12]
 800d2f2:	1d19      	adds	r1, r3, #4
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	9103      	str	r1, [sp, #12]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	bfbb      	ittet	lt
 800d2fc:	425b      	neglt	r3, r3
 800d2fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d302:	9307      	strge	r3, [sp, #28]
 800d304:	9307      	strlt	r3, [sp, #28]
 800d306:	bfb8      	it	lt
 800d308:	9204      	strlt	r2, [sp, #16]
 800d30a:	7823      	ldrb	r3, [r4, #0]
 800d30c:	2b2e      	cmp	r3, #46	; 0x2e
 800d30e:	d10c      	bne.n	800d32a <_vfiprintf_r+0x176>
 800d310:	7863      	ldrb	r3, [r4, #1]
 800d312:	2b2a      	cmp	r3, #42	; 0x2a
 800d314:	d135      	bne.n	800d382 <_vfiprintf_r+0x1ce>
 800d316:	9b03      	ldr	r3, [sp, #12]
 800d318:	1d1a      	adds	r2, r3, #4
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	9203      	str	r2, [sp, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfb8      	it	lt
 800d322:	f04f 33ff 	movlt.w	r3, #4294967295
 800d326:	3402      	adds	r4, #2
 800d328:	9305      	str	r3, [sp, #20]
 800d32a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d410 <_vfiprintf_r+0x25c>
 800d32e:	7821      	ldrb	r1, [r4, #0]
 800d330:	2203      	movs	r2, #3
 800d332:	4650      	mov	r0, sl
 800d334:	f7f2 ff64 	bl	8000200 <memchr>
 800d338:	b140      	cbz	r0, 800d34c <_vfiprintf_r+0x198>
 800d33a:	2340      	movs	r3, #64	; 0x40
 800d33c:	eba0 000a 	sub.w	r0, r0, sl
 800d340:	fa03 f000 	lsl.w	r0, r3, r0
 800d344:	9b04      	ldr	r3, [sp, #16]
 800d346:	4303      	orrs	r3, r0
 800d348:	3401      	adds	r4, #1
 800d34a:	9304      	str	r3, [sp, #16]
 800d34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d350:	482c      	ldr	r0, [pc, #176]	; (800d404 <_vfiprintf_r+0x250>)
 800d352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d356:	2206      	movs	r2, #6
 800d358:	f7f2 ff52 	bl	8000200 <memchr>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d03f      	beq.n	800d3e0 <_vfiprintf_r+0x22c>
 800d360:	4b29      	ldr	r3, [pc, #164]	; (800d408 <_vfiprintf_r+0x254>)
 800d362:	bb1b      	cbnz	r3, 800d3ac <_vfiprintf_r+0x1f8>
 800d364:	9b03      	ldr	r3, [sp, #12]
 800d366:	3307      	adds	r3, #7
 800d368:	f023 0307 	bic.w	r3, r3, #7
 800d36c:	3308      	adds	r3, #8
 800d36e:	9303      	str	r3, [sp, #12]
 800d370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d372:	443b      	add	r3, r7
 800d374:	9309      	str	r3, [sp, #36]	; 0x24
 800d376:	e767      	b.n	800d248 <_vfiprintf_r+0x94>
 800d378:	fb0c 3202 	mla	r2, ip, r2, r3
 800d37c:	460c      	mov	r4, r1
 800d37e:	2001      	movs	r0, #1
 800d380:	e7a5      	b.n	800d2ce <_vfiprintf_r+0x11a>
 800d382:	2300      	movs	r3, #0
 800d384:	3401      	adds	r4, #1
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	4619      	mov	r1, r3
 800d38a:	f04f 0c0a 	mov.w	ip, #10
 800d38e:	4620      	mov	r0, r4
 800d390:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d394:	3a30      	subs	r2, #48	; 0x30
 800d396:	2a09      	cmp	r2, #9
 800d398:	d903      	bls.n	800d3a2 <_vfiprintf_r+0x1ee>
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d0c5      	beq.n	800d32a <_vfiprintf_r+0x176>
 800d39e:	9105      	str	r1, [sp, #20]
 800d3a0:	e7c3      	b.n	800d32a <_vfiprintf_r+0x176>
 800d3a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e7f0      	b.n	800d38e <_vfiprintf_r+0x1da>
 800d3ac:	ab03      	add	r3, sp, #12
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	4b16      	ldr	r3, [pc, #88]	; (800d40c <_vfiprintf_r+0x258>)
 800d3b4:	a904      	add	r1, sp, #16
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7fd fde8 	bl	800af8c <_printf_float>
 800d3bc:	4607      	mov	r7, r0
 800d3be:	1c78      	adds	r0, r7, #1
 800d3c0:	d1d6      	bne.n	800d370 <_vfiprintf_r+0x1bc>
 800d3c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3c4:	07d9      	lsls	r1, r3, #31
 800d3c6:	d405      	bmi.n	800d3d4 <_vfiprintf_r+0x220>
 800d3c8:	89ab      	ldrh	r3, [r5, #12]
 800d3ca:	059a      	lsls	r2, r3, #22
 800d3cc:	d402      	bmi.n	800d3d4 <_vfiprintf_r+0x220>
 800d3ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3d0:	f000 faaf 	bl	800d932 <__retarget_lock_release_recursive>
 800d3d4:	89ab      	ldrh	r3, [r5, #12]
 800d3d6:	065b      	lsls	r3, r3, #25
 800d3d8:	f53f af12 	bmi.w	800d200 <_vfiprintf_r+0x4c>
 800d3dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3de:	e711      	b.n	800d204 <_vfiprintf_r+0x50>
 800d3e0:	ab03      	add	r3, sp, #12
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4b09      	ldr	r3, [pc, #36]	; (800d40c <_vfiprintf_r+0x258>)
 800d3e8:	a904      	add	r1, sp, #16
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7fe f872 	bl	800b4d4 <_printf_i>
 800d3f0:	e7e4      	b.n	800d3bc <_vfiprintf_r+0x208>
 800d3f2:	bf00      	nop
 800d3f4:	0800e144 	.word	0x0800e144
 800d3f8:	0800e164 	.word	0x0800e164
 800d3fc:	0800e124 	.word	0x0800e124
 800d400:	0800dfcc 	.word	0x0800dfcc
 800d404:	0800dfd6 	.word	0x0800dfd6
 800d408:	0800af8d 	.word	0x0800af8d
 800d40c:	0800d18f 	.word	0x0800d18f
 800d410:	0800dfd2 	.word	0x0800dfd2

0800d414 <__swbuf_r>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	460e      	mov	r6, r1
 800d418:	4614      	mov	r4, r2
 800d41a:	4605      	mov	r5, r0
 800d41c:	b118      	cbz	r0, 800d426 <__swbuf_r+0x12>
 800d41e:	6983      	ldr	r3, [r0, #24]
 800d420:	b90b      	cbnz	r3, 800d426 <__swbuf_r+0x12>
 800d422:	f000 f9e7 	bl	800d7f4 <__sinit>
 800d426:	4b21      	ldr	r3, [pc, #132]	; (800d4ac <__swbuf_r+0x98>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	d12b      	bne.n	800d484 <__swbuf_r+0x70>
 800d42c:	686c      	ldr	r4, [r5, #4]
 800d42e:	69a3      	ldr	r3, [r4, #24]
 800d430:	60a3      	str	r3, [r4, #8]
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	071a      	lsls	r2, r3, #28
 800d436:	d52f      	bpl.n	800d498 <__swbuf_r+0x84>
 800d438:	6923      	ldr	r3, [r4, #16]
 800d43a:	b36b      	cbz	r3, 800d498 <__swbuf_r+0x84>
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	6820      	ldr	r0, [r4, #0]
 800d440:	1ac0      	subs	r0, r0, r3
 800d442:	6963      	ldr	r3, [r4, #20]
 800d444:	b2f6      	uxtb	r6, r6
 800d446:	4283      	cmp	r3, r0
 800d448:	4637      	mov	r7, r6
 800d44a:	dc04      	bgt.n	800d456 <__swbuf_r+0x42>
 800d44c:	4621      	mov	r1, r4
 800d44e:	4628      	mov	r0, r5
 800d450:	f000 f93c 	bl	800d6cc <_fflush_r>
 800d454:	bb30      	cbnz	r0, 800d4a4 <__swbuf_r+0x90>
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	3b01      	subs	r3, #1
 800d45a:	60a3      	str	r3, [r4, #8]
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	6022      	str	r2, [r4, #0]
 800d462:	701e      	strb	r6, [r3, #0]
 800d464:	6963      	ldr	r3, [r4, #20]
 800d466:	3001      	adds	r0, #1
 800d468:	4283      	cmp	r3, r0
 800d46a:	d004      	beq.n	800d476 <__swbuf_r+0x62>
 800d46c:	89a3      	ldrh	r3, [r4, #12]
 800d46e:	07db      	lsls	r3, r3, #31
 800d470:	d506      	bpl.n	800d480 <__swbuf_r+0x6c>
 800d472:	2e0a      	cmp	r6, #10
 800d474:	d104      	bne.n	800d480 <__swbuf_r+0x6c>
 800d476:	4621      	mov	r1, r4
 800d478:	4628      	mov	r0, r5
 800d47a:	f000 f927 	bl	800d6cc <_fflush_r>
 800d47e:	b988      	cbnz	r0, 800d4a4 <__swbuf_r+0x90>
 800d480:	4638      	mov	r0, r7
 800d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d484:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <__swbuf_r+0x9c>)
 800d486:	429c      	cmp	r4, r3
 800d488:	d101      	bne.n	800d48e <__swbuf_r+0x7a>
 800d48a:	68ac      	ldr	r4, [r5, #8]
 800d48c:	e7cf      	b.n	800d42e <__swbuf_r+0x1a>
 800d48e:	4b09      	ldr	r3, [pc, #36]	; (800d4b4 <__swbuf_r+0xa0>)
 800d490:	429c      	cmp	r4, r3
 800d492:	bf08      	it	eq
 800d494:	68ec      	ldreq	r4, [r5, #12]
 800d496:	e7ca      	b.n	800d42e <__swbuf_r+0x1a>
 800d498:	4621      	mov	r1, r4
 800d49a:	4628      	mov	r0, r5
 800d49c:	f000 f81a 	bl	800d4d4 <__swsetup_r>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d0cb      	beq.n	800d43c <__swbuf_r+0x28>
 800d4a4:	f04f 37ff 	mov.w	r7, #4294967295
 800d4a8:	e7ea      	b.n	800d480 <__swbuf_r+0x6c>
 800d4aa:	bf00      	nop
 800d4ac:	0800e144 	.word	0x0800e144
 800d4b0:	0800e164 	.word	0x0800e164
 800d4b4:	0800e124 	.word	0x0800e124

0800d4b8 <__ascii_wctomb>:
 800d4b8:	b149      	cbz	r1, 800d4ce <__ascii_wctomb+0x16>
 800d4ba:	2aff      	cmp	r2, #255	; 0xff
 800d4bc:	bf85      	ittet	hi
 800d4be:	238a      	movhi	r3, #138	; 0x8a
 800d4c0:	6003      	strhi	r3, [r0, #0]
 800d4c2:	700a      	strbls	r2, [r1, #0]
 800d4c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4c8:	bf98      	it	ls
 800d4ca:	2001      	movls	r0, #1
 800d4cc:	4770      	bx	lr
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	4770      	bx	lr
	...

0800d4d4 <__swsetup_r>:
 800d4d4:	4b32      	ldr	r3, [pc, #200]	; (800d5a0 <__swsetup_r+0xcc>)
 800d4d6:	b570      	push	{r4, r5, r6, lr}
 800d4d8:	681d      	ldr	r5, [r3, #0]
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	b125      	cbz	r5, 800d4ea <__swsetup_r+0x16>
 800d4e0:	69ab      	ldr	r3, [r5, #24]
 800d4e2:	b913      	cbnz	r3, 800d4ea <__swsetup_r+0x16>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f000 f985 	bl	800d7f4 <__sinit>
 800d4ea:	4b2e      	ldr	r3, [pc, #184]	; (800d5a4 <__swsetup_r+0xd0>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	d10f      	bne.n	800d510 <__swsetup_r+0x3c>
 800d4f0:	686c      	ldr	r4, [r5, #4]
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4f8:	0719      	lsls	r1, r3, #28
 800d4fa:	d42c      	bmi.n	800d556 <__swsetup_r+0x82>
 800d4fc:	06dd      	lsls	r5, r3, #27
 800d4fe:	d411      	bmi.n	800d524 <__swsetup_r+0x50>
 800d500:	2309      	movs	r3, #9
 800d502:	6033      	str	r3, [r6, #0]
 800d504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	e03e      	b.n	800d58e <__swsetup_r+0xba>
 800d510:	4b25      	ldr	r3, [pc, #148]	; (800d5a8 <__swsetup_r+0xd4>)
 800d512:	429c      	cmp	r4, r3
 800d514:	d101      	bne.n	800d51a <__swsetup_r+0x46>
 800d516:	68ac      	ldr	r4, [r5, #8]
 800d518:	e7eb      	b.n	800d4f2 <__swsetup_r+0x1e>
 800d51a:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <__swsetup_r+0xd8>)
 800d51c:	429c      	cmp	r4, r3
 800d51e:	bf08      	it	eq
 800d520:	68ec      	ldreq	r4, [r5, #12]
 800d522:	e7e6      	b.n	800d4f2 <__swsetup_r+0x1e>
 800d524:	0758      	lsls	r0, r3, #29
 800d526:	d512      	bpl.n	800d54e <__swsetup_r+0x7a>
 800d528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d52a:	b141      	cbz	r1, 800d53e <__swsetup_r+0x6a>
 800d52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d530:	4299      	cmp	r1, r3
 800d532:	d002      	beq.n	800d53a <__swsetup_r+0x66>
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff fb6f 	bl	800cc18 <_free_r>
 800d53a:	2300      	movs	r3, #0
 800d53c:	6363      	str	r3, [r4, #52]	; 0x34
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	2300      	movs	r3, #0
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	f043 0308 	orr.w	r3, r3, #8
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	b94b      	cbnz	r3, 800d56e <__swsetup_r+0x9a>
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d564:	d003      	beq.n	800d56e <__swsetup_r+0x9a>
 800d566:	4621      	mov	r1, r4
 800d568:	4630      	mov	r0, r6
 800d56a:	f000 fa07 	bl	800d97c <__smakebuf_r>
 800d56e:	89a0      	ldrh	r0, [r4, #12]
 800d570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d574:	f010 0301 	ands.w	r3, r0, #1
 800d578:	d00a      	beq.n	800d590 <__swsetup_r+0xbc>
 800d57a:	2300      	movs	r3, #0
 800d57c:	60a3      	str	r3, [r4, #8]
 800d57e:	6963      	ldr	r3, [r4, #20]
 800d580:	425b      	negs	r3, r3
 800d582:	61a3      	str	r3, [r4, #24]
 800d584:	6923      	ldr	r3, [r4, #16]
 800d586:	b943      	cbnz	r3, 800d59a <__swsetup_r+0xc6>
 800d588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d58c:	d1ba      	bne.n	800d504 <__swsetup_r+0x30>
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	0781      	lsls	r1, r0, #30
 800d592:	bf58      	it	pl
 800d594:	6963      	ldrpl	r3, [r4, #20]
 800d596:	60a3      	str	r3, [r4, #8]
 800d598:	e7f4      	b.n	800d584 <__swsetup_r+0xb0>
 800d59a:	2000      	movs	r0, #0
 800d59c:	e7f7      	b.n	800d58e <__swsetup_r+0xba>
 800d59e:	bf00      	nop
 800d5a0:	20000180 	.word	0x20000180
 800d5a4:	0800e144 	.word	0x0800e144
 800d5a8:	0800e164 	.word	0x0800e164
 800d5ac:	0800e124 	.word	0x0800e124

0800d5b0 <abort>:
 800d5b0:	b508      	push	{r3, lr}
 800d5b2:	2006      	movs	r0, #6
 800d5b4:	f000 fa52 	bl	800da5c <raise>
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	f7f4 ffa7 	bl	800250c <_exit>
	...

0800d5c0 <__sflush_r>:
 800d5c0:	898a      	ldrh	r2, [r1, #12]
 800d5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	0710      	lsls	r0, r2, #28
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	d458      	bmi.n	800d680 <__sflush_r+0xc0>
 800d5ce:	684b      	ldr	r3, [r1, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dc05      	bgt.n	800d5e0 <__sflush_r+0x20>
 800d5d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	dc02      	bgt.n	800d5e0 <__sflush_r+0x20>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5e2:	2e00      	cmp	r6, #0
 800d5e4:	d0f9      	beq.n	800d5da <__sflush_r+0x1a>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5ec:	682f      	ldr	r7, [r5, #0]
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	d032      	beq.n	800d658 <__sflush_r+0x98>
 800d5f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	075a      	lsls	r2, r3, #29
 800d5f8:	d505      	bpl.n	800d606 <__sflush_r+0x46>
 800d5fa:	6863      	ldr	r3, [r4, #4]
 800d5fc:	1ac0      	subs	r0, r0, r3
 800d5fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d600:	b10b      	cbz	r3, 800d606 <__sflush_r+0x46>
 800d602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d604:	1ac0      	subs	r0, r0, r3
 800d606:	2300      	movs	r3, #0
 800d608:	4602      	mov	r2, r0
 800d60a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d60c:	6a21      	ldr	r1, [r4, #32]
 800d60e:	4628      	mov	r0, r5
 800d610:	47b0      	blx	r6
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	d106      	bne.n	800d626 <__sflush_r+0x66>
 800d618:	6829      	ldr	r1, [r5, #0]
 800d61a:	291d      	cmp	r1, #29
 800d61c:	d82c      	bhi.n	800d678 <__sflush_r+0xb8>
 800d61e:	4a2a      	ldr	r2, [pc, #168]	; (800d6c8 <__sflush_r+0x108>)
 800d620:	40ca      	lsrs	r2, r1
 800d622:	07d6      	lsls	r6, r2, #31
 800d624:	d528      	bpl.n	800d678 <__sflush_r+0xb8>
 800d626:	2200      	movs	r2, #0
 800d628:	6062      	str	r2, [r4, #4]
 800d62a:	04d9      	lsls	r1, r3, #19
 800d62c:	6922      	ldr	r2, [r4, #16]
 800d62e:	6022      	str	r2, [r4, #0]
 800d630:	d504      	bpl.n	800d63c <__sflush_r+0x7c>
 800d632:	1c42      	adds	r2, r0, #1
 800d634:	d101      	bne.n	800d63a <__sflush_r+0x7a>
 800d636:	682b      	ldr	r3, [r5, #0]
 800d638:	b903      	cbnz	r3, 800d63c <__sflush_r+0x7c>
 800d63a:	6560      	str	r0, [r4, #84]	; 0x54
 800d63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d63e:	602f      	str	r7, [r5, #0]
 800d640:	2900      	cmp	r1, #0
 800d642:	d0ca      	beq.n	800d5da <__sflush_r+0x1a>
 800d644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d648:	4299      	cmp	r1, r3
 800d64a:	d002      	beq.n	800d652 <__sflush_r+0x92>
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fae3 	bl	800cc18 <_free_r>
 800d652:	2000      	movs	r0, #0
 800d654:	6360      	str	r0, [r4, #52]	; 0x34
 800d656:	e7c1      	b.n	800d5dc <__sflush_r+0x1c>
 800d658:	6a21      	ldr	r1, [r4, #32]
 800d65a:	2301      	movs	r3, #1
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b0      	blx	r6
 800d660:	1c41      	adds	r1, r0, #1
 800d662:	d1c7      	bne.n	800d5f4 <__sflush_r+0x34>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0c4      	beq.n	800d5f4 <__sflush_r+0x34>
 800d66a:	2b1d      	cmp	r3, #29
 800d66c:	d001      	beq.n	800d672 <__sflush_r+0xb2>
 800d66e:	2b16      	cmp	r3, #22
 800d670:	d101      	bne.n	800d676 <__sflush_r+0xb6>
 800d672:	602f      	str	r7, [r5, #0]
 800d674:	e7b1      	b.n	800d5da <__sflush_r+0x1a>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d67c:	81a3      	strh	r3, [r4, #12]
 800d67e:	e7ad      	b.n	800d5dc <__sflush_r+0x1c>
 800d680:	690f      	ldr	r7, [r1, #16]
 800d682:	2f00      	cmp	r7, #0
 800d684:	d0a9      	beq.n	800d5da <__sflush_r+0x1a>
 800d686:	0793      	lsls	r3, r2, #30
 800d688:	680e      	ldr	r6, [r1, #0]
 800d68a:	bf08      	it	eq
 800d68c:	694b      	ldreq	r3, [r1, #20]
 800d68e:	600f      	str	r7, [r1, #0]
 800d690:	bf18      	it	ne
 800d692:	2300      	movne	r3, #0
 800d694:	eba6 0807 	sub.w	r8, r6, r7
 800d698:	608b      	str	r3, [r1, #8]
 800d69a:	f1b8 0f00 	cmp.w	r8, #0
 800d69e:	dd9c      	ble.n	800d5da <__sflush_r+0x1a>
 800d6a0:	6a21      	ldr	r1, [r4, #32]
 800d6a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6a4:	4643      	mov	r3, r8
 800d6a6:	463a      	mov	r2, r7
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	47b0      	blx	r6
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	dc06      	bgt.n	800d6be <__sflush_r+0xfe>
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6bc:	e78e      	b.n	800d5dc <__sflush_r+0x1c>
 800d6be:	4407      	add	r7, r0
 800d6c0:	eba8 0800 	sub.w	r8, r8, r0
 800d6c4:	e7e9      	b.n	800d69a <__sflush_r+0xda>
 800d6c6:	bf00      	nop
 800d6c8:	20400001 	.word	0x20400001

0800d6cc <_fflush_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	690b      	ldr	r3, [r1, #16]
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	b913      	cbnz	r3, 800d6dc <_fflush_r+0x10>
 800d6d6:	2500      	movs	r5, #0
 800d6d8:	4628      	mov	r0, r5
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	b118      	cbz	r0, 800d6e6 <_fflush_r+0x1a>
 800d6de:	6983      	ldr	r3, [r0, #24]
 800d6e0:	b90b      	cbnz	r3, 800d6e6 <_fflush_r+0x1a>
 800d6e2:	f000 f887 	bl	800d7f4 <__sinit>
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <_fflush_r+0x6c>)
 800d6e8:	429c      	cmp	r4, r3
 800d6ea:	d11b      	bne.n	800d724 <_fflush_r+0x58>
 800d6ec:	686c      	ldr	r4, [r5, #4]
 800d6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d0ef      	beq.n	800d6d6 <_fflush_r+0xa>
 800d6f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6f8:	07d0      	lsls	r0, r2, #31
 800d6fa:	d404      	bmi.n	800d706 <_fflush_r+0x3a>
 800d6fc:	0599      	lsls	r1, r3, #22
 800d6fe:	d402      	bmi.n	800d706 <_fflush_r+0x3a>
 800d700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d702:	f000 f915 	bl	800d930 <__retarget_lock_acquire_recursive>
 800d706:	4628      	mov	r0, r5
 800d708:	4621      	mov	r1, r4
 800d70a:	f7ff ff59 	bl	800d5c0 <__sflush_r>
 800d70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d710:	07da      	lsls	r2, r3, #31
 800d712:	4605      	mov	r5, r0
 800d714:	d4e0      	bmi.n	800d6d8 <_fflush_r+0xc>
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	059b      	lsls	r3, r3, #22
 800d71a:	d4dd      	bmi.n	800d6d8 <_fflush_r+0xc>
 800d71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d71e:	f000 f908 	bl	800d932 <__retarget_lock_release_recursive>
 800d722:	e7d9      	b.n	800d6d8 <_fflush_r+0xc>
 800d724:	4b05      	ldr	r3, [pc, #20]	; (800d73c <_fflush_r+0x70>)
 800d726:	429c      	cmp	r4, r3
 800d728:	d101      	bne.n	800d72e <_fflush_r+0x62>
 800d72a:	68ac      	ldr	r4, [r5, #8]
 800d72c:	e7df      	b.n	800d6ee <_fflush_r+0x22>
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <_fflush_r+0x74>)
 800d730:	429c      	cmp	r4, r3
 800d732:	bf08      	it	eq
 800d734:	68ec      	ldreq	r4, [r5, #12]
 800d736:	e7da      	b.n	800d6ee <_fflush_r+0x22>
 800d738:	0800e144 	.word	0x0800e144
 800d73c:	0800e164 	.word	0x0800e164
 800d740:	0800e124 	.word	0x0800e124

0800d744 <std>:
 800d744:	2300      	movs	r3, #0
 800d746:	b510      	push	{r4, lr}
 800d748:	4604      	mov	r4, r0
 800d74a:	e9c0 3300 	strd	r3, r3, [r0]
 800d74e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d752:	6083      	str	r3, [r0, #8]
 800d754:	8181      	strh	r1, [r0, #12]
 800d756:	6643      	str	r3, [r0, #100]	; 0x64
 800d758:	81c2      	strh	r2, [r0, #14]
 800d75a:	6183      	str	r3, [r0, #24]
 800d75c:	4619      	mov	r1, r3
 800d75e:	2208      	movs	r2, #8
 800d760:	305c      	adds	r0, #92	; 0x5c
 800d762:	f7fd fb6b 	bl	800ae3c <memset>
 800d766:	4b05      	ldr	r3, [pc, #20]	; (800d77c <std+0x38>)
 800d768:	6263      	str	r3, [r4, #36]	; 0x24
 800d76a:	4b05      	ldr	r3, [pc, #20]	; (800d780 <std+0x3c>)
 800d76c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d76e:	4b05      	ldr	r3, [pc, #20]	; (800d784 <std+0x40>)
 800d770:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d772:	4b05      	ldr	r3, [pc, #20]	; (800d788 <std+0x44>)
 800d774:	6224      	str	r4, [r4, #32]
 800d776:	6323      	str	r3, [r4, #48]	; 0x30
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	bf00      	nop
 800d77c:	0800da95 	.word	0x0800da95
 800d780:	0800dab7 	.word	0x0800dab7
 800d784:	0800daef 	.word	0x0800daef
 800d788:	0800db13 	.word	0x0800db13

0800d78c <_cleanup_r>:
 800d78c:	4901      	ldr	r1, [pc, #4]	; (800d794 <_cleanup_r+0x8>)
 800d78e:	f000 b8af 	b.w	800d8f0 <_fwalk_reent>
 800d792:	bf00      	nop
 800d794:	0800d6cd 	.word	0x0800d6cd

0800d798 <__sfmoreglue>:
 800d798:	b570      	push	{r4, r5, r6, lr}
 800d79a:	1e4a      	subs	r2, r1, #1
 800d79c:	2568      	movs	r5, #104	; 0x68
 800d79e:	4355      	muls	r5, r2
 800d7a0:	460e      	mov	r6, r1
 800d7a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7a6:	f7ff fa87 	bl	800ccb8 <_malloc_r>
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	b140      	cbz	r0, 800d7c0 <__sfmoreglue+0x28>
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7b4:	300c      	adds	r0, #12
 800d7b6:	60a0      	str	r0, [r4, #8]
 800d7b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7bc:	f7fd fb3e 	bl	800ae3c <memset>
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}

0800d7c4 <__sfp_lock_acquire>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	; (800d7cc <__sfp_lock_acquire+0x8>)
 800d7c6:	f000 b8b3 	b.w	800d930 <__retarget_lock_acquire_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	200024bc 	.word	0x200024bc

0800d7d0 <__sfp_lock_release>:
 800d7d0:	4801      	ldr	r0, [pc, #4]	; (800d7d8 <__sfp_lock_release+0x8>)
 800d7d2:	f000 b8ae 	b.w	800d932 <__retarget_lock_release_recursive>
 800d7d6:	bf00      	nop
 800d7d8:	200024bc 	.word	0x200024bc

0800d7dc <__sinit_lock_acquire>:
 800d7dc:	4801      	ldr	r0, [pc, #4]	; (800d7e4 <__sinit_lock_acquire+0x8>)
 800d7de:	f000 b8a7 	b.w	800d930 <__retarget_lock_acquire_recursive>
 800d7e2:	bf00      	nop
 800d7e4:	200024b7 	.word	0x200024b7

0800d7e8 <__sinit_lock_release>:
 800d7e8:	4801      	ldr	r0, [pc, #4]	; (800d7f0 <__sinit_lock_release+0x8>)
 800d7ea:	f000 b8a2 	b.w	800d932 <__retarget_lock_release_recursive>
 800d7ee:	bf00      	nop
 800d7f0:	200024b7 	.word	0x200024b7

0800d7f4 <__sinit>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	f7ff fff0 	bl	800d7dc <__sinit_lock_acquire>
 800d7fc:	69a3      	ldr	r3, [r4, #24]
 800d7fe:	b11b      	cbz	r3, 800d808 <__sinit+0x14>
 800d800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d804:	f7ff bff0 	b.w	800d7e8 <__sinit_lock_release>
 800d808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d80c:	6523      	str	r3, [r4, #80]	; 0x50
 800d80e:	4b13      	ldr	r3, [pc, #76]	; (800d85c <__sinit+0x68>)
 800d810:	4a13      	ldr	r2, [pc, #76]	; (800d860 <__sinit+0x6c>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	62a2      	str	r2, [r4, #40]	; 0x28
 800d816:	42a3      	cmp	r3, r4
 800d818:	bf04      	itt	eq
 800d81a:	2301      	moveq	r3, #1
 800d81c:	61a3      	streq	r3, [r4, #24]
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 f820 	bl	800d864 <__sfp>
 800d824:	6060      	str	r0, [r4, #4]
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f81c 	bl	800d864 <__sfp>
 800d82c:	60a0      	str	r0, [r4, #8]
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 f818 	bl	800d864 <__sfp>
 800d834:	2200      	movs	r2, #0
 800d836:	60e0      	str	r0, [r4, #12]
 800d838:	2104      	movs	r1, #4
 800d83a:	6860      	ldr	r0, [r4, #4]
 800d83c:	f7ff ff82 	bl	800d744 <std>
 800d840:	68a0      	ldr	r0, [r4, #8]
 800d842:	2201      	movs	r2, #1
 800d844:	2109      	movs	r1, #9
 800d846:	f7ff ff7d 	bl	800d744 <std>
 800d84a:	68e0      	ldr	r0, [r4, #12]
 800d84c:	2202      	movs	r2, #2
 800d84e:	2112      	movs	r1, #18
 800d850:	f7ff ff78 	bl	800d744 <std>
 800d854:	2301      	movs	r3, #1
 800d856:	61a3      	str	r3, [r4, #24]
 800d858:	e7d2      	b.n	800d800 <__sinit+0xc>
 800d85a:	bf00      	nop
 800d85c:	0800dda0 	.word	0x0800dda0
 800d860:	0800d78d 	.word	0x0800d78d

0800d864 <__sfp>:
 800d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d866:	4607      	mov	r7, r0
 800d868:	f7ff ffac 	bl	800d7c4 <__sfp_lock_acquire>
 800d86c:	4b1e      	ldr	r3, [pc, #120]	; (800d8e8 <__sfp+0x84>)
 800d86e:	681e      	ldr	r6, [r3, #0]
 800d870:	69b3      	ldr	r3, [r6, #24]
 800d872:	b913      	cbnz	r3, 800d87a <__sfp+0x16>
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff ffbd 	bl	800d7f4 <__sinit>
 800d87a:	3648      	adds	r6, #72	; 0x48
 800d87c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d880:	3b01      	subs	r3, #1
 800d882:	d503      	bpl.n	800d88c <__sfp+0x28>
 800d884:	6833      	ldr	r3, [r6, #0]
 800d886:	b30b      	cbz	r3, 800d8cc <__sfp+0x68>
 800d888:	6836      	ldr	r6, [r6, #0]
 800d88a:	e7f7      	b.n	800d87c <__sfp+0x18>
 800d88c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d890:	b9d5      	cbnz	r5, 800d8c8 <__sfp+0x64>
 800d892:	4b16      	ldr	r3, [pc, #88]	; (800d8ec <__sfp+0x88>)
 800d894:	60e3      	str	r3, [r4, #12]
 800d896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d89a:	6665      	str	r5, [r4, #100]	; 0x64
 800d89c:	f000 f847 	bl	800d92e <__retarget_lock_init_recursive>
 800d8a0:	f7ff ff96 	bl	800d7d0 <__sfp_lock_release>
 800d8a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8ac:	6025      	str	r5, [r4, #0]
 800d8ae:	61a5      	str	r5, [r4, #24]
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8b8:	f7fd fac0 	bl	800ae3c <memset>
 800d8bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8c8:	3468      	adds	r4, #104	; 0x68
 800d8ca:	e7d9      	b.n	800d880 <__sfp+0x1c>
 800d8cc:	2104      	movs	r1, #4
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	f7ff ff62 	bl	800d798 <__sfmoreglue>
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	6030      	str	r0, [r6, #0]
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d1d5      	bne.n	800d888 <__sfp+0x24>
 800d8dc:	f7ff ff78 	bl	800d7d0 <__sfp_lock_release>
 800d8e0:	230c      	movs	r3, #12
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	e7ee      	b.n	800d8c4 <__sfp+0x60>
 800d8e6:	bf00      	nop
 800d8e8:	0800dda0 	.word	0x0800dda0
 800d8ec:	ffff0001 	.word	0xffff0001

0800d8f0 <_fwalk_reent>:
 800d8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	4606      	mov	r6, r0
 800d8f6:	4688      	mov	r8, r1
 800d8f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8fc:	2700      	movs	r7, #0
 800d8fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d902:	f1b9 0901 	subs.w	r9, r9, #1
 800d906:	d505      	bpl.n	800d914 <_fwalk_reent+0x24>
 800d908:	6824      	ldr	r4, [r4, #0]
 800d90a:	2c00      	cmp	r4, #0
 800d90c:	d1f7      	bne.n	800d8fe <_fwalk_reent+0xe>
 800d90e:	4638      	mov	r0, r7
 800d910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d914:	89ab      	ldrh	r3, [r5, #12]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d907      	bls.n	800d92a <_fwalk_reent+0x3a>
 800d91a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d91e:	3301      	adds	r3, #1
 800d920:	d003      	beq.n	800d92a <_fwalk_reent+0x3a>
 800d922:	4629      	mov	r1, r5
 800d924:	4630      	mov	r0, r6
 800d926:	47c0      	blx	r8
 800d928:	4307      	orrs	r7, r0
 800d92a:	3568      	adds	r5, #104	; 0x68
 800d92c:	e7e9      	b.n	800d902 <_fwalk_reent+0x12>

0800d92e <__retarget_lock_init_recursive>:
 800d92e:	4770      	bx	lr

0800d930 <__retarget_lock_acquire_recursive>:
 800d930:	4770      	bx	lr

0800d932 <__retarget_lock_release_recursive>:
 800d932:	4770      	bx	lr

0800d934 <__swhatbuf_r>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	460e      	mov	r6, r1
 800d938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d93c:	2900      	cmp	r1, #0
 800d93e:	b096      	sub	sp, #88	; 0x58
 800d940:	4614      	mov	r4, r2
 800d942:	461d      	mov	r5, r3
 800d944:	da07      	bge.n	800d956 <__swhatbuf_r+0x22>
 800d946:	2300      	movs	r3, #0
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	89b3      	ldrh	r3, [r6, #12]
 800d94c:	061a      	lsls	r2, r3, #24
 800d94e:	d410      	bmi.n	800d972 <__swhatbuf_r+0x3e>
 800d950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d954:	e00e      	b.n	800d974 <__swhatbuf_r+0x40>
 800d956:	466a      	mov	r2, sp
 800d958:	f000 f902 	bl	800db60 <_fstat_r>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	dbf2      	blt.n	800d946 <__swhatbuf_r+0x12>
 800d960:	9a01      	ldr	r2, [sp, #4]
 800d962:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d966:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d96a:	425a      	negs	r2, r3
 800d96c:	415a      	adcs	r2, r3
 800d96e:	602a      	str	r2, [r5, #0]
 800d970:	e7ee      	b.n	800d950 <__swhatbuf_r+0x1c>
 800d972:	2340      	movs	r3, #64	; 0x40
 800d974:	2000      	movs	r0, #0
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	b016      	add	sp, #88	; 0x58
 800d97a:	bd70      	pop	{r4, r5, r6, pc}

0800d97c <__smakebuf_r>:
 800d97c:	898b      	ldrh	r3, [r1, #12]
 800d97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d980:	079d      	lsls	r5, r3, #30
 800d982:	4606      	mov	r6, r0
 800d984:	460c      	mov	r4, r1
 800d986:	d507      	bpl.n	800d998 <__smakebuf_r+0x1c>
 800d988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	6123      	str	r3, [r4, #16]
 800d990:	2301      	movs	r3, #1
 800d992:	6163      	str	r3, [r4, #20]
 800d994:	b002      	add	sp, #8
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	ab01      	add	r3, sp, #4
 800d99a:	466a      	mov	r2, sp
 800d99c:	f7ff ffca 	bl	800d934 <__swhatbuf_r>
 800d9a0:	9900      	ldr	r1, [sp, #0]
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f7ff f987 	bl	800ccb8 <_malloc_r>
 800d9aa:	b948      	cbnz	r0, 800d9c0 <__smakebuf_r+0x44>
 800d9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b0:	059a      	lsls	r2, r3, #22
 800d9b2:	d4ef      	bmi.n	800d994 <__smakebuf_r+0x18>
 800d9b4:	f023 0303 	bic.w	r3, r3, #3
 800d9b8:	f043 0302 	orr.w	r3, r3, #2
 800d9bc:	81a3      	strh	r3, [r4, #12]
 800d9be:	e7e3      	b.n	800d988 <__smakebuf_r+0xc>
 800d9c0:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <__smakebuf_r+0x7c>)
 800d9c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	6020      	str	r0, [r4, #0]
 800d9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	6163      	str	r3, [r4, #20]
 800d9d2:	9b01      	ldr	r3, [sp, #4]
 800d9d4:	6120      	str	r0, [r4, #16]
 800d9d6:	b15b      	cbz	r3, 800d9f0 <__smakebuf_r+0x74>
 800d9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f000 f8d1 	bl	800db84 <_isatty_r>
 800d9e2:	b128      	cbz	r0, 800d9f0 <__smakebuf_r+0x74>
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	f023 0303 	bic.w	r3, r3, #3
 800d9ea:	f043 0301 	orr.w	r3, r3, #1
 800d9ee:	81a3      	strh	r3, [r4, #12]
 800d9f0:	89a0      	ldrh	r0, [r4, #12]
 800d9f2:	4305      	orrs	r5, r0
 800d9f4:	81a5      	strh	r5, [r4, #12]
 800d9f6:	e7cd      	b.n	800d994 <__smakebuf_r+0x18>
 800d9f8:	0800d78d 	.word	0x0800d78d

0800d9fc <_malloc_usable_size_r>:
 800d9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da00:	1f18      	subs	r0, r3, #4
 800da02:	2b00      	cmp	r3, #0
 800da04:	bfbc      	itt	lt
 800da06:	580b      	ldrlt	r3, [r1, r0]
 800da08:	18c0      	addlt	r0, r0, r3
 800da0a:	4770      	bx	lr

0800da0c <_raise_r>:
 800da0c:	291f      	cmp	r1, #31
 800da0e:	b538      	push	{r3, r4, r5, lr}
 800da10:	4604      	mov	r4, r0
 800da12:	460d      	mov	r5, r1
 800da14:	d904      	bls.n	800da20 <_raise_r+0x14>
 800da16:	2316      	movs	r3, #22
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	f04f 30ff 	mov.w	r0, #4294967295
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da22:	b112      	cbz	r2, 800da2a <_raise_r+0x1e>
 800da24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da28:	b94b      	cbnz	r3, 800da3e <_raise_r+0x32>
 800da2a:	4620      	mov	r0, r4
 800da2c:	f000 f830 	bl	800da90 <_getpid_r>
 800da30:	462a      	mov	r2, r5
 800da32:	4601      	mov	r1, r0
 800da34:	4620      	mov	r0, r4
 800da36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3a:	f000 b817 	b.w	800da6c <_kill_r>
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d00a      	beq.n	800da58 <_raise_r+0x4c>
 800da42:	1c59      	adds	r1, r3, #1
 800da44:	d103      	bne.n	800da4e <_raise_r+0x42>
 800da46:	2316      	movs	r3, #22
 800da48:	6003      	str	r3, [r0, #0]
 800da4a:	2001      	movs	r0, #1
 800da4c:	e7e7      	b.n	800da1e <_raise_r+0x12>
 800da4e:	2400      	movs	r4, #0
 800da50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da54:	4628      	mov	r0, r5
 800da56:	4798      	blx	r3
 800da58:	2000      	movs	r0, #0
 800da5a:	e7e0      	b.n	800da1e <_raise_r+0x12>

0800da5c <raise>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <raise+0xc>)
 800da5e:	4601      	mov	r1, r0
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f7ff bfd3 	b.w	800da0c <_raise_r>
 800da66:	bf00      	nop
 800da68:	20000180 	.word	0x20000180

0800da6c <_kill_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	; (800da8c <_kill_r+0x20>)
 800da70:	2300      	movs	r3, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	4611      	mov	r1, r2
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	f7f4 fd37 	bl	80024ec <_kill>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	d102      	bne.n	800da88 <_kill_r+0x1c>
 800da82:	682b      	ldr	r3, [r5, #0]
 800da84:	b103      	cbz	r3, 800da88 <_kill_r+0x1c>
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	200024b0 	.word	0x200024b0

0800da90 <_getpid_r>:
 800da90:	f7f4 bd24 	b.w	80024dc <_getpid>

0800da94 <__sread>:
 800da94:	b510      	push	{r4, lr}
 800da96:	460c      	mov	r4, r1
 800da98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9c:	f000 f894 	bl	800dbc8 <_read_r>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	bfab      	itete	ge
 800daa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800daa6:	89a3      	ldrhlt	r3, [r4, #12]
 800daa8:	181b      	addge	r3, r3, r0
 800daaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800daae:	bfac      	ite	ge
 800dab0:	6563      	strge	r3, [r4, #84]	; 0x54
 800dab2:	81a3      	strhlt	r3, [r4, #12]
 800dab4:	bd10      	pop	{r4, pc}

0800dab6 <__swrite>:
 800dab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daba:	461f      	mov	r7, r3
 800dabc:	898b      	ldrh	r3, [r1, #12]
 800dabe:	05db      	lsls	r3, r3, #23
 800dac0:	4605      	mov	r5, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	4616      	mov	r6, r2
 800dac6:	d505      	bpl.n	800dad4 <__swrite+0x1e>
 800dac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dacc:	2302      	movs	r3, #2
 800dace:	2200      	movs	r2, #0
 800dad0:	f000 f868 	bl	800dba4 <_lseek_r>
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dade:	81a3      	strh	r3, [r4, #12]
 800dae0:	4632      	mov	r2, r6
 800dae2:	463b      	mov	r3, r7
 800dae4:	4628      	mov	r0, r5
 800dae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daea:	f000 b817 	b.w	800db1c <_write_r>

0800daee <__sseek>:
 800daee:	b510      	push	{r4, lr}
 800daf0:	460c      	mov	r4, r1
 800daf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf6:	f000 f855 	bl	800dba4 <_lseek_r>
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	bf15      	itete	ne
 800db00:	6560      	strne	r0, [r4, #84]	; 0x54
 800db02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db0a:	81a3      	strheq	r3, [r4, #12]
 800db0c:	bf18      	it	ne
 800db0e:	81a3      	strhne	r3, [r4, #12]
 800db10:	bd10      	pop	{r4, pc}

0800db12 <__sclose>:
 800db12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db16:	f000 b813 	b.w	800db40 <_close_r>
	...

0800db1c <_write_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	; (800db3c <_write_r+0x20>)
 800db20:	4604      	mov	r4, r0
 800db22:	4608      	mov	r0, r1
 800db24:	4611      	mov	r1, r2
 800db26:	2200      	movs	r2, #0
 800db28:	602a      	str	r2, [r5, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	f7f4 fd15 	bl	800255a <_write>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	d102      	bne.n	800db3a <_write_r+0x1e>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	b103      	cbz	r3, 800db3a <_write_r+0x1e>
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	bd38      	pop	{r3, r4, r5, pc}
 800db3c:	200024b0 	.word	0x200024b0

0800db40 <_close_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d06      	ldr	r5, [pc, #24]	; (800db5c <_close_r+0x1c>)
 800db44:	2300      	movs	r3, #0
 800db46:	4604      	mov	r4, r0
 800db48:	4608      	mov	r0, r1
 800db4a:	602b      	str	r3, [r5, #0]
 800db4c:	f7f4 fd21 	bl	8002592 <_close>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d102      	bne.n	800db5a <_close_r+0x1a>
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	b103      	cbz	r3, 800db5a <_close_r+0x1a>
 800db58:	6023      	str	r3, [r4, #0]
 800db5a:	bd38      	pop	{r3, r4, r5, pc}
 800db5c:	200024b0 	.word	0x200024b0

0800db60 <_fstat_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d07      	ldr	r5, [pc, #28]	; (800db80 <_fstat_r+0x20>)
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	4611      	mov	r1, r2
 800db6c:	602b      	str	r3, [r5, #0]
 800db6e:	f7f4 fd1c 	bl	80025aa <_fstat>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	d102      	bne.n	800db7c <_fstat_r+0x1c>
 800db76:	682b      	ldr	r3, [r5, #0]
 800db78:	b103      	cbz	r3, 800db7c <_fstat_r+0x1c>
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	bd38      	pop	{r3, r4, r5, pc}
 800db7e:	bf00      	nop
 800db80:	200024b0 	.word	0x200024b0

0800db84 <_isatty_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4d06      	ldr	r5, [pc, #24]	; (800dba0 <_isatty_r+0x1c>)
 800db88:	2300      	movs	r3, #0
 800db8a:	4604      	mov	r4, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	602b      	str	r3, [r5, #0]
 800db90:	f7f4 fd1b 	bl	80025ca <_isatty>
 800db94:	1c43      	adds	r3, r0, #1
 800db96:	d102      	bne.n	800db9e <_isatty_r+0x1a>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	b103      	cbz	r3, 800db9e <_isatty_r+0x1a>
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	200024b0 	.word	0x200024b0

0800dba4 <_lseek_r>:
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	4d07      	ldr	r5, [pc, #28]	; (800dbc4 <_lseek_r+0x20>)
 800dba8:	4604      	mov	r4, r0
 800dbaa:	4608      	mov	r0, r1
 800dbac:	4611      	mov	r1, r2
 800dbae:	2200      	movs	r2, #0
 800dbb0:	602a      	str	r2, [r5, #0]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	f7f4 fd14 	bl	80025e0 <_lseek>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	d102      	bne.n	800dbc2 <_lseek_r+0x1e>
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	b103      	cbz	r3, 800dbc2 <_lseek_r+0x1e>
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	200024b0 	.word	0x200024b0

0800dbc8 <_read_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	4d07      	ldr	r5, [pc, #28]	; (800dbe8 <_read_r+0x20>)
 800dbcc:	4604      	mov	r4, r0
 800dbce:	4608      	mov	r0, r1
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	602a      	str	r2, [r5, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f7f4 fca2 	bl	8002520 <_read>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_read_r+0x1e>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_read_r+0x1e>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	200024b0 	.word	0x200024b0

0800dbec <_init>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	bf00      	nop
 800dbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbf2:	bc08      	pop	{r3}
 800dbf4:	469e      	mov	lr, r3
 800dbf6:	4770      	bx	lr

0800dbf8 <_fini>:
 800dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfa:	bf00      	nop
 800dbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbfe:	bc08      	pop	{r3}
 800dc00:	469e      	mov	lr, r3
 800dc02:	4770      	bx	lr
